<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RS7.ToolTip" xml:space="preserve">
    <value>Ermöglicht "opportunistische Wiederholung". Wenn aktiv, sendet der Sender jedes Paket zwei mal, wenn der Serielle Eingangsbuffer weniger als 256 Bytes enthält. Diese zweite Sendung ist als solche markiert und wird vom Empfänger ignoriert, wenn das erste Paket empfangen wurde. Verbessert die Signalqualität erheblich.</value>
  </data>
  <data name="linkLabel1.ToolTip" xml:space="preserve">
    <value>Die 3DR-Sender haben 2 LED, eine rote und eine grüne. Grüne LED blinkt - Sendersuche. Dauergrün: Verbindung hergestellt. Rot blinkt:Datenübertragung. Dauerrot: Firmware-Updatemodus.</value>
  </data>
  <data name="label12.Text" xml:space="preserve">
    <value>RSSI</value>
  </data>
  <data name="RS6.ToolTip" xml:space="preserve">
    <value>MAVLINK schaltet die MAVlink-Paketbegrenzung. Funkpakete werden in den MAVlink-Rahmen gezwungen, was einen grossen Unterschied bei Paketverlustz imMAVlink-Datenstrom macht.</value>
  </data>
  <data name="label13.Text" xml:space="preserve">
    <value>Minimale Frequenz</value>
  </data>
  <data name="label16.Text" xml:space="preserve">
    <value>Duty Cycle</value>
  </data>
  <data name="label11.Text" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="S2.ToolTip" xml:space="preserve">
    <value>AIR_SPEED ist die Datenrate in gerundeten KBPS. Minimum 2, Maximum 192 Kbps. Werte unter 16 bringen Nachteile beim Frequenzhopping und Synchronisieren.</value>
  </data>
  <data name="BUT_Syncoptions.Text" xml:space="preserve">
    <value>Benötigte Daten auf remote gespeichert</value>
  </data>
  <data name="label14.Text" xml:space="preserve">
    <value>Max Freq</value>
  </data>
  <data name="label17.Text" xml:space="preserve">
    <value>LBT Rssi</value>
  </data>
  <data name="label15.Text" xml:space="preserve">
    <value>Anzahl der Kanäle</value>
  </data>
  <data name="BUT_savesettings.Text" xml:space="preserve">
    <value>Einstellungen speichern</value>
  </data>
  <data name="S11.ToolTip" xml:space="preserve">
    <value>Prozentsatz der Zeit, die für Senden genutzt werden kann</value>
  </data>
  <data name="S3.ToolTip" xml:space="preserve">
    <value>NETID ist eine 16 bit-"Netzwerkadresse". Wird genutzt, um den Sender zu identifizieren. Stell sicher, dass du eine andere NETID als alle anderen hast.</value>
  </data>
  <data name="label20.Text" xml:space="preserve">
    <value>LBT Rssi</value>
  </data>
  <data name="label21.Text" xml:space="preserve">
    <value>Duty Cycle</value>
  </data>
  <data name="label22.Text" xml:space="preserve">
    <value>Anzahl der Kanäle</value>
  </data>
  <data name="label23.Text" xml:space="preserve">
    <value>Max Freq</value>
  </data>
  <data name="label24.Text" xml:space="preserve">
    <value>Min Freq</value>
  </data>
  <data name="label2.Text" xml:space="preserve">
    <value>Format</value>
  </data>
  <data name="label25.Text" xml:space="preserve">
    <value>Op neu senden</value>
  </data>
  <data name="label3.Text" xml:space="preserve">
    <value>Geschwindigkeit</value>
  </data>
  <data name="label26.Text" xml:space="preserve">
    <value>Mavlink</value>
  </data>
  <data name="label27.Text" xml:space="preserve">
    <value>ECC</value>
  </data>
  <data name="label1.Text" xml:space="preserve">
    <value>Baud</value>
  </data>
  <data name="label28.Text" xml:space="preserve">
    <value>Tx Leistung</value>
  </data>
  <data name="label6.Text" xml:space="preserve">
    <value>ECC</value>
  </data>
  <data name="label29.Text" xml:space="preserve">
    <value>Net ID</value>
  </data>
  <data name="label7.Text" xml:space="preserve">
    <value>Mavlink</value>
  </data>
  <data name="S1.ToolTip" xml:space="preserve">
    <value>Serielle Baudrate in gerundeten kbps.</value>
  </data>
  <data name="label4.Text" xml:space="preserve">
    <value>Net ID</value>
  </data>
  <data name="label5.Text" xml:space="preserve">
    <value>Sendeleistung</value>
  </data>
  <data name="S9.ToolTip" xml:space="preserve">
    <value>maximale Frequenz in kHz </value>
  </data>
  <data name="groupBox2.Text" xml:space="preserve">
    <value>Remote</value>
  </data>
  <data name="BUT_resettodefault.Text" xml:space="preserve">
    <value>Einstellungen zurücksetzen</value>
  </data>
  <data name="label8.Text" xml:space="preserve">
    <value>Op neu senden</value>
  </data>
  <data name="groupBox1.Text" xml:space="preserve">
    <value>Local</value>
  </data>
  <data name="label9.Text" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="S6.ToolTip" xml:space="preserve">
    <value>MAVLINK schaltet die MAVlink-Paketbegrenzung. Funkpakete werden in den MAVlink-Rahmen gezwungen, was einen grossen Unterschied bei Paketverlustz imMAVlink-Datenstrom macht.</value>
  </data>
  <data name="S10.ToolTip" xml:space="preserve">
    <value>Anzahl der für das Frequenzhopping genutzten Kanäle</value>
  </data>
  <data name="linkLabel1.Text" xml:space="preserve">
    <value>Status Leds</value>
  </data>
  <data name="RS1.ToolTip" xml:space="preserve">
    <value>Serielle Baudrate in gerundeten kbps.</value>
  </data>
  <data name="RS9.ToolTip" xml:space="preserve">
    <value>maximale Frequenz in kHz </value>
  </data>
  <data name="CHK_advanced.Text" xml:space="preserve">
    <value>Erweiterte Optionen</value>
  </data>
  <data name="S7.ToolTip" xml:space="preserve">
    <value>Ermöglicht "opportunistische Wiederholung". Wenn aktiv, sendet der Sender jedes Paket zwei mal, wenn der Serielle Eingangsbuffer weniger als 256 Bytes enthält. Diese zweite Sendung ist als solche markiert und wird vom Empfänger ignoriert, wenn das erste Paket empfangen wurde. Verbessert die Signalqualität erheblich.</value>
  </data>
  <data name="RS8.ToolTip" xml:space="preserve">
    <value>minimale Frequenz in kHz </value>
  </data>
  <data name="label30.Text" xml:space="preserve">
    <value>Geschwindigkeit</value>
  </data>
  <data name="label32.Text" xml:space="preserve">
    <value>Baud</value>
  </data>
  <data name="label31.Text" xml:space="preserve">
    <value>Format</value>
  </data>
  <data name="S5.ToolTip" xml:space="preserve">
    <value>ECC schaltet die Golay-Fehlerkorrektur.(Standard:aus) Eingeschaltet benötigt der Sender doppelt soviele Bytes pro Paket, was in einem Verlust der halben Bandbreite resultiert. Es können aber bis zu 3 bytes von 12 jedes Paketes fehlerhaft sein. Benutze diese Einstellung in Verbindung mit niedriger Übertragungsrate für grosse Entfernungen. Der Golay-Decoder benötigt 20ms pro Byte (40ms pro Userbyte), ist also recht CPU-intensiv und sollte nur mit Bandbreiten unter 128kbps genutzt werden.</value>
  </data>
  <data name="S8.ToolTip" xml:space="preserve">
    <value>minimale Frequenz in kHz </value>
  </data>
  <data name="RS5.ToolTip" xml:space="preserve">
    <value>ECC schaltet die Golay-Fehlerkorrektur.(Standard:aus) Eingeschaltet benötigt der Sender doppelt soviele Bytes pro Paket, was in einem Verlust der halben Bandbreite resultiert. Es können aber bis zu 3 bytes von 12 jedes Paketes fehlerhaft sein. Benutze diese Einstellung in Verbindung mit niedriger Übertragungsrate für grosse Entfernungen. Der Golay-Decoder benötigt 20ms pro Byte (40ms pro Userbyte), ist also recht CPU-intensiv und sollte nur mit Bandbreiten unter 128kbps genutzt werden.</value>
  </data>
  <data name="RS4.ToolTip" xml:space="preserve">
    <value>TXPOWER ist die Sendeleistung in dBm. 20dBm sind ca. 100mW. Sollte bei Tests mit niedrigem Abstand gesenkt werden.</value>
  </data>
  <data name="BUT_upload.Text" xml:space="preserve">
    <value>Firmware lokal hochladen</value>
  </data>
  <data name="BUT_getcurrent.Text" xml:space="preserve">
    <value>Einstellungen laden</value>
  </data>
  <data name="S4.ToolTip" xml:space="preserve">
    <value>TXPOWER ist die Sendeleistung in dBm. 20dBm sind ca. 100mW. Sollte bei Tests mit niedrigem Abstand gesenkt werden.</value>
  </data>
  <data name="RS3.ToolTip" xml:space="preserve">
    <value>NETID ist eine 16 bit-"Netzwerkadresse". Wird genutzt, um den Sender zu identifizieren. Stell sicher, dass du eine andere NETID als alle anderen hast.</value>
  </data>
  <data name="RS10.ToolTip" xml:space="preserve">
    <value>Anzahl der Frequenzhopping-Kanäle</value>
  </data>
  <data name="RS2.ToolTip" xml:space="preserve">
    <value>AIR_SPEED ist die Datenrate in gerundeten KBPS. Minimum 2, Maximum 192 Kbps. Werte unter 16 bringen Nachteile beim Frequenzhopping und Synchronisieren.</value>
  </data>
  <data name="RSSI.ToolTip" xml:space="preserve">
    <value>Siehe spec für einen RSSI/dBm-Graph. Die Zahlen am Ende bedeuten: txe: Sendefehler (z.B. timeouts) rxe: Empfangsfehler (CRC-Fehler, Framefehler) stx: Serielle Sendeüberläufe rrx: Serielle Empfängerüberläufe ecc: Erfolgreich durch Golay korrigierte 12bit-Pakete</value>
  </data>
  <data name="RS12.ToolTip" xml:space="preserve">
    <value>Lauschen vor dem Sprechen-Schwelle</value>
  </data>
  <data name="S12.ToolTip" xml:space="preserve">
    <value>Lauschen vor dem Sprechen-Schwelle</value>
  </data>
  <data name="RS11.ToolTip" xml:space="preserve">
    <value>Prozentsatz der Zeit, die für Senden genutzt werden kann</value>
  </data>
</root>