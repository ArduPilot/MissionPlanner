{"category": 2, "kind": 1, "get_min_bitlen": {}, "default_dtid": null, "get_max_bitlen": {}, "union": false, "fields": [{"type": {"category": 0, "kind": 1, "full_name": "saturated uint8", "cast_mode": 0, "value_range": [0, 255], "bitlen": 8}, "name": "major"}, {"type": {"category": 0, "kind": 1, "full_name": "saturated uint8", "cast_mode": 0, "value_range": [0, 255], "bitlen": 8}, "name": "minor"}, {"type": {"category": 0, "kind": 1, "full_name": "saturated uint8", "cast_mode": 0, "value_range": [0, 255], "bitlen": 8}, "name": "optional_field_flags"}, {"type": {"category": 0, "kind": 1, "full_name": "saturated uint32", "cast_mode": 0, "value_range": [0, 4294967295], "bitlen": 32}, "name": "vcs_commit"}, {"type": {"category": 0, "kind": 1, "full_name": "saturated uint64", "cast_mode": 0, "value_range": [0, 18446744073709551615], "bitlen": 64}, "name": "image_crc"}], "_data_type_signature": null, "version": null, "source_text": "#\n# Nested type.\n# Generic software version information.\n#\n\n#\n# Primary version numbers.\n# If both fields are set to zero, the version is considered unknown.\n#\nuint8 major\nuint8 minor\n\n#\n# This mask indicates which optional fields (see below) are set.\n#\nuint8 OPTIONAL_FIELD_FLAG_VCS_COMMIT = 1\nuint8 OPTIONAL_FIELD_FLAG_IMAGE_CRC  = 2\nuint8 optional_field_flags\n\n#\n# VCS commit hash or revision number, e.g. git short commit hash. Optional.\n#\nuint32 vcs_commit\n\n#\n# The value of an arbitrary hash function applied to the firmware image.\n# This field is used to detect whether the firmware running on the node is EXACTLY THE SAME\n# as a certain specific revision. This field provides the absolute identity guarantee, unlike\n# the version fields above, which can be the same for different builds of the firmware.\n#\n# The exact hash function and the methods of its application are implementation defined.\n# However, implementations are recommended to adhere to the following guidelines,\n# fully or partially:\n#\n#   - The hash function should be CRC-64-WE, the same that is used for computing DSDL signatures.\n#\n#   - The hash function should be applied to the entire application image padded to 8 bytes.\n#\n#   - If the computed image CRC is stored within the firmware image itself, the value of\n#     the hash function becomes ill-defined, because it becomes recursively dependent on itself.\n#     In order to circumvent this issue, while computing or checking the CRC, its value stored\n#     within the image should be zeroed out.\n#\nuint64 image_crc\n", "full_name": "uavcan.protocol.SoftwareVersion", "source_file": "C:\\Users\\michael\\Source\\Repos\\MissionPlanner\\ExtLibs\\UAVCAN\\dsdl\\uavcan\\protocol\\SoftwareVersion.uavcan", "constants": [{"init_expression": "1", "type": {"category": 0, "kind": 1, "full_name": "saturated uint8", "cast_mode": 0, "value_range": [0, 255], "bitlen": 8}, "name": "OPTIONAL_FIELD_FLAG_VCS_COMMIT", "value": 1, "string_value": "1"}, {"init_expression": "2", "type": {"category": 0, "kind": 1, "full_name": "saturated uint8", "cast_mode": 0, "value_range": [0, 255], "bitlen": 8}, "name": "OPTIONAL_FIELD_FLAG_IMAGE_CRC", "value": 2, "string_value": "2"}]}