{"category": 2, "response_fields": [{"type": {"category": 0, "kind": 2, "full_name": "saturated int32", "cast_mode": 0, "value_range": [-2147483648, 2147483647], "bitlen": 32}, "name": "last_exit_status"}, {"type": {"category": 0, "kind": 1, "full_name": "saturated uint8", "cast_mode": 0, "value_range": [0, 255], "bitlen": 8}, "name": "flags"}, {"type": {"full_name": "saturated uint8[<=256]", "category": 1, "value_type": {"category": 0, "kind": 1, "full_name": "saturated uint8", "cast_mode": 0, "value_range": [0, 255], "bitlen": 8}, "mode": 1, "max_size": 256}, "name": "output"}], "kind": 0, "request_fields": [{"type": {"category": 0, "kind": 1, "full_name": "saturated uint8", "cast_mode": 0, "value_range": [0, 255], "bitlen": 8}, "name": "flags"}, {"type": {"full_name": "saturated uint8[<=128]", "category": 1, "value_type": {"category": 0, "kind": 1, "full_name": "saturated uint8", "cast_mode": 0, "value_range": [0, 255], "bitlen": 8}, "mode": 1, "max_size": 128}, "name": "input"}], "default_dtid": 6, "request_constants": [{"init_expression": "'\\n'", "type": {"category": 0, "kind": 1, "full_name": "saturated uint8", "cast_mode": 0, "value_range": [0, 255], "bitlen": 8}, "name": "NEWLINE", "value": 10, "string_value": "10"}, {"init_expression": "10", "type": {"category": 0, "kind": 1, "full_name": "saturated uint8", "cast_mode": 0, "value_range": [0, 255], "bitlen": 8}, "name": "MIN_OUTPUT_LIFETIME_SEC", "value": 10, "string_value": "10"}, {"init_expression": "1", "type": {"category": 0, "kind": 1, "full_name": "saturated uint8", "cast_mode": 0, "value_range": [0, 255], "bitlen": 8}, "name": "FLAG_RESET_SHELL", "value": 1, "string_value": "1"}, {"init_expression": "2", "type": {"category": 0, "kind": 1, "full_name": "saturated uint8", "cast_mode": 0, "value_range": [0, 255], "bitlen": 8}, "name": "FLAG_CLEAR_OUTPUT_BUFFERS", "value": 2, "string_value": "2"}, {"init_expression": "64", "type": {"category": 0, "kind": 1, "full_name": "saturated uint8", "cast_mode": 0, "value_range": [0, 255], "bitlen": 8}, "name": "FLAG_READ_STDOUT", "value": 64, "string_value": "64"}, {"init_expression": "128", "type": {"category": 0, "kind": 1, "full_name": "saturated uint8", "cast_mode": 0, "value_range": [0, 255], "bitlen": 8}, "name": "FLAG_READ_STDERR", "value": 128, "string_value": "128"}], "get_min_bitlen_response": {}, "get_max_bitlen_response": {}, "request_union": false, "get_max_bitlen_request": {}, "_data_type_signature": null, "get_min_bitlen_request": {}, "version": null, "source_text": "#\n# THIS DEFINITION IS SUBJECT TO CHANGE.\n#\n# This service allows to execute arbitrary commands on the remote node's internal system shell.\n#\n# Essentially, this service mimics a typical terminal emulator, with one text input (stdin) and two text\n# outputs (stdout and stderr). When there's no process running, the input is directed into the terminal\n# handler itself, which interpretes it. If there's a process running, the input will be directed into\n# stdin of the running process. It is possible to forcefully return the terminal into a known state by\n# means of setting the reset flag (see below), in which case the terminal will kill all of the child\n# processes, if any, and return into the initial idle state.\n#\n# The server is assumed to allocate one independent terminal instance per client, so that different clients\n# can execute commands without interfering with each other.\n#\n\n#\n# Input and output should use this newline character.\n#\nuint8 NEWLINE = '\\n'\n\n#\n# The server is required to keep the result of the last executed command for at least this time.\n# When this time expires, the server may remove the results in order to reclaim the memory, but it\n# is not guaranteed. Hence, the clients must retrieve the results in this amount of time.\n#\nuint8 MIN_OUTPUT_LIFETIME_SEC = 10\n\n#\n# These flags control the shell and command execution.\n#\nuint8 FLAG_RESET_SHELL          = 1     # Restarts the shell instance anew; may or may not imply CLEAR_OUTPUT_BUFFERS\nuint8 FLAG_CLEAR_OUTPUT_BUFFERS = 2     # Makes stdout and stderr buffers empty\nuint8 FLAG_READ_STDOUT          = 64    # Output will contain stdout\nuint8 FLAG_READ_STDERR          = 128   # Output will be extended with stderr\nuint8 flags\n\n#\n# If the shell is idle, it will interpret this string.\n# If there's a process running, this string will be piped into its stdin.\n#\n# If RESET_SHELL is set, new input will be interpreted by the shell immediately.\n#\nuint8[<=128] input\n\n---\n\n#\n# Exit status of the last executed process, or error code of the shell itself.\n# Default value is zero.\n#\nint32 last_exit_status\n\n#\n# These flags indicate the status of the shell.\n#\nuint8 FLAG_RUNNING              = 1     # The shell is currently running a process; stdin/out/err are piped to it\nuint8 FLAG_SHELL_ERROR          = 2     # Exit status contains error code, output contains text (e.g. no such command)\nuint8 FLAG_HAS_PENDING_STDOUT   = 64    # There is more stdout to read\nuint8 FLAG_HAS_PENDING_STDERR   = 128   # There is more stderr to read\nuint8 flags\n\n#\n# In case of a shell error, this string may contain ASCII string explaining the nature of the error.\n# Otherwise, if stdout read is requested, this string will contain stdout data. If stderr read is requested,\n# this string will contain stderr data. If both stdout and stderr read is requested, this string will start\n# with stdout and end with stderr, with no separator in between.\n#\nuint8[<=256] output\n", "full_name": "uavcan.protocol.AccessCommandShell", "source_file": "C:\\Users\\michael\\Source\\Repos\\MissionPlanner\\ExtLibs\\UAVCAN\\dsdl\\uavcan\\protocol\\6.AccessCommandShell.uavcan", "response_union": false, "response_constants": [{"init_expression": "1", "type": {"category": 0, "kind": 1, "full_name": "saturated uint8", "cast_mode": 0, "value_range": [0, 255], "bitlen": 8}, "name": "FLAG_RUNNING", "value": 1, "string_value": "1"}, {"init_expression": "2", "type": {"category": 0, "kind": 1, "full_name": "saturated uint8", "cast_mode": 0, "value_range": [0, 255], "bitlen": 8}, "name": "FLAG_SHELL_ERROR", "value": 2, "string_value": "2"}, {"init_expression": "64", "type": {"category": 0, "kind": 1, "full_name": "saturated uint8", "cast_mode": 0, "value_range": [0, 255], "bitlen": 8}, "name": "FLAG_HAS_PENDING_STDOUT", "value": 64, "string_value": "64"}, {"init_expression": "128", "type": {"category": 0, "kind": 1, "full_name": "saturated uint8", "cast_mode": 0, "value_range": [0, 255], "bitlen": 8}, "name": "FLAG_HAS_PENDING_STDERR", "value": 128, "string_value": "128"}]}