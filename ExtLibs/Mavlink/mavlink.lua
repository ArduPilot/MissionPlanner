-- Wireshark dissector for the MAVLink protocol (please see https://mavlink.io/en for details)

unknownFrameBeginOffset = 0
mavlink_proto = Proto("mavlink_proto", "MAVLink protocol")
f = mavlink_proto.fields

-- from http://lua-users.org/wiki/TimeZone
local function get_timezone()
    local now = os.time()
    return os.difftime(now, os.time(os.date("!*t", now)))
end
local signature_time_ref = get_timezone() + os.time{year=2015, month=1, day=1, hour=0}

payload_fns = {}

protocolVersions = {
    [0xfd] = "MAVLink 2.0",
    [0xfe] = "MAVLink 1.0",
    [0x55] = "MAVLink 0.9"
}

messageName = {
    [150] = 'SENSOR_OFFSETS',
    [151] = 'SET_MAG_OFFSETS',
    [152] = 'MEMINFO',
    [153] = 'AP_ADC',
    [154] = 'DIGICAM_CONFIGURE',
    [155] = 'DIGICAM_CONTROL',
    [156] = 'MOUNT_CONFIGURE',
    [157] = 'MOUNT_CONTROL',
    [158] = 'MOUNT_STATUS',
    [160] = 'FENCE_POINT',
    [161] = 'FENCE_FETCH_POINT',
    [163] = 'AHRS',
    [164] = 'SIMSTATE',
    [165] = 'HWSTATUS',
    [166] = 'RADIO',
    [167] = 'LIMITS_STATUS',
    [168] = 'WIND',
    [169] = 'DATA16',
    [170] = 'DATA32',
    [171] = 'DATA64',
    [172] = 'DATA96',
    [173] = 'RANGEFINDER',
    [174] = 'AIRSPEED_AUTOCAL',
    [175] = 'RALLY_POINT',
    [176] = 'RALLY_FETCH_POINT',
    [177] = 'COMPASSMOT_STATUS',
    [178] = 'AHRS2',
    [179] = 'CAMERA_STATUS',
    [180] = 'CAMERA_FEEDBACK',
    [181] = 'BATTERY2',
    [182] = 'AHRS3',
    [183] = 'AUTOPILOT_VERSION_REQUEST',
    [184] = 'REMOTE_LOG_DATA_BLOCK',
    [185] = 'REMOTE_LOG_BLOCK_STATUS',
    [186] = 'LED_CONTROL',
    [191] = 'MAG_CAL_PROGRESS',
    [193] = 'EKF_STATUS_REPORT',
    [194] = 'PID_TUNING',
    [195] = 'DEEPSTALL',
    [200] = 'GIMBAL_REPORT',
    [201] = 'GIMBAL_CONTROL',
    [214] = 'GIMBAL_TORQUE_CMD_REPORT',
    [215] = 'GOPRO_HEARTBEAT',
    [216] = 'GOPRO_GET_REQUEST',
    [217] = 'GOPRO_GET_RESPONSE',
    [218] = 'GOPRO_SET_REQUEST',
    [219] = 'GOPRO_SET_RESPONSE',
    [226] = 'RPM',
    [11000] = 'DEVICE_OP_READ',
    [11001] = 'DEVICE_OP_READ_REPLY',
    [11002] = 'DEVICE_OP_WRITE',
    [11003] = 'DEVICE_OP_WRITE_REPLY',
    [11004] = 'SECURE_COMMAND',
    [11005] = 'SECURE_COMMAND_REPLY',
    [11010] = 'ADAP_TUNING',
    [11011] = 'VISION_POSITION_DELTA',
    [11020] = 'AOA_SSA',
    [11030] = 'ESC_TELEMETRY_1_TO_4',
    [11031] = 'ESC_TELEMETRY_5_TO_8',
    [11032] = 'ESC_TELEMETRY_9_TO_12',
    [11033] = 'OSD_PARAM_CONFIG',
    [11034] = 'OSD_PARAM_CONFIG_REPLY',
    [11035] = 'OSD_PARAM_SHOW_CONFIG',
    [11036] = 'OSD_PARAM_SHOW_CONFIG_REPLY',
    [11037] = 'OBSTACLE_DISTANCE_3D',
    [11038] = 'WATER_DEPTH',
    [11039] = 'MCU_STATUS',
    [11040] = 'ESC_TELEMETRY_13_TO_16',
    [11041] = 'ESC_TELEMETRY_17_TO_20',
    [11042] = 'ESC_TELEMETRY_21_TO_24',
    [11043] = 'ESC_TELEMETRY_25_TO_28',
    [11044] = 'ESC_TELEMETRY_29_TO_32',
    [26900] = 'VIDEO_STREAM_INFORMATION99',
    [1] = 'SYS_STATUS',
    [2] = 'SYSTEM_TIME',
    [4] = 'PING',
    [5] = 'CHANGE_OPERATOR_CONTROL',
    [6] = 'CHANGE_OPERATOR_CONTROL_ACK',
    [7] = 'AUTH_KEY',
    [11] = 'SET_MODE',
    [20] = 'PARAM_REQUEST_READ',
    [21] = 'PARAM_REQUEST_LIST',
    [22] = 'PARAM_VALUE',
    [23] = 'PARAM_SET',
    [24] = 'GPS_RAW_INT',
    [25] = 'GPS_STATUS',
    [26] = 'SCALED_IMU',
    [27] = 'RAW_IMU',
    [28] = 'RAW_PRESSURE',
    [29] = 'SCALED_PRESSURE',
    [30] = 'ATTITUDE',
    [31] = 'ATTITUDE_QUATERNION',
    [32] = 'LOCAL_POSITION_NED',
    [33] = 'GLOBAL_POSITION_INT',
    [34] = 'RC_CHANNELS_SCALED',
    [35] = 'RC_CHANNELS_RAW',
    [36] = 'SERVO_OUTPUT_RAW',
    [37] = 'MISSION_REQUEST_PARTIAL_LIST',
    [38] = 'MISSION_WRITE_PARTIAL_LIST',
    [39] = 'MISSION_ITEM',
    [40] = 'MISSION_REQUEST',
    [41] = 'MISSION_SET_CURRENT',
    [42] = 'MISSION_CURRENT',
    [43] = 'MISSION_REQUEST_LIST',
    [44] = 'MISSION_COUNT',
    [45] = 'MISSION_CLEAR_ALL',
    [46] = 'MISSION_ITEM_REACHED',
    [47] = 'MISSION_ACK',
    [48] = 'SET_GPS_GLOBAL_ORIGIN',
    [49] = 'GPS_GLOBAL_ORIGIN',
    [50] = 'PARAM_MAP_RC',
    [51] = 'MISSION_REQUEST_INT',
    [54] = 'SAFETY_SET_ALLOWED_AREA',
    [55] = 'SAFETY_ALLOWED_AREA',
    [61] = 'ATTITUDE_QUATERNION_COV',
    [62] = 'NAV_CONTROLLER_OUTPUT',
    [63] = 'GLOBAL_POSITION_INT_COV',
    [64] = 'LOCAL_POSITION_NED_COV',
    [65] = 'RC_CHANNELS',
    [66] = 'REQUEST_DATA_STREAM',
    [67] = 'DATA_STREAM',
    [69] = 'MANUAL_CONTROL',
    [70] = 'RC_CHANNELS_OVERRIDE',
    [73] = 'MISSION_ITEM_INT',
    [74] = 'VFR_HUD',
    [75] = 'COMMAND_INT',
    [76] = 'COMMAND_LONG',
    [77] = 'COMMAND_ACK',
    [81] = 'MANUAL_SETPOINT',
    [82] = 'SET_ATTITUDE_TARGET',
    [83] = 'ATTITUDE_TARGET',
    [84] = 'SET_POSITION_TARGET_LOCAL_NED',
    [85] = 'POSITION_TARGET_LOCAL_NED',
    [86] = 'SET_POSITION_TARGET_GLOBAL_INT',
    [87] = 'POSITION_TARGET_GLOBAL_INT',
    [89] = 'LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET',
    [90] = 'HIL_STATE',
    [91] = 'HIL_CONTROLS',
    [92] = 'HIL_RC_INPUTS_RAW',
    [93] = 'HIL_ACTUATOR_CONTROLS',
    [100] = 'OPTICAL_FLOW',
    [101] = 'GLOBAL_VISION_POSITION_ESTIMATE',
    [102] = 'VISION_POSITION_ESTIMATE',
    [103] = 'VISION_SPEED_ESTIMATE',
    [104] = 'VICON_POSITION_ESTIMATE',
    [105] = 'HIGHRES_IMU',
    [106] = 'OPTICAL_FLOW_RAD',
    [107] = 'HIL_SENSOR',
    [108] = 'SIM_STATE',
    [109] = 'RADIO_STATUS',
    [110] = 'FILE_TRANSFER_PROTOCOL',
    [111] = 'TIMESYNC',
    [112] = 'CAMERA_TRIGGER',
    [113] = 'HIL_GPS',
    [114] = 'HIL_OPTICAL_FLOW',
    [115] = 'HIL_STATE_QUATERNION',
    [116] = 'SCALED_IMU2',
    [117] = 'LOG_REQUEST_LIST',
    [118] = 'LOG_ENTRY',
    [119] = 'LOG_REQUEST_DATA',
    [120] = 'LOG_DATA',
    [121] = 'LOG_ERASE',
    [122] = 'LOG_REQUEST_END',
    [123] = 'GPS_INJECT_DATA',
    [124] = 'GPS2_RAW',
    [125] = 'POWER_STATUS',
    [126] = 'SERIAL_CONTROL',
    [127] = 'GPS_RTK',
    [128] = 'GPS2_RTK',
    [129] = 'SCALED_IMU3',
    [130] = 'DATA_TRANSMISSION_HANDSHAKE',
    [131] = 'ENCAPSULATED_DATA',
    [132] = 'DISTANCE_SENSOR',
    [133] = 'TERRAIN_REQUEST',
    [134] = 'TERRAIN_DATA',
    [135] = 'TERRAIN_CHECK',
    [136] = 'TERRAIN_REPORT',
    [137] = 'SCALED_PRESSURE2',
    [138] = 'ATT_POS_MOCAP',
    [139] = 'SET_ACTUATOR_CONTROL_TARGET',
    [140] = 'ACTUATOR_CONTROL_TARGET',
    [141] = 'ALTITUDE',
    [142] = 'RESOURCE_REQUEST',
    [143] = 'SCALED_PRESSURE3',
    [144] = 'FOLLOW_TARGET',
    [146] = 'CONTROL_SYSTEM_STATE',
    [147] = 'BATTERY_STATUS',
    [148] = 'AUTOPILOT_VERSION',
    [149] = 'LANDING_TARGET',
    [162] = 'FENCE_STATUS',
    [192] = 'MAG_CAL_REPORT',
    [225] = 'EFI_STATUS',
    [230] = 'ESTIMATOR_STATUS',
    [231] = 'WIND_COV',
    [232] = 'GPS_INPUT',
    [233] = 'GPS_RTCM_DATA',
    [234] = 'HIGH_LATENCY',
    [235] = 'HIGH_LATENCY2',
    [241] = 'VIBRATION',
    [242] = 'HOME_POSITION',
    [243] = 'SET_HOME_POSITION',
    [244] = 'MESSAGE_INTERVAL',
    [245] = 'EXTENDED_SYS_STATE',
    [246] = 'ADSB_VEHICLE',
    [247] = 'COLLISION',
    [248] = 'V2_EXTENSION',
    [249] = 'MEMORY_VECT',
    [250] = 'DEBUG_VECT',
    [251] = 'NAMED_VALUE_FLOAT',
    [252] = 'NAMED_VALUE_INT',
    [253] = 'STATUSTEXT',
    [254] = 'DEBUG',
    [256] = 'SETUP_SIGNING',
    [257] = 'BUTTON_CHANGE',
    [258] = 'PLAY_TUNE',
    [259] = 'CAMERA_INFORMATION',
    [260] = 'CAMERA_SETTINGS',
    [261] = 'STORAGE_INFORMATION',
    [262] = 'CAMERA_CAPTURE_STATUS',
    [263] = 'CAMERA_IMAGE_CAPTURED',
    [264] = 'FLIGHT_INFORMATION',
    [265] = 'MOUNT_ORIENTATION',
    [266] = 'LOGGING_DATA',
    [267] = 'LOGGING_DATA_ACKED',
    [268] = 'LOGGING_ACK',
    [269] = 'VIDEO_STREAM_INFORMATION',
    [270] = 'VIDEO_STREAM_STATUS',
    [271] = 'CAMERA_FOV_STATUS',
    [275] = 'CAMERA_TRACKING_IMAGE_STATUS',
    [276] = 'CAMERA_TRACKING_GEO_STATUS',
    [280] = 'GIMBAL_MANAGER_INFORMATION',
    [281] = 'GIMBAL_MANAGER_STATUS',
    [283] = 'GIMBAL_DEVICE_INFORMATION',
    [284] = 'GIMBAL_DEVICE_SET_ATTITUDE',
    [285] = 'GIMBAL_DEVICE_ATTITUDE_STATUS',
    [286] = 'AUTOPILOT_STATE_FOR_GIMBAL_DEVICE',
    [282] = 'GIMBAL_MANAGER_SET_ATTITUDE',
    [287] = 'GIMBAL_MANAGER_SET_PITCHYAW',
    [299] = 'WIFI_CONFIG_AP',
    [301] = 'AIS_VESSEL',
    [310] = 'UAVCAN_NODE_STATUS',
    [311] = 'UAVCAN_NODE_INFO',
    [320] = 'PARAM_EXT_REQUEST_READ',
    [321] = 'PARAM_EXT_REQUEST_LIST',
    [322] = 'PARAM_EXT_VALUE',
    [323] = 'PARAM_EXT_SET',
    [324] = 'PARAM_EXT_ACK',
    [330] = 'OBSTACLE_DISTANCE',
    [331] = 'ODOMETRY',
    [335] = 'ISBD_LINK_STATUS',
    [339] = 'RAW_RPM',
    [340] = 'UTM_GLOBAL_POSITION',
    [350] = 'DEBUG_FLOAT_ARRAY',
    [370] = 'SMART_BATTERY_INFO',
    [373] = 'GENERATOR_STATUS',
    [375] = 'ACTUATOR_OUTPUT_STATUS',
    [385] = 'TUNNEL',
    [386] = 'CAN_FRAME',
    [387] = 'CANFD_FRAME',
    [388] = 'CAN_FILTER_MODIFY',
    [9000] = 'WHEEL_DISTANCE',
    [9005] = 'WINCH_STATUS',
    [12900] = 'OPEN_DRONE_ID_BASIC_ID',
    [12901] = 'OPEN_DRONE_ID_LOCATION',
    [12902] = 'OPEN_DRONE_ID_AUTHENTICATION',
    [12903] = 'OPEN_DRONE_ID_SELF_ID',
    [12904] = 'OPEN_DRONE_ID_SYSTEM',
    [12905] = 'OPEN_DRONE_ID_OPERATOR_ID',
    [12918] = 'OPEN_DRONE_ID_ARM_STATUS',
    [12915] = 'OPEN_DRONE_ID_MESSAGE_PACK',
    [12919] = 'OPEN_DRONE_ID_SYSTEM_UPDATE',
    [12920] = 'HYGROMETER_SENSOR',
    [10001] = 'UAVIONIX_ADSB_OUT_CFG',
    [10002] = 'UAVIONIX_ADSB_OUT_DYNAMIC',
    [10003] = 'UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT',
    [10004] = 'UAVIONIX_ADSB_OUT_CFG_REGISTRATION',
    [10005] = 'UAVIONIX_ADSB_OUT_CFG_FLIGHTID',
    [10006] = 'UAVIONIX_ADSB_GET',
    [10007] = 'UAVIONIX_ADSB_OUT_CONTROL',
    [10008] = 'UAVIONIX_ADSB_OUT_STATUS',
    [42000] = 'ICAROUS_HEARTBEAT',
    [42001] = 'ICAROUS_KINEMATIC_BANDS',
    [10151] = 'LOWEHEISER_GOV_EFI',
    [50001] = 'CUBEPILOT_RAW_RC',
    [50002] = 'HERELINK_VIDEO_STREAM_INFORMATION',
    [50003] = 'HERELINK_TELEM',
    [50004] = 'CUBEPILOT_FIRMWARE_UPDATE_START',
    [50005] = 'CUBEPILOT_FIRMWARE_UPDATE_RESP',
    [0] = 'HEARTBEAT',
}

local enumEntryName = {
    ["ACCELCAL_VEHICLE_POS"] = {
        [1] = "ACCELCAL_VEHICLE_POS_LEVEL",
        [2] = "ACCELCAL_VEHICLE_POS_LEFT",
        [3] = "ACCELCAL_VEHICLE_POS_RIGHT",
        [4] = "ACCELCAL_VEHICLE_POS_NOSEDOWN",
        [5] = "ACCELCAL_VEHICLE_POS_NOSEUP",
        [6] = "ACCELCAL_VEHICLE_POS_BACK",
        [16777215] = "ACCELCAL_VEHICLE_POS_SUCCESS",
        [16777216] = "ACCELCAL_VEHICLE_POS_FAILED",
    },
    ["HEADING_TYPE"] = {
        [0] = "HEADING_TYPE_COURSE_OVER_GROUND",
        [1] = "HEADING_TYPE_HEADING",
    },
    ["SPEED_TYPE"] = {
        [0] = "SPEED_TYPE_AIRSPEED",
        [1] = "SPEED_TYPE_GROUNDSPEED",
    },
    ["MAV_CMD"] = {
        [16] = "MAV_CMD_NAV_WAYPOINT",
        [17] = "MAV_CMD_NAV_LOITER_UNLIM",
        [18] = "MAV_CMD_NAV_LOITER_TURNS",
        [19] = "MAV_CMD_NAV_LOITER_TIME",
        [20] = "MAV_CMD_NAV_RETURN_TO_LAUNCH",
        [21] = "MAV_CMD_NAV_LAND",
        [22] = "MAV_CMD_NAV_TAKEOFF",
        [23] = "MAV_CMD_NAV_LAND_LOCAL",
        [24] = "MAV_CMD_NAV_TAKEOFF_LOCAL",
        [25] = "MAV_CMD_NAV_FOLLOW",
        [30] = "MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT",
        [31] = "MAV_CMD_NAV_LOITER_TO_ALT",
        [32] = "MAV_CMD_DO_FOLLOW",
        [33] = "MAV_CMD_DO_FOLLOW_REPOSITION",
        [80] = "MAV_CMD_NAV_ROI",
        [81] = "MAV_CMD_NAV_PATHPLANNING",
        [82] = "MAV_CMD_NAV_SPLINE_WAYPOINT",
        [83] = "MAV_CMD_NAV_ALTITUDE_WAIT",
        [84] = "MAV_CMD_NAV_VTOL_TAKEOFF",
        [85] = "MAV_CMD_NAV_VTOL_LAND",
        [92] = "MAV_CMD_NAV_GUIDED_ENABLE",
        [93] = "MAV_CMD_NAV_DELAY",
        [94] = "MAV_CMD_NAV_PAYLOAD_PLACE",
        [95] = "MAV_CMD_NAV_LAST",
        [112] = "MAV_CMD_CONDITION_DELAY",
        [113] = "MAV_CMD_CONDITION_CHANGE_ALT",
        [114] = "MAV_CMD_CONDITION_DISTANCE",
        [115] = "MAV_CMD_CONDITION_YAW",
        [159] = "MAV_CMD_CONDITION_LAST",
        [176] = "MAV_CMD_DO_SET_MODE",
        [177] = "MAV_CMD_DO_JUMP",
        [178] = "MAV_CMD_DO_CHANGE_SPEED",
        [179] = "MAV_CMD_DO_SET_HOME",
        [180] = "MAV_CMD_DO_SET_PARAMETER",
        [181] = "MAV_CMD_DO_SET_RELAY",
        [182] = "MAV_CMD_DO_REPEAT_RELAY",
        [183] = "MAV_CMD_DO_SET_SERVO",
        [184] = "MAV_CMD_DO_REPEAT_SERVO",
        [185] = "MAV_CMD_DO_FLIGHTTERMINATION",
        [186] = "MAV_CMD_DO_CHANGE_ALTITUDE",
        [189] = "MAV_CMD_DO_LAND_START",
        [190] = "MAV_CMD_DO_RALLY_LAND",
        [191] = "MAV_CMD_DO_GO_AROUND",
        [192] = "MAV_CMD_DO_REPOSITION",
        [193] = "MAV_CMD_DO_PAUSE_CONTINUE",
        [194] = "MAV_CMD_DO_SET_REVERSE",
        [195] = "MAV_CMD_DO_SET_ROI_LOCATION",
        [196] = "MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET",
        [197] = "MAV_CMD_DO_SET_ROI_NONE",
        [198] = "MAV_CMD_DO_SET_ROI_SYSID",
        [200] = "MAV_CMD_DO_CONTROL_VIDEO",
        [201] = "MAV_CMD_DO_SET_ROI",
        [202] = "MAV_CMD_DO_DIGICAM_CONFIGURE",
        [203] = "MAV_CMD_DO_DIGICAM_CONTROL",
        [204] = "MAV_CMD_DO_MOUNT_CONFIGURE",
        [205] = "MAV_CMD_DO_MOUNT_CONTROL",
        [206] = "MAV_CMD_DO_SET_CAM_TRIGG_DIST",
        [207] = "MAV_CMD_DO_FENCE_ENABLE",
        [208] = "MAV_CMD_DO_PARACHUTE",
        [209] = "MAV_CMD_DO_MOTOR_TEST",
        [210] = "MAV_CMD_DO_INVERTED_FLIGHT",
        [211] = "MAV_CMD_DO_GRIPPER",
        [212] = "MAV_CMD_DO_AUTOTUNE_ENABLE",
        [213] = "MAV_CMD_NAV_SET_YAW_SPEED",
        [214] = "MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL",
        [215] = "MAV_CMD_DO_SET_RESUME_REPEAT_DIST",
        [216] = "MAV_CMD_DO_SPRAYER",
        [217] = "MAV_CMD_DO_SEND_SCRIPT_MESSAGE",
        [218] = "MAV_CMD_DO_AUX_FUNCTION",
        [220] = "MAV_CMD_DO_MOUNT_CONTROL_QUAT",
        [221] = "MAV_CMD_DO_GUIDED_MASTER",
        [222] = "MAV_CMD_DO_GUIDED_LIMITS",
        [223] = "MAV_CMD_DO_ENGINE_CONTROL",
        [224] = "MAV_CMD_DO_SET_MISSION_CURRENT",
        [240] = "MAV_CMD_DO_LAST",
        [241] = "MAV_CMD_PREFLIGHT_CALIBRATION",
        [242] = "MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS",
        [243] = "MAV_CMD_PREFLIGHT_UAVCAN",
        [245] = "MAV_CMD_PREFLIGHT_STORAGE",
        [246] = "MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN",
        [252] = "MAV_CMD_OVERRIDE_GOTO",
        [260] = "MAV_CMD_OBLIQUE_SURVEY",
        [300] = "MAV_CMD_MISSION_START",
        [400] = "MAV_CMD_COMPONENT_ARM_DISARM",
        [401] = "MAV_CMD_RUN_PREARM_CHECKS",
        [410] = "MAV_CMD_GET_HOME_POSITION",
        [500] = "MAV_CMD_START_RX_PAIR",
        [510] = "MAV_CMD_GET_MESSAGE_INTERVAL",
        [511] = "MAV_CMD_SET_MESSAGE_INTERVAL",
        [512] = "MAV_CMD_REQUEST_MESSAGE",
        [519] = "MAV_CMD_REQUEST_PROTOCOL_VERSION",
        [520] = "MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES",
        [521] = "MAV_CMD_REQUEST_CAMERA_INFORMATION",
        [522] = "MAV_CMD_REQUEST_CAMERA_SETTINGS",
        [525] = "MAV_CMD_REQUEST_STORAGE_INFORMATION",
        [526] = "MAV_CMD_STORAGE_FORMAT",
        [527] = "MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS",
        [528] = "MAV_CMD_REQUEST_FLIGHT_INFORMATION",
        [529] = "MAV_CMD_RESET_CAMERA_SETTINGS",
        [530] = "MAV_CMD_SET_CAMERA_MODE",
        [531] = "MAV_CMD_SET_CAMERA_ZOOM",
        [532] = "MAV_CMD_SET_CAMERA_FOCUS",
        [600] = "MAV_CMD_JUMP_TAG",
        [601] = "MAV_CMD_DO_JUMP_TAG",
        [1000] = "MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW",
        [1001] = "MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE",
        [2000] = "MAV_CMD_IMAGE_START_CAPTURE",
        [2001] = "MAV_CMD_IMAGE_STOP_CAPTURE",
        [2003] = "MAV_CMD_DO_TRIGGER_CONTROL",
        [2004] = "MAV_CMD_CAMERA_TRACK_POINT",
        [2005] = "MAV_CMD_CAMERA_TRACK_RECTANGLE",
        [2010] = "MAV_CMD_CAMERA_STOP_TRACKING",
        [2500] = "MAV_CMD_VIDEO_START_CAPTURE",
        [2501] = "MAV_CMD_VIDEO_STOP_CAPTURE",
        [2502] = "MAV_CMD_VIDEO_START_STREAMING",
        [2503] = "MAV_CMD_VIDEO_STOP_STREAMING",
        [2504] = "MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION",
        [2505] = "MAV_CMD_REQUEST_VIDEO_STREAM_STATUS",
        [2510] = "MAV_CMD_LOGGING_START",
        [2511] = "MAV_CMD_LOGGING_STOP",
        [2520] = "MAV_CMD_AIRFRAME_CONFIGURATION",
        [2600] = "MAV_CMD_CONTROL_HIGH_LATENCY",
        [2800] = "MAV_CMD_PANORAMA_CREATE",
        [3000] = "MAV_CMD_DO_VTOL_TRANSITION",
        [3001] = "MAV_CMD_ARM_AUTHORIZATION_REQUEST",
        [4000] = "MAV_CMD_SET_GUIDED_SUBMODE_STANDARD",
        [4001] = "MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE",
        [5000] = "MAV_CMD_NAV_FENCE_RETURN_POINT",
        [5001] = "MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION",
        [5002] = "MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION",
        [5003] = "MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION",
        [5004] = "MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION",
        [5100] = "MAV_CMD_NAV_RALLY_POINT",
        [5200] = "MAV_CMD_UAVCAN_GET_NODE_INFO",
        [10001] = "MAV_CMD_DO_ADSB_OUT_IDENT",
        [10151] = "MAV_CMD_LOWEHEISER_SET_STATE",
        [30001] = "MAV_CMD_PAYLOAD_PREPARE_DEPLOY",
        [30002] = "MAV_CMD_PAYLOAD_CONTROL_DEPLOY",
        [31000] = "MAV_CMD_WAYPOINT_USER_1",
        [31001] = "MAV_CMD_WAYPOINT_USER_2",
        [31002] = "MAV_CMD_WAYPOINT_USER_3",
        [31003] = "MAV_CMD_WAYPOINT_USER_4",
        [31004] = "MAV_CMD_WAYPOINT_USER_5",
        [31005] = "MAV_CMD_SPATIAL_USER_1",
        [31006] = "MAV_CMD_SPATIAL_USER_2",
        [31007] = "MAV_CMD_SPATIAL_USER_3",
        [31008] = "MAV_CMD_SPATIAL_USER_4",
        [31009] = "MAV_CMD_SPATIAL_USER_5",
        [31010] = "MAV_CMD_USER_1",
        [31011] = "MAV_CMD_USER_2",
        [31012] = "MAV_CMD_USER_3",
        [31013] = "MAV_CMD_USER_4",
        [31014] = "MAV_CMD_USER_5",
        [32000] = "MAV_CMD_CAN_FORWARD",
        [42000] = "MAV_CMD_POWER_OFF_INITIATED",
        [42001] = "MAV_CMD_SOLO_BTN_FLY_CLICK",
        [42002] = "MAV_CMD_SOLO_BTN_FLY_HOLD",
        [42003] = "MAV_CMD_SOLO_BTN_PAUSE_CLICK",
        [42004] = "MAV_CMD_FIXED_MAG_CAL",
        [42005] = "MAV_CMD_FIXED_MAG_CAL_FIELD",
        [42006] = "MAV_CMD_FIXED_MAG_CAL_YAW",
        [42007] = "MAV_CMD_SET_EKF_SOURCE_SET",
        [42424] = "MAV_CMD_DO_START_MAG_CAL",
        [42425] = "MAV_CMD_DO_ACCEPT_MAG_CAL",
        [42426] = "MAV_CMD_DO_CANCEL_MAG_CAL",
        [42427] = "MAV_CMD_SET_FACTORY_TEST_MODE",
        [42428] = "MAV_CMD_DO_SEND_BANNER",
        [42429] = "MAV_CMD_ACCELCAL_VEHICLE_POS",
        [42501] = "MAV_CMD_GIMBAL_RESET",
        [42502] = "MAV_CMD_GIMBAL_AXIS_CALIBRATION_STATUS",
        [42503] = "MAV_CMD_GIMBAL_REQUEST_AXIS_CALIBRATION",
        [42505] = "MAV_CMD_GIMBAL_FULL_RESET",
        [42600] = "MAV_CMD_DO_WINCH",
        [42650] = "MAV_CMD_FLASH_BOOTLOADER",
        [42651] = "MAV_CMD_BATTERY_RESET",
        [42700] = "MAV_CMD_DEBUG_TRAP",
        [42701] = "MAV_CMD_SCRIPTING",
        [42702] = "MAV_CMD_NAV_SCRIPT_TIME",
        [42703] = "MAV_CMD_NAV_ATTITUDE_TIME",
        [43000] = "MAV_CMD_GUIDED_CHANGE_SPEED",
        [43001] = "MAV_CMD_GUIDED_CHANGE_ALTITUDE",
        [43002] = "MAV_CMD_GUIDED_CHANGE_HEADING",
        [43003] = "MAV_CMD_EXTERNAL_POSITION_ESTIMATE",
    },
    ["SCRIPTING_CMD"] = {
        [0] = "SCRIPTING_CMD_REPL_START",
        [1] = "SCRIPTING_CMD_REPL_STOP",
        [2] = "SCRIPTING_CMD_STOP",
        [3] = "SCRIPTING_CMD_STOP_AND_RESTART",
    },
    ["SECURE_COMMAND_OP"] = {
        [0] = "SECURE_COMMAND_GET_SESSION_KEY",
        [1] = "SECURE_COMMAND_GET_REMOTEID_SESSION_KEY",
        [2] = "SECURE_COMMAND_REMOVE_PUBLIC_KEYS",
        [3] = "SECURE_COMMAND_GET_PUBLIC_KEYS",
        [4] = "SECURE_COMMAND_SET_PUBLIC_KEYS",
        [5] = "SECURE_COMMAND_GET_REMOTEID_CONFIG",
        [6] = "SECURE_COMMAND_SET_REMOTEID_CONFIG",
        [7] = "SECURE_COMMAND_FLASH_BOOTLOADER",
    },
    ["LIMITS_STATE"] = {
        [0] = "LIMITS_INIT",
        [1] = "LIMITS_DISABLED",
        [2] = "LIMITS_ENABLED",
        [3] = "LIMITS_TRIGGERED",
        [4] = "LIMITS_RECOVERING",
        [5] = "LIMITS_RECOVERED",
    },
    ["LIMIT_MODULE"] = {
        [1] = "LIMIT_GPSLOCK",
        [2] = "LIMIT_GEOFENCE",
        [4] = "LIMIT_ALTITUDE",
    },
    ["RALLY_FLAGS"] = {
        [1] = "FAVORABLE_WIND",
        [2] = "LAND_IMMEDIATELY",
    },
    ["CAMERA_STATUS_TYPES"] = {
        [0] = "CAMERA_STATUS_TYPE_HEARTBEAT",
        [1] = "CAMERA_STATUS_TYPE_TRIGGER",
        [2] = "CAMERA_STATUS_TYPE_DISCONNECT",
        [3] = "CAMERA_STATUS_TYPE_ERROR",
        [4] = "CAMERA_STATUS_TYPE_LOWBATT",
        [5] = "CAMERA_STATUS_TYPE_LOWSTORE",
        [6] = "CAMERA_STATUS_TYPE_LOWSTOREV",
    },
    ["CAMERA_FEEDBACK_FLAGS"] = {
        [0] = "CAMERA_FEEDBACK_PHOTO",
        [1] = "CAMERA_FEEDBACK_VIDEO",
        [2] = "CAMERA_FEEDBACK_BADEXPOSURE",
        [3] = "CAMERA_FEEDBACK_CLOSEDLOOP",
        [4] = "CAMERA_FEEDBACK_OPENLOOP",
    },
    ["MAV_MODE_GIMBAL"] = {
        [0] = "MAV_MODE_GIMBAL_UNINITIALIZED",
        [1] = "MAV_MODE_GIMBAL_CALIBRATING_PITCH",
        [2] = "MAV_MODE_GIMBAL_CALIBRATING_ROLL",
        [3] = "MAV_MODE_GIMBAL_CALIBRATING_YAW",
        [4] = "MAV_MODE_GIMBAL_INITIALIZED",
        [5] = "MAV_MODE_GIMBAL_ACTIVE",
        [6] = "MAV_MODE_GIMBAL_RATE_CMD_TIMEOUT",
    },
    ["GIMBAL_AXIS"] = {
        [0] = "GIMBAL_AXIS_YAW",
        [1] = "GIMBAL_AXIS_PITCH",
        [2] = "GIMBAL_AXIS_ROLL",
    },
    ["GIMBAL_AXIS_CALIBRATION_STATUS"] = {
        [0] = "GIMBAL_AXIS_CALIBRATION_STATUS_IN_PROGRESS",
        [1] = "GIMBAL_AXIS_CALIBRATION_STATUS_SUCCEEDED",
        [2] = "GIMBAL_AXIS_CALIBRATION_STATUS_FAILED",
    },
    ["GIMBAL_AXIS_CALIBRATION_REQUIRED"] = {
        [0] = "GIMBAL_AXIS_CALIBRATION_REQUIRED_UNKNOWN",
        [1] = "GIMBAL_AXIS_CALIBRATION_REQUIRED_TRUE",
        [2] = "GIMBAL_AXIS_CALIBRATION_REQUIRED_FALSE",
    },
    ["GOPRO_HEARTBEAT_STATUS"] = {
        [0] = "GOPRO_HEARTBEAT_STATUS_DISCONNECTED",
        [1] = "GOPRO_HEARTBEAT_STATUS_INCOMPATIBLE",
        [2] = "GOPRO_HEARTBEAT_STATUS_CONNECTED",
        [3] = "GOPRO_HEARTBEAT_STATUS_ERROR",
    },
    ["GOPRO_HEARTBEAT_FLAGS"] = {
        [1] = "GOPRO_FLAG_RECORDING",
    },
    ["GOPRO_REQUEST_STATUS"] = {
        [0] = "GOPRO_REQUEST_SUCCESS",
        [1] = "GOPRO_REQUEST_FAILED",
    },
    ["GOPRO_COMMAND"] = {
        [0] = "GOPRO_COMMAND_POWER",
        [1] = "GOPRO_COMMAND_CAPTURE_MODE",
        [2] = "GOPRO_COMMAND_SHUTTER",
        [3] = "GOPRO_COMMAND_BATTERY",
        [4] = "GOPRO_COMMAND_MODEL",
        [5] = "GOPRO_COMMAND_VIDEO_SETTINGS",
        [6] = "GOPRO_COMMAND_LOW_LIGHT",
        [7] = "GOPRO_COMMAND_PHOTO_RESOLUTION",
        [8] = "GOPRO_COMMAND_PHOTO_BURST_RATE",
        [9] = "GOPRO_COMMAND_PROTUNE",
        [10] = "GOPRO_COMMAND_PROTUNE_WHITE_BALANCE",
        [11] = "GOPRO_COMMAND_PROTUNE_COLOUR",
        [12] = "GOPRO_COMMAND_PROTUNE_GAIN",
        [13] = "GOPRO_COMMAND_PROTUNE_SHARPNESS",
        [14] = "GOPRO_COMMAND_PROTUNE_EXPOSURE",
        [15] = "GOPRO_COMMAND_TIME",
        [16] = "GOPRO_COMMAND_CHARGING",
    },
    ["GOPRO_CAPTURE_MODE"] = {
        [0] = "GOPRO_CAPTURE_MODE_VIDEO",
        [1] = "GOPRO_CAPTURE_MODE_PHOTO",
        [2] = "GOPRO_CAPTURE_MODE_BURST",
        [3] = "GOPRO_CAPTURE_MODE_TIME_LAPSE",
        [4] = "GOPRO_CAPTURE_MODE_MULTI_SHOT",
        [5] = "GOPRO_CAPTURE_MODE_PLAYBACK",
        [6] = "GOPRO_CAPTURE_MODE_SETUP",
        [255] = "GOPRO_CAPTURE_MODE_UNKNOWN",
    },
    ["GOPRO_RESOLUTION"] = {
        [0] = "GOPRO_RESOLUTION_480p",
        [1] = "GOPRO_RESOLUTION_720p",
        [2] = "GOPRO_RESOLUTION_960p",
        [3] = "GOPRO_RESOLUTION_1080p",
        [4] = "GOPRO_RESOLUTION_1440p",
        [5] = "GOPRO_RESOLUTION_2_7k_17_9",
        [6] = "GOPRO_RESOLUTION_2_7k_16_9",
        [7] = "GOPRO_RESOLUTION_2_7k_4_3",
        [8] = "GOPRO_RESOLUTION_4k_16_9",
        [9] = "GOPRO_RESOLUTION_4k_17_9",
        [10] = "GOPRO_RESOLUTION_720p_SUPERVIEW",
        [11] = "GOPRO_RESOLUTION_1080p_SUPERVIEW",
        [12] = "GOPRO_RESOLUTION_2_7k_SUPERVIEW",
        [13] = "GOPRO_RESOLUTION_4k_SUPERVIEW",
    },
    ["GOPRO_FRAME_RATE"] = {
        [0] = "GOPRO_FRAME_RATE_12",
        [1] = "GOPRO_FRAME_RATE_15",
        [2] = "GOPRO_FRAME_RATE_24",
        [3] = "GOPRO_FRAME_RATE_25",
        [4] = "GOPRO_FRAME_RATE_30",
        [5] = "GOPRO_FRAME_RATE_48",
        [6] = "GOPRO_FRAME_RATE_50",
        [7] = "GOPRO_FRAME_RATE_60",
        [8] = "GOPRO_FRAME_RATE_80",
        [9] = "GOPRO_FRAME_RATE_90",
        [10] = "GOPRO_FRAME_RATE_100",
        [11] = "GOPRO_FRAME_RATE_120",
        [12] = "GOPRO_FRAME_RATE_240",
        [13] = "GOPRO_FRAME_RATE_12_5",
    },
    ["GOPRO_FIELD_OF_VIEW"] = {
        [0] = "GOPRO_FIELD_OF_VIEW_WIDE",
        [1] = "GOPRO_FIELD_OF_VIEW_MEDIUM",
        [2] = "GOPRO_FIELD_OF_VIEW_NARROW",
    },
    ["GOPRO_VIDEO_SETTINGS_FLAGS"] = {
        [1] = "GOPRO_VIDEO_SETTINGS_TV_MODE",
    },
    ["GOPRO_PHOTO_RESOLUTION"] = {
        [0] = "GOPRO_PHOTO_RESOLUTION_5MP_MEDIUM",
        [1] = "GOPRO_PHOTO_RESOLUTION_7MP_MEDIUM",
        [2] = "GOPRO_PHOTO_RESOLUTION_7MP_WIDE",
        [3] = "GOPRO_PHOTO_RESOLUTION_10MP_WIDE",
        [4] = "GOPRO_PHOTO_RESOLUTION_12MP_WIDE",
    },
    ["GOPRO_PROTUNE_WHITE_BALANCE"] = {
        [0] = "GOPRO_PROTUNE_WHITE_BALANCE_AUTO",
        [1] = "GOPRO_PROTUNE_WHITE_BALANCE_3000K",
        [2] = "GOPRO_PROTUNE_WHITE_BALANCE_5500K",
        [3] = "GOPRO_PROTUNE_WHITE_BALANCE_6500K",
        [4] = "GOPRO_PROTUNE_WHITE_BALANCE_RAW",
    },
    ["GOPRO_PROTUNE_COLOUR"] = {
        [0] = "GOPRO_PROTUNE_COLOUR_STANDARD",
        [1] = "GOPRO_PROTUNE_COLOUR_NEUTRAL",
    },
    ["GOPRO_PROTUNE_GAIN"] = {
        [0] = "GOPRO_PROTUNE_GAIN_400",
        [1] = "GOPRO_PROTUNE_GAIN_800",
        [2] = "GOPRO_PROTUNE_GAIN_1600",
        [3] = "GOPRO_PROTUNE_GAIN_3200",
        [4] = "GOPRO_PROTUNE_GAIN_6400",
    },
    ["GOPRO_PROTUNE_SHARPNESS"] = {
        [0] = "GOPRO_PROTUNE_SHARPNESS_LOW",
        [1] = "GOPRO_PROTUNE_SHARPNESS_MEDIUM",
        [2] = "GOPRO_PROTUNE_SHARPNESS_HIGH",
    },
    ["GOPRO_PROTUNE_EXPOSURE"] = {
        [0] = "GOPRO_PROTUNE_EXPOSURE_NEG_5_0",
        [1] = "GOPRO_PROTUNE_EXPOSURE_NEG_4_5",
        [2] = "GOPRO_PROTUNE_EXPOSURE_NEG_4_0",
        [3] = "GOPRO_PROTUNE_EXPOSURE_NEG_3_5",
        [4] = "GOPRO_PROTUNE_EXPOSURE_NEG_3_0",
        [5] = "GOPRO_PROTUNE_EXPOSURE_NEG_2_5",
        [6] = "GOPRO_PROTUNE_EXPOSURE_NEG_2_0",
        [7] = "GOPRO_PROTUNE_EXPOSURE_NEG_1_5",
        [8] = "GOPRO_PROTUNE_EXPOSURE_NEG_1_0",
        [9] = "GOPRO_PROTUNE_EXPOSURE_NEG_0_5",
        [10] = "GOPRO_PROTUNE_EXPOSURE_ZERO",
        [11] = "GOPRO_PROTUNE_EXPOSURE_POS_0_5",
        [12] = "GOPRO_PROTUNE_EXPOSURE_POS_1_0",
        [13] = "GOPRO_PROTUNE_EXPOSURE_POS_1_5",
        [14] = "GOPRO_PROTUNE_EXPOSURE_POS_2_0",
        [15] = "GOPRO_PROTUNE_EXPOSURE_POS_2_5",
        [16] = "GOPRO_PROTUNE_EXPOSURE_POS_3_0",
        [17] = "GOPRO_PROTUNE_EXPOSURE_POS_3_5",
        [18] = "GOPRO_PROTUNE_EXPOSURE_POS_4_0",
        [19] = "GOPRO_PROTUNE_EXPOSURE_POS_4_5",
        [20] = "GOPRO_PROTUNE_EXPOSURE_POS_5_0",
    },
    ["GOPRO_CHARGING"] = {
        [0] = "GOPRO_CHARGING_DISABLED",
        [1] = "GOPRO_CHARGING_ENABLED",
    },
    ["GOPRO_MODEL"] = {
        [0] = "GOPRO_MODEL_UNKNOWN",
        [1] = "GOPRO_MODEL_HERO_3_PLUS_SILVER",
        [2] = "GOPRO_MODEL_HERO_3_PLUS_BLACK",
        [3] = "GOPRO_MODEL_HERO_4_SILVER",
        [4] = "GOPRO_MODEL_HERO_4_BLACK",
    },
    ["GOPRO_BURST_RATE"] = {
        [0] = "GOPRO_BURST_RATE_3_IN_1_SECOND",
        [1] = "GOPRO_BURST_RATE_5_IN_1_SECOND",
        [2] = "GOPRO_BURST_RATE_10_IN_1_SECOND",
        [3] = "GOPRO_BURST_RATE_10_IN_2_SECOND",
        [4] = "GOPRO_BURST_RATE_10_IN_3_SECOND",
        [5] = "GOPRO_BURST_RATE_30_IN_1_SECOND",
        [6] = "GOPRO_BURST_RATE_30_IN_2_SECOND",
        [7] = "GOPRO_BURST_RATE_30_IN_3_SECOND",
        [8] = "GOPRO_BURST_RATE_30_IN_6_SECOND",
    },
    ["MAV_CMD_DO_AUX_FUNCTION_SWITCH_LEVEL"] = {
        [0] = "MAV_CMD_DO_AUX_FUNCTION_SWITCH_LEVEL_LOW",
        [1] = "MAV_CMD_DO_AUX_FUNCTION_SWITCH_LEVEL_MIDDLE",
        [2] = "MAV_CMD_DO_AUX_FUNCTION_SWITCH_LEVEL_HIGH",
    },
    ["LED_CONTROL_PATTERN"] = {
        [0] = "LED_CONTROL_PATTERN_OFF",
        [1] = "LED_CONTROL_PATTERN_FIRMWAREUPDATE",
        [255] = "LED_CONTROL_PATTERN_CUSTOM",
    },
    ["EKF_STATUS_FLAGS"] = {
        [1] = "EKF_ATTITUDE",
        [2] = "EKF_VELOCITY_HORIZ",
        [4] = "EKF_VELOCITY_VERT",
        [8] = "EKF_POS_HORIZ_REL",
        [16] = "EKF_POS_HORIZ_ABS",
        [32] = "EKF_POS_VERT_ABS",
        [64] = "EKF_POS_VERT_AGL",
        [128] = "EKF_CONST_POS_MODE",
        [256] = "EKF_PRED_POS_HORIZ_REL",
        [512] = "EKF_PRED_POS_HORIZ_ABS",
        [1024] = "EKF_UNINITIALIZED",
    },
    ["PID_TUNING_AXIS"] = {
        [1] = "PID_TUNING_ROLL",
        [2] = "PID_TUNING_PITCH",
        [3] = "PID_TUNING_YAW",
        [4] = "PID_TUNING_ACCZ",
        [5] = "PID_TUNING_STEER",
        [6] = "PID_TUNING_LANDING",
    },
    ["MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS"] = {
        [2147483645] = "MAV_REMOTE_LOG_DATA_BLOCK_STOP",
        [2147483646] = "MAV_REMOTE_LOG_DATA_BLOCK_START",
    },
    ["MAV_REMOTE_LOG_DATA_BLOCK_STATUSES"] = {
        [0] = "MAV_REMOTE_LOG_DATA_BLOCK_NACK",
        [1] = "MAV_REMOTE_LOG_DATA_BLOCK_ACK",
    },
    ["DEVICE_OP_BUSTYPE"] = {
        [0] = "DEVICE_OP_BUSTYPE_I2C",
        [1] = "DEVICE_OP_BUSTYPE_SPI",
    },
    ["DEEPSTALL_STAGE"] = {
        [0] = "DEEPSTALL_STAGE_FLY_TO_LANDING",
        [1] = "DEEPSTALL_STAGE_ESTIMATE_WIND",
        [2] = "DEEPSTALL_STAGE_WAIT_FOR_BREAKOUT",
        [3] = "DEEPSTALL_STAGE_FLY_TO_ARC",
        [4] = "DEEPSTALL_STAGE_ARC",
        [5] = "DEEPSTALL_STAGE_APPROACH",
        [6] = "DEEPSTALL_STAGE_LAND",
    },
    ["PLANE_MODE"] = {
        [0] = "PLANE_MODE_MANUAL",
        [1] = "PLANE_MODE_CIRCLE",
        [2] = "PLANE_MODE_STABILIZE",
        [3] = "PLANE_MODE_TRAINING",
        [4] = "PLANE_MODE_ACRO",
        [5] = "PLANE_MODE_FLY_BY_WIRE_A",
        [6] = "PLANE_MODE_FLY_BY_WIRE_B",
        [7] = "PLANE_MODE_CRUISE",
        [8] = "PLANE_MODE_AUTOTUNE",
        [10] = "PLANE_MODE_AUTO",
        [11] = "PLANE_MODE_RTL",
        [12] = "PLANE_MODE_LOITER",
        [13] = "PLANE_MODE_TAKEOFF",
        [14] = "PLANE_MODE_AVOID_ADSB",
        [15] = "PLANE_MODE_GUIDED",
        [16] = "PLANE_MODE_INITIALIZING",
        [17] = "PLANE_MODE_QSTABILIZE",
        [18] = "PLANE_MODE_QHOVER",
        [19] = "PLANE_MODE_QLOITER",
        [20] = "PLANE_MODE_QLAND",
        [21] = "PLANE_MODE_QRTL",
        [22] = "PLANE_MODE_QAUTOTUNE",
        [23] = "PLANE_MODE_QACRO",
        [24] = "PLANE_MODE_THERMAL",
    },
    ["COPTER_MODE"] = {
        [0] = "COPTER_MODE_STABILIZE",
        [1] = "COPTER_MODE_ACRO",
        [2] = "COPTER_MODE_ALT_HOLD",
        [3] = "COPTER_MODE_AUTO",
        [4] = "COPTER_MODE_GUIDED",
        [5] = "COPTER_MODE_LOITER",
        [6] = "COPTER_MODE_RTL",
        [7] = "COPTER_MODE_CIRCLE",
        [9] = "COPTER_MODE_LAND",
        [11] = "COPTER_MODE_DRIFT",
        [13] = "COPTER_MODE_SPORT",
        [14] = "COPTER_MODE_FLIP",
        [15] = "COPTER_MODE_AUTOTUNE",
        [16] = "COPTER_MODE_POSHOLD",
        [17] = "COPTER_MODE_BRAKE",
        [18] = "COPTER_MODE_THROW",
        [19] = "COPTER_MODE_AVOID_ADSB",
        [20] = "COPTER_MODE_GUIDED_NOGPS",
        [21] = "COPTER_MODE_SMART_RTL",
        [22] = "COPTER_MODE_FLOWHOLD",
        [23] = "COPTER_MODE_FOLLOW",
        [24] = "COPTER_MODE_ZIGZAG",
        [25] = "COPTER_MODE_SYSTEMID",
        [26] = "COPTER_MODE_AUTOROTATE",
        [27] = "COPTER_MODE_AUTO_RTL",
    },
    ["SUB_MODE"] = {
        [0] = "SUB_MODE_STABILIZE",
        [1] = "SUB_MODE_ACRO",
        [2] = "SUB_MODE_ALT_HOLD",
        [3] = "SUB_MODE_AUTO",
        [4] = "SUB_MODE_GUIDED",
        [7] = "SUB_MODE_CIRCLE",
        [9] = "SUB_MODE_SURFACE",
        [16] = "SUB_MODE_POSHOLD",
        [19] = "SUB_MODE_MANUAL",
    },
    ["ROVER_MODE"] = {
        [0] = "ROVER_MODE_MANUAL",
        [1] = "ROVER_MODE_ACRO",
        [3] = "ROVER_MODE_STEERING",
        [4] = "ROVER_MODE_HOLD",
        [5] = "ROVER_MODE_LOITER",
        [6] = "ROVER_MODE_FOLLOW",
        [7] = "ROVER_MODE_SIMPLE",
        [10] = "ROVER_MODE_AUTO",
        [11] = "ROVER_MODE_RTL",
        [12] = "ROVER_MODE_SMART_RTL",
        [15] = "ROVER_MODE_GUIDED",
        [16] = "ROVER_MODE_INITIALIZING",
    },
    ["TRACKER_MODE"] = {
        [0] = "TRACKER_MODE_MANUAL",
        [1] = "TRACKER_MODE_STOP",
        [2] = "TRACKER_MODE_SCAN",
        [3] = "TRACKER_MODE_SERVO_TEST",
        [10] = "TRACKER_MODE_AUTO",
        [16] = "TRACKER_MODE_INITIALIZING",
    },
    ["OSD_PARAM_CONFIG_TYPE"] = {
        [0] = "OSD_PARAM_NONE",
        [1] = "OSD_PARAM_SERIAL_PROTOCOL",
        [2] = "OSD_PARAM_SERVO_FUNCTION",
        [3] = "OSD_PARAM_AUX_FUNCTION",
        [4] = "OSD_PARAM_FLIGHT_MODE",
        [5] = "OSD_PARAM_FAILSAFE_ACTION",
        [6] = "OSD_PARAM_FAILSAFE_ACTION_1",
        [7] = "OSD_PARAM_FAILSAFE_ACTION_2",
        [8] = "OSD_PARAM_NUM_TYPES",
    },
    ["OSD_PARAM_CONFIG_ERROR"] = {
        [0] = "OSD_PARAM_SUCCESS",
        [1] = "OSD_PARAM_INVALID_SCREEN",
        [2] = "OSD_PARAM_INVALID_PARAMETER_INDEX",
        [3] = "OSD_PARAM_INVALID_PARAMETER",
    },
    ["FIRMWARE_VERSION_TYPE"] = {
        [0] = "FIRMWARE_VERSION_TYPE_DEV",
        [64] = "FIRMWARE_VERSION_TYPE_ALPHA",
        [128] = "FIRMWARE_VERSION_TYPE_BETA",
        [192] = "FIRMWARE_VERSION_TYPE_RC",
        [255] = "FIRMWARE_VERSION_TYPE_OFFICIAL",
    },
    ["HL_FAILURE_FLAG"] = {
        [1] = "HL_FAILURE_FLAG_GPS",
        [2] = "HL_FAILURE_FLAG_DIFFERENTIAL_PRESSURE",
        [4] = "HL_FAILURE_FLAG_ABSOLUTE_PRESSURE",
        [8] = "HL_FAILURE_FLAG_3D_ACCEL",
        [16] = "HL_FAILURE_FLAG_3D_GYRO",
        [32] = "HL_FAILURE_FLAG_3D_MAG",
        [64] = "HL_FAILURE_FLAG_TERRAIN",
        [128] = "HL_FAILURE_FLAG_BATTERY",
        [256] = "HL_FAILURE_FLAG_RC_RECEIVER",
        [512] = "HL_FAILURE_FLAG_OFFBOARD_LINK",
        [1024] = "HL_FAILURE_FLAG_ENGINE",
        [2048] = "HL_FAILURE_FLAG_GEOFENCE",
        [4096] = "HL_FAILURE_FLAG_ESTIMATOR",
        [8192] = "HL_FAILURE_FLAG_MISSION",
    },
    ["MAV_GOTO"] = {
        [0] = "MAV_GOTO_DO_HOLD",
        [1] = "MAV_GOTO_DO_CONTINUE",
        [2] = "MAV_GOTO_HOLD_AT_CURRENT_POSITION",
        [3] = "MAV_GOTO_HOLD_AT_SPECIFIED_POSITION",
    },
    ["MAV_MODE"] = {
        [0] = "MAV_MODE_PREFLIGHT",
        [64] = "MAV_MODE_MANUAL_DISARMED",
        [66] = "MAV_MODE_TEST_DISARMED",
        [80] = "MAV_MODE_STABILIZE_DISARMED",
        [88] = "MAV_MODE_GUIDED_DISARMED",
        [92] = "MAV_MODE_AUTO_DISARMED",
        [192] = "MAV_MODE_MANUAL_ARMED",
        [194] = "MAV_MODE_TEST_ARMED",
        [208] = "MAV_MODE_STABILIZE_ARMED",
        [216] = "MAV_MODE_GUIDED_ARMED",
        [220] = "MAV_MODE_AUTO_ARMED",
    },
    ["MAV_SYS_STATUS_SENSOR"] = {
        [1] = "MAV_SYS_STATUS_SENSOR_3D_GYRO",
        [2] = "MAV_SYS_STATUS_SENSOR_3D_ACCEL",
        [4] = "MAV_SYS_STATUS_SENSOR_3D_MAG",
        [8] = "MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE",
        [16] = "MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE",
        [32] = "MAV_SYS_STATUS_SENSOR_GPS",
        [64] = "MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW",
        [128] = "MAV_SYS_STATUS_SENSOR_VISION_POSITION",
        [256] = "MAV_SYS_STATUS_SENSOR_LASER_POSITION",
        [512] = "MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH",
        [1024] = "MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL",
        [2048] = "MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION",
        [4096] = "MAV_SYS_STATUS_SENSOR_YAW_POSITION",
        [8192] = "MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL",
        [16384] = "MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL",
        [32768] = "MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS",
        [65536] = "MAV_SYS_STATUS_SENSOR_RC_RECEIVER",
        [131072] = "MAV_SYS_STATUS_SENSOR_3D_GYRO2",
        [262144] = "MAV_SYS_STATUS_SENSOR_3D_ACCEL2",
        [524288] = "MAV_SYS_STATUS_SENSOR_3D_MAG2",
        [1048576] = "MAV_SYS_STATUS_GEOFENCE",
        [2097152] = "MAV_SYS_STATUS_AHRS",
        [4194304] = "MAV_SYS_STATUS_TERRAIN",
        [8388608] = "MAV_SYS_STATUS_REVERSE_MOTOR",
        [16777216] = "MAV_SYS_STATUS_LOGGING",
        [33554432] = "MAV_SYS_STATUS_SENSOR_BATTERY",
        [67108864] = "MAV_SYS_STATUS_SENSOR_PROXIMITY",
        [134217728] = "MAV_SYS_STATUS_SENSOR_SATCOM",
        [268435456] = "MAV_SYS_STATUS_PREARM_CHECK",
        [536870912] = "MAV_SYS_STATUS_OBSTACLE_AVOIDANCE",
        [1073741824] = "MAV_SYS_STATUS_SENSOR_PROPULSION",
    },
    ["MAV_FRAME"] = {
        [0] = "MAV_FRAME_GLOBAL",
        [1] = "MAV_FRAME_LOCAL_NED",
        [2] = "MAV_FRAME_MISSION",
        [3] = "MAV_FRAME_GLOBAL_RELATIVE_ALT",
        [4] = "MAV_FRAME_LOCAL_ENU",
        [5] = "MAV_FRAME_GLOBAL_INT",
        [6] = "MAV_FRAME_GLOBAL_RELATIVE_ALT_INT",
        [7] = "MAV_FRAME_LOCAL_OFFSET_NED",
        [8] = "MAV_FRAME_BODY_NED",
        [9] = "MAV_FRAME_BODY_OFFSET_NED",
        [10] = "MAV_FRAME_GLOBAL_TERRAIN_ALT",
        [11] = "MAV_FRAME_GLOBAL_TERRAIN_ALT_INT",
        [12] = "MAV_FRAME_BODY_FRD",
        [13] = "MAV_FRAME_RESERVED_13",
        [14] = "MAV_FRAME_RESERVED_14",
        [15] = "MAV_FRAME_RESERVED_15",
        [16] = "MAV_FRAME_RESERVED_16",
        [17] = "MAV_FRAME_RESERVED_17",
        [18] = "MAV_FRAME_RESERVED_18",
        [19] = "MAV_FRAME_RESERVED_19",
        [20] = "MAV_FRAME_LOCAL_FRD",
        [21] = "MAV_FRAME_LOCAL_FLU",
    },
    ["MAVLINK_DATA_STREAM_TYPE"] = {
        [0] = "MAVLINK_DATA_STREAM_IMG_JPEG",
        [1] = "MAVLINK_DATA_STREAM_IMG_BMP",
        [2] = "MAVLINK_DATA_STREAM_IMG_RAW8U",
        [3] = "MAVLINK_DATA_STREAM_IMG_RAW32U",
        [4] = "MAVLINK_DATA_STREAM_IMG_PGM",
        [5] = "MAVLINK_DATA_STREAM_IMG_PNG",
    },
    ["FENCE_ACTION"] = {
        [0] = "FENCE_ACTION_NONE",
        [1] = "FENCE_ACTION_GUIDED",
        [2] = "FENCE_ACTION_REPORT",
        [3] = "FENCE_ACTION_GUIDED_THR_PASS",
        [4] = "FENCE_ACTION_RTL",
    },
    ["FENCE_BREACH"] = {
        [0] = "FENCE_BREACH_NONE",
        [1] = "FENCE_BREACH_MINALT",
        [2] = "FENCE_BREACH_MAXALT",
        [3] = "FENCE_BREACH_BOUNDARY",
    },
    ["FENCE_MITIGATE"] = {
        [0] = "FENCE_MITIGATE_UNKNOWN",
        [1] = "FENCE_MITIGATE_NONE",
        [2] = "FENCE_MITIGATE_VEL_LIMIT",
    },
    ["MAV_MOUNT_MODE"] = {
        [0] = "MAV_MOUNT_MODE_RETRACT",
        [1] = "MAV_MOUNT_MODE_NEUTRAL",
        [2] = "MAV_MOUNT_MODE_MAVLINK_TARGETING",
        [3] = "MAV_MOUNT_MODE_RC_TARGETING",
        [4] = "MAV_MOUNT_MODE_GPS_POINT",
        [5] = "MAV_MOUNT_MODE_SYSID_TARGET",
        [6] = "MAV_MOUNT_MODE_HOME_LOCATION",
    },
    ["GIMBAL_DEVICE_CAP_FLAGS"] = {
        [1] = "GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT",
        [2] = "GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL",
        [4] = "GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS",
        [8] = "GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW",
        [16] = "GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK",
        [32] = "GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS",
        [64] = "GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW",
        [128] = "GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK",
        [256] = "GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS",
        [512] = "GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW",
        [1024] = "GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK",
        [2048] = "GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW",
    },
    ["GIMBAL_MANAGER_CAP_FLAGS"] = {
        [1] = "GIMBAL_MANAGER_CAP_FLAGS_HAS_RETRACT",
        [2] = "GIMBAL_MANAGER_CAP_FLAGS_HAS_NEUTRAL",
        [4] = "GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_AXIS",
        [8] = "GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_FOLLOW",
        [16] = "GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_LOCK",
        [32] = "GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_AXIS",
        [64] = "GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_FOLLOW",
        [128] = "GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_LOCK",
        [256] = "GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_AXIS",
        [512] = "GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_FOLLOW",
        [1024] = "GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_LOCK",
        [2048] = "GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_INFINITE_YAW",
        [4096] = "GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME",
        [8192] = "GIMBAL_MANAGER_CAP_FLAGS_HAS_RC_INPUTS",
        [65536] = "GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_LOCAL",
        [131072] = "GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL",
    },
    ["GIMBAL_DEVICE_FLAGS"] = {
        [1] = "GIMBAL_DEVICE_FLAGS_RETRACT",
        [2] = "GIMBAL_DEVICE_FLAGS_NEUTRAL",
        [4] = "GIMBAL_DEVICE_FLAGS_ROLL_LOCK",
        [8] = "GIMBAL_DEVICE_FLAGS_PITCH_LOCK",
        [16] = "GIMBAL_DEVICE_FLAGS_YAW_LOCK",
    },
    ["GIMBAL_MANAGER_FLAGS"] = {
        [1] = "GIMBAL_MANAGER_FLAGS_RETRACT",
        [2] = "GIMBAL_MANAGER_FLAGS_NEUTRAL",
        [4] = "GIMBAL_MANAGER_FLAGS_ROLL_LOCK",
        [8] = "GIMBAL_MANAGER_FLAGS_PITCH_LOCK",
        [16] = "GIMBAL_MANAGER_FLAGS_YAW_LOCK",
    },
    ["GIMBAL_DEVICE_ERROR_FLAGS"] = {
        [1] = "GIMBAL_DEVICE_ERROR_FLAGS_AT_ROLL_LIMIT",
        [2] = "GIMBAL_DEVICE_ERROR_FLAGS_AT_PITCH_LIMIT",
        [4] = "GIMBAL_DEVICE_ERROR_FLAGS_AT_YAW_LIMIT",
        [8] = "GIMBAL_DEVICE_ERROR_FLAGS_ENCODER_ERROR",
        [16] = "GIMBAL_DEVICE_ERROR_FLAGS_POWER_ERROR",
        [32] = "GIMBAL_DEVICE_ERROR_FLAGS_MOTOR_ERROR",
        [64] = "GIMBAL_DEVICE_ERROR_FLAGS_SOFTWARE_ERROR",
        [128] = "GIMBAL_DEVICE_ERROR_FLAGS_COMMS_ERROR",
        [256] = "GIMBAL_DEVICE_ERROR_FLAGS_CALIBRATION_RUNNING",
    },
    ["GRIPPER_ACTIONS"] = {
        [0] = "GRIPPER_ACTION_RELEASE",
        [1] = "GRIPPER_ACTION_GRAB",
    },
    ["WINCH_ACTIONS"] = {
        [0] = "WINCH_RELAXED",
        [1] = "WINCH_RELATIVE_LENGTH_CONTROL",
        [2] = "WINCH_RATE_CONTROL",
        [3] = "WINCH_LOCK",
        [4] = "WINCH_DELIVER",
        [5] = "WINCH_HOLD",
        [6] = "WINCH_RETRACT",
        [7] = "WINCH_LOAD_LINE",
        [8] = "WINCH_ABANDON_LINE",
    },
    ["UAVCAN_NODE_HEALTH"] = {
        [0] = "UAVCAN_NODE_HEALTH_OK",
        [1] = "UAVCAN_NODE_HEALTH_WARNING",
        [2] = "UAVCAN_NODE_HEALTH_ERROR",
        [3] = "UAVCAN_NODE_HEALTH_CRITICAL",
    },
    ["UAVCAN_NODE_MODE"] = {
        [0] = "UAVCAN_NODE_MODE_OPERATIONAL",
        [1] = "UAVCAN_NODE_MODE_INITIALIZATION",
        [2] = "UAVCAN_NODE_MODE_MAINTENANCE",
        [3] = "UAVCAN_NODE_MODE_SOFTWARE_UPDATE",
        [7] = "UAVCAN_NODE_MODE_OFFLINE",
    },
    ["STORAGE_STATUS"] = {
        [0] = "STORAGE_STATUS_EMPTY",
        [1] = "STORAGE_STATUS_UNFORMATTED",
        [2] = "STORAGE_STATUS_READY",
        [3] = "STORAGE_STATUS_NOT_SUPPORTED",
    },
    ["STORAGE_TYPE"] = {
        [0] = "STORAGE_TYPE_UNKNOWN",
        [1] = "STORAGE_TYPE_USB_STICK",
        [2] = "STORAGE_TYPE_SD",
        [3] = "STORAGE_TYPE_MICROSD",
        [4] = "STORAGE_TYPE_CF",
        [5] = "STORAGE_TYPE_CFE",
        [6] = "STORAGE_TYPE_XQD",
        [7] = "STORAGE_TYPE_HD",
        [254] = "STORAGE_TYPE_OTHER",
    },
    ["AUTOTUNE_AXIS"] = {
        [0] = "AUTOTUNE_AXIS_DEFAULT",
        [1] = "AUTOTUNE_AXIS_ROLL",
        [2] = "AUTOTUNE_AXIS_PITCH",
        [4] = "AUTOTUNE_AXIS_YAW",
    },
    ["MAV_DATA_STREAM"] = {
        [0] = "MAV_DATA_STREAM_ALL",
        [1] = "MAV_DATA_STREAM_RAW_SENSORS",
        [2] = "MAV_DATA_STREAM_EXTENDED_STATUS",
        [3] = "MAV_DATA_STREAM_RC_CHANNELS",
        [4] = "MAV_DATA_STREAM_RAW_CONTROLLER",
        [6] = "MAV_DATA_STREAM_POSITION",
        [10] = "MAV_DATA_STREAM_EXTRA1",
        [11] = "MAV_DATA_STREAM_EXTRA2",
        [12] = "MAV_DATA_STREAM_EXTRA3",
    },
    ["MAV_ROI"] = {
        [0] = "MAV_ROI_NONE",
        [1] = "MAV_ROI_WPNEXT",
        [2] = "MAV_ROI_WPINDEX",
        [3] = "MAV_ROI_LOCATION",
        [4] = "MAV_ROI_TARGET",
    },
    ["MAV_PARAM_TYPE"] = {
        [1] = "MAV_PARAM_TYPE_UINT8",
        [2] = "MAV_PARAM_TYPE_INT8",
        [3] = "MAV_PARAM_TYPE_UINT16",
        [4] = "MAV_PARAM_TYPE_INT16",
        [5] = "MAV_PARAM_TYPE_UINT32",
        [6] = "MAV_PARAM_TYPE_INT32",
        [7] = "MAV_PARAM_TYPE_UINT64",
        [8] = "MAV_PARAM_TYPE_INT64",
        [9] = "MAV_PARAM_TYPE_REAL32",
        [10] = "MAV_PARAM_TYPE_REAL64",
    },
    ["MAV_PARAM_EXT_TYPE"] = {
        [1] = "MAV_PARAM_EXT_TYPE_UINT8",
        [2] = "MAV_PARAM_EXT_TYPE_INT8",
        [3] = "MAV_PARAM_EXT_TYPE_UINT16",
        [4] = "MAV_PARAM_EXT_TYPE_INT16",
        [5] = "MAV_PARAM_EXT_TYPE_UINT32",
        [6] = "MAV_PARAM_EXT_TYPE_INT32",
        [7] = "MAV_PARAM_EXT_TYPE_UINT64",
        [8] = "MAV_PARAM_EXT_TYPE_INT64",
        [9] = "MAV_PARAM_EXT_TYPE_REAL32",
        [10] = "MAV_PARAM_EXT_TYPE_REAL64",
        [11] = "MAV_PARAM_EXT_TYPE_CUSTOM",
    },
    ["MAV_RESULT"] = {
        [0] = "MAV_RESULT_ACCEPTED",
        [1] = "MAV_RESULT_TEMPORARILY_REJECTED",
        [2] = "MAV_RESULT_DENIED",
        [3] = "MAV_RESULT_UNSUPPORTED",
        [4] = "MAV_RESULT_FAILED",
        [5] = "MAV_RESULT_IN_PROGRESS",
    },
    ["MAV_MISSION_RESULT"] = {
        [0] = "MAV_MISSION_ACCEPTED",
        [1] = "MAV_MISSION_ERROR",
        [2] = "MAV_MISSION_UNSUPPORTED_FRAME",
        [3] = "MAV_MISSION_UNSUPPORTED",
        [4] = "MAV_MISSION_NO_SPACE",
        [5] = "MAV_MISSION_INVALID",
        [6] = "MAV_MISSION_INVALID_PARAM1",
        [7] = "MAV_MISSION_INVALID_PARAM2",
        [8] = "MAV_MISSION_INVALID_PARAM3",
        [9] = "MAV_MISSION_INVALID_PARAM4",
        [10] = "MAV_MISSION_INVALID_PARAM5_X",
        [11] = "MAV_MISSION_INVALID_PARAM6_Y",
        [12] = "MAV_MISSION_INVALID_PARAM7",
        [13] = "MAV_MISSION_INVALID_SEQUENCE",
        [14] = "MAV_MISSION_DENIED",
        [15] = "MAV_MISSION_OPERATION_CANCELLED",
    },
    ["MAV_SEVERITY"] = {
        [0] = "MAV_SEVERITY_EMERGENCY",
        [1] = "MAV_SEVERITY_ALERT",
        [2] = "MAV_SEVERITY_CRITICAL",
        [3] = "MAV_SEVERITY_ERROR",
        [4] = "MAV_SEVERITY_WARNING",
        [5] = "MAV_SEVERITY_NOTICE",
        [6] = "MAV_SEVERITY_INFO",
        [7] = "MAV_SEVERITY_DEBUG",
    },
    ["MAV_POWER_STATUS"] = {
        [1] = "MAV_POWER_STATUS_BRICK_VALID",
        [2] = "MAV_POWER_STATUS_SERVO_VALID",
        [4] = "MAV_POWER_STATUS_USB_CONNECTED",
        [8] = "MAV_POWER_STATUS_PERIPH_OVERCURRENT",
        [16] = "MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT",
        [32] = "MAV_POWER_STATUS_CHANGED",
    },
    ["SERIAL_CONTROL_DEV"] = {
        [0] = "SERIAL_CONTROL_DEV_TELEM1",
        [1] = "SERIAL_CONTROL_DEV_TELEM2",
        [2] = "SERIAL_CONTROL_DEV_GPS1",
        [3] = "SERIAL_CONTROL_DEV_GPS2",
        [10] = "SERIAL_CONTROL_DEV_SHELL",
        [100] = "SERIAL_CONTROL_SERIAL0",
        [101] = "SERIAL_CONTROL_SERIAL1",
        [102] = "SERIAL_CONTROL_SERIAL2",
        [103] = "SERIAL_CONTROL_SERIAL3",
        [104] = "SERIAL_CONTROL_SERIAL4",
        [105] = "SERIAL_CONTROL_SERIAL5",
        [106] = "SERIAL_CONTROL_SERIAL6",
        [107] = "SERIAL_CONTROL_SERIAL7",
        [108] = "SERIAL_CONTROL_SERIAL8",
        [109] = "SERIAL_CONTROL_SERIAL9",
    },
    ["SERIAL_CONTROL_FLAG"] = {
        [1] = "SERIAL_CONTROL_FLAG_REPLY",
        [2] = "SERIAL_CONTROL_FLAG_RESPOND",
        [4] = "SERIAL_CONTROL_FLAG_EXCLUSIVE",
        [8] = "SERIAL_CONTROL_FLAG_BLOCKING",
        [16] = "SERIAL_CONTROL_FLAG_MULTI",
    },
    ["MAV_DISTANCE_SENSOR"] = {
        [0] = "MAV_DISTANCE_SENSOR_LASER",
        [1] = "MAV_DISTANCE_SENSOR_ULTRASOUND",
        [2] = "MAV_DISTANCE_SENSOR_INFRARED",
        [3] = "MAV_DISTANCE_SENSOR_RADAR",
        [4] = "MAV_DISTANCE_SENSOR_UNKNOWN",
    },
    ["MAV_SENSOR_ORIENTATION"] = {
        [0] = "MAV_SENSOR_ROTATION_NONE",
        [1] = "MAV_SENSOR_ROTATION_YAW_45",
        [2] = "MAV_SENSOR_ROTATION_YAW_90",
        [3] = "MAV_SENSOR_ROTATION_YAW_135",
        [4] = "MAV_SENSOR_ROTATION_YAW_180",
        [5] = "MAV_SENSOR_ROTATION_YAW_225",
        [6] = "MAV_SENSOR_ROTATION_YAW_270",
        [7] = "MAV_SENSOR_ROTATION_YAW_315",
        [8] = "MAV_SENSOR_ROTATION_ROLL_180",
        [9] = "MAV_SENSOR_ROTATION_ROLL_180_YAW_45",
        [10] = "MAV_SENSOR_ROTATION_ROLL_180_YAW_90",
        [11] = "MAV_SENSOR_ROTATION_ROLL_180_YAW_135",
        [12] = "MAV_SENSOR_ROTATION_PITCH_180",
        [13] = "MAV_SENSOR_ROTATION_ROLL_180_YAW_225",
        [14] = "MAV_SENSOR_ROTATION_ROLL_180_YAW_270",
        [15] = "MAV_SENSOR_ROTATION_ROLL_180_YAW_315",
        [16] = "MAV_SENSOR_ROTATION_ROLL_90",
        [17] = "MAV_SENSOR_ROTATION_ROLL_90_YAW_45",
        [18] = "MAV_SENSOR_ROTATION_ROLL_90_YAW_90",
        [19] = "MAV_SENSOR_ROTATION_ROLL_90_YAW_135",
        [20] = "MAV_SENSOR_ROTATION_ROLL_270",
        [21] = "MAV_SENSOR_ROTATION_ROLL_270_YAW_45",
        [22] = "MAV_SENSOR_ROTATION_ROLL_270_YAW_90",
        [23] = "MAV_SENSOR_ROTATION_ROLL_270_YAW_135",
        [24] = "MAV_SENSOR_ROTATION_PITCH_90",
        [25] = "MAV_SENSOR_ROTATION_PITCH_270",
        [26] = "MAV_SENSOR_ROTATION_PITCH_180_YAW_90",
        [27] = "MAV_SENSOR_ROTATION_PITCH_180_YAW_270",
        [28] = "MAV_SENSOR_ROTATION_ROLL_90_PITCH_90",
        [29] = "MAV_SENSOR_ROTATION_ROLL_180_PITCH_90",
        [30] = "MAV_SENSOR_ROTATION_ROLL_270_PITCH_90",
        [31] = "MAV_SENSOR_ROTATION_ROLL_90_PITCH_180",
        [32] = "MAV_SENSOR_ROTATION_ROLL_270_PITCH_180",
        [33] = "MAV_SENSOR_ROTATION_ROLL_90_PITCH_270",
        [34] = "MAV_SENSOR_ROTATION_ROLL_180_PITCH_270",
        [35] = "MAV_SENSOR_ROTATION_ROLL_270_PITCH_270",
        [36] = "MAV_SENSOR_ROTATION_ROLL_90_PITCH_180_YAW_90",
        [37] = "MAV_SENSOR_ROTATION_ROLL_90_YAW_270",
        [38] = "MAV_SENSOR_ROTATION_ROLL_90_PITCH_68_YAW_293",
        [39] = "MAV_SENSOR_ROTATION_PITCH_315",
        [40] = "MAV_SENSOR_ROTATION_ROLL_90_PITCH_315",
        [100] = "MAV_SENSOR_ROTATION_CUSTOM",
    },
    ["MAV_PROTOCOL_CAPABILITY"] = {
        [1] = "MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT",
        [2] = "MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT",
        [4] = "MAV_PROTOCOL_CAPABILITY_MISSION_INT",
        [8] = "MAV_PROTOCOL_CAPABILITY_COMMAND_INT",
        [16] = "MAV_PROTOCOL_CAPABILITY_PARAM_UNION",
        [32] = "MAV_PROTOCOL_CAPABILITY_FTP",
        [64] = "MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET",
        [128] = "MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED",
        [256] = "MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT",
        [512] = "MAV_PROTOCOL_CAPABILITY_TERRAIN",
        [1024] = "MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET",
        [2048] = "MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION",
        [4096] = "MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION",
        [8192] = "MAV_PROTOCOL_CAPABILITY_MAVLINK2",
        [16384] = "MAV_PROTOCOL_CAPABILITY_MISSION_FENCE",
        [32768] = "MAV_PROTOCOL_CAPABILITY_MISSION_RALLY",
        [65536] = "MAV_PROTOCOL_CAPABILITY_FLIGHT_INFORMATION",
    },
    ["MAV_MISSION_TYPE"] = {
        [0] = "MAV_MISSION_TYPE_MISSION",
        [1] = "MAV_MISSION_TYPE_FENCE",
        [2] = "MAV_MISSION_TYPE_RALLY",
        [255] = "MAV_MISSION_TYPE_ALL",
    },
    ["MAV_ESTIMATOR_TYPE"] = {
        [0] = "MAV_ESTIMATOR_TYPE_UNKNOWN",
        [1] = "MAV_ESTIMATOR_TYPE_NAIVE",
        [2] = "MAV_ESTIMATOR_TYPE_VISION",
        [3] = "MAV_ESTIMATOR_TYPE_VIO",
        [4] = "MAV_ESTIMATOR_TYPE_GPS",
        [5] = "MAV_ESTIMATOR_TYPE_GPS_INS",
        [6] = "MAV_ESTIMATOR_TYPE_MOCAP",
        [7] = "MAV_ESTIMATOR_TYPE_LIDAR",
        [8] = "MAV_ESTIMATOR_TYPE_AUTOPILOT",
    },
    ["MAV_BATTERY_TYPE"] = {
        [0] = "MAV_BATTERY_TYPE_UNKNOWN",
        [1] = "MAV_BATTERY_TYPE_LIPO",
        [2] = "MAV_BATTERY_TYPE_LIFE",
        [3] = "MAV_BATTERY_TYPE_LION",
        [4] = "MAV_BATTERY_TYPE_NIMH",
    },
    ["MAV_BATTERY_FUNCTION"] = {
        [0] = "MAV_BATTERY_FUNCTION_UNKNOWN",
        [1] = "MAV_BATTERY_FUNCTION_ALL",
        [2] = "MAV_BATTERY_FUNCTION_PROPULSION",
        [3] = "MAV_BATTERY_FUNCTION_AVIONICS",
        [4] = "MAV_BATTERY_TYPE_PAYLOAD",
    },
    ["MAV_BATTERY_CHARGE_STATE"] = {
        [0] = "MAV_BATTERY_CHARGE_STATE_UNDEFINED",
        [1] = "MAV_BATTERY_CHARGE_STATE_OK",
        [2] = "MAV_BATTERY_CHARGE_STATE_LOW",
        [3] = "MAV_BATTERY_CHARGE_STATE_CRITICAL",
        [4] = "MAV_BATTERY_CHARGE_STATE_EMERGENCY",
        [5] = "MAV_BATTERY_CHARGE_STATE_FAILED",
        [6] = "MAV_BATTERY_CHARGE_STATE_UNHEALTHY",
        [7] = "MAV_BATTERY_CHARGE_STATE_CHARGING",
    },
    ["MAV_BATTERY_MODE"] = {
        [0] = "MAV_BATTERY_MODE_UNKNOWN",
        [1] = "MAV_BATTERY_MODE_AUTO_DISCHARGING",
        [2] = "MAV_BATTERY_MODE_HOT_SWAP",
    },
    ["MAV_BATTERY_FAULT"] = {
        [1] = "MAV_BATTERY_FAULT_DEEP_DISCHARGE",
        [2] = "MAV_BATTERY_FAULT_SPIKES",
        [4] = "MAV_BATTERY_FAULT_CELL_FAIL",
        [8] = "MAV_BATTERY_FAULT_OVER_CURRENT",
        [16] = "MAV_BATTERY_FAULT_OVER_TEMPERATURE",
        [32] = "MAV_BATTERY_FAULT_UNDER_TEMPERATURE",
        [64] = "MAV_BATTERY_FAULT_INCOMPATIBLE_VOLTAGE",
        [128] = "MAV_BATTERY_FAULT_INCOMPATIBLE_FIRMWARE",
        [256] = "BATTERY_FAULT_INCOMPATIBLE_CELLS_CONFIGURATION",
    },
    ["MAV_GENERATOR_STATUS_FLAG"] = {
        [1] = "MAV_GENERATOR_STATUS_FLAG_OFF",
        [2] = "MAV_GENERATOR_STATUS_FLAG_READY",
        [4] = "MAV_GENERATOR_STATUS_FLAG_GENERATING",
        [8] = "MAV_GENERATOR_STATUS_FLAG_CHARGING",
        [16] = "MAV_GENERATOR_STATUS_FLAG_REDUCED_POWER",
        [32] = "MAV_GENERATOR_STATUS_FLAG_MAXPOWER",
        [64] = "MAV_GENERATOR_STATUS_FLAG_OVERTEMP_WARNING",
        [128] = "MAV_GENERATOR_STATUS_FLAG_OVERTEMP_FAULT",
        [256] = "MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_WARNING",
        [512] = "MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_FAULT",
        [1024] = "MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_FAULT",
        [2048] = "MAV_GENERATOR_STATUS_FLAG_POWERSOURCE_FAULT",
        [4096] = "MAV_GENERATOR_STATUS_FLAG_COMMUNICATION_WARNING",
        [8192] = "MAV_GENERATOR_STATUS_FLAG_COOLING_WARNING",
        [16384] = "MAV_GENERATOR_STATUS_FLAG_POWER_RAIL_FAULT",
        [32768] = "MAV_GENERATOR_STATUS_FLAG_OVERCURRENT_FAULT",
        [65536] = "MAV_GENERATOR_STATUS_FLAG_BATTERY_OVERCHARGE_CURRENT_FAULT",
        [131072] = "MAV_GENERATOR_STATUS_FLAG_OVERVOLTAGE_FAULT",
        [262144] = "MAV_GENERATOR_STATUS_FLAG_BATTERY_UNDERVOLT_FAULT",
        [524288] = "MAV_GENERATOR_STATUS_FLAG_START_INHIBITED",
        [1048576] = "MAV_GENERATOR_STATUS_FLAG_MAINTENANCE_REQUIRED",
        [2097152] = "MAV_GENERATOR_STATUS_FLAG_WARMING_UP",
        [4194304] = "MAV_GENERATOR_STATUS_FLAG_IDLE",
    },
    ["MAV_VTOL_STATE"] = {
        [0] = "MAV_VTOL_STATE_UNDEFINED",
        [1] = "MAV_VTOL_STATE_TRANSITION_TO_FW",
        [2] = "MAV_VTOL_STATE_TRANSITION_TO_MC",
        [3] = "MAV_VTOL_STATE_MC",
        [4] = "MAV_VTOL_STATE_FW",
    },
    ["MAV_LANDED_STATE"] = {
        [0] = "MAV_LANDED_STATE_UNDEFINED",
        [1] = "MAV_LANDED_STATE_ON_GROUND",
        [2] = "MAV_LANDED_STATE_IN_AIR",
        [3] = "MAV_LANDED_STATE_TAKEOFF",
        [4] = "MAV_LANDED_STATE_LANDING",
    },
    ["ADSB_ALTITUDE_TYPE"] = {
        [0] = "ADSB_ALTITUDE_TYPE_PRESSURE_QNH",
        [1] = "ADSB_ALTITUDE_TYPE_GEOMETRIC",
    },
    ["ADSB_EMITTER_TYPE"] = {
        [0] = "ADSB_EMITTER_TYPE_NO_INFO",
        [1] = "ADSB_EMITTER_TYPE_LIGHT",
        [2] = "ADSB_EMITTER_TYPE_SMALL",
        [3] = "ADSB_EMITTER_TYPE_LARGE",
        [4] = "ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE",
        [5] = "ADSB_EMITTER_TYPE_HEAVY",
        [6] = "ADSB_EMITTER_TYPE_HIGHLY_MANUV",
        [7] = "ADSB_EMITTER_TYPE_ROTOCRAFT",
        [8] = "ADSB_EMITTER_TYPE_UNASSIGNED",
        [9] = "ADSB_EMITTER_TYPE_GLIDER",
        [10] = "ADSB_EMITTER_TYPE_LIGHTER_AIR",
        [11] = "ADSB_EMITTER_TYPE_PARACHUTE",
        [12] = "ADSB_EMITTER_TYPE_ULTRA_LIGHT",
        [13] = "ADSB_EMITTER_TYPE_UNASSIGNED2",
        [14] = "ADSB_EMITTER_TYPE_UAV",
        [15] = "ADSB_EMITTER_TYPE_SPACE",
        [16] = "ADSB_EMITTER_TYPE_UNASSGINED3",
        [17] = "ADSB_EMITTER_TYPE_EMERGENCY_SURFACE",
        [18] = "ADSB_EMITTER_TYPE_SERVICE_SURFACE",
        [19] = "ADSB_EMITTER_TYPE_POINT_OBSTACLE",
    },
    ["ADSB_FLAGS"] = {
        [1] = "ADSB_FLAGS_VALID_COORDS",
        [2] = "ADSB_FLAGS_VALID_ALTITUDE",
        [4] = "ADSB_FLAGS_VALID_HEADING",
        [8] = "ADSB_FLAGS_VALID_VELOCITY",
        [16] = "ADSB_FLAGS_VALID_CALLSIGN",
        [32] = "ADSB_FLAGS_VALID_SQUAWK",
        [64] = "ADSB_FLAGS_SIMULATED",
        [128] = "ADSB_FLAGS_VERTICAL_VELOCITY_VALID",
        [256] = "ADSB_FLAGS_BARO_VALID",
        [32768] = "ADSB_FLAGS_SOURCE_UAT",
    },
    ["MAV_DO_REPOSITION_FLAGS"] = {
        [1] = "MAV_DO_REPOSITION_FLAGS_CHANGE_MODE",
    },
    ["ESTIMATOR_STATUS_FLAGS"] = {
        [1] = "ESTIMATOR_ATTITUDE",
        [2] = "ESTIMATOR_VELOCITY_HORIZ",
        [4] = "ESTIMATOR_VELOCITY_VERT",
        [8] = "ESTIMATOR_POS_HORIZ_REL",
        [16] = "ESTIMATOR_POS_HORIZ_ABS",
        [32] = "ESTIMATOR_POS_VERT_ABS",
        [64] = "ESTIMATOR_POS_VERT_AGL",
        [128] = "ESTIMATOR_CONST_POS_MODE",
        [256] = "ESTIMATOR_PRED_POS_HORIZ_REL",
        [512] = "ESTIMATOR_PRED_POS_HORIZ_ABS",
        [1024] = "ESTIMATOR_GPS_GLITCH",
        [2048] = "ESTIMATOR_ACCEL_ERROR",
    },
    ["MOTOR_TEST_ORDER"] = {
        [0] = "MOTOR_TEST_ORDER_DEFAULT",
        [1] = "MOTOR_TEST_ORDER_SEQUENCE",
        [2] = "MOTOR_TEST_ORDER_BOARD",
    },
    ["MOTOR_TEST_THROTTLE_TYPE"] = {
        [0] = "MOTOR_TEST_THROTTLE_PERCENT",
        [1] = "MOTOR_TEST_THROTTLE_PWM",
        [2] = "MOTOR_TEST_THROTTLE_PILOT",
        [3] = "MOTOR_TEST_COMPASS_CAL",
    },
    ["GPS_INPUT_IGNORE_FLAGS"] = {
        [1] = "GPS_INPUT_IGNORE_FLAG_ALT",
        [2] = "GPS_INPUT_IGNORE_FLAG_HDOP",
        [4] = "GPS_INPUT_IGNORE_FLAG_VDOP",
        [8] = "GPS_INPUT_IGNORE_FLAG_VEL_HORIZ",
        [16] = "GPS_INPUT_IGNORE_FLAG_VEL_VERT",
        [32] = "GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY",
        [64] = "GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY",
        [128] = "GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY",
    },
    ["MAV_COLLISION_ACTION"] = {
        [0] = "MAV_COLLISION_ACTION_NONE",
        [1] = "MAV_COLLISION_ACTION_REPORT",
        [2] = "MAV_COLLISION_ACTION_ASCEND_OR_DESCEND",
        [3] = "MAV_COLLISION_ACTION_MOVE_HORIZONTALLY",
        [4] = "MAV_COLLISION_ACTION_MOVE_PERPENDICULAR",
        [5] = "MAV_COLLISION_ACTION_RTL",
        [6] = "MAV_COLLISION_ACTION_HOVER",
    },
    ["MAV_COLLISION_THREAT_LEVEL"] = {
        [0] = "MAV_COLLISION_THREAT_LEVEL_NONE",
        [1] = "MAV_COLLISION_THREAT_LEVEL_LOW",
        [2] = "MAV_COLLISION_THREAT_LEVEL_HIGH",
    },
    ["MAV_COLLISION_SRC"] = {
        [0] = "MAV_COLLISION_SRC_ADSB",
        [1] = "MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT",
    },
    ["GPS_FIX_TYPE"] = {
        [0] = "GPS_FIX_TYPE_NO_GPS",
        [1] = "GPS_FIX_TYPE_NO_FIX",
        [2] = "GPS_FIX_TYPE_2D_FIX",
        [3] = "GPS_FIX_TYPE_3D_FIX",
        [4] = "GPS_FIX_TYPE_DGPS",
        [5] = "GPS_FIX_TYPE_RTK_FLOAT",
        [6] = "GPS_FIX_TYPE_RTK_FIXED",
        [7] = "GPS_FIX_TYPE_STATIC",
        [8] = "GPS_FIX_TYPE_PPP",
    },
    ["RTK_BASELINE_COORDINATE_SYSTEM"] = {
        [0] = "RTK_BASELINE_COORDINATE_SYSTEM_ECEF",
        [1] = "RTK_BASELINE_COORDINATE_SYSTEM_NED",
    },
    ["LANDING_TARGET_TYPE"] = {
        [0] = "LANDING_TARGET_TYPE_LIGHT_BEACON",
        [1] = "LANDING_TARGET_TYPE_RADIO_BEACON",
        [2] = "LANDING_TARGET_TYPE_VISION_FIDUCIAL",
        [3] = "LANDING_TARGET_TYPE_VISION_OTHER",
    },
    ["VTOL_TRANSITION_HEADING"] = {
        [0] = "VTOL_TRANSITION_HEADING_VEHICLE_DEFAULT",
        [1] = "VTOL_TRANSITION_HEADING_NEXT_WAYPOINT",
        [2] = "VTOL_TRANSITION_HEADING_TAKEOFF",
        [3] = "VTOL_TRANSITION_HEADING_SPECIFIED",
        [4] = "VTOL_TRANSITION_HEADING_ANY",
    },
    ["CAMERA_CAP_FLAGS"] = {
        [1] = "CAMERA_CAP_FLAGS_CAPTURE_VIDEO",
        [2] = "CAMERA_CAP_FLAGS_CAPTURE_IMAGE",
        [4] = "CAMERA_CAP_FLAGS_HAS_MODES",
        [8] = "CAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE",
        [16] = "CAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE",
        [32] = "CAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE",
        [64] = "CAMERA_CAP_FLAGS_HAS_BASIC_ZOOM",
        [128] = "CAMERA_CAP_FLAGS_HAS_BASIC_FOCUS",
        [256] = "CAMERA_CAP_FLAGS_HAS_VIDEO_STREAM",
        [512] = "CAMERA_CAP_FLAGS_HAS_TRACKING_POINT",
        [1024] = "CAMERA_CAP_FLAGS_HAS_TRACKING_RECTANGLE",
        [2048] = "CAMERA_CAP_FLAGS_HAS_TRACKING_GEO_STATUS",
    },
    ["VIDEO_STREAM_STATUS_FLAGS"] = {
        [1] = "VIDEO_STREAM_STATUS_FLAGS_RUNNING",
        [2] = "VIDEO_STREAM_STATUS_FLAGS_THERMAL",
    },
    ["VIDEO_STREAM_TYPE"] = {
        [0] = "VIDEO_STREAM_TYPE_RTSP",
        [1] = "VIDEO_STREAM_TYPE_RTPUDP",
        [2] = "VIDEO_STREAM_TYPE_TCP_MPEG",
        [3] = "VIDEO_STREAM_TYPE_MPEG_TS_H264",
    },
    ["CAMERA_TRACKING_STATUS_FLAGS"] = {
        [0] = "CAMERA_TRACKING_STATUS_FLAGS_IDLE",
        [1] = "CAMERA_TRACKING_STATUS_FLAGS_ACTIVE",
        [2] = "CAMERA_TRACKING_STATUS_FLAGS_ERROR",
    },
    ["CAMERA_TRACKING_MODE"] = {
        [0] = "CAMERA_TRACKING_MODE_NONE",
        [1] = "CAMERA_TRACKING_MODE_POINT",
        [2] = "CAMERA_TRACKING_MODE_RECTANGLE",
    },
    ["CAMERA_TRACKING_TARGET_DATA"] = {
        [0] = "CAMERA_TRACKING_TARGET_DATA_NONE",
        [1] = "CAMERA_TRACKING_TARGET_DATA_EMBEDDED",
        [2] = "CAMERA_TRACKING_TARGET_DATA_RENDERED",
        [4] = "CAMERA_TRACKING_TARGET_DATA_IN_STATUS",
    },
    ["CAMERA_ZOOM_TYPE"] = {
        [0] = "ZOOM_TYPE_STEP",
        [1] = "ZOOM_TYPE_CONTINUOUS",
        [2] = "ZOOM_TYPE_RANGE",
        [3] = "ZOOM_TYPE_FOCAL_LENGTH",
    },
    ["SET_FOCUS_TYPE"] = {
        [0] = "FOCUS_TYPE_STEP",
        [1] = "FOCUS_TYPE_CONTINUOUS",
        [2] = "FOCUS_TYPE_RANGE",
        [3] = "FOCUS_TYPE_METERS",
        [4] = "FOCUS_TYPE_AUTO",
        [5] = "FOCUS_TYPE_AUTO_SINGLE",
        [6] = "FOCUS_TYPE_AUTO_CONTINUOUS",
    },
    ["PARAM_ACK"] = {
        [0] = "PARAM_ACK_ACCEPTED",
        [1] = "PARAM_ACK_VALUE_UNSUPPORTED",
        [2] = "PARAM_ACK_FAILED",
        [3] = "PARAM_ACK_IN_PROGRESS",
    },
    ["CAMERA_MODE"] = {
        [0] = "CAMERA_MODE_IMAGE",
        [1] = "CAMERA_MODE_VIDEO",
        [2] = "CAMERA_MODE_IMAGE_SURVEY",
    },
    ["MAV_ARM_AUTH_DENIED_REASON"] = {
        [0] = "MAV_ARM_AUTH_DENIED_REASON_GENERIC",
        [1] = "MAV_ARM_AUTH_DENIED_REASON_NONE",
        [2] = "MAV_ARM_AUTH_DENIED_REASON_INVALID_WAYPOINT",
        [3] = "MAV_ARM_AUTH_DENIED_REASON_TIMEOUT",
        [4] = "MAV_ARM_AUTH_DENIED_REASON_AIRSPACE_IN_USE",
        [5] = "MAV_ARM_AUTH_DENIED_REASON_BAD_WEATHER",
    },
    ["RC_TYPE"] = {
        [0] = "RC_TYPE_SPEKTRUM_DSM2",
        [1] = "RC_TYPE_SPEKTRUM_DSMX",
    },
    ["POSITION_TARGET_TYPEMASK"] = {
        [1] = "POSITION_TARGET_TYPEMASK_X_IGNORE",
        [2] = "POSITION_TARGET_TYPEMASK_Y_IGNORE",
        [4] = "POSITION_TARGET_TYPEMASK_Z_IGNORE",
        [8] = "POSITION_TARGET_TYPEMASK_VX_IGNORE",
        [16] = "POSITION_TARGET_TYPEMASK_VY_IGNORE",
        [32] = "POSITION_TARGET_TYPEMASK_VZ_IGNORE",
        [64] = "POSITION_TARGET_TYPEMASK_AX_IGNORE",
        [128] = "POSITION_TARGET_TYPEMASK_AY_IGNORE",
        [256] = "POSITION_TARGET_TYPEMASK_AZ_IGNORE",
        [512] = "POSITION_TARGET_TYPEMASK_FORCE_SET",
        [1024] = "POSITION_TARGET_TYPEMASK_YAW_IGNORE",
        [2048] = "POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE",
    },
    ["ATTITUDE_TARGET_TYPEMASK"] = {
        [1] = "ATTITUDE_TARGET_TYPEMASK_BODY_ROLL_RATE_IGNORE",
        [2] = "ATTITUDE_TARGET_TYPEMASK_BODY_PITCH_RATE_IGNORE",
        [4] = "ATTITUDE_TARGET_TYPEMASK_BODY_YAW_RATE_IGNORE",
        [64] = "ATTITUDE_TARGET_TYPEMASK_THROTTLE_IGNORE",
        [128] = "ATTITUDE_TARGET_TYPEMASK_ATTITUDE_IGNORE",
    },
    ["UTM_FLIGHT_STATE"] = {
        [1] = "UTM_FLIGHT_STATE_UNKNOWN",
        [2] = "UTM_FLIGHT_STATE_GROUND",
        [3] = "UTM_FLIGHT_STATE_AIRBORNE",
        [16] = "UTM_FLIGHT_STATE_EMERGENCY",
        [32] = "UTM_FLIGHT_STATE_NOCTRL",
    },
    ["UTM_DATA_AVAIL_FLAGS"] = {
        [1] = "UTM_DATA_AVAIL_FLAGS_TIME_VALID",
        [2] = "UTM_DATA_AVAIL_FLAGS_UAS_ID_AVAILABLE",
        [4] = "UTM_DATA_AVAIL_FLAGS_POSITION_AVAILABLE",
        [8] = "UTM_DATA_AVAIL_FLAGS_ALTITUDE_AVAILABLE",
        [16] = "UTM_DATA_AVAIL_FLAGS_RELATIVE_ALTITUDE_AVAILABLE",
        [32] = "UTM_DATA_AVAIL_FLAGS_HORIZONTAL_VELO_AVAILABLE",
        [64] = "UTM_DATA_AVAIL_FLAGS_VERTICAL_VELO_AVAILABLE",
        [128] = "UTM_DATA_AVAIL_FLAGS_NEXT_WAYPOINT_AVAILABLE",
    },
    ["PRECISION_LAND_MODE"] = {
        [0] = "PRECISION_LAND_MODE_DISABLED",
        [1] = "PRECISION_LAND_MODE_OPPORTUNISTIC",
        [2] = "PRECISION_LAND_MODE_REQUIRED",
    },
    ["PARACHUTE_ACTION"] = {
        [0] = "PARACHUTE_DISABLE",
        [1] = "PARACHUTE_ENABLE",
        [2] = "PARACHUTE_RELEASE",
    },
    ["MAV_TUNNEL_PAYLOAD_TYPE"] = {
        [0] = "MAV_TUNNEL_PAYLOAD_TYPE_UNKNOWN",
        [200] = "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED0",
        [201] = "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED1",
        [202] = "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED2",
        [203] = "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED3",
        [204] = "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED4",
        [205] = "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED5",
        [206] = "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED6",
        [207] = "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED7",
        [208] = "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED8",
        [209] = "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED9",
    },
    ["MAV_ODID_ID_TYPE"] = {
        [0] = "MAV_ODID_ID_TYPE_NONE",
        [1] = "MAV_ODID_ID_TYPE_SERIAL_NUMBER",
        [2] = "MAV_ODID_ID_TYPE_CAA_REGISTRATION_ID",
        [3] = "MAV_ODID_ID_TYPE_UTM_ASSIGNED_UUID",
        [4] = "MAV_ODID_ID_TYPE_SPECIFIC_SESSION_ID",
    },
    ["MAV_ODID_UA_TYPE"] = {
        [0] = "MAV_ODID_UA_TYPE_NONE",
        [1] = "MAV_ODID_UA_TYPE_AEROPLANE",
        [2] = "MAV_ODID_UA_TYPE_HELICOPTER_OR_MULTIROTOR",
        [3] = "MAV_ODID_UA_TYPE_GYROPLANE",
        [4] = "MAV_ODID_UA_TYPE_HYBRID_LIFT",
        [5] = "MAV_ODID_UA_TYPE_ORNITHOPTER",
        [6] = "MAV_ODID_UA_TYPE_GLIDER",
        [7] = "MAV_ODID_UA_TYPE_KITE",
        [8] = "MAV_ODID_UA_TYPE_FREE_BALLOON",
        [9] = "MAV_ODID_UA_TYPE_CAPTIVE_BALLOON",
        [10] = "MAV_ODID_UA_TYPE_AIRSHIP",
        [11] = "MAV_ODID_UA_TYPE_FREE_FALL_PARACHUTE",
        [12] = "MAV_ODID_UA_TYPE_ROCKET",
        [13] = "MAV_ODID_UA_TYPE_TETHERED_POWERED_AIRCRAFT",
        [14] = "MAV_ODID_UA_TYPE_GROUND_OBSTACLE",
        [15] = "MAV_ODID_UA_TYPE_OTHER",
    },
    ["MAV_ODID_STATUS"] = {
        [0] = "MAV_ODID_STATUS_UNDECLARED",
        [1] = "MAV_ODID_STATUS_GROUND",
        [2] = "MAV_ODID_STATUS_AIRBORNE",
        [3] = "MAV_ODID_STATUS_EMERGENCY",
        [4] = "MAV_ODID_STATUS_REMOTE_ID_SYSTEM_FAILURE",
    },
    ["MAV_ODID_HEIGHT_REF"] = {
        [0] = "MAV_ODID_HEIGHT_REF_OVER_TAKEOFF",
        [1] = "MAV_ODID_HEIGHT_REF_OVER_GROUND",
    },
    ["MAV_ODID_HOR_ACC"] = {
        [0] = "MAV_ODID_HOR_ACC_UNKNOWN",
        [1] = "MAV_ODID_HOR_ACC_10NM",
        [2] = "MAV_ODID_HOR_ACC_4NM",
        [3] = "MAV_ODID_HOR_ACC_2NM",
        [4] = "MAV_ODID_HOR_ACC_1NM",
        [5] = "MAV_ODID_HOR_ACC_0_5NM",
        [6] = "MAV_ODID_HOR_ACC_0_3NM",
        [7] = "MAV_ODID_HOR_ACC_0_1NM",
        [8] = "MAV_ODID_HOR_ACC_0_05NM",
        [9] = "MAV_ODID_HOR_ACC_30_METER",
        [10] = "MAV_ODID_HOR_ACC_10_METER",
        [11] = "MAV_ODID_HOR_ACC_3_METER",
        [12] = "MAV_ODID_HOR_ACC_1_METER",
    },
    ["MAV_ODID_VER_ACC"] = {
        [0] = "MAV_ODID_VER_ACC_UNKNOWN",
        [1] = "MAV_ODID_VER_ACC_150_METER",
        [2] = "MAV_ODID_VER_ACC_45_METER",
        [3] = "MAV_ODID_VER_ACC_25_METER",
        [4] = "MAV_ODID_VER_ACC_10_METER",
        [5] = "MAV_ODID_VER_ACC_3_METER",
        [6] = "MAV_ODID_VER_ACC_1_METER",
    },
    ["MAV_ODID_SPEED_ACC"] = {
        [0] = "MAV_ODID_SPEED_ACC_UNKNOWN",
        [1] = "MAV_ODID_SPEED_ACC_10_METERS_PER_SECOND",
        [2] = "MAV_ODID_SPEED_ACC_3_METERS_PER_SECOND",
        [3] = "MAV_ODID_SPEED_ACC_1_METERS_PER_SECOND",
        [4] = "MAV_ODID_SPEED_ACC_0_3_METERS_PER_SECOND",
    },
    ["MAV_ODID_TIME_ACC"] = {
        [0] = "MAV_ODID_TIME_ACC_UNKNOWN",
        [1] = "MAV_ODID_TIME_ACC_0_1_SECOND",
        [2] = "MAV_ODID_TIME_ACC_0_2_SECOND",
        [3] = "MAV_ODID_TIME_ACC_0_3_SECOND",
        [4] = "MAV_ODID_TIME_ACC_0_4_SECOND",
        [5] = "MAV_ODID_TIME_ACC_0_5_SECOND",
        [6] = "MAV_ODID_TIME_ACC_0_6_SECOND",
        [7] = "MAV_ODID_TIME_ACC_0_7_SECOND",
        [8] = "MAV_ODID_TIME_ACC_0_8_SECOND",
        [9] = "MAV_ODID_TIME_ACC_0_9_SECOND",
        [10] = "MAV_ODID_TIME_ACC_1_0_SECOND",
        [11] = "MAV_ODID_TIME_ACC_1_1_SECOND",
        [12] = "MAV_ODID_TIME_ACC_1_2_SECOND",
        [13] = "MAV_ODID_TIME_ACC_1_3_SECOND",
        [14] = "MAV_ODID_TIME_ACC_1_4_SECOND",
        [15] = "MAV_ODID_TIME_ACC_1_5_SECOND",
    },
    ["MAV_ODID_AUTH_TYPE"] = {
        [0] = "MAV_ODID_AUTH_TYPE_NONE",
        [1] = "MAV_ODID_AUTH_TYPE_UAS_ID_SIGNATURE",
        [2] = "MAV_ODID_AUTH_TYPE_OPERATOR_ID_SIGNATURE",
        [3] = "MAV_ODID_AUTH_TYPE_MESSAGE_SET_SIGNATURE",
        [4] = "MAV_ODID_AUTH_TYPE_NETWORK_REMOTE_ID",
        [5] = "MAV_ODID_AUTH_TYPE_SPECIFIC_AUTHENTICATION",
    },
    ["MAV_ODID_DESC_TYPE"] = {
        [0] = "MAV_ODID_DESC_TYPE_TEXT",
        [1] = "MAV_ODID_DESC_TYPE_EMERGENCY",
        [2] = "MAV_ODID_DESC_TYPE_EXTENDED_STATUS",
    },
    ["MAV_ODID_OPERATOR_LOCATION_TYPE"] = {
        [0] = "MAV_ODID_OPERATOR_LOCATION_TYPE_TAKEOFF",
        [1] = "MAV_ODID_OPERATOR_LOCATION_TYPE_LIVE_GNSS",
        [2] = "MAV_ODID_OPERATOR_LOCATION_TYPE_FIXED",
    },
    ["MAV_ODID_CLASSIFICATION_TYPE"] = {
        [0] = "MAV_ODID_CLASSIFICATION_TYPE_UNDECLARED",
        [1] = "MAV_ODID_CLASSIFICATION_TYPE_EU",
    },
    ["MAV_ODID_CATEGORY_EU"] = {
        [0] = "MAV_ODID_CATEGORY_EU_UNDECLARED",
        [1] = "MAV_ODID_CATEGORY_EU_OPEN",
        [2] = "MAV_ODID_CATEGORY_EU_SPECIFIC",
        [3] = "MAV_ODID_CATEGORY_EU_CERTIFIED",
    },
    ["MAV_ODID_CLASS_EU"] = {
        [0] = "MAV_ODID_CLASS_EU_UNDECLARED",
        [1] = "MAV_ODID_CLASS_EU_CLASS_0",
        [2] = "MAV_ODID_CLASS_EU_CLASS_1",
        [3] = "MAV_ODID_CLASS_EU_CLASS_2",
        [4] = "MAV_ODID_CLASS_EU_CLASS_3",
        [5] = "MAV_ODID_CLASS_EU_CLASS_4",
        [6] = "MAV_ODID_CLASS_EU_CLASS_5",
        [7] = "MAV_ODID_CLASS_EU_CLASS_6",
    },
    ["MAV_ODID_OPERATOR_ID_TYPE"] = {
        [0] = "MAV_ODID_OPERATOR_ID_TYPE_CAA",
    },
    ["MAV_ODID_ARM_STATUS"] = {
        [0] = "MAV_ODID_ARM_STATUS_GOOD_TO_ARM",
        [1] = "MAV_ODID_ARM_STATUS_PRE_ARM_FAIL_GENERIC",
    },
    ["AIS_TYPE"] = {
        [0] = "AIS_TYPE_UNKNOWN",
        [1] = "AIS_TYPE_RESERVED_1",
        [2] = "AIS_TYPE_RESERVED_2",
        [3] = "AIS_TYPE_RESERVED_3",
        [4] = "AIS_TYPE_RESERVED_4",
        [5] = "AIS_TYPE_RESERVED_5",
        [6] = "AIS_TYPE_RESERVED_6",
        [7] = "AIS_TYPE_RESERVED_7",
        [8] = "AIS_TYPE_RESERVED_8",
        [9] = "AIS_TYPE_RESERVED_9",
        [10] = "AIS_TYPE_RESERVED_10",
        [11] = "AIS_TYPE_RESERVED_11",
        [12] = "AIS_TYPE_RESERVED_12",
        [13] = "AIS_TYPE_RESERVED_13",
        [14] = "AIS_TYPE_RESERVED_14",
        [15] = "AIS_TYPE_RESERVED_15",
        [16] = "AIS_TYPE_RESERVED_16",
        [17] = "AIS_TYPE_RESERVED_17",
        [18] = "AIS_TYPE_RESERVED_18",
        [19] = "AIS_TYPE_RESERVED_19",
        [20] = "AIS_TYPE_WIG",
        [21] = "AIS_TYPE_WIG_HAZARDOUS_A",
        [22] = "AIS_TYPE_WIG_HAZARDOUS_B",
        [23] = "AIS_TYPE_WIG_HAZARDOUS_C",
        [24] = "AIS_TYPE_WIG_HAZARDOUS_D",
        [25] = "AIS_TYPE_WIG_RESERVED_1",
        [26] = "AIS_TYPE_WIG_RESERVED_2",
        [27] = "AIS_TYPE_WIG_RESERVED_3",
        [28] = "AIS_TYPE_WIG_RESERVED_4",
        [29] = "AIS_TYPE_WIG_RESERVED_5",
        [30] = "AIS_TYPE_FISHING",
        [31] = "AIS_TYPE_TOWING",
        [32] = "AIS_TYPE_TOWING_LARGE",
        [33] = "AIS_TYPE_DREDGING",
        [34] = "AIS_TYPE_DIVING",
        [35] = "AIS_TYPE_MILITARY",
        [36] = "AIS_TYPE_SAILING",
        [37] = "AIS_TYPE_PLEASURE",
        [38] = "AIS_TYPE_RESERVED_20",
        [39] = "AIS_TYPE_RESERVED_21",
        [40] = "AIS_TYPE_HSC",
        [41] = "AIS_TYPE_HSC_HAZARDOUS_A",
        [42] = "AIS_TYPE_HSC_HAZARDOUS_B",
        [43] = "AIS_TYPE_HSC_HAZARDOUS_C",
        [44] = "AIS_TYPE_HSC_HAZARDOUS_D",
        [45] = "AIS_TYPE_HSC_RESERVED_1",
        [46] = "AIS_TYPE_HSC_RESERVED_2",
        [47] = "AIS_TYPE_HSC_RESERVED_3",
        [48] = "AIS_TYPE_HSC_RESERVED_4",
        [49] = "AIS_TYPE_HSC_UNKNOWN",
        [50] = "AIS_TYPE_PILOT",
        [51] = "AIS_TYPE_SAR",
        [52] = "AIS_TYPE_TUG",
        [53] = "AIS_TYPE_PORT_TENDER",
        [54] = "AIS_TYPE_ANTI_POLLUTION",
        [55] = "AIS_TYPE_LAW_ENFORCEMENT",
        [56] = "AIS_TYPE_SPARE_LOCAL_1",
        [57] = "AIS_TYPE_SPARE_LOCAL_2",
        [58] = "AIS_TYPE_MEDICAL_TRANSPORT",
        [59] = "AIS_TYPE_NONECOMBATANT",
        [60] = "AIS_TYPE_PASSENGER",
        [61] = "AIS_TYPE_PASSENGER_HAZARDOUS_A",
        [62] = "AIS_TYPE_PASSENGER_HAZARDOUS_B",
        [63] = "AIS_TYPE_AIS_TYPE_PASSENGER_HAZARDOUS_C",
        [64] = "AIS_TYPE_PASSENGER_HAZARDOUS_D",
        [65] = "AIS_TYPE_PASSENGER_RESERVED_1",
        [66] = "AIS_TYPE_PASSENGER_RESERVED_2",
        [67] = "AIS_TYPE_PASSENGER_RESERVED_3",
        [68] = "AIS_TYPE_AIS_TYPE_PASSENGER_RESERVED_4",
        [69] = "AIS_TYPE_PASSENGER_UNKNOWN",
        [70] = "AIS_TYPE_CARGO",
        [71] = "AIS_TYPE_CARGO_HAZARDOUS_A",
        [72] = "AIS_TYPE_CARGO_HAZARDOUS_B",
        [73] = "AIS_TYPE_CARGO_HAZARDOUS_C",
        [74] = "AIS_TYPE_CARGO_HAZARDOUS_D",
        [75] = "AIS_TYPE_CARGO_RESERVED_1",
        [76] = "AIS_TYPE_CARGO_RESERVED_2",
        [77] = "AIS_TYPE_CARGO_RESERVED_3",
        [78] = "AIS_TYPE_CARGO_RESERVED_4",
        [79] = "AIS_TYPE_CARGO_UNKNOWN",
        [80] = "AIS_TYPE_TANKER",
        [81] = "AIS_TYPE_TANKER_HAZARDOUS_A",
        [82] = "AIS_TYPE_TANKER_HAZARDOUS_B",
        [83] = "AIS_TYPE_TANKER_HAZARDOUS_C",
        [84] = "AIS_TYPE_TANKER_HAZARDOUS_D",
        [85] = "AIS_TYPE_TANKER_RESERVED_1",
        [86] = "AIS_TYPE_TANKER_RESERVED_2",
        [87] = "AIS_TYPE_TANKER_RESERVED_3",
        [88] = "AIS_TYPE_TANKER_RESERVED_4",
        [89] = "AIS_TYPE_TANKER_UNKNOWN",
        [90] = "AIS_TYPE_OTHER",
        [91] = "AIS_TYPE_OTHER_HAZARDOUS_A",
        [92] = "AIS_TYPE_OTHER_HAZARDOUS_B",
        [93] = "AIS_TYPE_OTHER_HAZARDOUS_C",
        [94] = "AIS_TYPE_OTHER_HAZARDOUS_D",
        [95] = "AIS_TYPE_OTHER_RESERVED_1",
        [96] = "AIS_TYPE_OTHER_RESERVED_2",
        [97] = "AIS_TYPE_OTHER_RESERVED_3",
        [98] = "AIS_TYPE_OTHER_RESERVED_4",
        [99] = "AIS_TYPE_OTHER_UNKNOWN",
    },
    ["AIS_NAV_STATUS"] = {
        [0] = "UNDER_WAY",
        [1] = "AIS_NAV_ANCHORED",
        [2] = "AIS_NAV_UN_COMMANDED",
        [3] = "AIS_NAV_RESTRICTED_MANOEUVERABILITY",
        [4] = "AIS_NAV_DRAUGHT_CONSTRAINED",
        [5] = "AIS_NAV_MOORED",
        [6] = "AIS_NAV_AGROUND",
        [7] = "AIS_NAV_FISHING",
        [8] = "AIS_NAV_SAILING",
        [9] = "AIS_NAV_RESERVED_HSC",
        [10] = "AIS_NAV_RESERVED_WIG",
        [11] = "AIS_NAV_RESERVED_1",
        [12] = "AIS_NAV_RESERVED_2",
        [13] = "AIS_NAV_RESERVED_3",
        [14] = "AIS_NAV_AIS_SART",
        [15] = "AIS_NAV_UNKNOWN",
    },
    ["AIS_FLAGS"] = {
        [1] = "AIS_FLAGS_POSITION_ACCURACY",
        [2] = "AIS_FLAGS_VALID_COG",
        [4] = "AIS_FLAGS_VALID_VELOCITY",
        [8] = "AIS_FLAGS_HIGH_VELOCITY",
        [16] = "AIS_FLAGS_VALID_TURN_RATE",
        [32] = "AIS_FLAGS_TURN_RATE_SIGN_ONLY",
        [64] = "AIS_FLAGS_VALID_DIMENSIONS",
        [128] = "AIS_FLAGS_LARGE_BOW_DIMENSION",
        [256] = "AIS_FLAGS_LARGE_STERN_DIMENSION",
        [512] = "AIS_FLAGS_LARGE_PORT_DIMENSION",
        [1024] = "AIS_FLAGS_LARGE_STARBOARD_DIMENSION",
        [2048] = "AIS_FLAGS_VALID_CALLSIGN",
        [4096] = "AIS_FLAGS_VALID_NAME",
    },
    ["MAV_WINCH_STATUS_FLAG"] = {
        [1] = "MAV_WINCH_STATUS_HEALTHY",
        [2] = "MAV_WINCH_STATUS_FULLY_RETRACTED",
        [4] = "MAV_WINCH_STATUS_MOVING",
        [8] = "MAV_WINCH_STATUS_CLUTCH_ENGAGED",
    },
    ["MAG_CAL_STATUS"] = {
        [0] = "MAG_CAL_NOT_STARTED",
        [1] = "MAG_CAL_WAITING_TO_START",
        [2] = "MAG_CAL_RUNNING_STEP_ONE",
        [3] = "MAG_CAL_RUNNING_STEP_TWO",
        [4] = "MAG_CAL_SUCCESS",
        [5] = "MAG_CAL_FAILED",
        [6] = "MAG_CAL_BAD_ORIENTATION",
        [7] = "MAG_CAL_BAD_RADIUS",
    },
    ["CAN_FILTER_OP"] = {
        [0] = "CAN_FILTER_REPLACE",
        [1] = "CAN_FILTER_ADD",
        [2] = "CAN_FILTER_REMOVE",
    },
    ["NAV_VTOL_LAND_OPTIONS"] = {
        [0] = "NAV_VTOL_LAND_OPTIONS_DEFAULT",
        [1] = "NAV_VTOL_LAND_OPTIONS_FW_SPIRAL_APPROACH",
        [2] = "NAV_VTOL_LAND_OPTIONS_FW_APPROACH",
    },
    ["MISSION_STATE"] = {
        [0] = "MISSION_STATE_UNKNOWN",
        [1] = "MISSION_STATE_NO_MISSION",
        [2] = "MISSION_STATE_NOT_STARTED",
        [3] = "MISSION_STATE_ACTIVE",
        [4] = "MISSION_STATE_PAUSED",
        [5] = "MISSION_STATE_COMPLETE",
    },
    ["UAVIONIX_ADSB_OUT_DYNAMIC_STATE"] = {
        [1] = "UAVIONIX_ADSB_OUT_DYNAMIC_STATE_INTENT_CHANGE",
        [2] = "UAVIONIX_ADSB_OUT_DYNAMIC_STATE_AUTOPILOT_ENABLED",
        [4] = "UAVIONIX_ADSB_OUT_DYNAMIC_STATE_NICBARO_CROSSCHECKED",
        [8] = "UAVIONIX_ADSB_OUT_DYNAMIC_STATE_ON_GROUND",
        [16] = "UAVIONIX_ADSB_OUT_DYNAMIC_STATE_IDENT",
    },
    ["UAVIONIX_ADSB_OUT_RF_SELECT"] = {
        [0] = "UAVIONIX_ADSB_OUT_RF_SELECT_STANDBY",
        [1] = "UAVIONIX_ADSB_OUT_RF_SELECT_RX_ENABLED",
        [2] = "UAVIONIX_ADSB_OUT_RF_SELECT_TX_ENABLED",
    },
    ["UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX"] = {
        [0] = "UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_NONE_0",
        [1] = "UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_NONE_1",
        [2] = "UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_2D",
        [3] = "UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_3D",
        [4] = "UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_DGPS",
        [5] = "UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX_RTK",
    },
    ["UAVIONIX_ADSB_RF_HEALTH"] = {
        [0] = "UAVIONIX_ADSB_RF_HEALTH_INITIALIZING",
        [1] = "UAVIONIX_ADSB_RF_HEALTH_OK",
        [2] = "UAVIONIX_ADSB_RF_HEALTH_FAIL_TX",
        [16] = "UAVIONIX_ADSB_RF_HEALTH_FAIL_RX",
    },
    ["UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE"] = {
        [0] = "UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_NO_DATA",
        [1] = "UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L15M_W23M",
        [2] = "UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L25M_W28P5M",
        [3] = "UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L25_34M",
        [4] = "UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L35_33M",
        [5] = "UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L35_38M",
        [6] = "UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L45_39P5M",
        [7] = "UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L45_45M",
        [8] = "UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L55_45M",
        [9] = "UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L55_52M",
        [10] = "UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L65_59P5M",
        [11] = "UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L65_67M",
        [12] = "UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L75_W72P5M",
        [13] = "UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L75_W80M",
        [14] = "UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L85_W80M",
        [15] = "UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE_L85_W90M",
    },
    ["UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT"] = {
        [0] = "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_NO_DATA",
        [1] = "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_2M",
        [2] = "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_4M",
        [3] = "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_6M",
        [4] = "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_0M",
        [5] = "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_2M",
        [6] = "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_4M",
        [7] = "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_6M",
    },
    ["UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON"] = {
        [0] = "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON_NO_DATA",
        [1] = "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON_APPLIED_BY_SENSOR",
    },
    ["UAVIONIX_ADSB_EMERGENCY_STATUS"] = {
        [0] = "UAVIONIX_ADSB_OUT_NO_EMERGENCY",
        [1] = "UAVIONIX_ADSB_OUT_GENERAL_EMERGENCY",
        [2] = "UAVIONIX_ADSB_OUT_LIFEGUARD_EMERGENCY",
        [3] = "UAVIONIX_ADSB_OUT_MINIMUM_FUEL_EMERGENCY",
        [4] = "UAVIONIX_ADSB_OUT_NO_COMM_EMERGENCY",
        [5] = "UAVIONIX_ADSB_OUT_UNLAWFUL_INTERFERANCE_EMERGENCY",
        [6] = "UAVIONIX_ADSB_OUT_DOWNED_AIRCRAFT_EMERGENCY",
        [7] = "UAVIONIX_ADSB_OUT_RESERVED",
    },
    ["UAVIONIX_ADSB_OUT_CONTROL_STATE"] = {
        [1] = "UAVIONIX_ADSB_OUT_CONTROL_STATE_EXTERNAL_BARO_CROSSCHECKED",
        [4] = "UAVIONIX_ADSB_OUT_CONTROL_STATE_ON_GROUND",
        [8] = "UAVIONIX_ADSB_OUT_CONTROL_STATE_IDENT_BUTTON_ACTIVE",
        [16] = "UAVIONIX_ADSB_OUT_CONTROL_STATE_MODE_A_ENABLED",
        [32] = "UAVIONIX_ADSB_OUT_CONTROL_STATE_MODE_C_ENABLED",
        [64] = "UAVIONIX_ADSB_OUT_CONTROL_STATE_MODE_S_ENABLED",
        [128] = "UAVIONIX_ADSB_OUT_CONTROL_STATE_1090ES_TX_ENABLED",
    },
    ["UAVIONIX_ADSB_XBIT"] = {
        [128] = "UAVIONIX_ADSB_XBIT_ENABLED",
    },
    ["UAVIONIX_ADSB_OUT_STATUS_STATE"] = {
        [1] = "UAVIONIX_ADSB_OUT_STATUS_STATE_ON_GROUND",
        [2] = "UAVIONIX_ADSB_OUT_STATUS_STATE_INTERROGATED_SINCE_LAST",
        [4] = "UAVIONIX_ADSB_OUT_STATUS_STATE_XBIT_ENABLED",
        [8] = "UAVIONIX_ADSB_OUT_STATUS_STATE_IDENT_ACTIVE",
        [16] = "UAVIONIX_ADSB_OUT_STATUS_STATE_MODE_A_ENABLED",
        [32] = "UAVIONIX_ADSB_OUT_STATUS_STATE_MODE_C_ENABLED",
        [64] = "UAVIONIX_ADSB_OUT_STATUS_STATE_MODE_S_ENABLED",
        [128] = "UAVIONIX_ADSB_OUT_STATUS_STATE_1090ES_TX_ENABLED",
    },
    ["UAVIONIX_ADSB_OUT_STATUS_NIC_NACP"] = {
        [1] = "UAVIONIX_ADSB_NIC_CR_20_NM",
        [2] = "UAVIONIX_ADSB_NIC_CR_8_NM",
        [3] = "UAVIONIX_ADSB_NIC_CR_4_NM",
        [4] = "UAVIONIX_ADSB_NIC_CR_2_NM",
        [5] = "UAVIONIX_ADSB_NIC_CR_1_NM",
        [6] = "UAVIONIX_ADSB_NIC_CR_0_3_NM",
        [7] = "UAVIONIX_ADSB_NIC_CR_0_2_NM",
        [8] = "UAVIONIX_ADSB_NIC_CR_0_1_NM",
        [9] = "UAVIONIX_ADSB_NIC_CR_75_M",
        [10] = "UAVIONIX_ADSB_NIC_CR_25_M",
        [11] = "UAVIONIX_ADSB_NIC_CR_7_5_M",
        [16] = "UAVIONIX_ADSB_NACP_EPU_10_NM",
        [32] = "UAVIONIX_ADSB_NACP_EPU_4_NM",
        [48] = "UAVIONIX_ADSB_NACP_EPU_2_NM",
        [64] = "UAVIONIX_ADSB_NACP_EPU_1_NM",
        [80] = "UAVIONIX_ADSB_NACP_EPU_0_5_NM",
        [96] = "UAVIONIX_ADSB_NACP_EPU_0_3_NM",
        [112] = "UAVIONIX_ADSB_NACP_EPU_0_1_NM",
        [128] = "UAVIONIX_ADSB_NACP_EPU_0_05_NM",
        [144] = "UAVIONIX_ADSB_NACP_EPU_30_M",
        [160] = "UAVIONIX_ADSB_NACP_EPU_10_M",
        [176] = "UAVIONIX_ADSB_NACP_EPU_3_M",
    },
    ["UAVIONIX_ADSB_OUT_STATUS_FAULT"] = {
        [8] = "UAVIONIX_ADSB_OUT_STATUS_FAULT_STATUS_MESSAGE_UNAVAIL",
        [16] = "UAVIONIX_ADSB_OUT_STATUS_FAULT_GPS_NO_POS",
        [32] = "UAVIONIX_ADSB_OUT_STATUS_FAULT_GPS_UNAVAIL",
        [64] = "UAVIONIX_ADSB_OUT_STATUS_FAULT_TX_SYSTEM_FAIL",
        [128] = "UAVIONIX_ADSB_OUT_STATUS_FAULT_MAINT_REQ",
    },
    ["ICAROUS_TRACK_BAND_TYPES"] = {
        [0] = "ICAROUS_TRACK_BAND_TYPE_NONE",
        [1] = "ICAROUS_TRACK_BAND_TYPE_NEAR",
        [2] = "ICAROUS_TRACK_BAND_TYPE_RECOVERY",
    },
    ["ICAROUS_FMS_STATE"] = {
        [0] = "ICAROUS_FMS_STATE_IDLE",
        [1] = "ICAROUS_FMS_STATE_TAKEOFF",
        [2] = "ICAROUS_FMS_STATE_CLIMB",
        [3] = "ICAROUS_FMS_STATE_CRUISE",
        [4] = "ICAROUS_FMS_STATE_APPROACH",
        [5] = "ICAROUS_FMS_STATE_LAND",
    },
    ["MAV_AUTOPILOT"] = {
        [0] = "MAV_AUTOPILOT_GENERIC",
        [1] = "MAV_AUTOPILOT_RESERVED",
        [2] = "MAV_AUTOPILOT_SLUGS",
        [3] = "MAV_AUTOPILOT_ARDUPILOTMEGA",
        [4] = "MAV_AUTOPILOT_OPENPILOT",
        [5] = "MAV_AUTOPILOT_GENERIC_WAYPOINTS_ONLY",
        [6] = "MAV_AUTOPILOT_GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY",
        [7] = "MAV_AUTOPILOT_GENERIC_MISSION_FULL",
        [8] = "MAV_AUTOPILOT_INVALID",
        [9] = "MAV_AUTOPILOT_PPZ",
        [10] = "MAV_AUTOPILOT_UDB",
        [11] = "MAV_AUTOPILOT_FP",
        [12] = "MAV_AUTOPILOT_PX4",
        [13] = "MAV_AUTOPILOT_SMACCMPILOT",
        [14] = "MAV_AUTOPILOT_AUTOQUAD",
        [15] = "MAV_AUTOPILOT_ARMAZILA",
        [16] = "MAV_AUTOPILOT_AEROB",
        [17] = "MAV_AUTOPILOT_ASLUAV",
        [18] = "MAV_AUTOPILOT_SMARTAP",
        [19] = "MAV_AUTOPILOT_AIRRAILS",
        [20] = "MAV_AUTOPILOT_REFLEX",
    },
    ["MAV_TYPE"] = {
        [0] = "MAV_TYPE_GENERIC",
        [1] = "MAV_TYPE_FIXED_WING",
        [2] = "MAV_TYPE_QUADROTOR",
        [3] = "MAV_TYPE_COAXIAL",
        [4] = "MAV_TYPE_HELICOPTER",
        [5] = "MAV_TYPE_ANTENNA_TRACKER",
        [6] = "MAV_TYPE_GCS",
        [7] = "MAV_TYPE_AIRSHIP",
        [8] = "MAV_TYPE_FREE_BALLOON",
        [9] = "MAV_TYPE_ROCKET",
        [10] = "MAV_TYPE_GROUND_ROVER",
        [11] = "MAV_TYPE_SURFACE_BOAT",
        [12] = "MAV_TYPE_SUBMARINE",
        [13] = "MAV_TYPE_HEXAROTOR",
        [14] = "MAV_TYPE_OCTOROTOR",
        [15] = "MAV_TYPE_TRICOPTER",
        [16] = "MAV_TYPE_FLAPPING_WING",
        [17] = "MAV_TYPE_KITE",
        [18] = "MAV_TYPE_ONBOARD_CONTROLLER",
        [19] = "MAV_TYPE_VTOL_DUOROTOR",
        [20] = "MAV_TYPE_VTOL_QUADROTOR",
        [21] = "MAV_TYPE_VTOL_TILTROTOR",
        [22] = "MAV_TYPE_VTOL_RESERVED2",
        [23] = "MAV_TYPE_VTOL_RESERVED3",
        [24] = "MAV_TYPE_VTOL_RESERVED4",
        [25] = "MAV_TYPE_VTOL_RESERVED5",
        [26] = "MAV_TYPE_GIMBAL",
        [27] = "MAV_TYPE_ADSB",
        [28] = "MAV_TYPE_PARAFOIL",
        [29] = "MAV_TYPE_DODECAROTOR",
        [30] = "MAV_TYPE_CAMERA",
        [31] = "MAV_TYPE_CHARGING_STATION",
        [32] = "MAV_TYPE_FLARM",
        [33] = "MAV_TYPE_SERVO",
        [34] = "MAV_TYPE_ODID",
        [35] = "MAV_TYPE_DECAROTOR",
        [36] = "MAV_TYPE_BATTERY",
        [37] = "MAV_TYPE_PARACHUTE",
        [38] = "MAV_TYPE_LOG",
        [39] = "MAV_TYPE_OSD",
        [40] = "MAV_TYPE_IMU",
        [41] = "MAV_TYPE_GPS",
        [42] = "MAV_TYPE_WINCH",
    },
    ["MAV_MODE_FLAG"] = {
        [1] = "MAV_MODE_FLAG_CUSTOM_MODE_ENABLED",
        [2] = "MAV_MODE_FLAG_TEST_ENABLED",
        [4] = "MAV_MODE_FLAG_AUTO_ENABLED",
        [8] = "MAV_MODE_FLAG_GUIDED_ENABLED",
        [16] = "MAV_MODE_FLAG_STABILIZE_ENABLED",
        [32] = "MAV_MODE_FLAG_HIL_ENABLED",
        [64] = "MAV_MODE_FLAG_MANUAL_INPUT_ENABLED",
        [128] = "MAV_MODE_FLAG_SAFETY_ARMED",
    },
    ["MAV_MODE_FLAG_DECODE_POSITION"] = {
        [1] = "MAV_MODE_FLAG_DECODE_POSITION_CUSTOM_MODE",
        [2] = "MAV_MODE_FLAG_DECODE_POSITION_TEST",
        [4] = "MAV_MODE_FLAG_DECODE_POSITION_AUTO",
        [8] = "MAV_MODE_FLAG_DECODE_POSITION_GUIDED",
        [16] = "MAV_MODE_FLAG_DECODE_POSITION_STABILIZE",
        [32] = "MAV_MODE_FLAG_DECODE_POSITION_HIL",
        [64] = "MAV_MODE_FLAG_DECODE_POSITION_MANUAL",
        [128] = "MAV_MODE_FLAG_DECODE_POSITION_SAFETY",
    },
    ["MAV_STATE"] = {
        [0] = "MAV_STATE_UNINIT",
        [1] = "MAV_STATE_BOOT",
        [2] = "MAV_STATE_CALIBRATING",
        [3] = "MAV_STATE_STANDBY",
        [4] = "MAV_STATE_ACTIVE",
        [5] = "MAV_STATE_CRITICAL",
        [6] = "MAV_STATE_EMERGENCY",
        [7] = "MAV_STATE_POWEROFF",
        [8] = "MAV_STATE_FLIGHT_TERMINATION",
    },
    ["MAV_COMPONENT"] = {
        [0] = "MAV_COMP_ID_ALL",
        [1] = "MAV_COMP_ID_AUTOPILOT1",
        [25] = "MAV_COMP_ID_USER1",
        [26] = "MAV_COMP_ID_USER2",
        [27] = "MAV_COMP_ID_USER3",
        [28] = "MAV_COMP_ID_USER4",
        [29] = "MAV_COMP_ID_USER5",
        [30] = "MAV_COMP_ID_USER6",
        [31] = "MAV_COMP_ID_USER7",
        [32] = "MAV_COMP_ID_USER8",
        [33] = "MAV_COMP_ID_USER9",
        [34] = "MAV_COMP_ID_USER10",
        [35] = "MAV_COMP_ID_USER11",
        [36] = "MAV_COMP_ID_USER12",
        [37] = "MAV_COMP_ID_USER13",
        [38] = "MAV_COMP_ID_USER14",
        [39] = "MAV_COMP_ID_USER15",
        [40] = "MAV_COMP_ID_USER16",
        [41] = "MAV_COMP_ID_USER17",
        [42] = "MAV_COMP_ID_USER18",
        [43] = "MAV_COMP_ID_USER19",
        [44] = "MAV_COMP_ID_USER20",
        [45] = "MAV_COMP_ID_USER21",
        [46] = "MAV_COMP_ID_USER22",
        [47] = "MAV_COMP_ID_USER23",
        [48] = "MAV_COMP_ID_USER24",
        [49] = "MAV_COMP_ID_USER25",
        [50] = "MAV_COMP_ID_USER26",
        [51] = "MAV_COMP_ID_USER27",
        [52] = "MAV_COMP_ID_USER28",
        [53] = "MAV_COMP_ID_USER29",
        [54] = "MAV_COMP_ID_USER30",
        [55] = "MAV_COMP_ID_USER31",
        [56] = "MAV_COMP_ID_USER32",
        [57] = "MAV_COMP_ID_USER33",
        [58] = "MAV_COMP_ID_USER34",
        [59] = "MAV_COMP_ID_USER35",
        [60] = "MAV_COMP_ID_USER36",
        [61] = "MAV_COMP_ID_USER37",
        [62] = "MAV_COMP_ID_USER38",
        [63] = "MAV_COMP_ID_USER39",
        [64] = "MAV_COMP_ID_USER40",
        [65] = "MAV_COMP_ID_USER41",
        [66] = "MAV_COMP_ID_USER42",
        [67] = "MAV_COMP_ID_USER43",
        [68] = "MAV_COMP_ID_TELEMETRY_RADIO",
        [69] = "MAV_COMP_ID_USER45",
        [70] = "MAV_COMP_ID_USER46",
        [71] = "MAV_COMP_ID_USER47",
        [72] = "MAV_COMP_ID_USER48",
        [73] = "MAV_COMP_ID_USER49",
        [74] = "MAV_COMP_ID_USER50",
        [75] = "MAV_COMP_ID_USER51",
        [76] = "MAV_COMP_ID_USER52",
        [77] = "MAV_COMP_ID_USER53",
        [78] = "MAV_COMP_ID_USER54",
        [79] = "MAV_COMP_ID_USER55",
        [80] = "MAV_COMP_ID_USER56",
        [81] = "MAV_COMP_ID_USER57",
        [82] = "MAV_COMP_ID_USER58",
        [83] = "MAV_COMP_ID_USER59",
        [84] = "MAV_COMP_ID_USER60",
        [85] = "MAV_COMP_ID_USER61",
        [86] = "MAV_COMP_ID_USER62",
        [87] = "MAV_COMP_ID_USER63",
        [88] = "MAV_COMP_ID_USER64",
        [89] = "MAV_COMP_ID_USER65",
        [90] = "MAV_COMP_ID_USER66",
        [91] = "MAV_COMP_ID_USER67",
        [92] = "MAV_COMP_ID_USER68",
        [93] = "MAV_COMP_ID_USER69",
        [94] = "MAV_COMP_ID_USER70",
        [95] = "MAV_COMP_ID_USER71",
        [96] = "MAV_COMP_ID_USER72",
        [97] = "MAV_COMP_ID_USER73",
        [98] = "MAV_COMP_ID_USER74",
        [99] = "MAV_COMP_ID_USER75",
        [100] = "MAV_COMP_ID_CAMERA",
        [101] = "MAV_COMP_ID_CAMERA2",
        [102] = "MAV_COMP_ID_CAMERA3",
        [103] = "MAV_COMP_ID_CAMERA4",
        [104] = "MAV_COMP_ID_CAMERA5",
        [105] = "MAV_COMP_ID_CAMERA6",
        [140] = "MAV_COMP_ID_SERVO1",
        [141] = "MAV_COMP_ID_SERVO2",
        [142] = "MAV_COMP_ID_SERVO3",
        [143] = "MAV_COMP_ID_SERVO4",
        [144] = "MAV_COMP_ID_SERVO5",
        [145] = "MAV_COMP_ID_SERVO6",
        [146] = "MAV_COMP_ID_SERVO7",
        [147] = "MAV_COMP_ID_SERVO8",
        [148] = "MAV_COMP_ID_SERVO9",
        [149] = "MAV_COMP_ID_SERVO10",
        [150] = "MAV_COMP_ID_SERVO11",
        [151] = "MAV_COMP_ID_SERVO12",
        [152] = "MAV_COMP_ID_SERVO13",
        [153] = "MAV_COMP_ID_SERVO14",
        [154] = "MAV_COMP_ID_GIMBAL",
        [155] = "MAV_COMP_ID_LOG",
        [156] = "MAV_COMP_ID_ADSB",
        [157] = "MAV_COMP_ID_OSD",
        [158] = "MAV_COMP_ID_PERIPHERAL",
        [159] = "MAV_COMP_ID_QX1_GIMBAL",
        [160] = "MAV_COMP_ID_FLARM",
        [161] = "MAV_COMP_ID_PARACHUTE",
        [171] = "MAV_COMP_ID_GIMBAL2",
        [172] = "MAV_COMP_ID_GIMBAL3",
        [173] = "MAV_COMP_ID_GIMBAL4",
        [174] = "MAV_COMP_ID_GIMBAL5",
        [175] = "MAV_COMP_ID_GIMBAL6",
        [180] = "MAV_COMP_ID_BATTERY",
        [181] = "MAV_COMP_ID_BATTERY2",
        [189] = "MAV_COMP_ID_MAVCAN",
        [190] = "MAV_COMP_ID_MISSIONPLANNER",
        [191] = "MAV_COMP_ID_ONBOARD_COMPUTER",
        [192] = "MAV_COMP_ID_ONBOARD_COMPUTER2",
        [193] = "MAV_COMP_ID_ONBOARD_COMPUTER3",
        [194] = "MAV_COMP_ID_ONBOARD_COMPUTER4",
        [195] = "MAV_COMP_ID_PATHPLANNER",
        [196] = "MAV_COMP_ID_OBSTACLE_AVOIDANCE",
        [197] = "MAV_COMP_ID_VISUAL_INERTIAL_ODOMETRY",
        [198] = "MAV_COMP_ID_PAIRING_MANAGER",
        [200] = "MAV_COMP_ID_IMU",
        [201] = "MAV_COMP_ID_IMU_2",
        [202] = "MAV_COMP_ID_IMU_3",
        [220] = "MAV_COMP_ID_GPS",
        [221] = "MAV_COMP_ID_GPS2",
        [236] = "MAV_COMP_ID_ODID_TXRX_1",
        [237] = "MAV_COMP_ID_ODID_TXRX_2",
        [238] = "MAV_COMP_ID_ODID_TXRX_3",
        [240] = "MAV_COMP_ID_UDP_BRIDGE",
        [241] = "MAV_COMP_ID_UART_BRIDGE",
        [242] = "MAV_COMP_ID_TUNNEL_NODE",
        [250] = "MAV_COMP_ID_SYSTEM_CONTROL",
    },
}
f.magic = ProtoField.uint8("mavlink_proto.magic", "Magic value / version", base.HEX, protocolVersions)
f.length = ProtoField.uint8("mavlink_proto.length", "Payload length")
f.incompatibility_flag = ProtoField.uint8("mavlink_proto.incompatibility_flag", "Incompatibility flag")
f.compatibility_flag = ProtoField.uint8("mavlink_proto.compatibility_flag", "Compatibility flag")
f.sequence = ProtoField.uint8("mavlink_proto.sequence", "Packet sequence")
f.sysid = ProtoField.uint8("mavlink_proto.sysid", "System id", base.HEX)
f.compid = ProtoField.uint8("mavlink_proto.compid", "Component id", base.HEX)
f.msgid = ProtoField.uint24("mavlink_proto.msgid", "Message id", base.DEC, messageName)
f.payload = ProtoField.uint8("mavlink_proto.payload", "Payload", base.DEC, messageName)
f.crc = ProtoField.uint16("mavlink_proto.crc", "Message CRC", base.HEX)
f.signature_link = ProtoField.uint8("mavlink_proto.signature_link", "Link id", base.DEC)
f.signature_time = ProtoField.absolute_time("mavlink_proto.signature_time", "Time")
f.signature_signature = ProtoField.bytes("mavlink_proto.signature_signature", "Signature")
f.rawheader = ProtoField.bytes("mavlink_proto.rawheader", "Unparsable header fragment")
f.rawpayload = ProtoField.bytes("mavlink_proto.rawpayload", "Unparsable payload")
f.cmd_MAV_CMD_NAV_WAYPOINT_param1 = ProtoField.new("param1: Hold (float)", "mavlink_proto.cmd_MAV_CMD_NAV_WAYPOINT_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_WAYPOINT_param2 = ProtoField.new("param2: Accept Radius (float)", "mavlink_proto.cmd_MAV_CMD_NAV_WAYPOINT_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_WAYPOINT_param3 = ProtoField.new("param3: Pass Radius (float)", "mavlink_proto.cmd_MAV_CMD_NAV_WAYPOINT_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_WAYPOINT_param4 = ProtoField.new("param4: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_NAV_WAYPOINT_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_WAYPOINT_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_WAYPOINT_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_WAYPOINT_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_WAYPOINT_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_WAYPOINT_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_WAYPOINT_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param3 = ProtoField.new("param3: Radius (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_UNLIM_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param4 = ProtoField.new("param4: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_UNLIM_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_UNLIM_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_UNLIM_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_UNLIM_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_LOITER_TURNS_param1 = ProtoField.new("param1: Turns (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TURNS_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TURNS_param3 = ProtoField.new("param3: Radius (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TURNS_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TURNS_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TURNS_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TURNS_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TURNS_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TURNS_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TURNS_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_LOITER_TIME_param1 = ProtoField.new("param1: Time (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TIME_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TIME_param3 = ProtoField.new("param3: Radius (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TIME_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TIME_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TIME_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TIME_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TIME_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TIME_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TIME_param7", ftypes.FLOAT, nil)


f.cmd_MAV_CMD_NAV_LAND_param1 = ProtoField.new("param1: Abort Alt (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LAND_param2 = ProtoField.new("param2: Land Mode (PRECISION_LAND_MODE)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_param2", ftypes.UINT32, enumEntryName.PRECISION_LAND_MODE)
f.cmd_MAV_CMD_NAV_LAND_param4 = ProtoField.new("param4: Yaw Angle (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LAND_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LAND_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LAND_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_TAKEOFF_param1 = ProtoField.new("param1: Pitch (float)", "mavlink_proto.cmd_MAV_CMD_NAV_TAKEOFF_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_TAKEOFF_param4 = ProtoField.new("param4: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_NAV_TAKEOFF_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_TAKEOFF_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_TAKEOFF_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_TAKEOFF_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_TAKEOFF_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_TAKEOFF_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_TAKEOFF_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_LAND_LOCAL_param1 = ProtoField.new("param1: Target (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_LOCAL_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LAND_LOCAL_param2 = ProtoField.new("param2: Offset (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_LOCAL_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LAND_LOCAL_param3 = ProtoField.new("param3: Descend Rate (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_LOCAL_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LAND_LOCAL_param4 = ProtoField.new("param4: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_LOCAL_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LAND_LOCAL_param5 = ProtoField.new("param5: Y Position (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_LOCAL_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LAND_LOCAL_param6 = ProtoField.new("param6: X Position (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_LOCAL_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LAND_LOCAL_param7 = ProtoField.new("param7: Z Position (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LAND_LOCAL_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param1 = ProtoField.new("param1: Pitch (float)", "mavlink_proto.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param3 = ProtoField.new("param3: Ascend Rate (float)", "mavlink_proto.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param4 = ProtoField.new("param4: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param5 = ProtoField.new("param5: Y Position (float)", "mavlink_proto.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param6 = ProtoField.new("param6: X Position (float)", "mavlink_proto.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param7 = ProtoField.new("param7: Z Position (float)", "mavlink_proto.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_FOLLOW_param1 = ProtoField.new("param1: Following (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FOLLOW_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FOLLOW_param2 = ProtoField.new("param2: Ground Speed (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FOLLOW_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FOLLOW_param3 = ProtoField.new("param3: Radius (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FOLLOW_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FOLLOW_param4 = ProtoField.new("param4: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FOLLOW_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FOLLOW_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FOLLOW_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FOLLOW_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FOLLOW_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FOLLOW_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FOLLOW_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT_param1 = ProtoField.new("param1: Action (float)", "mavlink_proto.cmd_MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param1 = ProtoField.new("param1: Heading Required (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param2 = ProtoField.new("param2: Radius (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param4 = ProtoField.new("param4: Xtrack Location (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_FOLLOW_param1 = ProtoField.new("param1: System ID (float)", "mavlink_proto.cmd_MAV_CMD_DO_FOLLOW_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_FOLLOW_param4 = ProtoField.new("param4: Altitude Mode (float)", "mavlink_proto.cmd_MAV_CMD_DO_FOLLOW_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_FOLLOW_param5 = ProtoField.new("param5: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_FOLLOW_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_FOLLOW_param7 = ProtoField.new("param7: Time to Land (float)", "mavlink_proto.cmd_MAV_CMD_DO_FOLLOW_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param1 = ProtoField.new("param1: Camera Q1 (float)", "mavlink_proto.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param2 = ProtoField.new("param2: Camera Q2 (float)", "mavlink_proto.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param3 = ProtoField.new("param3: Camera Q3 (float)", "mavlink_proto.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param4 = ProtoField.new("param4: Camera Q4 (float)", "mavlink_proto.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param5 = ProtoField.new("param5: Altitude Offset (float)", "mavlink_proto.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param6 = ProtoField.new("param6: X Offset (float)", "mavlink_proto.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param7 = ProtoField.new("param7: Y Offset (float)", "mavlink_proto.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_ROI_param1 = ProtoField.new("param1: ROI Mode (MAV_ROI)", "mavlink_proto.cmd_MAV_CMD_NAV_ROI_param1", ftypes.UINT32, enumEntryName.MAV_ROI)
f.cmd_MAV_CMD_NAV_ROI_param2 = ProtoField.new("param2: WP Index (float)", "mavlink_proto.cmd_MAV_CMD_NAV_ROI_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_ROI_param3 = ProtoField.new("param3: ROI Index (float)", "mavlink_proto.cmd_MAV_CMD_NAV_ROI_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_ROI_param5 = ProtoField.new("param5: X (float)", "mavlink_proto.cmd_MAV_CMD_NAV_ROI_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_ROI_param6 = ProtoField.new("param6: Y (float)", "mavlink_proto.cmd_MAV_CMD_NAV_ROI_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_ROI_param7 = ProtoField.new("param7: Z (float)", "mavlink_proto.cmd_MAV_CMD_NAV_ROI_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_PATHPLANNING_param1 = ProtoField.new("param1: Local Ctrl (float)", "mavlink_proto.cmd_MAV_CMD_NAV_PATHPLANNING_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_PATHPLANNING_param2 = ProtoField.new("param2: Global Ctrl (float)", "mavlink_proto.cmd_MAV_CMD_NAV_PATHPLANNING_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_PATHPLANNING_param4 = ProtoField.new("param4: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_NAV_PATHPLANNING_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_PATHPLANNING_param5 = ProtoField.new("param5: Latitude/X (float)", "mavlink_proto.cmd_MAV_CMD_NAV_PATHPLANNING_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_PATHPLANNING_param6 = ProtoField.new("param6: Longitude/Y (float)", "mavlink_proto.cmd_MAV_CMD_NAV_PATHPLANNING_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_PATHPLANNING_param7 = ProtoField.new("param7: Altitude/Z (float)", "mavlink_proto.cmd_MAV_CMD_NAV_PATHPLANNING_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param1 = ProtoField.new("param1: Hold (float)", "mavlink_proto.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param5 = ProtoField.new("param5: Latitude/X (float)", "mavlink_proto.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param6 = ProtoField.new("param6: Longitude/Y (float)", "mavlink_proto.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param7 = ProtoField.new("param7: Altitude/Z (float)", "mavlink_proto.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_ALTITUDE_WAIT_param1 = ProtoField.new("param1: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_ALTITUDE_WAIT_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_ALTITUDE_WAIT_param2 = ProtoField.new("param2: Descent Speed (float)", "mavlink_proto.cmd_MAV_CMD_NAV_ALTITUDE_WAIT_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_ALTITUDE_WAIT_param3 = ProtoField.new("param3: Wiggle Time (float)", "mavlink_proto.cmd_MAV_CMD_NAV_ALTITUDE_WAIT_param3", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param2 = ProtoField.new("param2: Transition Heading (VTOL_TRANSITION_HEADING)", "mavlink_proto.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param2", ftypes.UINT32, enumEntryName.VTOL_TRANSITION_HEADING)
f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param4 = ProtoField.new("param4: Yaw Angle (float)", "mavlink_proto.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_VTOL_LAND_param3 = ProtoField.new("param3: Approach Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_VTOL_LAND_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_VTOL_LAND_param4 = ProtoField.new("param4: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_NAV_VTOL_LAND_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_VTOL_LAND_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_VTOL_LAND_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_VTOL_LAND_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_VTOL_LAND_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_VTOL_LAND_param7 = ProtoField.new("param7: Ground Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_VTOL_LAND_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_GUIDED_ENABLE_param1 = ProtoField.new("param1: Enable (float)", "mavlink_proto.cmd_MAV_CMD_NAV_GUIDED_ENABLE_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_DELAY_param1 = ProtoField.new("param1: Delay (float)", "mavlink_proto.cmd_MAV_CMD_NAV_DELAY_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_DELAY_param2 = ProtoField.new("param2: Hour (float)", "mavlink_proto.cmd_MAV_CMD_NAV_DELAY_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_DELAY_param3 = ProtoField.new("param3: Minute (float)", "mavlink_proto.cmd_MAV_CMD_NAV_DELAY_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_DELAY_param4 = ProtoField.new("param4: Second (float)", "mavlink_proto.cmd_MAV_CMD_NAV_DELAY_param4", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param1 = ProtoField.new("param1: Max Descent (float)", "mavlink_proto.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param7", ftypes.FLOAT, nil)


f.cmd_MAV_CMD_CONDITION_DELAY_param1 = ProtoField.new("param1: Delay (float)", "mavlink_proto.cmd_MAV_CMD_CONDITION_DELAY_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_CONDITION_CHANGE_ALT_param1 = ProtoField.new("param1: Rate (float)", "mavlink_proto.cmd_MAV_CMD_CONDITION_CHANGE_ALT_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_CONDITION_CHANGE_ALT_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_CONDITION_CHANGE_ALT_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_CONDITION_DISTANCE_param1 = ProtoField.new("param1: Distance (float)", "mavlink_proto.cmd_MAV_CMD_CONDITION_DISTANCE_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_CONDITION_YAW_param1 = ProtoField.new("param1: Angle (float)", "mavlink_proto.cmd_MAV_CMD_CONDITION_YAW_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_CONDITION_YAW_param2 = ProtoField.new("param2: Angular Speed (float)", "mavlink_proto.cmd_MAV_CMD_CONDITION_YAW_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_CONDITION_YAW_param3 = ProtoField.new("param3: Direction (float)", "mavlink_proto.cmd_MAV_CMD_CONDITION_YAW_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_CONDITION_YAW_param4 = ProtoField.new("param4: Relative (float)", "mavlink_proto.cmd_MAV_CMD_CONDITION_YAW_param4", ftypes.FLOAT, nil)


f.cmd_MAV_CMD_DO_SET_MODE_param1 = ProtoField.new("param1: Mode (MAV_MODE)", "mavlink_proto.cmd_MAV_CMD_DO_SET_MODE_param1", ftypes.UINT32, enumEntryName.MAV_MODE)
f.cmd_MAV_CMD_DO_SET_MODE_param2 = ProtoField.new("param2: Custom Mode (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_MODE_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_MODE_param3 = ProtoField.new("param3: Custom Submode (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_MODE_param3", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_JUMP_param1 = ProtoField.new("param1: Number (float)", "mavlink_proto.cmd_MAV_CMD_DO_JUMP_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_JUMP_param2 = ProtoField.new("param2: Repeat (float)", "mavlink_proto.cmd_MAV_CMD_DO_JUMP_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_CHANGE_SPEED_param1 = ProtoField.new("param1: Speed Type (float)", "mavlink_proto.cmd_MAV_CMD_DO_CHANGE_SPEED_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_CHANGE_SPEED_param2 = ProtoField.new("param2: Speed (float)", "mavlink_proto.cmd_MAV_CMD_DO_CHANGE_SPEED_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_CHANGE_SPEED_param3 = ProtoField.new("param3: Throttle (float)", "mavlink_proto.cmd_MAV_CMD_DO_CHANGE_SPEED_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_CHANGE_SPEED_param4 = ProtoField.new("param4: Relative (float)", "mavlink_proto.cmd_MAV_CMD_DO_CHANGE_SPEED_param4", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_SET_HOME_param1 = ProtoField.new("param1: Use Current (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_HOME_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_HOME_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_HOME_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_HOME_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_HOME_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_HOME_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_HOME_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_SET_PARAMETER_param1 = ProtoField.new("param1: Number (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_PARAMETER_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_PARAMETER_param2 = ProtoField.new("param2: Value (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_PARAMETER_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_SET_RELAY_param1 = ProtoField.new("param1: Instance (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_RELAY_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_RELAY_param2 = ProtoField.new("param2: Setting (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_RELAY_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_REPEAT_RELAY_param1 = ProtoField.new("param1: Instance (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPEAT_RELAY_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_REPEAT_RELAY_param2 = ProtoField.new("param2: Count (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPEAT_RELAY_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_REPEAT_RELAY_param3 = ProtoField.new("param3: Time (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPEAT_RELAY_param3", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_SET_SERVO_param1 = ProtoField.new("param1: Instance (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_SERVO_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_SERVO_param2 = ProtoField.new("param2: PWM (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_SERVO_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_REPEAT_SERVO_param1 = ProtoField.new("param1: Instance (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPEAT_SERVO_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_REPEAT_SERVO_param2 = ProtoField.new("param2: PWM (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPEAT_SERVO_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_REPEAT_SERVO_param3 = ProtoField.new("param3: Count (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPEAT_SERVO_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_REPEAT_SERVO_param4 = ProtoField.new("param4: Time (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPEAT_SERVO_param4", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_FLIGHTTERMINATION_param1 = ProtoField.new("param1: Terminate (float)", "mavlink_proto.cmd_MAV_CMD_DO_FLIGHTTERMINATION_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_CHANGE_ALTITUDE_param1 = ProtoField.new("param1: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_CHANGE_ALTITUDE_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_CHANGE_ALTITUDE_param2 = ProtoField.new("param2: Frame (MAV_FRAME)", "mavlink_proto.cmd_MAV_CMD_DO_CHANGE_ALTITUDE_param2", ftypes.UINT32, enumEntryName.MAV_FRAME)

f.cmd_MAV_CMD_DO_LAND_START_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_LAND_START_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_LAND_START_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_LAND_START_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_LAND_START_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_LAND_START_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_RALLY_LAND_param1 = ProtoField.new("param1: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_RALLY_LAND_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_RALLY_LAND_param2 = ProtoField.new("param2: Speed (float)", "mavlink_proto.cmd_MAV_CMD_DO_RALLY_LAND_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_GO_AROUND_param1 = ProtoField.new("param1: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_GO_AROUND_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_REPOSITION_param1 = ProtoField.new("param1: Speed (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPOSITION_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_REPOSITION_param2 = ProtoField.new("param2: Bitmask (MAV_DO_REPOSITION_FLAGS)", "mavlink_proto.cmd_MAV_CMD_DO_REPOSITION_param2", ftypes.UINT32, nil)
f.cmd_MAV_CMD_DO_REPOSITION_param2_flagMAV_DO_REPOSITION_FLAGS_CHANGE_MODE = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_DO_REPOSITION_param2.MAV_DO_REPOSITION_FLAGS_CHANGE_MODE", "MAV_DO_REPOSITION_FLAGS_CHANGE_MODE", 2, nil, 1)
f.cmd_MAV_CMD_DO_REPOSITION_param2_flagMAV_DO_REPOSITION_FLAGS_ENUM_END = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_DO_REPOSITION_param2.MAV_DO_REPOSITION_FLAGS_ENUM_END", "MAV_DO_REPOSITION_FLAGS_ENUM_END", 2, nil, 2)
f.cmd_MAV_CMD_DO_REPOSITION_param3 = ProtoField.new("param3: Radius (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPOSITION_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_REPOSITION_param4 = ProtoField.new("param4: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPOSITION_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_REPOSITION_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPOSITION_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_REPOSITION_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPOSITION_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_REPOSITION_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_REPOSITION_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_PAUSE_CONTINUE_param1 = ProtoField.new("param1: Continue (float)", "mavlink_proto.cmd_MAV_CMD_DO_PAUSE_CONTINUE_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_SET_REVERSE_param1 = ProtoField.new("param1: Reverse (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_REVERSE_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param5 = ProtoField.new("param5: Pitch Offset (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param6 = ProtoField.new("param6: Roll Offset (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param7 = ProtoField.new("param7: Yaw Offset (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param7", ftypes.FLOAT, nil)


f.cmd_MAV_CMD_DO_SET_ROI_SYSID_param1 = ProtoField.new("param1: System ID (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ROI_SYSID_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_CONTROL_VIDEO_param1 = ProtoField.new("param1: ID (float)", "mavlink_proto.cmd_MAV_CMD_DO_CONTROL_VIDEO_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_CONTROL_VIDEO_param2 = ProtoField.new("param2: Transmission (float)", "mavlink_proto.cmd_MAV_CMD_DO_CONTROL_VIDEO_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_CONTROL_VIDEO_param3 = ProtoField.new("param3: Interval (float)", "mavlink_proto.cmd_MAV_CMD_DO_CONTROL_VIDEO_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_CONTROL_VIDEO_param4 = ProtoField.new("param4: Recording (float)", "mavlink_proto.cmd_MAV_CMD_DO_CONTROL_VIDEO_param4", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_SET_ROI_param1 = ProtoField.new("param1: ROI Mode (MAV_ROI)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ROI_param1", ftypes.UINT32, enumEntryName.MAV_ROI)
f.cmd_MAV_CMD_DO_SET_ROI_param2 = ProtoField.new("param2: WP Index (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ROI_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_ROI_param3 = ProtoField.new("param3: ROI Index (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_ROI_param3", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param1 = ProtoField.new("param1: Mode (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param2 = ProtoField.new("param2: Shutter Speed (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param3 = ProtoField.new("param3: Aperture (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param4 = ProtoField.new("param4: ISO (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param5 = ProtoField.new("param5: Exposure (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param6 = ProtoField.new("param6: Command Identity (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param7 = ProtoField.new("param7: Engine Cut-off (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param1 = ProtoField.new("param1: Session Control (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param2 = ProtoField.new("param2: Zoom Absolute (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param3 = ProtoField.new("param3: Zoom Relative (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param4 = ProtoField.new("param4: Focus (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param5 = ProtoField.new("param5: Shoot Command (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param6 = ProtoField.new("param6: Command Identity (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param7 = ProtoField.new("param7: Shot ID (float)", "mavlink_proto.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param1 = ProtoField.new("param1: Mode (MAV_MOUNT_MODE)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param1", ftypes.UINT32, enumEntryName.MAV_MOUNT_MODE)
f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param2 = ProtoField.new("param2: Stabilize Roll (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param3 = ProtoField.new("param3: Stabilize Pitch (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param4 = ProtoField.new("param4: Stabilize Yaw (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param4", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_MOUNT_CONTROL_param7 = ProtoField.new("param7: Mode (MAV_MOUNT_MODE)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONTROL_param7", ftypes.UINT32, enumEntryName.MAV_MOUNT_MODE)

f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_DIST_param1 = ProtoField.new("param1: Distance (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_CAM_TRIGG_DIST_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_DIST_param2 = ProtoField.new("param2: Shutter (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_CAM_TRIGG_DIST_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_DIST_param3 = ProtoField.new("param3: Trigger (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_CAM_TRIGG_DIST_param3", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_FENCE_ENABLE_param1 = ProtoField.new("param1: Enable (float)", "mavlink_proto.cmd_MAV_CMD_DO_FENCE_ENABLE_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_PARACHUTE_param1 = ProtoField.new("param1: Action (PARACHUTE_ACTION)", "mavlink_proto.cmd_MAV_CMD_DO_PARACHUTE_param1", ftypes.UINT32, enumEntryName.PARACHUTE_ACTION)

f.cmd_MAV_CMD_DO_MOTOR_TEST_param1 = ProtoField.new("param1: Instance (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOTOR_TEST_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOTOR_TEST_param2 = ProtoField.new("param2: Throttle Type (MOTOR_TEST_THROTTLE_TYPE)", "mavlink_proto.cmd_MAV_CMD_DO_MOTOR_TEST_param2", ftypes.UINT32, enumEntryName.MOTOR_TEST_THROTTLE_TYPE)
f.cmd_MAV_CMD_DO_MOTOR_TEST_param3 = ProtoField.new("param3: Throttle (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOTOR_TEST_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOTOR_TEST_param4 = ProtoField.new("param4: Timeout (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOTOR_TEST_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOTOR_TEST_param5 = ProtoField.new("param5: Motor Count (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOTOR_TEST_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOTOR_TEST_param6 = ProtoField.new("param6: Test Order (MOTOR_TEST_ORDER)", "mavlink_proto.cmd_MAV_CMD_DO_MOTOR_TEST_param6", ftypes.UINT32, enumEntryName.MOTOR_TEST_ORDER)

f.cmd_MAV_CMD_DO_INVERTED_FLIGHT_param1 = ProtoField.new("param1: Inverted (float)", "mavlink_proto.cmd_MAV_CMD_DO_INVERTED_FLIGHT_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_GRIPPER_param1 = ProtoField.new("param1: Instance (float)", "mavlink_proto.cmd_MAV_CMD_DO_GRIPPER_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GRIPPER_param2 = ProtoField.new("param2: Action (GRIPPER_ACTIONS)", "mavlink_proto.cmd_MAV_CMD_DO_GRIPPER_param2", ftypes.UINT32, enumEntryName.GRIPPER_ACTIONS)

f.cmd_MAV_CMD_DO_AUTOTUNE_ENABLE_param1 = ProtoField.new("param1: Enable (float)", "mavlink_proto.cmd_MAV_CMD_DO_AUTOTUNE_ENABLE_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_AUTOTUNE_ENABLE_param2 = ProtoField.new("param2: Axis (AUTOTUNE_AXIS)", "mavlink_proto.cmd_MAV_CMD_DO_AUTOTUNE_ENABLE_param2", ftypes.UINT32, nil)
f.cmd_MAV_CMD_DO_AUTOTUNE_ENABLE_param2_flagAUTOTUNE_AXIS_ROLL = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_DO_AUTOTUNE_ENABLE_param2.AUTOTUNE_AXIS_ROLL", "AUTOTUNE_AXIS_ROLL", 3, nil, 1)
f.cmd_MAV_CMD_DO_AUTOTUNE_ENABLE_param2_flagAUTOTUNE_AXIS_PITCH = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_DO_AUTOTUNE_ENABLE_param2.AUTOTUNE_AXIS_PITCH", "AUTOTUNE_AXIS_PITCH", 3, nil, 2)
f.cmd_MAV_CMD_DO_AUTOTUNE_ENABLE_param2_flagAUTOTUNE_AXIS_YAW = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_DO_AUTOTUNE_ENABLE_param2.AUTOTUNE_AXIS_YAW", "AUTOTUNE_AXIS_YAW", 3, nil, 4)

f.cmd_MAV_CMD_NAV_SET_YAW_SPEED_param1 = ProtoField.new("param1: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_NAV_SET_YAW_SPEED_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_SET_YAW_SPEED_param2 = ProtoField.new("param2: Speed (float)", "mavlink_proto.cmd_MAV_CMD_NAV_SET_YAW_SPEED_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_SET_YAW_SPEED_param3 = ProtoField.new("param3: Angle (float)", "mavlink_proto.cmd_MAV_CMD_NAV_SET_YAW_SPEED_param3", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL_param1 = ProtoField.new("param1: Trigger Cycle (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL_param2 = ProtoField.new("param2: Shutter Integration (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_SET_RESUME_REPEAT_DIST_param1 = ProtoField.new("param1: Distance (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_RESUME_REPEAT_DIST_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_SPRAYER_param1 = ProtoField.new("param1: Sprayer Enable (float)", "mavlink_proto.cmd_MAV_CMD_DO_SPRAYER_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_SEND_SCRIPT_MESSAGE_param1 = ProtoField.new("param1: ID (float)", "mavlink_proto.cmd_MAV_CMD_DO_SEND_SCRIPT_MESSAGE_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SEND_SCRIPT_MESSAGE_param2 = ProtoField.new("param2: param 1 (float)", "mavlink_proto.cmd_MAV_CMD_DO_SEND_SCRIPT_MESSAGE_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SEND_SCRIPT_MESSAGE_param3 = ProtoField.new("param3: param 2 (float)", "mavlink_proto.cmd_MAV_CMD_DO_SEND_SCRIPT_MESSAGE_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_SEND_SCRIPT_MESSAGE_param4 = ProtoField.new("param4: param 3 (float)", "mavlink_proto.cmd_MAV_CMD_DO_SEND_SCRIPT_MESSAGE_param4", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_AUX_FUNCTION_param1 = ProtoField.new("param1: AuxiliaryFunction (float)", "mavlink_proto.cmd_MAV_CMD_DO_AUX_FUNCTION_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_AUX_FUNCTION_param2 = ProtoField.new("param2: SwitchPosition (MAV_CMD_DO_AUX_FUNCTION_SWITCH_LEVEL)", "mavlink_proto.cmd_MAV_CMD_DO_AUX_FUNCTION_param2", ftypes.UINT32, enumEntryName.MAV_CMD_DO_AUX_FUNCTION_SWITCH_LEVEL)

f.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param1 = ProtoField.new("param1: Q1 (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param2 = ProtoField.new("param2: Q2 (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param3 = ProtoField.new("param3: Q3 (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param4 = ProtoField.new("param4: Q4 (float)", "mavlink_proto.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param4", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_GUIDED_MASTER_param1 = ProtoField.new("param1: System ID (float)", "mavlink_proto.cmd_MAV_CMD_DO_GUIDED_MASTER_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GUIDED_MASTER_param2 = ProtoField.new("param2: Component ID (float)", "mavlink_proto.cmd_MAV_CMD_DO_GUIDED_MASTER_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_GUIDED_LIMITS_param1 = ProtoField.new("param1: Timeout (float)", "mavlink_proto.cmd_MAV_CMD_DO_GUIDED_LIMITS_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GUIDED_LIMITS_param2 = ProtoField.new("param2: Min Altitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_GUIDED_LIMITS_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GUIDED_LIMITS_param3 = ProtoField.new("param3: Max Altitude (float)", "mavlink_proto.cmd_MAV_CMD_DO_GUIDED_LIMITS_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GUIDED_LIMITS_param4 = ProtoField.new("param4: Horiz. Move Limit (float)", "mavlink_proto.cmd_MAV_CMD_DO_GUIDED_LIMITS_param4", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_ENGINE_CONTROL_param1 = ProtoField.new("param1: Start Engine (float)", "mavlink_proto.cmd_MAV_CMD_DO_ENGINE_CONTROL_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_ENGINE_CONTROL_param2 = ProtoField.new("param2: Cold Start (float)", "mavlink_proto.cmd_MAV_CMD_DO_ENGINE_CONTROL_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_ENGINE_CONTROL_param3 = ProtoField.new("param3: Height Delay (float)", "mavlink_proto.cmd_MAV_CMD_DO_ENGINE_CONTROL_param3", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_SET_MISSION_CURRENT_param1 = ProtoField.new("param1: Number (float)", "mavlink_proto.cmd_MAV_CMD_DO_SET_MISSION_CURRENT_param1", ftypes.FLOAT, nil)


f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param1 = ProtoField.new("param1: Gyro Temperature (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param2 = ProtoField.new("param2: Magnetometer (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param3 = ProtoField.new("param3: Ground Pressure (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param4 = ProtoField.new("param4: Remote Control (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param5 = ProtoField.new("param5: Accelerometer (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param6 = ProtoField.new("param6: Compmot or Airspeed (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param7 = ProtoField.new("param7: ESC or Baro (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param1 = ProtoField.new("param1: Sensor Type (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param2 = ProtoField.new("param2: X Offset (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param3 = ProtoField.new("param3: Y Offset (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param4 = ProtoField.new("param4: Z Offset (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param5 = ProtoField.new("param5: 4th Dimension (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param6 = ProtoField.new("param6: 5th Dimension (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param7 = ProtoField.new("param7: 6th Dimension (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_PREFLIGHT_UAVCAN_param1 = ProtoField.new("param1: Actuator ID (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_UAVCAN_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_PREFLIGHT_STORAGE_param1 = ProtoField.new("param1: Parameter Storage (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_STORAGE_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_STORAGE_param2 = ProtoField.new("param2: Mission Storage (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_STORAGE_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_STORAGE_param3 = ProtoField.new("param3: Logging Rate (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_STORAGE_param3", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN_param1 = ProtoField.new("param1: Autopilot (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN_param2 = ProtoField.new("param2: Companion (float)", "mavlink_proto.cmd_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_OVERRIDE_GOTO_param1 = ProtoField.new("param1: Continue (MAV_GOTO)", "mavlink_proto.cmd_MAV_CMD_OVERRIDE_GOTO_param1", ftypes.UINT32, enumEntryName.MAV_GOTO)
f.cmd_MAV_CMD_OVERRIDE_GOTO_param2 = ProtoField.new("param2: Position (MAV_GOTO)", "mavlink_proto.cmd_MAV_CMD_OVERRIDE_GOTO_param2", ftypes.UINT32, enumEntryName.MAV_GOTO)
f.cmd_MAV_CMD_OVERRIDE_GOTO_param3 = ProtoField.new("param3: Frame (MAV_FRAME)", "mavlink_proto.cmd_MAV_CMD_OVERRIDE_GOTO_param3", ftypes.UINT32, enumEntryName.MAV_FRAME)
f.cmd_MAV_CMD_OVERRIDE_GOTO_param4 = ProtoField.new("param4: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_OVERRIDE_GOTO_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_OVERRIDE_GOTO_param5 = ProtoField.new("param5: Latitude/X (float)", "mavlink_proto.cmd_MAV_CMD_OVERRIDE_GOTO_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_OVERRIDE_GOTO_param6 = ProtoField.new("param6: Longitude/Y (float)", "mavlink_proto.cmd_MAV_CMD_OVERRIDE_GOTO_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_OVERRIDE_GOTO_param7 = ProtoField.new("param7: Altitude/Z (float)", "mavlink_proto.cmd_MAV_CMD_OVERRIDE_GOTO_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_OBLIQUE_SURVEY_param1 = ProtoField.new("param1: Distance (float)", "mavlink_proto.cmd_MAV_CMD_OBLIQUE_SURVEY_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_OBLIQUE_SURVEY_param2 = ProtoField.new("param2: Shutter (float)", "mavlink_proto.cmd_MAV_CMD_OBLIQUE_SURVEY_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_OBLIQUE_SURVEY_param3 = ProtoField.new("param3: Min Interval (float)", "mavlink_proto.cmd_MAV_CMD_OBLIQUE_SURVEY_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_OBLIQUE_SURVEY_param4 = ProtoField.new("param4: Positions (float)", "mavlink_proto.cmd_MAV_CMD_OBLIQUE_SURVEY_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_OBLIQUE_SURVEY_param5 = ProtoField.new("param5: Roll Angle (float)", "mavlink_proto.cmd_MAV_CMD_OBLIQUE_SURVEY_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_OBLIQUE_SURVEY_param6 = ProtoField.new("param6: Pitch Angle (float)", "mavlink_proto.cmd_MAV_CMD_OBLIQUE_SURVEY_param6", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_MISSION_START_param1 = ProtoField.new("param1: First Item (float)", "mavlink_proto.cmd_MAV_CMD_MISSION_START_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_MISSION_START_param2 = ProtoField.new("param2: Last Item (float)", "mavlink_proto.cmd_MAV_CMD_MISSION_START_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_COMPONENT_ARM_DISARM_param1 = ProtoField.new("param1: Arm (float)", "mavlink_proto.cmd_MAV_CMD_COMPONENT_ARM_DISARM_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_COMPONENT_ARM_DISARM_param2 = ProtoField.new("param2: Force (float)", "mavlink_proto.cmd_MAV_CMD_COMPONENT_ARM_DISARM_param2", ftypes.FLOAT, nil)



f.cmd_MAV_CMD_START_RX_PAIR_param1 = ProtoField.new("param1: Spektrum (float)", "mavlink_proto.cmd_MAV_CMD_START_RX_PAIR_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_START_RX_PAIR_param2 = ProtoField.new("param2: RC Type (RC_TYPE)", "mavlink_proto.cmd_MAV_CMD_START_RX_PAIR_param2", ftypes.UINT32, enumEntryName.RC_TYPE)

f.cmd_MAV_CMD_GET_MESSAGE_INTERVAL_param1 = ProtoField.new("param1: Message ID (float)", "mavlink_proto.cmd_MAV_CMD_GET_MESSAGE_INTERVAL_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_SET_MESSAGE_INTERVAL_param1 = ProtoField.new("param1: Message ID (float)", "mavlink_proto.cmd_MAV_CMD_SET_MESSAGE_INTERVAL_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SET_MESSAGE_INTERVAL_param2 = ProtoField.new("param2: Interval (float)", "mavlink_proto.cmd_MAV_CMD_SET_MESSAGE_INTERVAL_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SET_MESSAGE_INTERVAL_param7 = ProtoField.new("param7: Response Target (float)", "mavlink_proto.cmd_MAV_CMD_SET_MESSAGE_INTERVAL_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_REQUEST_MESSAGE_param1 = ProtoField.new("param1: Message ID (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_MESSAGE_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_REQUEST_MESSAGE_param2 = ProtoField.new("param2: Req Param 1 (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_MESSAGE_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_REQUEST_MESSAGE_param3 = ProtoField.new("param3: Req Param 2 (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_MESSAGE_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_REQUEST_MESSAGE_param4 = ProtoField.new("param4: Req Param 3 (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_MESSAGE_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_REQUEST_MESSAGE_param5 = ProtoField.new("param5: Req Param 4 (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_MESSAGE_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_REQUEST_MESSAGE_param6 = ProtoField.new("param6: Req Param 5 (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_MESSAGE_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_REQUEST_MESSAGE_param7 = ProtoField.new("param7: Response Target (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_MESSAGE_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_REQUEST_PROTOCOL_VERSION_param1 = ProtoField.new("param1: Protocol (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_PROTOCOL_VERSION_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES_param1 = ProtoField.new("param1: Version (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_REQUEST_CAMERA_INFORMATION_param1 = ProtoField.new("param1: Capabilities (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_CAMERA_INFORMATION_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_REQUEST_CAMERA_SETTINGS_param1 = ProtoField.new("param1: Settings (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_CAMERA_SETTINGS_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_REQUEST_STORAGE_INFORMATION_param1 = ProtoField.new("param1: Storage ID (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_STORAGE_INFORMATION_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_REQUEST_STORAGE_INFORMATION_param2 = ProtoField.new("param2: Information (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_STORAGE_INFORMATION_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_STORAGE_FORMAT_param1 = ProtoField.new("param1: Storage ID (float)", "mavlink_proto.cmd_MAV_CMD_STORAGE_FORMAT_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_STORAGE_FORMAT_param2 = ProtoField.new("param2: Format (float)", "mavlink_proto.cmd_MAV_CMD_STORAGE_FORMAT_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS_param1 = ProtoField.new("param1: Capture Status (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_REQUEST_FLIGHT_INFORMATION_param1 = ProtoField.new("param1: Flight Information (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_FLIGHT_INFORMATION_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_RESET_CAMERA_SETTINGS_param1 = ProtoField.new("param1: Reset (float)", "mavlink_proto.cmd_MAV_CMD_RESET_CAMERA_SETTINGS_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_SET_CAMERA_MODE_param2 = ProtoField.new("param2: Camera Mode (CAMERA_MODE)", "mavlink_proto.cmd_MAV_CMD_SET_CAMERA_MODE_param2", ftypes.UINT32, enumEntryName.CAMERA_MODE)

f.cmd_MAV_CMD_SET_CAMERA_ZOOM_param1 = ProtoField.new("param1: Zoom Type (CAMERA_ZOOM_TYPE)", "mavlink_proto.cmd_MAV_CMD_SET_CAMERA_ZOOM_param1", ftypes.UINT32, enumEntryName.CAMERA_ZOOM_TYPE)
f.cmd_MAV_CMD_SET_CAMERA_ZOOM_param2 = ProtoField.new("param2: Zoom Value (float)", "mavlink_proto.cmd_MAV_CMD_SET_CAMERA_ZOOM_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_SET_CAMERA_FOCUS_param1 = ProtoField.new("param1: Focus Type (SET_FOCUS_TYPE)", "mavlink_proto.cmd_MAV_CMD_SET_CAMERA_FOCUS_param1", ftypes.UINT32, enumEntryName.SET_FOCUS_TYPE)
f.cmd_MAV_CMD_SET_CAMERA_FOCUS_param2 = ProtoField.new("param2: Focus Value (float)", "mavlink_proto.cmd_MAV_CMD_SET_CAMERA_FOCUS_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_JUMP_TAG_param1 = ProtoField.new("param1: Tag (float)", "mavlink_proto.cmd_MAV_CMD_JUMP_TAG_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_JUMP_TAG_param1 = ProtoField.new("param1: Tag (float)", "mavlink_proto.cmd_MAV_CMD_DO_JUMP_TAG_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_JUMP_TAG_param2 = ProtoField.new("param2: Repeat (float)", "mavlink_proto.cmd_MAV_CMD_DO_JUMP_TAG_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param1 = ProtoField.new("param1: Pitch angle (float)", "mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param2 = ProtoField.new("param2: Yaw angle (float)", "mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param3 = ProtoField.new("param3: Pitch rate (float)", "mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param4 = ProtoField.new("param4: Yaw rate (float)", "mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5 = ProtoField.new("param5: Gimbal manager flags (GIMBAL_MANAGER_FLAGS)", "mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5", ftypes.UINT32, nil)
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5_flagGIMBAL_MANAGER_FLAGS_RETRACT = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5.GIMBAL_MANAGER_FLAGS_RETRACT", "GIMBAL_MANAGER_FLAGS_RETRACT", 5, nil, 1)
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5_flagGIMBAL_MANAGER_FLAGS_NEUTRAL = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5.GIMBAL_MANAGER_FLAGS_NEUTRAL", "GIMBAL_MANAGER_FLAGS_NEUTRAL", 5, nil, 2)
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5_flagGIMBAL_MANAGER_FLAGS_ROLL_LOCK = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5.GIMBAL_MANAGER_FLAGS_ROLL_LOCK", "GIMBAL_MANAGER_FLAGS_ROLL_LOCK", 5, nil, 4)
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5_flagGIMBAL_MANAGER_FLAGS_PITCH_LOCK = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5.GIMBAL_MANAGER_FLAGS_PITCH_LOCK", "GIMBAL_MANAGER_FLAGS_PITCH_LOCK", 5, nil, 8)
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5_flagGIMBAL_MANAGER_FLAGS_YAW_LOCK = ProtoField.bool("mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5.GIMBAL_MANAGER_FLAGS_YAW_LOCK", "GIMBAL_MANAGER_FLAGS_YAW_LOCK", 5, nil, 16)
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param7 = ProtoField.new("param7: Gimbal device ID (float)", "mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param1 = ProtoField.new("param1: sysid primary control (float)", "mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param2 = ProtoField.new("param2: compid primary control (float)", "mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param3 = ProtoField.new("param3: sysid secondary control (float)", "mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param4 = ProtoField.new("param4: compid secondary control (float)", "mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param7 = ProtoField.new("param7: Gimbal device ID (float)", "mavlink_proto.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_IMAGE_START_CAPTURE_param2 = ProtoField.new("param2: Interval (float)", "mavlink_proto.cmd_MAV_CMD_IMAGE_START_CAPTURE_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_IMAGE_START_CAPTURE_param3 = ProtoField.new("param3: Total Images (float)", "mavlink_proto.cmd_MAV_CMD_IMAGE_START_CAPTURE_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_IMAGE_START_CAPTURE_param4 = ProtoField.new("param4: Sequence Number (float)", "mavlink_proto.cmd_MAV_CMD_IMAGE_START_CAPTURE_param4", ftypes.FLOAT, nil)


f.cmd_MAV_CMD_DO_TRIGGER_CONTROL_param1 = ProtoField.new("param1: Enable (float)", "mavlink_proto.cmd_MAV_CMD_DO_TRIGGER_CONTROL_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_TRIGGER_CONTROL_param2 = ProtoField.new("param2: Reset (float)", "mavlink_proto.cmd_MAV_CMD_DO_TRIGGER_CONTROL_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_TRIGGER_CONTROL_param3 = ProtoField.new("param3: Pause (float)", "mavlink_proto.cmd_MAV_CMD_DO_TRIGGER_CONTROL_param3", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_CAMERA_TRACK_POINT_param1 = ProtoField.new("param1: Point x (float)", "mavlink_proto.cmd_MAV_CMD_CAMERA_TRACK_POINT_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_CAMERA_TRACK_POINT_param2 = ProtoField.new("param2: Point y (float)", "mavlink_proto.cmd_MAV_CMD_CAMERA_TRACK_POINT_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_CAMERA_TRACK_POINT_param3 = ProtoField.new("param3: Radius (float)", "mavlink_proto.cmd_MAV_CMD_CAMERA_TRACK_POINT_param3", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param1 = ProtoField.new("param1: Top left corner x (float)", "mavlink_proto.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param2 = ProtoField.new("param2: Top left corner y (float)", "mavlink_proto.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param3 = ProtoField.new("param3: Bottom right corner x (float)", "mavlink_proto.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param4 = ProtoField.new("param4: Bottom right corner y (float)", "mavlink_proto.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param4", ftypes.FLOAT, nil)


f.cmd_MAV_CMD_VIDEO_START_CAPTURE_param1 = ProtoField.new("param1: Stream ID (float)", "mavlink_proto.cmd_MAV_CMD_VIDEO_START_CAPTURE_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_VIDEO_START_CAPTURE_param2 = ProtoField.new("param2: Status Frequency (float)", "mavlink_proto.cmd_MAV_CMD_VIDEO_START_CAPTURE_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_VIDEO_STOP_CAPTURE_param1 = ProtoField.new("param1: Stream ID (float)", "mavlink_proto.cmd_MAV_CMD_VIDEO_STOP_CAPTURE_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_VIDEO_START_STREAMING_param1 = ProtoField.new("param1: Stream ID (float)", "mavlink_proto.cmd_MAV_CMD_VIDEO_START_STREAMING_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_VIDEO_STOP_STREAMING_param1 = ProtoField.new("param1: Stream ID (float)", "mavlink_proto.cmd_MAV_CMD_VIDEO_STOP_STREAMING_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION_param1 = ProtoField.new("param1: Stream ID (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_REQUEST_VIDEO_STREAM_STATUS_param1 = ProtoField.new("param1: Stream ID (float)", "mavlink_proto.cmd_MAV_CMD_REQUEST_VIDEO_STREAM_STATUS_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_LOGGING_START_param1 = ProtoField.new("param1: Format (float)", "mavlink_proto.cmd_MAV_CMD_LOGGING_START_param1", ftypes.FLOAT, nil)


f.cmd_MAV_CMD_AIRFRAME_CONFIGURATION_param1 = ProtoField.new("param1: Landing Gear ID (float)", "mavlink_proto.cmd_MAV_CMD_AIRFRAME_CONFIGURATION_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_AIRFRAME_CONFIGURATION_param2 = ProtoField.new("param2: Landing Gear Position (float)", "mavlink_proto.cmd_MAV_CMD_AIRFRAME_CONFIGURATION_param2", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_CONTROL_HIGH_LATENCY_param1 = ProtoField.new("param1: Enable (float)", "mavlink_proto.cmd_MAV_CMD_CONTROL_HIGH_LATENCY_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_PANORAMA_CREATE_param1 = ProtoField.new("param1: Horizontal Angle (float)", "mavlink_proto.cmd_MAV_CMD_PANORAMA_CREATE_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PANORAMA_CREATE_param2 = ProtoField.new("param2: Vertical Angle (float)", "mavlink_proto.cmd_MAV_CMD_PANORAMA_CREATE_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PANORAMA_CREATE_param3 = ProtoField.new("param3: Horizontal Speed (float)", "mavlink_proto.cmd_MAV_CMD_PANORAMA_CREATE_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PANORAMA_CREATE_param4 = ProtoField.new("param4: Vertical Speed (float)", "mavlink_proto.cmd_MAV_CMD_PANORAMA_CREATE_param4", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_VTOL_TRANSITION_param1 = ProtoField.new("param1: State (MAV_VTOL_STATE)", "mavlink_proto.cmd_MAV_CMD_DO_VTOL_TRANSITION_param1", ftypes.UINT32, enumEntryName.MAV_VTOL_STATE)

f.cmd_MAV_CMD_ARM_AUTHORIZATION_REQUEST_param1 = ProtoField.new("param1: System ID (float)", "mavlink_proto.cmd_MAV_CMD_ARM_AUTHORIZATION_REQUEST_param1", ftypes.FLOAT, nil)


f.cmd_MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE_param1 = ProtoField.new("param1: Radius (float)", "mavlink_proto.cmd_MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE_param6", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_FENCE_RETURN_POINT_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_RETURN_POINT_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FENCE_RETURN_POINT_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_RETURN_POINT_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FENCE_RETURN_POINT_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_RETURN_POINT_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param1 = ProtoField.new("param1: Vertex Count (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param2 = ProtoField.new("param2: Inclusion Group (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param6", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION_param1 = ProtoField.new("param1: Vertex Count (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION_param6", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param1 = ProtoField.new("param1: Radius (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param2 = ProtoField.new("param2: Inclusion Group (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param6", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION_param1 = ProtoField.new("param1: Radius (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION_param6", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_RALLY_POINT_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_RALLY_POINT_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_RALLY_POINT_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_RALLY_POINT_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_RALLY_POINT_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_NAV_RALLY_POINT_param7", ftypes.FLOAT, nil)




f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param1 = ProtoField.new("param1: Operation Mode (float)", "mavlink_proto.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param2 = ProtoField.new("param2: Approach Vector (float)", "mavlink_proto.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param3 = ProtoField.new("param3: Ground Speed (float)", "mavlink_proto.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param4 = ProtoField.new("param4: Altitude Clearance (float)", "mavlink_proto.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_PAYLOAD_CONTROL_DEPLOY_param1 = ProtoField.new("param1: Operation Mode (float)", "mavlink_proto.cmd_MAV_CMD_PAYLOAD_CONTROL_DEPLOY_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_WAYPOINT_USER_1_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_1_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_WAYPOINT_USER_1_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_1_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_WAYPOINT_USER_1_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_1_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_WAYPOINT_USER_2_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_2_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_WAYPOINT_USER_2_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_2_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_WAYPOINT_USER_2_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_2_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_WAYPOINT_USER_3_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_3_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_WAYPOINT_USER_3_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_3_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_WAYPOINT_USER_3_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_3_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_WAYPOINT_USER_4_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_4_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_WAYPOINT_USER_4_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_4_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_WAYPOINT_USER_4_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_4_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_WAYPOINT_USER_5_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_5_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_WAYPOINT_USER_5_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_5_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_WAYPOINT_USER_5_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_WAYPOINT_USER_5_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_SPATIAL_USER_1_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_1_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SPATIAL_USER_1_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_1_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SPATIAL_USER_1_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_1_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_SPATIAL_USER_2_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_2_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SPATIAL_USER_2_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_2_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SPATIAL_USER_2_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_2_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_SPATIAL_USER_3_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_3_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SPATIAL_USER_3_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_3_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SPATIAL_USER_3_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_3_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_SPATIAL_USER_4_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_4_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SPATIAL_USER_4_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_4_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SPATIAL_USER_4_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_4_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_SPATIAL_USER_5_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_5_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SPATIAL_USER_5_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_5_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_SPATIAL_USER_5_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_SPATIAL_USER_5_param7", ftypes.FLOAT, nil)






f.cmd_MAV_CMD_CAN_FORWARD_param1 = ProtoField.new("param1: bus (float)", "mavlink_proto.cmd_MAV_CMD_CAN_FORWARD_param1", ftypes.FLOAT, nil)



f.cmd_MAV_CMD_SOLO_BTN_FLY_HOLD_param1 = ProtoField.new("param1: Takeoff Altitude (float)", "mavlink_proto.cmd_MAV_CMD_SOLO_BTN_FLY_HOLD_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_SOLO_BTN_PAUSE_CLICK_param1 = ProtoField.new("param1: Shot Mode (float)", "mavlink_proto.cmd_MAV_CMD_SOLO_BTN_PAUSE_CLICK_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_FIXED_MAG_CAL_param1 = ProtoField.new("param1: Declination (float)", "mavlink_proto.cmd_MAV_CMD_FIXED_MAG_CAL_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_FIXED_MAG_CAL_param2 = ProtoField.new("param2: Inclination (float)", "mavlink_proto.cmd_MAV_CMD_FIXED_MAG_CAL_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_FIXED_MAG_CAL_param3 = ProtoField.new("param3: Intensity (float)", "mavlink_proto.cmd_MAV_CMD_FIXED_MAG_CAL_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_FIXED_MAG_CAL_param4 = ProtoField.new("param4: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_FIXED_MAG_CAL_param4", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_FIXED_MAG_CAL_FIELD_param1 = ProtoField.new("param1: Field X (float)", "mavlink_proto.cmd_MAV_CMD_FIXED_MAG_CAL_FIELD_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_FIXED_MAG_CAL_FIELD_param2 = ProtoField.new("param2: Field Y (float)", "mavlink_proto.cmd_MAV_CMD_FIXED_MAG_CAL_FIELD_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_FIXED_MAG_CAL_FIELD_param3 = ProtoField.new("param3: Field Z (float)", "mavlink_proto.cmd_MAV_CMD_FIXED_MAG_CAL_FIELD_param3", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param1 = ProtoField.new("param1: Yaw (float)", "mavlink_proto.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param2 = ProtoField.new("param2: CompassMask (float)", "mavlink_proto.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param3 = ProtoField.new("param3: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param4 = ProtoField.new("param4: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param4", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_SET_EKF_SOURCE_SET_param1 = ProtoField.new("param1: SourceSetId (float)", "mavlink_proto.cmd_MAV_CMD_SET_EKF_SOURCE_SET_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_START_MAG_CAL_param1 = ProtoField.new("param1: Magnetometers Bitmask (float)", "mavlink_proto.cmd_MAV_CMD_DO_START_MAG_CAL_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_START_MAG_CAL_param2 = ProtoField.new("param2: Retry on Failure (float)", "mavlink_proto.cmd_MAV_CMD_DO_START_MAG_CAL_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_START_MAG_CAL_param3 = ProtoField.new("param3: Autosave (float)", "mavlink_proto.cmd_MAV_CMD_DO_START_MAG_CAL_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_START_MAG_CAL_param4 = ProtoField.new("param4: Delay (float)", "mavlink_proto.cmd_MAV_CMD_DO_START_MAG_CAL_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_START_MAG_CAL_param5 = ProtoField.new("param5: Autoreboot (float)", "mavlink_proto.cmd_MAV_CMD_DO_START_MAG_CAL_param5", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_ACCEPT_MAG_CAL_param1 = ProtoField.new("param1: Magnetometers Bitmask (float)", "mavlink_proto.cmd_MAV_CMD_DO_ACCEPT_MAG_CAL_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_DO_CANCEL_MAG_CAL_param1 = ProtoField.new("param1: Magnetometers Bitmask (float)", "mavlink_proto.cmd_MAV_CMD_DO_CANCEL_MAG_CAL_param1", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_SET_FACTORY_TEST_MODE_param1 = ProtoField.new("param1: Test Mode (float)", "mavlink_proto.cmd_MAV_CMD_SET_FACTORY_TEST_MODE_param1", ftypes.FLOAT, nil)


f.cmd_MAV_CMD_ACCELCAL_VEHICLE_POS_param1 = ProtoField.new("param1: Position (ACCELCAL_VEHICLE_POS)", "mavlink_proto.cmd_MAV_CMD_ACCELCAL_VEHICLE_POS_param1", ftypes.UINT32, enumEntryName.ACCELCAL_VEHICLE_POS)


f.cmd_MAV_CMD_GIMBAL_AXIS_CALIBRATION_STATUS_param1 = ProtoField.new("param1: Axis (GIMBAL_AXIS)", "mavlink_proto.cmd_MAV_CMD_GIMBAL_AXIS_CALIBRATION_STATUS_param1", ftypes.UINT32, enumEntryName.GIMBAL_AXIS)
f.cmd_MAV_CMD_GIMBAL_AXIS_CALIBRATION_STATUS_param2 = ProtoField.new("param2: Progress (float)", "mavlink_proto.cmd_MAV_CMD_GIMBAL_AXIS_CALIBRATION_STATUS_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_GIMBAL_AXIS_CALIBRATION_STATUS_param3 = ProtoField.new("param3: Status (GIMBAL_AXIS_CALIBRATION_STATUS)", "mavlink_proto.cmd_MAV_CMD_GIMBAL_AXIS_CALIBRATION_STATUS_param3", ftypes.UINT32, enumEntryName.GIMBAL_AXIS_CALIBRATION_STATUS)



f.cmd_MAV_CMD_DO_WINCH_param1 = ProtoField.new("param1: Instance (float)", "mavlink_proto.cmd_MAV_CMD_DO_WINCH_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_WINCH_param2 = ProtoField.new("param2: Action (WINCH_ACTIONS)", "mavlink_proto.cmd_MAV_CMD_DO_WINCH_param2", ftypes.UINT32, enumEntryName.WINCH_ACTIONS)
f.cmd_MAV_CMD_DO_WINCH_param3 = ProtoField.new("param3: Length (float)", "mavlink_proto.cmd_MAV_CMD_DO_WINCH_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_DO_WINCH_param4 = ProtoField.new("param4: Rate (float)", "mavlink_proto.cmd_MAV_CMD_DO_WINCH_param4", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_FLASH_BOOTLOADER_param5 = ProtoField.new("param5: Magic Number (float)", "mavlink_proto.cmd_MAV_CMD_FLASH_BOOTLOADER_param5", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_BATTERY_RESET_param1 = ProtoField.new("param1: battery mask (float)", "mavlink_proto.cmd_MAV_CMD_BATTERY_RESET_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_BATTERY_RESET_param2 = ProtoField.new("param2: percentage (float)", "mavlink_proto.cmd_MAV_CMD_BATTERY_RESET_param2", ftypes.FLOAT, nil)



f.cmd_MAV_CMD_NAV_SCRIPT_TIME_param1 = ProtoField.new("param1: command (float)", "mavlink_proto.cmd_MAV_CMD_NAV_SCRIPT_TIME_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_SCRIPT_TIME_param2 = ProtoField.new("param2: timeout (float)", "mavlink_proto.cmd_MAV_CMD_NAV_SCRIPT_TIME_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_SCRIPT_TIME_param3 = ProtoField.new("param3: arg1 (float)", "mavlink_proto.cmd_MAV_CMD_NAV_SCRIPT_TIME_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_SCRIPT_TIME_param4 = ProtoField.new("param4: arg2 (float)", "mavlink_proto.cmd_MAV_CMD_NAV_SCRIPT_TIME_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_SCRIPT_TIME_param5 = ProtoField.new("param5: arg3 (float)", "mavlink_proto.cmd_MAV_CMD_NAV_SCRIPT_TIME_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_SCRIPT_TIME_param6 = ProtoField.new("param6: arg4 (float)", "mavlink_proto.cmd_MAV_CMD_NAV_SCRIPT_TIME_param6", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_NAV_ATTITUDE_TIME_param1 = ProtoField.new("param1: time (float)", "mavlink_proto.cmd_MAV_CMD_NAV_ATTITUDE_TIME_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_ATTITUDE_TIME_param2 = ProtoField.new("param2: roll (float)", "mavlink_proto.cmd_MAV_CMD_NAV_ATTITUDE_TIME_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_ATTITUDE_TIME_param3 = ProtoField.new("param3: pitch (float)", "mavlink_proto.cmd_MAV_CMD_NAV_ATTITUDE_TIME_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_ATTITUDE_TIME_param4 = ProtoField.new("param4: yaw (float)", "mavlink_proto.cmd_MAV_CMD_NAV_ATTITUDE_TIME_param4", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_NAV_ATTITUDE_TIME_param5 = ProtoField.new("param5: climb_rate (float)", "mavlink_proto.cmd_MAV_CMD_NAV_ATTITUDE_TIME_param5", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_GUIDED_CHANGE_SPEED_param1 = ProtoField.new("param1: speed type (SPEED_TYPE)", "mavlink_proto.cmd_MAV_CMD_GUIDED_CHANGE_SPEED_param1", ftypes.UINT32, enumEntryName.SPEED_TYPE)
f.cmd_MAV_CMD_GUIDED_CHANGE_SPEED_param2 = ProtoField.new("param2: speed target (float)", "mavlink_proto.cmd_MAV_CMD_GUIDED_CHANGE_SPEED_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_GUIDED_CHANGE_SPEED_param3 = ProtoField.new("param3: speed rate-of-change (float)", "mavlink_proto.cmd_MAV_CMD_GUIDED_CHANGE_SPEED_param3", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_GUIDED_CHANGE_ALTITUDE_param3 = ProtoField.new("param3: alt rate-of-change (float)", "mavlink_proto.cmd_MAV_CMD_GUIDED_CHANGE_ALTITUDE_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_GUIDED_CHANGE_ALTITUDE_param7 = ProtoField.new("param7: target alt (float)", "mavlink_proto.cmd_MAV_CMD_GUIDED_CHANGE_ALTITUDE_param7", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_GUIDED_CHANGE_HEADING_param1 = ProtoField.new("param1: heading type (HEADING_TYPE)", "mavlink_proto.cmd_MAV_CMD_GUIDED_CHANGE_HEADING_param1", ftypes.UINT32, enumEntryName.HEADING_TYPE)
f.cmd_MAV_CMD_GUIDED_CHANGE_HEADING_param2 = ProtoField.new("param2: heading target (float)", "mavlink_proto.cmd_MAV_CMD_GUIDED_CHANGE_HEADING_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_GUIDED_CHANGE_HEADING_param3 = ProtoField.new("param3: heading rate-of-change (float)", "mavlink_proto.cmd_MAV_CMD_GUIDED_CHANGE_HEADING_param3", ftypes.FLOAT, nil)

f.cmd_MAV_CMD_EXTERNAL_POSITION_ESTIMATE_param1 = ProtoField.new("param1: transmission_time (float)", "mavlink_proto.cmd_MAV_CMD_EXTERNAL_POSITION_ESTIMATE_param1", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_EXTERNAL_POSITION_ESTIMATE_param2 = ProtoField.new("param2: processing_time (float)", "mavlink_proto.cmd_MAV_CMD_EXTERNAL_POSITION_ESTIMATE_param2", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_EXTERNAL_POSITION_ESTIMATE_param3 = ProtoField.new("param3: accuracy (float)", "mavlink_proto.cmd_MAV_CMD_EXTERNAL_POSITION_ESTIMATE_param3", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_EXTERNAL_POSITION_ESTIMATE_param5 = ProtoField.new("param5: Latitude (float)", "mavlink_proto.cmd_MAV_CMD_EXTERNAL_POSITION_ESTIMATE_param5", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_EXTERNAL_POSITION_ESTIMATE_param6 = ProtoField.new("param6: Longitude (float)", "mavlink_proto.cmd_MAV_CMD_EXTERNAL_POSITION_ESTIMATE_param6", ftypes.FLOAT, nil)
f.cmd_MAV_CMD_EXTERNAL_POSITION_ESTIMATE_param7 = ProtoField.new("param7: Altitude (float)", "mavlink_proto.cmd_MAV_CMD_EXTERNAL_POSITION_ESTIMATE_param7", ftypes.FLOAT, nil)


f.SENSOR_OFFSETS_mag_ofs_x = ProtoField.new("mag_ofs_x (int16_t)", "mavlink_proto.SENSOR_OFFSETS_mag_ofs_x", ftypes.INT16, nil)
f.SENSOR_OFFSETS_mag_ofs_y = ProtoField.new("mag_ofs_y (int16_t)", "mavlink_proto.SENSOR_OFFSETS_mag_ofs_y", ftypes.INT16, nil)
f.SENSOR_OFFSETS_mag_ofs_z = ProtoField.new("mag_ofs_z (int16_t)", "mavlink_proto.SENSOR_OFFSETS_mag_ofs_z", ftypes.INT16, nil)
f.SENSOR_OFFSETS_mag_declination = ProtoField.new("mag_declination (float)", "mavlink_proto.SENSOR_OFFSETS_mag_declination", ftypes.FLOAT, nil)
f.SENSOR_OFFSETS_raw_press = ProtoField.new("raw_press (int32_t)", "mavlink_proto.SENSOR_OFFSETS_raw_press", ftypes.INT32, nil)
f.SENSOR_OFFSETS_raw_temp = ProtoField.new("raw_temp (int32_t)", "mavlink_proto.SENSOR_OFFSETS_raw_temp", ftypes.INT32, nil)
f.SENSOR_OFFSETS_gyro_cal_x = ProtoField.new("gyro_cal_x (float)", "mavlink_proto.SENSOR_OFFSETS_gyro_cal_x", ftypes.FLOAT, nil)
f.SENSOR_OFFSETS_gyro_cal_y = ProtoField.new("gyro_cal_y (float)", "mavlink_proto.SENSOR_OFFSETS_gyro_cal_y", ftypes.FLOAT, nil)
f.SENSOR_OFFSETS_gyro_cal_z = ProtoField.new("gyro_cal_z (float)", "mavlink_proto.SENSOR_OFFSETS_gyro_cal_z", ftypes.FLOAT, nil)
f.SENSOR_OFFSETS_accel_cal_x = ProtoField.new("accel_cal_x (float)", "mavlink_proto.SENSOR_OFFSETS_accel_cal_x", ftypes.FLOAT, nil)
f.SENSOR_OFFSETS_accel_cal_y = ProtoField.new("accel_cal_y (float)", "mavlink_proto.SENSOR_OFFSETS_accel_cal_y", ftypes.FLOAT, nil)
f.SENSOR_OFFSETS_accel_cal_z = ProtoField.new("accel_cal_z (float)", "mavlink_proto.SENSOR_OFFSETS_accel_cal_z", ftypes.FLOAT, nil)

f.SET_MAG_OFFSETS_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.SET_MAG_OFFSETS_target_system", ftypes.UINT8, nil)
f.SET_MAG_OFFSETS_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.SET_MAG_OFFSETS_target_component", ftypes.UINT8, nil)
f.SET_MAG_OFFSETS_mag_ofs_x = ProtoField.new("mag_ofs_x (int16_t)", "mavlink_proto.SET_MAG_OFFSETS_mag_ofs_x", ftypes.INT16, nil)
f.SET_MAG_OFFSETS_mag_ofs_y = ProtoField.new("mag_ofs_y (int16_t)", "mavlink_proto.SET_MAG_OFFSETS_mag_ofs_y", ftypes.INT16, nil)
f.SET_MAG_OFFSETS_mag_ofs_z = ProtoField.new("mag_ofs_z (int16_t)", "mavlink_proto.SET_MAG_OFFSETS_mag_ofs_z", ftypes.INT16, nil)

f.MEMINFO_brkval = ProtoField.new("brkval (uint16_t)", "mavlink_proto.MEMINFO_brkval", ftypes.UINT16, nil)
f.MEMINFO_freemem = ProtoField.new("freemem (uint16_t)", "mavlink_proto.MEMINFO_freemem", ftypes.UINT16, nil)
f.MEMINFO_freemem32 = ProtoField.new("freemem32 (uint32_t)", "mavlink_proto.MEMINFO_freemem32", ftypes.UINT32, nil)

f.AP_ADC_adc1 = ProtoField.new("adc1 (uint16_t)", "mavlink_proto.AP_ADC_adc1", ftypes.UINT16, nil)
f.AP_ADC_adc2 = ProtoField.new("adc2 (uint16_t)", "mavlink_proto.AP_ADC_adc2", ftypes.UINT16, nil)
f.AP_ADC_adc3 = ProtoField.new("adc3 (uint16_t)", "mavlink_proto.AP_ADC_adc3", ftypes.UINT16, nil)
f.AP_ADC_adc4 = ProtoField.new("adc4 (uint16_t)", "mavlink_proto.AP_ADC_adc4", ftypes.UINT16, nil)
f.AP_ADC_adc5 = ProtoField.new("adc5 (uint16_t)", "mavlink_proto.AP_ADC_adc5", ftypes.UINT16, nil)
f.AP_ADC_adc6 = ProtoField.new("adc6 (uint16_t)", "mavlink_proto.AP_ADC_adc6", ftypes.UINT16, nil)

f.DIGICAM_CONFIGURE_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.DIGICAM_CONFIGURE_target_system", ftypes.UINT8, nil)
f.DIGICAM_CONFIGURE_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.DIGICAM_CONFIGURE_target_component", ftypes.UINT8, nil)
f.DIGICAM_CONFIGURE_mode = ProtoField.new("mode (uint8_t)", "mavlink_proto.DIGICAM_CONFIGURE_mode", ftypes.UINT8, nil)
f.DIGICAM_CONFIGURE_shutter_speed = ProtoField.new("shutter_speed (uint16_t)", "mavlink_proto.DIGICAM_CONFIGURE_shutter_speed", ftypes.UINT16, nil)
f.DIGICAM_CONFIGURE_aperture = ProtoField.new("aperture (uint8_t)", "mavlink_proto.DIGICAM_CONFIGURE_aperture", ftypes.UINT8, nil)
f.DIGICAM_CONFIGURE_iso = ProtoField.new("iso (uint8_t)", "mavlink_proto.DIGICAM_CONFIGURE_iso", ftypes.UINT8, nil)
f.DIGICAM_CONFIGURE_exposure_type = ProtoField.new("exposure_type (uint8_t)", "mavlink_proto.DIGICAM_CONFIGURE_exposure_type", ftypes.UINT8, nil)
f.DIGICAM_CONFIGURE_command_id = ProtoField.new("command_id (uint8_t)", "mavlink_proto.DIGICAM_CONFIGURE_command_id", ftypes.UINT8, nil)
f.DIGICAM_CONFIGURE_engine_cut_off = ProtoField.new("engine_cut_off (uint8_t)", "mavlink_proto.DIGICAM_CONFIGURE_engine_cut_off", ftypes.UINT8, nil)
f.DIGICAM_CONFIGURE_extra_param = ProtoField.new("extra_param (uint8_t)", "mavlink_proto.DIGICAM_CONFIGURE_extra_param", ftypes.UINT8, nil)
f.DIGICAM_CONFIGURE_extra_value = ProtoField.new("extra_value (float)", "mavlink_proto.DIGICAM_CONFIGURE_extra_value", ftypes.FLOAT, nil)

f.DIGICAM_CONTROL_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.DIGICAM_CONTROL_target_system", ftypes.UINT8, nil)
f.DIGICAM_CONTROL_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.DIGICAM_CONTROL_target_component", ftypes.UINT8, nil)
f.DIGICAM_CONTROL_session = ProtoField.new("session (uint8_t)", "mavlink_proto.DIGICAM_CONTROL_session", ftypes.UINT8, nil)
f.DIGICAM_CONTROL_zoom_pos = ProtoField.new("zoom_pos (uint8_t)", "mavlink_proto.DIGICAM_CONTROL_zoom_pos", ftypes.UINT8, nil)
f.DIGICAM_CONTROL_zoom_step = ProtoField.new("zoom_step (int8_t)", "mavlink_proto.DIGICAM_CONTROL_zoom_step", ftypes.INT8, nil)
f.DIGICAM_CONTROL_focus_lock = ProtoField.new("focus_lock (uint8_t)", "mavlink_proto.DIGICAM_CONTROL_focus_lock", ftypes.UINT8, nil)
f.DIGICAM_CONTROL_shot = ProtoField.new("shot (uint8_t)", "mavlink_proto.DIGICAM_CONTROL_shot", ftypes.UINT8, nil)
f.DIGICAM_CONTROL_command_id = ProtoField.new("command_id (uint8_t)", "mavlink_proto.DIGICAM_CONTROL_command_id", ftypes.UINT8, nil)
f.DIGICAM_CONTROL_extra_param = ProtoField.new("extra_param (uint8_t)", "mavlink_proto.DIGICAM_CONTROL_extra_param", ftypes.UINT8, nil)
f.DIGICAM_CONTROL_extra_value = ProtoField.new("extra_value (float)", "mavlink_proto.DIGICAM_CONTROL_extra_value", ftypes.FLOAT, nil)

f.MOUNT_CONFIGURE_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.MOUNT_CONFIGURE_target_system", ftypes.UINT8, nil)
f.MOUNT_CONFIGURE_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.MOUNT_CONFIGURE_target_component", ftypes.UINT8, nil)
f.MOUNT_CONFIGURE_mount_mode = ProtoField.new("mount_mode (MAV_MOUNT_MODE)", "mavlink_proto.MOUNT_CONFIGURE_mount_mode", ftypes.UINT8, enumEntryName.MAV_MOUNT_MODE)
f.MOUNT_CONFIGURE_stab_roll = ProtoField.new("stab_roll (uint8_t)", "mavlink_proto.MOUNT_CONFIGURE_stab_roll", ftypes.UINT8, nil)
f.MOUNT_CONFIGURE_stab_pitch = ProtoField.new("stab_pitch (uint8_t)", "mavlink_proto.MOUNT_CONFIGURE_stab_pitch", ftypes.UINT8, nil)
f.MOUNT_CONFIGURE_stab_yaw = ProtoField.new("stab_yaw (uint8_t)", "mavlink_proto.MOUNT_CONFIGURE_stab_yaw", ftypes.UINT8, nil)

f.MOUNT_CONTROL_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.MOUNT_CONTROL_target_system", ftypes.UINT8, nil)
f.MOUNT_CONTROL_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.MOUNT_CONTROL_target_component", ftypes.UINT8, nil)
f.MOUNT_CONTROL_input_a = ProtoField.new("input_a (int32_t)", "mavlink_proto.MOUNT_CONTROL_input_a", ftypes.INT32, nil)
f.MOUNT_CONTROL_input_b = ProtoField.new("input_b (int32_t)", "mavlink_proto.MOUNT_CONTROL_input_b", ftypes.INT32, nil)
f.MOUNT_CONTROL_input_c = ProtoField.new("input_c (int32_t)", "mavlink_proto.MOUNT_CONTROL_input_c", ftypes.INT32, nil)
f.MOUNT_CONTROL_save_position = ProtoField.new("save_position (uint8_t)", "mavlink_proto.MOUNT_CONTROL_save_position", ftypes.UINT8, nil)

f.MOUNT_STATUS_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.MOUNT_STATUS_target_system", ftypes.UINT8, nil)
f.MOUNT_STATUS_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.MOUNT_STATUS_target_component", ftypes.UINT8, nil)
f.MOUNT_STATUS_pointing_a = ProtoField.new("pointing_a (int32_t)", "mavlink_proto.MOUNT_STATUS_pointing_a", ftypes.INT32, nil)
f.MOUNT_STATUS_pointing_b = ProtoField.new("pointing_b (int32_t)", "mavlink_proto.MOUNT_STATUS_pointing_b", ftypes.INT32, nil)
f.MOUNT_STATUS_pointing_c = ProtoField.new("pointing_c (int32_t)", "mavlink_proto.MOUNT_STATUS_pointing_c", ftypes.INT32, nil)
f.MOUNT_STATUS_mount_mode = ProtoField.new("mount_mode (MAV_MOUNT_MODE)", "mavlink_proto.MOUNT_STATUS_mount_mode", ftypes.UINT8, enumEntryName.MAV_MOUNT_MODE)

f.FENCE_POINT_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.FENCE_POINT_target_system", ftypes.UINT8, nil)
f.FENCE_POINT_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.FENCE_POINT_target_component", ftypes.UINT8, nil)
f.FENCE_POINT_idx = ProtoField.new("idx (uint8_t)", "mavlink_proto.FENCE_POINT_idx", ftypes.UINT8, nil)
f.FENCE_POINT_count = ProtoField.new("count (uint8_t)", "mavlink_proto.FENCE_POINT_count", ftypes.UINT8, nil)
f.FENCE_POINT_lat = ProtoField.new("lat (float)", "mavlink_proto.FENCE_POINT_lat", ftypes.FLOAT, nil)
f.FENCE_POINT_lng = ProtoField.new("lng (float)", "mavlink_proto.FENCE_POINT_lng", ftypes.FLOAT, nil)

f.FENCE_FETCH_POINT_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.FENCE_FETCH_POINT_target_system", ftypes.UINT8, nil)
f.FENCE_FETCH_POINT_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.FENCE_FETCH_POINT_target_component", ftypes.UINT8, nil)
f.FENCE_FETCH_POINT_idx = ProtoField.new("idx (uint8_t)", "mavlink_proto.FENCE_FETCH_POINT_idx", ftypes.UINT8, nil)

f.AHRS_omegaIx = ProtoField.new("omegaIx (float)", "mavlink_proto.AHRS_omegaIx", ftypes.FLOAT, nil)
f.AHRS_omegaIy = ProtoField.new("omegaIy (float)", "mavlink_proto.AHRS_omegaIy", ftypes.FLOAT, nil)
f.AHRS_omegaIz = ProtoField.new("omegaIz (float)", "mavlink_proto.AHRS_omegaIz", ftypes.FLOAT, nil)
f.AHRS_accel_weight = ProtoField.new("accel_weight (float)", "mavlink_proto.AHRS_accel_weight", ftypes.FLOAT, nil)
f.AHRS_renorm_val = ProtoField.new("renorm_val (float)", "mavlink_proto.AHRS_renorm_val", ftypes.FLOAT, nil)
f.AHRS_error_rp = ProtoField.new("error_rp (float)", "mavlink_proto.AHRS_error_rp", ftypes.FLOAT, nil)
f.AHRS_error_yaw = ProtoField.new("error_yaw (float)", "mavlink_proto.AHRS_error_yaw", ftypes.FLOAT, nil)

f.SIMSTATE_roll = ProtoField.new("roll (float)", "mavlink_proto.SIMSTATE_roll", ftypes.FLOAT, nil)
f.SIMSTATE_pitch = ProtoField.new("pitch (float)", "mavlink_proto.SIMSTATE_pitch", ftypes.FLOAT, nil)
f.SIMSTATE_yaw = ProtoField.new("yaw (float)", "mavlink_proto.SIMSTATE_yaw", ftypes.FLOAT, nil)
f.SIMSTATE_xacc = ProtoField.new("xacc (float)", "mavlink_proto.SIMSTATE_xacc", ftypes.FLOAT, nil)
f.SIMSTATE_yacc = ProtoField.new("yacc (float)", "mavlink_proto.SIMSTATE_yacc", ftypes.FLOAT, nil)
f.SIMSTATE_zacc = ProtoField.new("zacc (float)", "mavlink_proto.SIMSTATE_zacc", ftypes.FLOAT, nil)
f.SIMSTATE_xgyro = ProtoField.new("xgyro (float)", "mavlink_proto.SIMSTATE_xgyro", ftypes.FLOAT, nil)
f.SIMSTATE_ygyro = ProtoField.new("ygyro (float)", "mavlink_proto.SIMSTATE_ygyro", ftypes.FLOAT, nil)
f.SIMSTATE_zgyro = ProtoField.new("zgyro (float)", "mavlink_proto.SIMSTATE_zgyro", ftypes.FLOAT, nil)
f.SIMSTATE_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.SIMSTATE_lat", ftypes.INT32, nil)
f.SIMSTATE_lng = ProtoField.new("lng (int32_t)", "mavlink_proto.SIMSTATE_lng", ftypes.INT32, nil)

f.HWSTATUS_Vcc = ProtoField.new("Vcc (uint16_t)", "mavlink_proto.HWSTATUS_Vcc", ftypes.UINT16, nil)
f.HWSTATUS_I2Cerr = ProtoField.new("I2Cerr (uint8_t)", "mavlink_proto.HWSTATUS_I2Cerr", ftypes.UINT8, nil)

f.RADIO_rssi = ProtoField.new("rssi (uint8_t)", "mavlink_proto.RADIO_rssi", ftypes.UINT8, nil)
f.RADIO_remrssi = ProtoField.new("remrssi (uint8_t)", "mavlink_proto.RADIO_remrssi", ftypes.UINT8, nil)
f.RADIO_txbuf = ProtoField.new("txbuf (uint8_t)", "mavlink_proto.RADIO_txbuf", ftypes.UINT8, nil)
f.RADIO_noise = ProtoField.new("noise (uint8_t)", "mavlink_proto.RADIO_noise", ftypes.UINT8, nil)
f.RADIO_remnoise = ProtoField.new("remnoise (uint8_t)", "mavlink_proto.RADIO_remnoise", ftypes.UINT8, nil)
f.RADIO_rxerrors = ProtoField.new("rxerrors (uint16_t)", "mavlink_proto.RADIO_rxerrors", ftypes.UINT16, nil)
f.RADIO_fixed = ProtoField.new("fixed (uint16_t)", "mavlink_proto.RADIO_fixed", ftypes.UINT16, nil)

f.LIMITS_STATUS_limits_state = ProtoField.new("limits_state (LIMITS_STATE)", "mavlink_proto.LIMITS_STATUS_limits_state", ftypes.UINT8, enumEntryName.LIMITS_STATE)
f.LIMITS_STATUS_last_trigger = ProtoField.new("last_trigger (uint32_t)", "mavlink_proto.LIMITS_STATUS_last_trigger", ftypes.UINT32, nil)
f.LIMITS_STATUS_last_action = ProtoField.new("last_action (uint32_t)", "mavlink_proto.LIMITS_STATUS_last_action", ftypes.UINT32, nil)
f.LIMITS_STATUS_last_recovery = ProtoField.new("last_recovery (uint32_t)", "mavlink_proto.LIMITS_STATUS_last_recovery", ftypes.UINT32, nil)
f.LIMITS_STATUS_last_clear = ProtoField.new("last_clear (uint32_t)", "mavlink_proto.LIMITS_STATUS_last_clear", ftypes.UINT32, nil)
f.LIMITS_STATUS_breach_count = ProtoField.new("breach_count (uint16_t)", "mavlink_proto.LIMITS_STATUS_breach_count", ftypes.UINT16, nil)
f.LIMITS_STATUS_mods_enabled = ProtoField.new("mods_enabled (LIMIT_MODULE)", "mavlink_proto.LIMITS_STATUS_mods_enabled", ftypes.UINT8, nil)
f.LIMITS_STATUS_mods_enabled_flagLIMIT_GPSLOCK = ProtoField.bool("mavlink_proto.LIMITS_STATUS_mods_enabled.LIMIT_GPSLOCK", "LIMIT_GPSLOCK", 3, nil, 1)
f.LIMITS_STATUS_mods_enabled_flagLIMIT_GEOFENCE = ProtoField.bool("mavlink_proto.LIMITS_STATUS_mods_enabled.LIMIT_GEOFENCE", "LIMIT_GEOFENCE", 3, nil, 2)
f.LIMITS_STATUS_mods_enabled_flagLIMIT_ALTITUDE = ProtoField.bool("mavlink_proto.LIMITS_STATUS_mods_enabled.LIMIT_ALTITUDE", "LIMIT_ALTITUDE", 3, nil, 4)
f.LIMITS_STATUS_mods_required = ProtoField.new("mods_required (LIMIT_MODULE)", "mavlink_proto.LIMITS_STATUS_mods_required", ftypes.UINT8, nil)
f.LIMITS_STATUS_mods_required_flagLIMIT_GPSLOCK = ProtoField.bool("mavlink_proto.LIMITS_STATUS_mods_required.LIMIT_GPSLOCK", "LIMIT_GPSLOCK", 3, nil, 1)
f.LIMITS_STATUS_mods_required_flagLIMIT_GEOFENCE = ProtoField.bool("mavlink_proto.LIMITS_STATUS_mods_required.LIMIT_GEOFENCE", "LIMIT_GEOFENCE", 3, nil, 2)
f.LIMITS_STATUS_mods_required_flagLIMIT_ALTITUDE = ProtoField.bool("mavlink_proto.LIMITS_STATUS_mods_required.LIMIT_ALTITUDE", "LIMIT_ALTITUDE", 3, nil, 4)
f.LIMITS_STATUS_mods_triggered = ProtoField.new("mods_triggered (LIMIT_MODULE)", "mavlink_proto.LIMITS_STATUS_mods_triggered", ftypes.UINT8, nil)
f.LIMITS_STATUS_mods_triggered_flagLIMIT_GPSLOCK = ProtoField.bool("mavlink_proto.LIMITS_STATUS_mods_triggered.LIMIT_GPSLOCK", "LIMIT_GPSLOCK", 3, nil, 1)
f.LIMITS_STATUS_mods_triggered_flagLIMIT_GEOFENCE = ProtoField.bool("mavlink_proto.LIMITS_STATUS_mods_triggered.LIMIT_GEOFENCE", "LIMIT_GEOFENCE", 3, nil, 2)
f.LIMITS_STATUS_mods_triggered_flagLIMIT_ALTITUDE = ProtoField.bool("mavlink_proto.LIMITS_STATUS_mods_triggered.LIMIT_ALTITUDE", "LIMIT_ALTITUDE", 3, nil, 4)

f.WIND_direction = ProtoField.new("direction (float)", "mavlink_proto.WIND_direction", ftypes.FLOAT, nil)
f.WIND_speed = ProtoField.new("speed (float)", "mavlink_proto.WIND_speed", ftypes.FLOAT, nil)
f.WIND_speed_z = ProtoField.new("speed_z (float)", "mavlink_proto.WIND_speed_z", ftypes.FLOAT, nil)

f.DATA16_type = ProtoField.new("type (uint8_t)", "mavlink_proto.DATA16_type", ftypes.UINT8, nil)
f.DATA16_len = ProtoField.new("len (uint8_t)", "mavlink_proto.DATA16_len", ftypes.UINT8, nil)
f.DATA16_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.DATA16_data_0", ftypes.UINT8, nil)
f.DATA16_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.DATA16_data_1", ftypes.UINT8, nil)
f.DATA16_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.DATA16_data_2", ftypes.UINT8, nil)
f.DATA16_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.DATA16_data_3", ftypes.UINT8, nil)
f.DATA16_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.DATA16_data_4", ftypes.UINT8, nil)
f.DATA16_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.DATA16_data_5", ftypes.UINT8, nil)
f.DATA16_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.DATA16_data_6", ftypes.UINT8, nil)
f.DATA16_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.DATA16_data_7", ftypes.UINT8, nil)
f.DATA16_data_8 = ProtoField.new("data[8] (uint8_t)", "mavlink_proto.DATA16_data_8", ftypes.UINT8, nil)
f.DATA16_data_9 = ProtoField.new("data[9] (uint8_t)", "mavlink_proto.DATA16_data_9", ftypes.UINT8, nil)
f.DATA16_data_10 = ProtoField.new("data[10] (uint8_t)", "mavlink_proto.DATA16_data_10", ftypes.UINT8, nil)
f.DATA16_data_11 = ProtoField.new("data[11] (uint8_t)", "mavlink_proto.DATA16_data_11", ftypes.UINT8, nil)
f.DATA16_data_12 = ProtoField.new("data[12] (uint8_t)", "mavlink_proto.DATA16_data_12", ftypes.UINT8, nil)
f.DATA16_data_13 = ProtoField.new("data[13] (uint8_t)", "mavlink_proto.DATA16_data_13", ftypes.UINT8, nil)
f.DATA16_data_14 = ProtoField.new("data[14] (uint8_t)", "mavlink_proto.DATA16_data_14", ftypes.UINT8, nil)
f.DATA16_data_15 = ProtoField.new("data[15] (uint8_t)", "mavlink_proto.DATA16_data_15", ftypes.UINT8, nil)

f.DATA32_type = ProtoField.new("type (uint8_t)", "mavlink_proto.DATA32_type", ftypes.UINT8, nil)
f.DATA32_len = ProtoField.new("len (uint8_t)", "mavlink_proto.DATA32_len", ftypes.UINT8, nil)
f.DATA32_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.DATA32_data_0", ftypes.UINT8, nil)
f.DATA32_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.DATA32_data_1", ftypes.UINT8, nil)
f.DATA32_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.DATA32_data_2", ftypes.UINT8, nil)
f.DATA32_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.DATA32_data_3", ftypes.UINT8, nil)
f.DATA32_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.DATA32_data_4", ftypes.UINT8, nil)
f.DATA32_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.DATA32_data_5", ftypes.UINT8, nil)
f.DATA32_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.DATA32_data_6", ftypes.UINT8, nil)
f.DATA32_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.DATA32_data_7", ftypes.UINT8, nil)
f.DATA32_data_8 = ProtoField.new("data[8] (uint8_t)", "mavlink_proto.DATA32_data_8", ftypes.UINT8, nil)
f.DATA32_data_9 = ProtoField.new("data[9] (uint8_t)", "mavlink_proto.DATA32_data_9", ftypes.UINT8, nil)
f.DATA32_data_10 = ProtoField.new("data[10] (uint8_t)", "mavlink_proto.DATA32_data_10", ftypes.UINT8, nil)
f.DATA32_data_11 = ProtoField.new("data[11] (uint8_t)", "mavlink_proto.DATA32_data_11", ftypes.UINT8, nil)
f.DATA32_data_12 = ProtoField.new("data[12] (uint8_t)", "mavlink_proto.DATA32_data_12", ftypes.UINT8, nil)
f.DATA32_data_13 = ProtoField.new("data[13] (uint8_t)", "mavlink_proto.DATA32_data_13", ftypes.UINT8, nil)
f.DATA32_data_14 = ProtoField.new("data[14] (uint8_t)", "mavlink_proto.DATA32_data_14", ftypes.UINT8, nil)
f.DATA32_data_15 = ProtoField.new("data[15] (uint8_t)", "mavlink_proto.DATA32_data_15", ftypes.UINT8, nil)
f.DATA32_data_16 = ProtoField.new("data[16] (uint8_t)", "mavlink_proto.DATA32_data_16", ftypes.UINT8, nil)
f.DATA32_data_17 = ProtoField.new("data[17] (uint8_t)", "mavlink_proto.DATA32_data_17", ftypes.UINT8, nil)
f.DATA32_data_18 = ProtoField.new("data[18] (uint8_t)", "mavlink_proto.DATA32_data_18", ftypes.UINT8, nil)
f.DATA32_data_19 = ProtoField.new("data[19] (uint8_t)", "mavlink_proto.DATA32_data_19", ftypes.UINT8, nil)
f.DATA32_data_20 = ProtoField.new("data[20] (uint8_t)", "mavlink_proto.DATA32_data_20", ftypes.UINT8, nil)
f.DATA32_data_21 = ProtoField.new("data[21] (uint8_t)", "mavlink_proto.DATA32_data_21", ftypes.UINT8, nil)
f.DATA32_data_22 = ProtoField.new("data[22] (uint8_t)", "mavlink_proto.DATA32_data_22", ftypes.UINT8, nil)
f.DATA32_data_23 = ProtoField.new("data[23] (uint8_t)", "mavlink_proto.DATA32_data_23", ftypes.UINT8, nil)
f.DATA32_data_24 = ProtoField.new("data[24] (uint8_t)", "mavlink_proto.DATA32_data_24", ftypes.UINT8, nil)
f.DATA32_data_25 = ProtoField.new("data[25] (uint8_t)", "mavlink_proto.DATA32_data_25", ftypes.UINT8, nil)
f.DATA32_data_26 = ProtoField.new("data[26] (uint8_t)", "mavlink_proto.DATA32_data_26", ftypes.UINT8, nil)
f.DATA32_data_27 = ProtoField.new("data[27] (uint8_t)", "mavlink_proto.DATA32_data_27", ftypes.UINT8, nil)
f.DATA32_data_28 = ProtoField.new("data[28] (uint8_t)", "mavlink_proto.DATA32_data_28", ftypes.UINT8, nil)
f.DATA32_data_29 = ProtoField.new("data[29] (uint8_t)", "mavlink_proto.DATA32_data_29", ftypes.UINT8, nil)
f.DATA32_data_30 = ProtoField.new("data[30] (uint8_t)", "mavlink_proto.DATA32_data_30", ftypes.UINT8, nil)
f.DATA32_data_31 = ProtoField.new("data[31] (uint8_t)", "mavlink_proto.DATA32_data_31", ftypes.UINT8, nil)

f.DATA64_type = ProtoField.new("type (uint8_t)", "mavlink_proto.DATA64_type", ftypes.UINT8, nil)
f.DATA64_len = ProtoField.new("len (uint8_t)", "mavlink_proto.DATA64_len", ftypes.UINT8, nil)
f.DATA64_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.DATA64_data_0", ftypes.UINT8, nil)
f.DATA64_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.DATA64_data_1", ftypes.UINT8, nil)
f.DATA64_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.DATA64_data_2", ftypes.UINT8, nil)
f.DATA64_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.DATA64_data_3", ftypes.UINT8, nil)
f.DATA64_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.DATA64_data_4", ftypes.UINT8, nil)
f.DATA64_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.DATA64_data_5", ftypes.UINT8, nil)
f.DATA64_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.DATA64_data_6", ftypes.UINT8, nil)
f.DATA64_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.DATA64_data_7", ftypes.UINT8, nil)
f.DATA64_data_8 = ProtoField.new("data[8] (uint8_t)", "mavlink_proto.DATA64_data_8", ftypes.UINT8, nil)
f.DATA64_data_9 = ProtoField.new("data[9] (uint8_t)", "mavlink_proto.DATA64_data_9", ftypes.UINT8, nil)
f.DATA64_data_10 = ProtoField.new("data[10] (uint8_t)", "mavlink_proto.DATA64_data_10", ftypes.UINT8, nil)
f.DATA64_data_11 = ProtoField.new("data[11] (uint8_t)", "mavlink_proto.DATA64_data_11", ftypes.UINT8, nil)
f.DATA64_data_12 = ProtoField.new("data[12] (uint8_t)", "mavlink_proto.DATA64_data_12", ftypes.UINT8, nil)
f.DATA64_data_13 = ProtoField.new("data[13] (uint8_t)", "mavlink_proto.DATA64_data_13", ftypes.UINT8, nil)
f.DATA64_data_14 = ProtoField.new("data[14] (uint8_t)", "mavlink_proto.DATA64_data_14", ftypes.UINT8, nil)
f.DATA64_data_15 = ProtoField.new("data[15] (uint8_t)", "mavlink_proto.DATA64_data_15", ftypes.UINT8, nil)
f.DATA64_data_16 = ProtoField.new("data[16] (uint8_t)", "mavlink_proto.DATA64_data_16", ftypes.UINT8, nil)
f.DATA64_data_17 = ProtoField.new("data[17] (uint8_t)", "mavlink_proto.DATA64_data_17", ftypes.UINT8, nil)
f.DATA64_data_18 = ProtoField.new("data[18] (uint8_t)", "mavlink_proto.DATA64_data_18", ftypes.UINT8, nil)
f.DATA64_data_19 = ProtoField.new("data[19] (uint8_t)", "mavlink_proto.DATA64_data_19", ftypes.UINT8, nil)
f.DATA64_data_20 = ProtoField.new("data[20] (uint8_t)", "mavlink_proto.DATA64_data_20", ftypes.UINT8, nil)
f.DATA64_data_21 = ProtoField.new("data[21] (uint8_t)", "mavlink_proto.DATA64_data_21", ftypes.UINT8, nil)
f.DATA64_data_22 = ProtoField.new("data[22] (uint8_t)", "mavlink_proto.DATA64_data_22", ftypes.UINT8, nil)
f.DATA64_data_23 = ProtoField.new("data[23] (uint8_t)", "mavlink_proto.DATA64_data_23", ftypes.UINT8, nil)
f.DATA64_data_24 = ProtoField.new("data[24] (uint8_t)", "mavlink_proto.DATA64_data_24", ftypes.UINT8, nil)
f.DATA64_data_25 = ProtoField.new("data[25] (uint8_t)", "mavlink_proto.DATA64_data_25", ftypes.UINT8, nil)
f.DATA64_data_26 = ProtoField.new("data[26] (uint8_t)", "mavlink_proto.DATA64_data_26", ftypes.UINT8, nil)
f.DATA64_data_27 = ProtoField.new("data[27] (uint8_t)", "mavlink_proto.DATA64_data_27", ftypes.UINT8, nil)
f.DATA64_data_28 = ProtoField.new("data[28] (uint8_t)", "mavlink_proto.DATA64_data_28", ftypes.UINT8, nil)
f.DATA64_data_29 = ProtoField.new("data[29] (uint8_t)", "mavlink_proto.DATA64_data_29", ftypes.UINT8, nil)
f.DATA64_data_30 = ProtoField.new("data[30] (uint8_t)", "mavlink_proto.DATA64_data_30", ftypes.UINT8, nil)
f.DATA64_data_31 = ProtoField.new("data[31] (uint8_t)", "mavlink_proto.DATA64_data_31", ftypes.UINT8, nil)
f.DATA64_data_32 = ProtoField.new("data[32] (uint8_t)", "mavlink_proto.DATA64_data_32", ftypes.UINT8, nil)
f.DATA64_data_33 = ProtoField.new("data[33] (uint8_t)", "mavlink_proto.DATA64_data_33", ftypes.UINT8, nil)
f.DATA64_data_34 = ProtoField.new("data[34] (uint8_t)", "mavlink_proto.DATA64_data_34", ftypes.UINT8, nil)
f.DATA64_data_35 = ProtoField.new("data[35] (uint8_t)", "mavlink_proto.DATA64_data_35", ftypes.UINT8, nil)
f.DATA64_data_36 = ProtoField.new("data[36] (uint8_t)", "mavlink_proto.DATA64_data_36", ftypes.UINT8, nil)
f.DATA64_data_37 = ProtoField.new("data[37] (uint8_t)", "mavlink_proto.DATA64_data_37", ftypes.UINT8, nil)
f.DATA64_data_38 = ProtoField.new("data[38] (uint8_t)", "mavlink_proto.DATA64_data_38", ftypes.UINT8, nil)
f.DATA64_data_39 = ProtoField.new("data[39] (uint8_t)", "mavlink_proto.DATA64_data_39", ftypes.UINT8, nil)
f.DATA64_data_40 = ProtoField.new("data[40] (uint8_t)", "mavlink_proto.DATA64_data_40", ftypes.UINT8, nil)
f.DATA64_data_41 = ProtoField.new("data[41] (uint8_t)", "mavlink_proto.DATA64_data_41", ftypes.UINT8, nil)
f.DATA64_data_42 = ProtoField.new("data[42] (uint8_t)", "mavlink_proto.DATA64_data_42", ftypes.UINT8, nil)
f.DATA64_data_43 = ProtoField.new("data[43] (uint8_t)", "mavlink_proto.DATA64_data_43", ftypes.UINT8, nil)
f.DATA64_data_44 = ProtoField.new("data[44] (uint8_t)", "mavlink_proto.DATA64_data_44", ftypes.UINT8, nil)
f.DATA64_data_45 = ProtoField.new("data[45] (uint8_t)", "mavlink_proto.DATA64_data_45", ftypes.UINT8, nil)
f.DATA64_data_46 = ProtoField.new("data[46] (uint8_t)", "mavlink_proto.DATA64_data_46", ftypes.UINT8, nil)
f.DATA64_data_47 = ProtoField.new("data[47] (uint8_t)", "mavlink_proto.DATA64_data_47", ftypes.UINT8, nil)
f.DATA64_data_48 = ProtoField.new("data[48] (uint8_t)", "mavlink_proto.DATA64_data_48", ftypes.UINT8, nil)
f.DATA64_data_49 = ProtoField.new("data[49] (uint8_t)", "mavlink_proto.DATA64_data_49", ftypes.UINT8, nil)
f.DATA64_data_50 = ProtoField.new("data[50] (uint8_t)", "mavlink_proto.DATA64_data_50", ftypes.UINT8, nil)
f.DATA64_data_51 = ProtoField.new("data[51] (uint8_t)", "mavlink_proto.DATA64_data_51", ftypes.UINT8, nil)
f.DATA64_data_52 = ProtoField.new("data[52] (uint8_t)", "mavlink_proto.DATA64_data_52", ftypes.UINT8, nil)
f.DATA64_data_53 = ProtoField.new("data[53] (uint8_t)", "mavlink_proto.DATA64_data_53", ftypes.UINT8, nil)
f.DATA64_data_54 = ProtoField.new("data[54] (uint8_t)", "mavlink_proto.DATA64_data_54", ftypes.UINT8, nil)
f.DATA64_data_55 = ProtoField.new("data[55] (uint8_t)", "mavlink_proto.DATA64_data_55", ftypes.UINT8, nil)
f.DATA64_data_56 = ProtoField.new("data[56] (uint8_t)", "mavlink_proto.DATA64_data_56", ftypes.UINT8, nil)
f.DATA64_data_57 = ProtoField.new("data[57] (uint8_t)", "mavlink_proto.DATA64_data_57", ftypes.UINT8, nil)
f.DATA64_data_58 = ProtoField.new("data[58] (uint8_t)", "mavlink_proto.DATA64_data_58", ftypes.UINT8, nil)
f.DATA64_data_59 = ProtoField.new("data[59] (uint8_t)", "mavlink_proto.DATA64_data_59", ftypes.UINT8, nil)
f.DATA64_data_60 = ProtoField.new("data[60] (uint8_t)", "mavlink_proto.DATA64_data_60", ftypes.UINT8, nil)
f.DATA64_data_61 = ProtoField.new("data[61] (uint8_t)", "mavlink_proto.DATA64_data_61", ftypes.UINT8, nil)
f.DATA64_data_62 = ProtoField.new("data[62] (uint8_t)", "mavlink_proto.DATA64_data_62", ftypes.UINT8, nil)
f.DATA64_data_63 = ProtoField.new("data[63] (uint8_t)", "mavlink_proto.DATA64_data_63", ftypes.UINT8, nil)

f.DATA96_type = ProtoField.new("type (uint8_t)", "mavlink_proto.DATA96_type", ftypes.UINT8, nil)
f.DATA96_len = ProtoField.new("len (uint8_t)", "mavlink_proto.DATA96_len", ftypes.UINT8, nil)
f.DATA96_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.DATA96_data_0", ftypes.UINT8, nil)
f.DATA96_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.DATA96_data_1", ftypes.UINT8, nil)
f.DATA96_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.DATA96_data_2", ftypes.UINT8, nil)
f.DATA96_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.DATA96_data_3", ftypes.UINT8, nil)
f.DATA96_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.DATA96_data_4", ftypes.UINT8, nil)
f.DATA96_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.DATA96_data_5", ftypes.UINT8, nil)
f.DATA96_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.DATA96_data_6", ftypes.UINT8, nil)
f.DATA96_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.DATA96_data_7", ftypes.UINT8, nil)
f.DATA96_data_8 = ProtoField.new("data[8] (uint8_t)", "mavlink_proto.DATA96_data_8", ftypes.UINT8, nil)
f.DATA96_data_9 = ProtoField.new("data[9] (uint8_t)", "mavlink_proto.DATA96_data_9", ftypes.UINT8, nil)
f.DATA96_data_10 = ProtoField.new("data[10] (uint8_t)", "mavlink_proto.DATA96_data_10", ftypes.UINT8, nil)
f.DATA96_data_11 = ProtoField.new("data[11] (uint8_t)", "mavlink_proto.DATA96_data_11", ftypes.UINT8, nil)
f.DATA96_data_12 = ProtoField.new("data[12] (uint8_t)", "mavlink_proto.DATA96_data_12", ftypes.UINT8, nil)
f.DATA96_data_13 = ProtoField.new("data[13] (uint8_t)", "mavlink_proto.DATA96_data_13", ftypes.UINT8, nil)
f.DATA96_data_14 = ProtoField.new("data[14] (uint8_t)", "mavlink_proto.DATA96_data_14", ftypes.UINT8, nil)
f.DATA96_data_15 = ProtoField.new("data[15] (uint8_t)", "mavlink_proto.DATA96_data_15", ftypes.UINT8, nil)
f.DATA96_data_16 = ProtoField.new("data[16] (uint8_t)", "mavlink_proto.DATA96_data_16", ftypes.UINT8, nil)
f.DATA96_data_17 = ProtoField.new("data[17] (uint8_t)", "mavlink_proto.DATA96_data_17", ftypes.UINT8, nil)
f.DATA96_data_18 = ProtoField.new("data[18] (uint8_t)", "mavlink_proto.DATA96_data_18", ftypes.UINT8, nil)
f.DATA96_data_19 = ProtoField.new("data[19] (uint8_t)", "mavlink_proto.DATA96_data_19", ftypes.UINT8, nil)
f.DATA96_data_20 = ProtoField.new("data[20] (uint8_t)", "mavlink_proto.DATA96_data_20", ftypes.UINT8, nil)
f.DATA96_data_21 = ProtoField.new("data[21] (uint8_t)", "mavlink_proto.DATA96_data_21", ftypes.UINT8, nil)
f.DATA96_data_22 = ProtoField.new("data[22] (uint8_t)", "mavlink_proto.DATA96_data_22", ftypes.UINT8, nil)
f.DATA96_data_23 = ProtoField.new("data[23] (uint8_t)", "mavlink_proto.DATA96_data_23", ftypes.UINT8, nil)
f.DATA96_data_24 = ProtoField.new("data[24] (uint8_t)", "mavlink_proto.DATA96_data_24", ftypes.UINT8, nil)
f.DATA96_data_25 = ProtoField.new("data[25] (uint8_t)", "mavlink_proto.DATA96_data_25", ftypes.UINT8, nil)
f.DATA96_data_26 = ProtoField.new("data[26] (uint8_t)", "mavlink_proto.DATA96_data_26", ftypes.UINT8, nil)
f.DATA96_data_27 = ProtoField.new("data[27] (uint8_t)", "mavlink_proto.DATA96_data_27", ftypes.UINT8, nil)
f.DATA96_data_28 = ProtoField.new("data[28] (uint8_t)", "mavlink_proto.DATA96_data_28", ftypes.UINT8, nil)
f.DATA96_data_29 = ProtoField.new("data[29] (uint8_t)", "mavlink_proto.DATA96_data_29", ftypes.UINT8, nil)
f.DATA96_data_30 = ProtoField.new("data[30] (uint8_t)", "mavlink_proto.DATA96_data_30", ftypes.UINT8, nil)
f.DATA96_data_31 = ProtoField.new("data[31] (uint8_t)", "mavlink_proto.DATA96_data_31", ftypes.UINT8, nil)
f.DATA96_data_32 = ProtoField.new("data[32] (uint8_t)", "mavlink_proto.DATA96_data_32", ftypes.UINT8, nil)
f.DATA96_data_33 = ProtoField.new("data[33] (uint8_t)", "mavlink_proto.DATA96_data_33", ftypes.UINT8, nil)
f.DATA96_data_34 = ProtoField.new("data[34] (uint8_t)", "mavlink_proto.DATA96_data_34", ftypes.UINT8, nil)
f.DATA96_data_35 = ProtoField.new("data[35] (uint8_t)", "mavlink_proto.DATA96_data_35", ftypes.UINT8, nil)
f.DATA96_data_36 = ProtoField.new("data[36] (uint8_t)", "mavlink_proto.DATA96_data_36", ftypes.UINT8, nil)
f.DATA96_data_37 = ProtoField.new("data[37] (uint8_t)", "mavlink_proto.DATA96_data_37", ftypes.UINT8, nil)
f.DATA96_data_38 = ProtoField.new("data[38] (uint8_t)", "mavlink_proto.DATA96_data_38", ftypes.UINT8, nil)
f.DATA96_data_39 = ProtoField.new("data[39] (uint8_t)", "mavlink_proto.DATA96_data_39", ftypes.UINT8, nil)
f.DATA96_data_40 = ProtoField.new("data[40] (uint8_t)", "mavlink_proto.DATA96_data_40", ftypes.UINT8, nil)
f.DATA96_data_41 = ProtoField.new("data[41] (uint8_t)", "mavlink_proto.DATA96_data_41", ftypes.UINT8, nil)
f.DATA96_data_42 = ProtoField.new("data[42] (uint8_t)", "mavlink_proto.DATA96_data_42", ftypes.UINT8, nil)
f.DATA96_data_43 = ProtoField.new("data[43] (uint8_t)", "mavlink_proto.DATA96_data_43", ftypes.UINT8, nil)
f.DATA96_data_44 = ProtoField.new("data[44] (uint8_t)", "mavlink_proto.DATA96_data_44", ftypes.UINT8, nil)
f.DATA96_data_45 = ProtoField.new("data[45] (uint8_t)", "mavlink_proto.DATA96_data_45", ftypes.UINT8, nil)
f.DATA96_data_46 = ProtoField.new("data[46] (uint8_t)", "mavlink_proto.DATA96_data_46", ftypes.UINT8, nil)
f.DATA96_data_47 = ProtoField.new("data[47] (uint8_t)", "mavlink_proto.DATA96_data_47", ftypes.UINT8, nil)
f.DATA96_data_48 = ProtoField.new("data[48] (uint8_t)", "mavlink_proto.DATA96_data_48", ftypes.UINT8, nil)
f.DATA96_data_49 = ProtoField.new("data[49] (uint8_t)", "mavlink_proto.DATA96_data_49", ftypes.UINT8, nil)
f.DATA96_data_50 = ProtoField.new("data[50] (uint8_t)", "mavlink_proto.DATA96_data_50", ftypes.UINT8, nil)
f.DATA96_data_51 = ProtoField.new("data[51] (uint8_t)", "mavlink_proto.DATA96_data_51", ftypes.UINT8, nil)
f.DATA96_data_52 = ProtoField.new("data[52] (uint8_t)", "mavlink_proto.DATA96_data_52", ftypes.UINT8, nil)
f.DATA96_data_53 = ProtoField.new("data[53] (uint8_t)", "mavlink_proto.DATA96_data_53", ftypes.UINT8, nil)
f.DATA96_data_54 = ProtoField.new("data[54] (uint8_t)", "mavlink_proto.DATA96_data_54", ftypes.UINT8, nil)
f.DATA96_data_55 = ProtoField.new("data[55] (uint8_t)", "mavlink_proto.DATA96_data_55", ftypes.UINT8, nil)
f.DATA96_data_56 = ProtoField.new("data[56] (uint8_t)", "mavlink_proto.DATA96_data_56", ftypes.UINT8, nil)
f.DATA96_data_57 = ProtoField.new("data[57] (uint8_t)", "mavlink_proto.DATA96_data_57", ftypes.UINT8, nil)
f.DATA96_data_58 = ProtoField.new("data[58] (uint8_t)", "mavlink_proto.DATA96_data_58", ftypes.UINT8, nil)
f.DATA96_data_59 = ProtoField.new("data[59] (uint8_t)", "mavlink_proto.DATA96_data_59", ftypes.UINT8, nil)
f.DATA96_data_60 = ProtoField.new("data[60] (uint8_t)", "mavlink_proto.DATA96_data_60", ftypes.UINT8, nil)
f.DATA96_data_61 = ProtoField.new("data[61] (uint8_t)", "mavlink_proto.DATA96_data_61", ftypes.UINT8, nil)
f.DATA96_data_62 = ProtoField.new("data[62] (uint8_t)", "mavlink_proto.DATA96_data_62", ftypes.UINT8, nil)
f.DATA96_data_63 = ProtoField.new("data[63] (uint8_t)", "mavlink_proto.DATA96_data_63", ftypes.UINT8, nil)
f.DATA96_data_64 = ProtoField.new("data[64] (uint8_t)", "mavlink_proto.DATA96_data_64", ftypes.UINT8, nil)
f.DATA96_data_65 = ProtoField.new("data[65] (uint8_t)", "mavlink_proto.DATA96_data_65", ftypes.UINT8, nil)
f.DATA96_data_66 = ProtoField.new("data[66] (uint8_t)", "mavlink_proto.DATA96_data_66", ftypes.UINT8, nil)
f.DATA96_data_67 = ProtoField.new("data[67] (uint8_t)", "mavlink_proto.DATA96_data_67", ftypes.UINT8, nil)
f.DATA96_data_68 = ProtoField.new("data[68] (uint8_t)", "mavlink_proto.DATA96_data_68", ftypes.UINT8, nil)
f.DATA96_data_69 = ProtoField.new("data[69] (uint8_t)", "mavlink_proto.DATA96_data_69", ftypes.UINT8, nil)
f.DATA96_data_70 = ProtoField.new("data[70] (uint8_t)", "mavlink_proto.DATA96_data_70", ftypes.UINT8, nil)
f.DATA96_data_71 = ProtoField.new("data[71] (uint8_t)", "mavlink_proto.DATA96_data_71", ftypes.UINT8, nil)
f.DATA96_data_72 = ProtoField.new("data[72] (uint8_t)", "mavlink_proto.DATA96_data_72", ftypes.UINT8, nil)
f.DATA96_data_73 = ProtoField.new("data[73] (uint8_t)", "mavlink_proto.DATA96_data_73", ftypes.UINT8, nil)
f.DATA96_data_74 = ProtoField.new("data[74] (uint8_t)", "mavlink_proto.DATA96_data_74", ftypes.UINT8, nil)
f.DATA96_data_75 = ProtoField.new("data[75] (uint8_t)", "mavlink_proto.DATA96_data_75", ftypes.UINT8, nil)
f.DATA96_data_76 = ProtoField.new("data[76] (uint8_t)", "mavlink_proto.DATA96_data_76", ftypes.UINT8, nil)
f.DATA96_data_77 = ProtoField.new("data[77] (uint8_t)", "mavlink_proto.DATA96_data_77", ftypes.UINT8, nil)
f.DATA96_data_78 = ProtoField.new("data[78] (uint8_t)", "mavlink_proto.DATA96_data_78", ftypes.UINT8, nil)
f.DATA96_data_79 = ProtoField.new("data[79] (uint8_t)", "mavlink_proto.DATA96_data_79", ftypes.UINT8, nil)
f.DATA96_data_80 = ProtoField.new("data[80] (uint8_t)", "mavlink_proto.DATA96_data_80", ftypes.UINT8, nil)
f.DATA96_data_81 = ProtoField.new("data[81] (uint8_t)", "mavlink_proto.DATA96_data_81", ftypes.UINT8, nil)
f.DATA96_data_82 = ProtoField.new("data[82] (uint8_t)", "mavlink_proto.DATA96_data_82", ftypes.UINT8, nil)
f.DATA96_data_83 = ProtoField.new("data[83] (uint8_t)", "mavlink_proto.DATA96_data_83", ftypes.UINT8, nil)
f.DATA96_data_84 = ProtoField.new("data[84] (uint8_t)", "mavlink_proto.DATA96_data_84", ftypes.UINT8, nil)
f.DATA96_data_85 = ProtoField.new("data[85] (uint8_t)", "mavlink_proto.DATA96_data_85", ftypes.UINT8, nil)
f.DATA96_data_86 = ProtoField.new("data[86] (uint8_t)", "mavlink_proto.DATA96_data_86", ftypes.UINT8, nil)
f.DATA96_data_87 = ProtoField.new("data[87] (uint8_t)", "mavlink_proto.DATA96_data_87", ftypes.UINT8, nil)
f.DATA96_data_88 = ProtoField.new("data[88] (uint8_t)", "mavlink_proto.DATA96_data_88", ftypes.UINT8, nil)
f.DATA96_data_89 = ProtoField.new("data[89] (uint8_t)", "mavlink_proto.DATA96_data_89", ftypes.UINT8, nil)
f.DATA96_data_90 = ProtoField.new("data[90] (uint8_t)", "mavlink_proto.DATA96_data_90", ftypes.UINT8, nil)
f.DATA96_data_91 = ProtoField.new("data[91] (uint8_t)", "mavlink_proto.DATA96_data_91", ftypes.UINT8, nil)
f.DATA96_data_92 = ProtoField.new("data[92] (uint8_t)", "mavlink_proto.DATA96_data_92", ftypes.UINT8, nil)
f.DATA96_data_93 = ProtoField.new("data[93] (uint8_t)", "mavlink_proto.DATA96_data_93", ftypes.UINT8, nil)
f.DATA96_data_94 = ProtoField.new("data[94] (uint8_t)", "mavlink_proto.DATA96_data_94", ftypes.UINT8, nil)
f.DATA96_data_95 = ProtoField.new("data[95] (uint8_t)", "mavlink_proto.DATA96_data_95", ftypes.UINT8, nil)

f.RANGEFINDER_distance = ProtoField.new("distance (float)", "mavlink_proto.RANGEFINDER_distance", ftypes.FLOAT, nil)
f.RANGEFINDER_voltage = ProtoField.new("voltage (float)", "mavlink_proto.RANGEFINDER_voltage", ftypes.FLOAT, nil)

f.AIRSPEED_AUTOCAL_vx = ProtoField.new("vx (float)", "mavlink_proto.AIRSPEED_AUTOCAL_vx", ftypes.FLOAT, nil)
f.AIRSPEED_AUTOCAL_vy = ProtoField.new("vy (float)", "mavlink_proto.AIRSPEED_AUTOCAL_vy", ftypes.FLOAT, nil)
f.AIRSPEED_AUTOCAL_vz = ProtoField.new("vz (float)", "mavlink_proto.AIRSPEED_AUTOCAL_vz", ftypes.FLOAT, nil)
f.AIRSPEED_AUTOCAL_diff_pressure = ProtoField.new("diff_pressure (float)", "mavlink_proto.AIRSPEED_AUTOCAL_diff_pressure", ftypes.FLOAT, nil)
f.AIRSPEED_AUTOCAL_EAS2TAS = ProtoField.new("EAS2TAS (float)", "mavlink_proto.AIRSPEED_AUTOCAL_EAS2TAS", ftypes.FLOAT, nil)
f.AIRSPEED_AUTOCAL_ratio = ProtoField.new("ratio (float)", "mavlink_proto.AIRSPEED_AUTOCAL_ratio", ftypes.FLOAT, nil)
f.AIRSPEED_AUTOCAL_state_x = ProtoField.new("state_x (float)", "mavlink_proto.AIRSPEED_AUTOCAL_state_x", ftypes.FLOAT, nil)
f.AIRSPEED_AUTOCAL_state_y = ProtoField.new("state_y (float)", "mavlink_proto.AIRSPEED_AUTOCAL_state_y", ftypes.FLOAT, nil)
f.AIRSPEED_AUTOCAL_state_z = ProtoField.new("state_z (float)", "mavlink_proto.AIRSPEED_AUTOCAL_state_z", ftypes.FLOAT, nil)
f.AIRSPEED_AUTOCAL_Pax = ProtoField.new("Pax (float)", "mavlink_proto.AIRSPEED_AUTOCAL_Pax", ftypes.FLOAT, nil)
f.AIRSPEED_AUTOCAL_Pby = ProtoField.new("Pby (float)", "mavlink_proto.AIRSPEED_AUTOCAL_Pby", ftypes.FLOAT, nil)
f.AIRSPEED_AUTOCAL_Pcz = ProtoField.new("Pcz (float)", "mavlink_proto.AIRSPEED_AUTOCAL_Pcz", ftypes.FLOAT, nil)

f.RALLY_POINT_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.RALLY_POINT_target_system", ftypes.UINT8, nil)
f.RALLY_POINT_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.RALLY_POINT_target_component", ftypes.UINT8, nil)
f.RALLY_POINT_idx = ProtoField.new("idx (uint8_t)", "mavlink_proto.RALLY_POINT_idx", ftypes.UINT8, nil)
f.RALLY_POINT_count = ProtoField.new("count (uint8_t)", "mavlink_proto.RALLY_POINT_count", ftypes.UINT8, nil)
f.RALLY_POINT_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.RALLY_POINT_lat", ftypes.INT32, nil)
f.RALLY_POINT_lng = ProtoField.new("lng (int32_t)", "mavlink_proto.RALLY_POINT_lng", ftypes.INT32, nil)
f.RALLY_POINT_alt = ProtoField.new("alt (int16_t)", "mavlink_proto.RALLY_POINT_alt", ftypes.INT16, nil)
f.RALLY_POINT_break_alt = ProtoField.new("break_alt (int16_t)", "mavlink_proto.RALLY_POINT_break_alt", ftypes.INT16, nil)
f.RALLY_POINT_land_dir = ProtoField.new("land_dir (uint16_t)", "mavlink_proto.RALLY_POINT_land_dir", ftypes.UINT16, nil)
f.RALLY_POINT_flags = ProtoField.new("flags (RALLY_FLAGS)", "mavlink_proto.RALLY_POINT_flags", ftypes.UINT8, nil)
f.RALLY_POINT_flags_flagFAVORABLE_WIND = ProtoField.bool("mavlink_proto.RALLY_POINT_flags.FAVORABLE_WIND", "FAVORABLE_WIND", 2, nil, 1)
f.RALLY_POINT_flags_flagLAND_IMMEDIATELY = ProtoField.bool("mavlink_proto.RALLY_POINT_flags.LAND_IMMEDIATELY", "LAND_IMMEDIATELY", 2, nil, 2)

f.RALLY_FETCH_POINT_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.RALLY_FETCH_POINT_target_system", ftypes.UINT8, nil)
f.RALLY_FETCH_POINT_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.RALLY_FETCH_POINT_target_component", ftypes.UINT8, nil)
f.RALLY_FETCH_POINT_idx = ProtoField.new("idx (uint8_t)", "mavlink_proto.RALLY_FETCH_POINT_idx", ftypes.UINT8, nil)

f.COMPASSMOT_STATUS_throttle = ProtoField.new("throttle (uint16_t)", "mavlink_proto.COMPASSMOT_STATUS_throttle", ftypes.UINT16, nil)
f.COMPASSMOT_STATUS_current = ProtoField.new("current (float)", "mavlink_proto.COMPASSMOT_STATUS_current", ftypes.FLOAT, nil)
f.COMPASSMOT_STATUS_interference = ProtoField.new("interference (uint16_t)", "mavlink_proto.COMPASSMOT_STATUS_interference", ftypes.UINT16, nil)
f.COMPASSMOT_STATUS_CompensationX = ProtoField.new("CompensationX (float)", "mavlink_proto.COMPASSMOT_STATUS_CompensationX", ftypes.FLOAT, nil)
f.COMPASSMOT_STATUS_CompensationY = ProtoField.new("CompensationY (float)", "mavlink_proto.COMPASSMOT_STATUS_CompensationY", ftypes.FLOAT, nil)
f.COMPASSMOT_STATUS_CompensationZ = ProtoField.new("CompensationZ (float)", "mavlink_proto.COMPASSMOT_STATUS_CompensationZ", ftypes.FLOAT, nil)

f.AHRS2_roll = ProtoField.new("roll (float)", "mavlink_proto.AHRS2_roll", ftypes.FLOAT, nil)
f.AHRS2_pitch = ProtoField.new("pitch (float)", "mavlink_proto.AHRS2_pitch", ftypes.FLOAT, nil)
f.AHRS2_yaw = ProtoField.new("yaw (float)", "mavlink_proto.AHRS2_yaw", ftypes.FLOAT, nil)
f.AHRS2_altitude = ProtoField.new("altitude (float)", "mavlink_proto.AHRS2_altitude", ftypes.FLOAT, nil)
f.AHRS2_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.AHRS2_lat", ftypes.INT32, nil)
f.AHRS2_lng = ProtoField.new("lng (int32_t)", "mavlink_proto.AHRS2_lng", ftypes.INT32, nil)

f.CAMERA_STATUS_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.CAMERA_STATUS_time_usec", ftypes.UINT64, nil)
f.CAMERA_STATUS_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.CAMERA_STATUS_target_system", ftypes.UINT8, nil)
f.CAMERA_STATUS_cam_idx = ProtoField.new("cam_idx (uint8_t)", "mavlink_proto.CAMERA_STATUS_cam_idx", ftypes.UINT8, nil)
f.CAMERA_STATUS_img_idx = ProtoField.new("img_idx (uint16_t)", "mavlink_proto.CAMERA_STATUS_img_idx", ftypes.UINT16, nil)
f.CAMERA_STATUS_event_id = ProtoField.new("event_id (CAMERA_STATUS_TYPES)", "mavlink_proto.CAMERA_STATUS_event_id", ftypes.UINT8, enumEntryName.CAMERA_STATUS_TYPES)
f.CAMERA_STATUS_p1 = ProtoField.new("p1 (float)", "mavlink_proto.CAMERA_STATUS_p1", ftypes.FLOAT, nil)
f.CAMERA_STATUS_p2 = ProtoField.new("p2 (float)", "mavlink_proto.CAMERA_STATUS_p2", ftypes.FLOAT, nil)
f.CAMERA_STATUS_p3 = ProtoField.new("p3 (float)", "mavlink_proto.CAMERA_STATUS_p3", ftypes.FLOAT, nil)
f.CAMERA_STATUS_p4 = ProtoField.new("p4 (float)", "mavlink_proto.CAMERA_STATUS_p4", ftypes.FLOAT, nil)

f.CAMERA_FEEDBACK_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.CAMERA_FEEDBACK_time_usec", ftypes.UINT64, nil)
f.CAMERA_FEEDBACK_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.CAMERA_FEEDBACK_target_system", ftypes.UINT8, nil)
f.CAMERA_FEEDBACK_cam_idx = ProtoField.new("cam_idx (uint8_t)", "mavlink_proto.CAMERA_FEEDBACK_cam_idx", ftypes.UINT8, nil)
f.CAMERA_FEEDBACK_img_idx = ProtoField.new("img_idx (uint16_t)", "mavlink_proto.CAMERA_FEEDBACK_img_idx", ftypes.UINT16, nil)
f.CAMERA_FEEDBACK_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.CAMERA_FEEDBACK_lat", ftypes.INT32, nil)
f.CAMERA_FEEDBACK_lng = ProtoField.new("lng (int32_t)", "mavlink_proto.CAMERA_FEEDBACK_lng", ftypes.INT32, nil)
f.CAMERA_FEEDBACK_alt_msl = ProtoField.new("alt_msl (float)", "mavlink_proto.CAMERA_FEEDBACK_alt_msl", ftypes.FLOAT, nil)
f.CAMERA_FEEDBACK_alt_rel = ProtoField.new("alt_rel (float)", "mavlink_proto.CAMERA_FEEDBACK_alt_rel", ftypes.FLOAT, nil)
f.CAMERA_FEEDBACK_roll = ProtoField.new("roll (float)", "mavlink_proto.CAMERA_FEEDBACK_roll", ftypes.FLOAT, nil)
f.CAMERA_FEEDBACK_pitch = ProtoField.new("pitch (float)", "mavlink_proto.CAMERA_FEEDBACK_pitch", ftypes.FLOAT, nil)
f.CAMERA_FEEDBACK_yaw = ProtoField.new("yaw (float)", "mavlink_proto.CAMERA_FEEDBACK_yaw", ftypes.FLOAT, nil)
f.CAMERA_FEEDBACK_foc_len = ProtoField.new("foc_len (float)", "mavlink_proto.CAMERA_FEEDBACK_foc_len", ftypes.FLOAT, nil)
f.CAMERA_FEEDBACK_flags = ProtoField.new("flags (CAMERA_FEEDBACK_FLAGS)", "mavlink_proto.CAMERA_FEEDBACK_flags", ftypes.UINT8, enumEntryName.CAMERA_FEEDBACK_FLAGS)
f.CAMERA_FEEDBACK_completed_captures = ProtoField.new("completed_captures (uint16_t)", "mavlink_proto.CAMERA_FEEDBACK_completed_captures", ftypes.UINT16, nil)

f.BATTERY2_voltage = ProtoField.new("voltage (uint16_t)", "mavlink_proto.BATTERY2_voltage", ftypes.UINT16, nil)
f.BATTERY2_current_battery = ProtoField.new("current_battery (int16_t)", "mavlink_proto.BATTERY2_current_battery", ftypes.INT16, nil)

f.AHRS3_roll = ProtoField.new("roll (float)", "mavlink_proto.AHRS3_roll", ftypes.FLOAT, nil)
f.AHRS3_pitch = ProtoField.new("pitch (float)", "mavlink_proto.AHRS3_pitch", ftypes.FLOAT, nil)
f.AHRS3_yaw = ProtoField.new("yaw (float)", "mavlink_proto.AHRS3_yaw", ftypes.FLOAT, nil)
f.AHRS3_altitude = ProtoField.new("altitude (float)", "mavlink_proto.AHRS3_altitude", ftypes.FLOAT, nil)
f.AHRS3_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.AHRS3_lat", ftypes.INT32, nil)
f.AHRS3_lng = ProtoField.new("lng (int32_t)", "mavlink_proto.AHRS3_lng", ftypes.INT32, nil)
f.AHRS3_v1 = ProtoField.new("v1 (float)", "mavlink_proto.AHRS3_v1", ftypes.FLOAT, nil)
f.AHRS3_v2 = ProtoField.new("v2 (float)", "mavlink_proto.AHRS3_v2", ftypes.FLOAT, nil)
f.AHRS3_v3 = ProtoField.new("v3 (float)", "mavlink_proto.AHRS3_v3", ftypes.FLOAT, nil)
f.AHRS3_v4 = ProtoField.new("v4 (float)", "mavlink_proto.AHRS3_v4", ftypes.FLOAT, nil)

f.AUTOPILOT_VERSION_REQUEST_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_REQUEST_target_system", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_REQUEST_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_REQUEST_target_component", ftypes.UINT8, nil)

f.REMOTE_LOG_DATA_BLOCK_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_target_system", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_target_component", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_seqno = ProtoField.new("seqno (MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_seqno", ftypes.UINT32, enumEntryName.MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS)
f.REMOTE_LOG_DATA_BLOCK_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_0", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_1", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_2", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_3", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_4", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_5", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_6", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_7", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_8 = ProtoField.new("data[8] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_8", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_9 = ProtoField.new("data[9] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_9", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_10 = ProtoField.new("data[10] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_10", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_11 = ProtoField.new("data[11] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_11", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_12 = ProtoField.new("data[12] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_12", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_13 = ProtoField.new("data[13] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_13", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_14 = ProtoField.new("data[14] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_14", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_15 = ProtoField.new("data[15] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_15", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_16 = ProtoField.new("data[16] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_16", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_17 = ProtoField.new("data[17] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_17", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_18 = ProtoField.new("data[18] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_18", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_19 = ProtoField.new("data[19] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_19", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_20 = ProtoField.new("data[20] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_20", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_21 = ProtoField.new("data[21] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_21", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_22 = ProtoField.new("data[22] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_22", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_23 = ProtoField.new("data[23] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_23", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_24 = ProtoField.new("data[24] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_24", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_25 = ProtoField.new("data[25] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_25", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_26 = ProtoField.new("data[26] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_26", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_27 = ProtoField.new("data[27] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_27", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_28 = ProtoField.new("data[28] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_28", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_29 = ProtoField.new("data[29] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_29", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_30 = ProtoField.new("data[30] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_30", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_31 = ProtoField.new("data[31] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_31", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_32 = ProtoField.new("data[32] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_32", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_33 = ProtoField.new("data[33] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_33", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_34 = ProtoField.new("data[34] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_34", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_35 = ProtoField.new("data[35] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_35", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_36 = ProtoField.new("data[36] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_36", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_37 = ProtoField.new("data[37] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_37", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_38 = ProtoField.new("data[38] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_38", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_39 = ProtoField.new("data[39] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_39", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_40 = ProtoField.new("data[40] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_40", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_41 = ProtoField.new("data[41] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_41", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_42 = ProtoField.new("data[42] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_42", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_43 = ProtoField.new("data[43] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_43", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_44 = ProtoField.new("data[44] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_44", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_45 = ProtoField.new("data[45] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_45", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_46 = ProtoField.new("data[46] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_46", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_47 = ProtoField.new("data[47] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_47", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_48 = ProtoField.new("data[48] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_48", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_49 = ProtoField.new("data[49] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_49", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_50 = ProtoField.new("data[50] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_50", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_51 = ProtoField.new("data[51] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_51", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_52 = ProtoField.new("data[52] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_52", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_53 = ProtoField.new("data[53] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_53", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_54 = ProtoField.new("data[54] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_54", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_55 = ProtoField.new("data[55] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_55", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_56 = ProtoField.new("data[56] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_56", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_57 = ProtoField.new("data[57] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_57", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_58 = ProtoField.new("data[58] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_58", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_59 = ProtoField.new("data[59] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_59", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_60 = ProtoField.new("data[60] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_60", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_61 = ProtoField.new("data[61] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_61", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_62 = ProtoField.new("data[62] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_62", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_63 = ProtoField.new("data[63] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_63", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_64 = ProtoField.new("data[64] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_64", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_65 = ProtoField.new("data[65] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_65", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_66 = ProtoField.new("data[66] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_66", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_67 = ProtoField.new("data[67] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_67", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_68 = ProtoField.new("data[68] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_68", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_69 = ProtoField.new("data[69] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_69", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_70 = ProtoField.new("data[70] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_70", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_71 = ProtoField.new("data[71] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_71", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_72 = ProtoField.new("data[72] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_72", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_73 = ProtoField.new("data[73] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_73", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_74 = ProtoField.new("data[74] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_74", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_75 = ProtoField.new("data[75] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_75", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_76 = ProtoField.new("data[76] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_76", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_77 = ProtoField.new("data[77] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_77", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_78 = ProtoField.new("data[78] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_78", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_79 = ProtoField.new("data[79] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_79", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_80 = ProtoField.new("data[80] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_80", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_81 = ProtoField.new("data[81] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_81", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_82 = ProtoField.new("data[82] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_82", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_83 = ProtoField.new("data[83] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_83", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_84 = ProtoField.new("data[84] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_84", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_85 = ProtoField.new("data[85] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_85", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_86 = ProtoField.new("data[86] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_86", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_87 = ProtoField.new("data[87] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_87", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_88 = ProtoField.new("data[88] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_88", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_89 = ProtoField.new("data[89] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_89", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_90 = ProtoField.new("data[90] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_90", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_91 = ProtoField.new("data[91] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_91", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_92 = ProtoField.new("data[92] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_92", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_93 = ProtoField.new("data[93] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_93", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_94 = ProtoField.new("data[94] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_94", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_95 = ProtoField.new("data[95] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_95", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_96 = ProtoField.new("data[96] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_96", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_97 = ProtoField.new("data[97] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_97", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_98 = ProtoField.new("data[98] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_98", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_99 = ProtoField.new("data[99] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_99", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_100 = ProtoField.new("data[100] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_100", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_101 = ProtoField.new("data[101] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_101", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_102 = ProtoField.new("data[102] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_102", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_103 = ProtoField.new("data[103] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_103", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_104 = ProtoField.new("data[104] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_104", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_105 = ProtoField.new("data[105] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_105", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_106 = ProtoField.new("data[106] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_106", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_107 = ProtoField.new("data[107] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_107", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_108 = ProtoField.new("data[108] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_108", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_109 = ProtoField.new("data[109] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_109", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_110 = ProtoField.new("data[110] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_110", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_111 = ProtoField.new("data[111] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_111", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_112 = ProtoField.new("data[112] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_112", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_113 = ProtoField.new("data[113] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_113", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_114 = ProtoField.new("data[114] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_114", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_115 = ProtoField.new("data[115] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_115", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_116 = ProtoField.new("data[116] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_116", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_117 = ProtoField.new("data[117] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_117", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_118 = ProtoField.new("data[118] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_118", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_119 = ProtoField.new("data[119] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_119", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_120 = ProtoField.new("data[120] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_120", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_121 = ProtoField.new("data[121] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_121", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_122 = ProtoField.new("data[122] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_122", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_123 = ProtoField.new("data[123] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_123", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_124 = ProtoField.new("data[124] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_124", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_125 = ProtoField.new("data[125] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_125", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_126 = ProtoField.new("data[126] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_126", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_127 = ProtoField.new("data[127] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_127", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_128 = ProtoField.new("data[128] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_128", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_129 = ProtoField.new("data[129] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_129", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_130 = ProtoField.new("data[130] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_130", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_131 = ProtoField.new("data[131] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_131", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_132 = ProtoField.new("data[132] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_132", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_133 = ProtoField.new("data[133] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_133", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_134 = ProtoField.new("data[134] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_134", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_135 = ProtoField.new("data[135] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_135", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_136 = ProtoField.new("data[136] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_136", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_137 = ProtoField.new("data[137] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_137", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_138 = ProtoField.new("data[138] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_138", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_139 = ProtoField.new("data[139] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_139", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_140 = ProtoField.new("data[140] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_140", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_141 = ProtoField.new("data[141] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_141", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_142 = ProtoField.new("data[142] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_142", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_143 = ProtoField.new("data[143] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_143", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_144 = ProtoField.new("data[144] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_144", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_145 = ProtoField.new("data[145] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_145", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_146 = ProtoField.new("data[146] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_146", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_147 = ProtoField.new("data[147] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_147", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_148 = ProtoField.new("data[148] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_148", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_149 = ProtoField.new("data[149] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_149", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_150 = ProtoField.new("data[150] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_150", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_151 = ProtoField.new("data[151] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_151", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_152 = ProtoField.new("data[152] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_152", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_153 = ProtoField.new("data[153] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_153", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_154 = ProtoField.new("data[154] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_154", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_155 = ProtoField.new("data[155] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_155", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_156 = ProtoField.new("data[156] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_156", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_157 = ProtoField.new("data[157] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_157", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_158 = ProtoField.new("data[158] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_158", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_159 = ProtoField.new("data[159] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_159", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_160 = ProtoField.new("data[160] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_160", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_161 = ProtoField.new("data[161] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_161", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_162 = ProtoField.new("data[162] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_162", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_163 = ProtoField.new("data[163] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_163", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_164 = ProtoField.new("data[164] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_164", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_165 = ProtoField.new("data[165] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_165", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_166 = ProtoField.new("data[166] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_166", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_167 = ProtoField.new("data[167] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_167", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_168 = ProtoField.new("data[168] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_168", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_169 = ProtoField.new("data[169] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_169", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_170 = ProtoField.new("data[170] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_170", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_171 = ProtoField.new("data[171] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_171", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_172 = ProtoField.new("data[172] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_172", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_173 = ProtoField.new("data[173] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_173", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_174 = ProtoField.new("data[174] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_174", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_175 = ProtoField.new("data[175] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_175", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_176 = ProtoField.new("data[176] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_176", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_177 = ProtoField.new("data[177] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_177", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_178 = ProtoField.new("data[178] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_178", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_179 = ProtoField.new("data[179] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_179", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_180 = ProtoField.new("data[180] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_180", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_181 = ProtoField.new("data[181] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_181", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_182 = ProtoField.new("data[182] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_182", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_183 = ProtoField.new("data[183] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_183", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_184 = ProtoField.new("data[184] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_184", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_185 = ProtoField.new("data[185] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_185", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_186 = ProtoField.new("data[186] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_186", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_187 = ProtoField.new("data[187] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_187", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_188 = ProtoField.new("data[188] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_188", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_189 = ProtoField.new("data[189] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_189", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_190 = ProtoField.new("data[190] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_190", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_191 = ProtoField.new("data[191] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_191", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_192 = ProtoField.new("data[192] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_192", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_193 = ProtoField.new("data[193] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_193", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_194 = ProtoField.new("data[194] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_194", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_195 = ProtoField.new("data[195] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_195", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_196 = ProtoField.new("data[196] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_196", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_197 = ProtoField.new("data[197] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_197", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_198 = ProtoField.new("data[198] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_198", ftypes.UINT8, nil)
f.REMOTE_LOG_DATA_BLOCK_data_199 = ProtoField.new("data[199] (uint8_t)", "mavlink_proto.REMOTE_LOG_DATA_BLOCK_data_199", ftypes.UINT8, nil)

f.REMOTE_LOG_BLOCK_STATUS_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.REMOTE_LOG_BLOCK_STATUS_target_system", ftypes.UINT8, nil)
f.REMOTE_LOG_BLOCK_STATUS_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.REMOTE_LOG_BLOCK_STATUS_target_component", ftypes.UINT8, nil)
f.REMOTE_LOG_BLOCK_STATUS_seqno = ProtoField.new("seqno (uint32_t)", "mavlink_proto.REMOTE_LOG_BLOCK_STATUS_seqno", ftypes.UINT32, nil)
f.REMOTE_LOG_BLOCK_STATUS_status = ProtoField.new("status (MAV_REMOTE_LOG_DATA_BLOCK_STATUSES)", "mavlink_proto.REMOTE_LOG_BLOCK_STATUS_status", ftypes.UINT8, enumEntryName.MAV_REMOTE_LOG_DATA_BLOCK_STATUSES)

f.LED_CONTROL_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.LED_CONTROL_target_system", ftypes.UINT8, nil)
f.LED_CONTROL_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.LED_CONTROL_target_component", ftypes.UINT8, nil)
f.LED_CONTROL_instance = ProtoField.new("instance (uint8_t)", "mavlink_proto.LED_CONTROL_instance", ftypes.UINT8, nil)
f.LED_CONTROL_pattern = ProtoField.new("pattern (uint8_t)", "mavlink_proto.LED_CONTROL_pattern", ftypes.UINT8, nil)
f.LED_CONTROL_custom_len = ProtoField.new("custom_len (uint8_t)", "mavlink_proto.LED_CONTROL_custom_len", ftypes.UINT8, nil)
f.LED_CONTROL_custom_bytes_0 = ProtoField.new("custom_bytes[0] (uint8_t)", "mavlink_proto.LED_CONTROL_custom_bytes_0", ftypes.UINT8, nil)
f.LED_CONTROL_custom_bytes_1 = ProtoField.new("custom_bytes[1] (uint8_t)", "mavlink_proto.LED_CONTROL_custom_bytes_1", ftypes.UINT8, nil)
f.LED_CONTROL_custom_bytes_2 = ProtoField.new("custom_bytes[2] (uint8_t)", "mavlink_proto.LED_CONTROL_custom_bytes_2", ftypes.UINT8, nil)
f.LED_CONTROL_custom_bytes_3 = ProtoField.new("custom_bytes[3] (uint8_t)", "mavlink_proto.LED_CONTROL_custom_bytes_3", ftypes.UINT8, nil)
f.LED_CONTROL_custom_bytes_4 = ProtoField.new("custom_bytes[4] (uint8_t)", "mavlink_proto.LED_CONTROL_custom_bytes_4", ftypes.UINT8, nil)
f.LED_CONTROL_custom_bytes_5 = ProtoField.new("custom_bytes[5] (uint8_t)", "mavlink_proto.LED_CONTROL_custom_bytes_5", ftypes.UINT8, nil)
f.LED_CONTROL_custom_bytes_6 = ProtoField.new("custom_bytes[6] (uint8_t)", "mavlink_proto.LED_CONTROL_custom_bytes_6", ftypes.UINT8, nil)
f.LED_CONTROL_custom_bytes_7 = ProtoField.new("custom_bytes[7] (uint8_t)", "mavlink_proto.LED_CONTROL_custom_bytes_7", ftypes.UINT8, nil)
f.LED_CONTROL_custom_bytes_8 = ProtoField.new("custom_bytes[8] (uint8_t)", "mavlink_proto.LED_CONTROL_custom_bytes_8", ftypes.UINT8, nil)
f.LED_CONTROL_custom_bytes_9 = ProtoField.new("custom_bytes[9] (uint8_t)", "mavlink_proto.LED_CONTROL_custom_bytes_9", ftypes.UINT8, nil)
f.LED_CONTROL_custom_bytes_10 = ProtoField.new("custom_bytes[10] (uint8_t)", "mavlink_proto.LED_CONTROL_custom_bytes_10", ftypes.UINT8, nil)
f.LED_CONTROL_custom_bytes_11 = ProtoField.new("custom_bytes[11] (uint8_t)", "mavlink_proto.LED_CONTROL_custom_bytes_11", ftypes.UINT8, nil)
f.LED_CONTROL_custom_bytes_12 = ProtoField.new("custom_bytes[12] (uint8_t)", "mavlink_proto.LED_CONTROL_custom_bytes_12", ftypes.UINT8, nil)
f.LED_CONTROL_custom_bytes_13 = ProtoField.new("custom_bytes[13] (uint8_t)", "mavlink_proto.LED_CONTROL_custom_bytes_13", ftypes.UINT8, nil)
f.LED_CONTROL_custom_bytes_14 = ProtoField.new("custom_bytes[14] (uint8_t)", "mavlink_proto.LED_CONTROL_custom_bytes_14", ftypes.UINT8, nil)
f.LED_CONTROL_custom_bytes_15 = ProtoField.new("custom_bytes[15] (uint8_t)", "mavlink_proto.LED_CONTROL_custom_bytes_15", ftypes.UINT8, nil)
f.LED_CONTROL_custom_bytes_16 = ProtoField.new("custom_bytes[16] (uint8_t)", "mavlink_proto.LED_CONTROL_custom_bytes_16", ftypes.UINT8, nil)
f.LED_CONTROL_custom_bytes_17 = ProtoField.new("custom_bytes[17] (uint8_t)", "mavlink_proto.LED_CONTROL_custom_bytes_17", ftypes.UINT8, nil)
f.LED_CONTROL_custom_bytes_18 = ProtoField.new("custom_bytes[18] (uint8_t)", "mavlink_proto.LED_CONTROL_custom_bytes_18", ftypes.UINT8, nil)
f.LED_CONTROL_custom_bytes_19 = ProtoField.new("custom_bytes[19] (uint8_t)", "mavlink_proto.LED_CONTROL_custom_bytes_19", ftypes.UINT8, nil)
f.LED_CONTROL_custom_bytes_20 = ProtoField.new("custom_bytes[20] (uint8_t)", "mavlink_proto.LED_CONTROL_custom_bytes_20", ftypes.UINT8, nil)
f.LED_CONTROL_custom_bytes_21 = ProtoField.new("custom_bytes[21] (uint8_t)", "mavlink_proto.LED_CONTROL_custom_bytes_21", ftypes.UINT8, nil)
f.LED_CONTROL_custom_bytes_22 = ProtoField.new("custom_bytes[22] (uint8_t)", "mavlink_proto.LED_CONTROL_custom_bytes_22", ftypes.UINT8, nil)
f.LED_CONTROL_custom_bytes_23 = ProtoField.new("custom_bytes[23] (uint8_t)", "mavlink_proto.LED_CONTROL_custom_bytes_23", ftypes.UINT8, nil)

f.MAG_CAL_PROGRESS_compass_id = ProtoField.new("compass_id (uint8_t)", "mavlink_proto.MAG_CAL_PROGRESS_compass_id", ftypes.UINT8, nil)
f.MAG_CAL_PROGRESS_cal_mask = ProtoField.new("cal_mask (uint8_t)", "mavlink_proto.MAG_CAL_PROGRESS_cal_mask", ftypes.UINT8, nil)
f.MAG_CAL_PROGRESS_cal_status = ProtoField.new("cal_status (MAG_CAL_STATUS)", "mavlink_proto.MAG_CAL_PROGRESS_cal_status", ftypes.UINT8, enumEntryName.MAG_CAL_STATUS)
f.MAG_CAL_PROGRESS_attempt = ProtoField.new("attempt (uint8_t)", "mavlink_proto.MAG_CAL_PROGRESS_attempt", ftypes.UINT8, nil)
f.MAG_CAL_PROGRESS_completion_pct = ProtoField.new("completion_pct (uint8_t)", "mavlink_proto.MAG_CAL_PROGRESS_completion_pct", ftypes.UINT8, nil)
f.MAG_CAL_PROGRESS_completion_mask_0 = ProtoField.new("completion_mask[0] (uint8_t)", "mavlink_proto.MAG_CAL_PROGRESS_completion_mask_0", ftypes.UINT8, nil)
f.MAG_CAL_PROGRESS_completion_mask_1 = ProtoField.new("completion_mask[1] (uint8_t)", "mavlink_proto.MAG_CAL_PROGRESS_completion_mask_1", ftypes.UINT8, nil)
f.MAG_CAL_PROGRESS_completion_mask_2 = ProtoField.new("completion_mask[2] (uint8_t)", "mavlink_proto.MAG_CAL_PROGRESS_completion_mask_2", ftypes.UINT8, nil)
f.MAG_CAL_PROGRESS_completion_mask_3 = ProtoField.new("completion_mask[3] (uint8_t)", "mavlink_proto.MAG_CAL_PROGRESS_completion_mask_3", ftypes.UINT8, nil)
f.MAG_CAL_PROGRESS_completion_mask_4 = ProtoField.new("completion_mask[4] (uint8_t)", "mavlink_proto.MAG_CAL_PROGRESS_completion_mask_4", ftypes.UINT8, nil)
f.MAG_CAL_PROGRESS_completion_mask_5 = ProtoField.new("completion_mask[5] (uint8_t)", "mavlink_proto.MAG_CAL_PROGRESS_completion_mask_5", ftypes.UINT8, nil)
f.MAG_CAL_PROGRESS_completion_mask_6 = ProtoField.new("completion_mask[6] (uint8_t)", "mavlink_proto.MAG_CAL_PROGRESS_completion_mask_6", ftypes.UINT8, nil)
f.MAG_CAL_PROGRESS_completion_mask_7 = ProtoField.new("completion_mask[7] (uint8_t)", "mavlink_proto.MAG_CAL_PROGRESS_completion_mask_7", ftypes.UINT8, nil)
f.MAG_CAL_PROGRESS_completion_mask_8 = ProtoField.new("completion_mask[8] (uint8_t)", "mavlink_proto.MAG_CAL_PROGRESS_completion_mask_8", ftypes.UINT8, nil)
f.MAG_CAL_PROGRESS_completion_mask_9 = ProtoField.new("completion_mask[9] (uint8_t)", "mavlink_proto.MAG_CAL_PROGRESS_completion_mask_9", ftypes.UINT8, nil)
f.MAG_CAL_PROGRESS_direction_x = ProtoField.new("direction_x (float)", "mavlink_proto.MAG_CAL_PROGRESS_direction_x", ftypes.FLOAT, nil)
f.MAG_CAL_PROGRESS_direction_y = ProtoField.new("direction_y (float)", "mavlink_proto.MAG_CAL_PROGRESS_direction_y", ftypes.FLOAT, nil)
f.MAG_CAL_PROGRESS_direction_z = ProtoField.new("direction_z (float)", "mavlink_proto.MAG_CAL_PROGRESS_direction_z", ftypes.FLOAT, nil)

f.EKF_STATUS_REPORT_flags = ProtoField.new("flags (EKF_STATUS_FLAGS)", "mavlink_proto.EKF_STATUS_REPORT_flags", ftypes.UINT16, nil)
f.EKF_STATUS_REPORT_flags_flagEKF_ATTITUDE = ProtoField.bool("mavlink_proto.EKF_STATUS_REPORT_flags.EKF_ATTITUDE", "EKF_ATTITUDE", 11, nil, 1)
f.EKF_STATUS_REPORT_flags_flagEKF_VELOCITY_HORIZ = ProtoField.bool("mavlink_proto.EKF_STATUS_REPORT_flags.EKF_VELOCITY_HORIZ", "EKF_VELOCITY_HORIZ", 11, nil, 2)
f.EKF_STATUS_REPORT_flags_flagEKF_VELOCITY_VERT = ProtoField.bool("mavlink_proto.EKF_STATUS_REPORT_flags.EKF_VELOCITY_VERT", "EKF_VELOCITY_VERT", 11, nil, 4)
f.EKF_STATUS_REPORT_flags_flagEKF_POS_HORIZ_REL = ProtoField.bool("mavlink_proto.EKF_STATUS_REPORT_flags.EKF_POS_HORIZ_REL", "EKF_POS_HORIZ_REL", 11, nil, 8)
f.EKF_STATUS_REPORT_flags_flagEKF_POS_HORIZ_ABS = ProtoField.bool("mavlink_proto.EKF_STATUS_REPORT_flags.EKF_POS_HORIZ_ABS", "EKF_POS_HORIZ_ABS", 11, nil, 16)
f.EKF_STATUS_REPORT_flags_flagEKF_POS_VERT_ABS = ProtoField.bool("mavlink_proto.EKF_STATUS_REPORT_flags.EKF_POS_VERT_ABS", "EKF_POS_VERT_ABS", 11, nil, 32)
f.EKF_STATUS_REPORT_flags_flagEKF_POS_VERT_AGL = ProtoField.bool("mavlink_proto.EKF_STATUS_REPORT_flags.EKF_POS_VERT_AGL", "EKF_POS_VERT_AGL", 11, nil, 64)
f.EKF_STATUS_REPORT_flags_flagEKF_CONST_POS_MODE = ProtoField.bool("mavlink_proto.EKF_STATUS_REPORT_flags.EKF_CONST_POS_MODE", "EKF_CONST_POS_MODE", 11, nil, 128)
f.EKF_STATUS_REPORT_flags_flagEKF_PRED_POS_HORIZ_REL = ProtoField.bool("mavlink_proto.EKF_STATUS_REPORT_flags.EKF_PRED_POS_HORIZ_REL", "EKF_PRED_POS_HORIZ_REL", 11, nil, 256)
f.EKF_STATUS_REPORT_flags_flagEKF_PRED_POS_HORIZ_ABS = ProtoField.bool("mavlink_proto.EKF_STATUS_REPORT_flags.EKF_PRED_POS_HORIZ_ABS", "EKF_PRED_POS_HORIZ_ABS", 11, nil, 512)
f.EKF_STATUS_REPORT_flags_flagEKF_UNINITIALIZED = ProtoField.bool("mavlink_proto.EKF_STATUS_REPORT_flags.EKF_UNINITIALIZED", "EKF_UNINITIALIZED", 11, nil, 1024)
f.EKF_STATUS_REPORT_velocity_variance = ProtoField.new("velocity_variance (float)", "mavlink_proto.EKF_STATUS_REPORT_velocity_variance", ftypes.FLOAT, nil)
f.EKF_STATUS_REPORT_pos_horiz_variance = ProtoField.new("pos_horiz_variance (float)", "mavlink_proto.EKF_STATUS_REPORT_pos_horiz_variance", ftypes.FLOAT, nil)
f.EKF_STATUS_REPORT_pos_vert_variance = ProtoField.new("pos_vert_variance (float)", "mavlink_proto.EKF_STATUS_REPORT_pos_vert_variance", ftypes.FLOAT, nil)
f.EKF_STATUS_REPORT_compass_variance = ProtoField.new("compass_variance (float)", "mavlink_proto.EKF_STATUS_REPORT_compass_variance", ftypes.FLOAT, nil)
f.EKF_STATUS_REPORT_terrain_alt_variance = ProtoField.new("terrain_alt_variance (float)", "mavlink_proto.EKF_STATUS_REPORT_terrain_alt_variance", ftypes.FLOAT, nil)
f.EKF_STATUS_REPORT_airspeed_variance = ProtoField.new("airspeed_variance (float)", "mavlink_proto.EKF_STATUS_REPORT_airspeed_variance", ftypes.FLOAT, nil)

f.PID_TUNING_axis = ProtoField.new("axis (PID_TUNING_AXIS)", "mavlink_proto.PID_TUNING_axis", ftypes.UINT8, enumEntryName.PID_TUNING_AXIS)
f.PID_TUNING_desired = ProtoField.new("desired (float)", "mavlink_proto.PID_TUNING_desired", ftypes.FLOAT, nil)
f.PID_TUNING_achieved = ProtoField.new("achieved (float)", "mavlink_proto.PID_TUNING_achieved", ftypes.FLOAT, nil)
f.PID_TUNING_FF = ProtoField.new("FF (float)", "mavlink_proto.PID_TUNING_FF", ftypes.FLOAT, nil)
f.PID_TUNING_P = ProtoField.new("P (float)", "mavlink_proto.PID_TUNING_P", ftypes.FLOAT, nil)
f.PID_TUNING_I = ProtoField.new("I (float)", "mavlink_proto.PID_TUNING_I", ftypes.FLOAT, nil)
f.PID_TUNING_D = ProtoField.new("D (float)", "mavlink_proto.PID_TUNING_D", ftypes.FLOAT, nil)
f.PID_TUNING_SRate = ProtoField.new("SRate (float)", "mavlink_proto.PID_TUNING_SRate", ftypes.FLOAT, nil)
f.PID_TUNING_PDmod = ProtoField.new("PDmod (float)", "mavlink_proto.PID_TUNING_PDmod", ftypes.FLOAT, nil)

f.DEEPSTALL_landing_lat = ProtoField.new("landing_lat (int32_t)", "mavlink_proto.DEEPSTALL_landing_lat", ftypes.INT32, nil)
f.DEEPSTALL_landing_lon = ProtoField.new("landing_lon (int32_t)", "mavlink_proto.DEEPSTALL_landing_lon", ftypes.INT32, nil)
f.DEEPSTALL_path_lat = ProtoField.new("path_lat (int32_t)", "mavlink_proto.DEEPSTALL_path_lat", ftypes.INT32, nil)
f.DEEPSTALL_path_lon = ProtoField.new("path_lon (int32_t)", "mavlink_proto.DEEPSTALL_path_lon", ftypes.INT32, nil)
f.DEEPSTALL_arc_entry_lat = ProtoField.new("arc_entry_lat (int32_t)", "mavlink_proto.DEEPSTALL_arc_entry_lat", ftypes.INT32, nil)
f.DEEPSTALL_arc_entry_lon = ProtoField.new("arc_entry_lon (int32_t)", "mavlink_proto.DEEPSTALL_arc_entry_lon", ftypes.INT32, nil)
f.DEEPSTALL_altitude = ProtoField.new("altitude (float)", "mavlink_proto.DEEPSTALL_altitude", ftypes.FLOAT, nil)
f.DEEPSTALL_expected_travel_distance = ProtoField.new("expected_travel_distance (float)", "mavlink_proto.DEEPSTALL_expected_travel_distance", ftypes.FLOAT, nil)
f.DEEPSTALL_cross_track_error = ProtoField.new("cross_track_error (float)", "mavlink_proto.DEEPSTALL_cross_track_error", ftypes.FLOAT, nil)
f.DEEPSTALL_stage = ProtoField.new("stage (DEEPSTALL_STAGE)", "mavlink_proto.DEEPSTALL_stage", ftypes.UINT8, enumEntryName.DEEPSTALL_STAGE)

f.GIMBAL_REPORT_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.GIMBAL_REPORT_target_system", ftypes.UINT8, nil)
f.GIMBAL_REPORT_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.GIMBAL_REPORT_target_component", ftypes.UINT8, nil)
f.GIMBAL_REPORT_delta_time = ProtoField.new("delta_time (float)", "mavlink_proto.GIMBAL_REPORT_delta_time", ftypes.FLOAT, nil)
f.GIMBAL_REPORT_delta_angle_x = ProtoField.new("delta_angle_x (float)", "mavlink_proto.GIMBAL_REPORT_delta_angle_x", ftypes.FLOAT, nil)
f.GIMBAL_REPORT_delta_angle_y = ProtoField.new("delta_angle_y (float)", "mavlink_proto.GIMBAL_REPORT_delta_angle_y", ftypes.FLOAT, nil)
f.GIMBAL_REPORT_delta_angle_z = ProtoField.new("delta_angle_z (float)", "mavlink_proto.GIMBAL_REPORT_delta_angle_z", ftypes.FLOAT, nil)
f.GIMBAL_REPORT_delta_velocity_x = ProtoField.new("delta_velocity_x (float)", "mavlink_proto.GIMBAL_REPORT_delta_velocity_x", ftypes.FLOAT, nil)
f.GIMBAL_REPORT_delta_velocity_y = ProtoField.new("delta_velocity_y (float)", "mavlink_proto.GIMBAL_REPORT_delta_velocity_y", ftypes.FLOAT, nil)
f.GIMBAL_REPORT_delta_velocity_z = ProtoField.new("delta_velocity_z (float)", "mavlink_proto.GIMBAL_REPORT_delta_velocity_z", ftypes.FLOAT, nil)
f.GIMBAL_REPORT_joint_roll = ProtoField.new("joint_roll (float)", "mavlink_proto.GIMBAL_REPORT_joint_roll", ftypes.FLOAT, nil)
f.GIMBAL_REPORT_joint_el = ProtoField.new("joint_el (float)", "mavlink_proto.GIMBAL_REPORT_joint_el", ftypes.FLOAT, nil)
f.GIMBAL_REPORT_joint_az = ProtoField.new("joint_az (float)", "mavlink_proto.GIMBAL_REPORT_joint_az", ftypes.FLOAT, nil)

f.GIMBAL_CONTROL_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.GIMBAL_CONTROL_target_system", ftypes.UINT8, nil)
f.GIMBAL_CONTROL_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.GIMBAL_CONTROL_target_component", ftypes.UINT8, nil)
f.GIMBAL_CONTROL_demanded_rate_x = ProtoField.new("demanded_rate_x (float)", "mavlink_proto.GIMBAL_CONTROL_demanded_rate_x", ftypes.FLOAT, nil)
f.GIMBAL_CONTROL_demanded_rate_y = ProtoField.new("demanded_rate_y (float)", "mavlink_proto.GIMBAL_CONTROL_demanded_rate_y", ftypes.FLOAT, nil)
f.GIMBAL_CONTROL_demanded_rate_z = ProtoField.new("demanded_rate_z (float)", "mavlink_proto.GIMBAL_CONTROL_demanded_rate_z", ftypes.FLOAT, nil)

f.GIMBAL_TORQUE_CMD_REPORT_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.GIMBAL_TORQUE_CMD_REPORT_target_system", ftypes.UINT8, nil)
f.GIMBAL_TORQUE_CMD_REPORT_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.GIMBAL_TORQUE_CMD_REPORT_target_component", ftypes.UINT8, nil)
f.GIMBAL_TORQUE_CMD_REPORT_rl_torque_cmd = ProtoField.new("rl_torque_cmd (int16_t)", "mavlink_proto.GIMBAL_TORQUE_CMD_REPORT_rl_torque_cmd", ftypes.INT16, nil)
f.GIMBAL_TORQUE_CMD_REPORT_el_torque_cmd = ProtoField.new("el_torque_cmd (int16_t)", "mavlink_proto.GIMBAL_TORQUE_CMD_REPORT_el_torque_cmd", ftypes.INT16, nil)
f.GIMBAL_TORQUE_CMD_REPORT_az_torque_cmd = ProtoField.new("az_torque_cmd (int16_t)", "mavlink_proto.GIMBAL_TORQUE_CMD_REPORT_az_torque_cmd", ftypes.INT16, nil)

f.GOPRO_HEARTBEAT_status = ProtoField.new("status (GOPRO_HEARTBEAT_STATUS)", "mavlink_proto.GOPRO_HEARTBEAT_status", ftypes.UINT8, enumEntryName.GOPRO_HEARTBEAT_STATUS)
f.GOPRO_HEARTBEAT_capture_mode = ProtoField.new("capture_mode (GOPRO_CAPTURE_MODE)", "mavlink_proto.GOPRO_HEARTBEAT_capture_mode", ftypes.UINT8, enumEntryName.GOPRO_CAPTURE_MODE)
f.GOPRO_HEARTBEAT_flags = ProtoField.new("flags (GOPRO_HEARTBEAT_FLAGS)", "mavlink_proto.GOPRO_HEARTBEAT_flags", ftypes.UINT8, nil)
f.GOPRO_HEARTBEAT_flags_flagGOPRO_FLAG_RECORDING = ProtoField.bool("mavlink_proto.GOPRO_HEARTBEAT_flags.GOPRO_FLAG_RECORDING", "GOPRO_FLAG_RECORDING", 2, nil, 1)
f.GOPRO_HEARTBEAT_flags_flagGOPRO_HEARTBEAT_FLAGS_ENUM_END = ProtoField.bool("mavlink_proto.GOPRO_HEARTBEAT_flags.GOPRO_HEARTBEAT_FLAGS_ENUM_END", "GOPRO_HEARTBEAT_FLAGS_ENUM_END", 2, nil, 2)

f.GOPRO_GET_REQUEST_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.GOPRO_GET_REQUEST_target_system", ftypes.UINT8, nil)
f.GOPRO_GET_REQUEST_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.GOPRO_GET_REQUEST_target_component", ftypes.UINT8, nil)
f.GOPRO_GET_REQUEST_cmd_id = ProtoField.new("cmd_id (GOPRO_COMMAND)", "mavlink_proto.GOPRO_GET_REQUEST_cmd_id", ftypes.UINT8, enumEntryName.GOPRO_COMMAND)

f.GOPRO_GET_RESPONSE_cmd_id = ProtoField.new("cmd_id (GOPRO_COMMAND)", "mavlink_proto.GOPRO_GET_RESPONSE_cmd_id", ftypes.UINT8, enumEntryName.GOPRO_COMMAND)
f.GOPRO_GET_RESPONSE_status = ProtoField.new("status (GOPRO_REQUEST_STATUS)", "mavlink_proto.GOPRO_GET_RESPONSE_status", ftypes.UINT8, enumEntryName.GOPRO_REQUEST_STATUS)
f.GOPRO_GET_RESPONSE_value_0 = ProtoField.new("value[0] (uint8_t)", "mavlink_proto.GOPRO_GET_RESPONSE_value_0", ftypes.UINT8, nil)
f.GOPRO_GET_RESPONSE_value_1 = ProtoField.new("value[1] (uint8_t)", "mavlink_proto.GOPRO_GET_RESPONSE_value_1", ftypes.UINT8, nil)
f.GOPRO_GET_RESPONSE_value_2 = ProtoField.new("value[2] (uint8_t)", "mavlink_proto.GOPRO_GET_RESPONSE_value_2", ftypes.UINT8, nil)
f.GOPRO_GET_RESPONSE_value_3 = ProtoField.new("value[3] (uint8_t)", "mavlink_proto.GOPRO_GET_RESPONSE_value_3", ftypes.UINT8, nil)

f.GOPRO_SET_REQUEST_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.GOPRO_SET_REQUEST_target_system", ftypes.UINT8, nil)
f.GOPRO_SET_REQUEST_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.GOPRO_SET_REQUEST_target_component", ftypes.UINT8, nil)
f.GOPRO_SET_REQUEST_cmd_id = ProtoField.new("cmd_id (GOPRO_COMMAND)", "mavlink_proto.GOPRO_SET_REQUEST_cmd_id", ftypes.UINT8, enumEntryName.GOPRO_COMMAND)
f.GOPRO_SET_REQUEST_value_0 = ProtoField.new("value[0] (uint8_t)", "mavlink_proto.GOPRO_SET_REQUEST_value_0", ftypes.UINT8, nil)
f.GOPRO_SET_REQUEST_value_1 = ProtoField.new("value[1] (uint8_t)", "mavlink_proto.GOPRO_SET_REQUEST_value_1", ftypes.UINT8, nil)
f.GOPRO_SET_REQUEST_value_2 = ProtoField.new("value[2] (uint8_t)", "mavlink_proto.GOPRO_SET_REQUEST_value_2", ftypes.UINT8, nil)
f.GOPRO_SET_REQUEST_value_3 = ProtoField.new("value[3] (uint8_t)", "mavlink_proto.GOPRO_SET_REQUEST_value_3", ftypes.UINT8, nil)

f.GOPRO_SET_RESPONSE_cmd_id = ProtoField.new("cmd_id (GOPRO_COMMAND)", "mavlink_proto.GOPRO_SET_RESPONSE_cmd_id", ftypes.UINT8, enumEntryName.GOPRO_COMMAND)
f.GOPRO_SET_RESPONSE_status = ProtoField.new("status (GOPRO_REQUEST_STATUS)", "mavlink_proto.GOPRO_SET_RESPONSE_status", ftypes.UINT8, enumEntryName.GOPRO_REQUEST_STATUS)

f.RPM_rpm1 = ProtoField.new("rpm1 (float)", "mavlink_proto.RPM_rpm1", ftypes.FLOAT, nil)
f.RPM_rpm2 = ProtoField.new("rpm2 (float)", "mavlink_proto.RPM_rpm2", ftypes.FLOAT, nil)

f.DEVICE_OP_READ_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.DEVICE_OP_READ_target_system", ftypes.UINT8, nil)
f.DEVICE_OP_READ_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.DEVICE_OP_READ_target_component", ftypes.UINT8, nil)
f.DEVICE_OP_READ_request_id = ProtoField.new("request_id (uint32_t)", "mavlink_proto.DEVICE_OP_READ_request_id", ftypes.UINT32, nil)
f.DEVICE_OP_READ_bustype = ProtoField.new("bustype (DEVICE_OP_BUSTYPE)", "mavlink_proto.DEVICE_OP_READ_bustype", ftypes.UINT8, enumEntryName.DEVICE_OP_BUSTYPE)
f.DEVICE_OP_READ_bus = ProtoField.new("bus (uint8_t)", "mavlink_proto.DEVICE_OP_READ_bus", ftypes.UINT8, nil)
f.DEVICE_OP_READ_address = ProtoField.new("address (uint8_t)", "mavlink_proto.DEVICE_OP_READ_address", ftypes.UINT8, nil)
f.DEVICE_OP_READ_busname = ProtoField.new("busname (char)", "mavlink_proto.DEVICE_OP_READ_busname", ftypes.STRING, nil)
f.DEVICE_OP_READ_regstart = ProtoField.new("regstart (uint8_t)", "mavlink_proto.DEVICE_OP_READ_regstart", ftypes.UINT8, nil)
f.DEVICE_OP_READ_count = ProtoField.new("count (uint8_t)", "mavlink_proto.DEVICE_OP_READ_count", ftypes.UINT8, nil)
f.DEVICE_OP_READ_bank = ProtoField.new("bank (uint8_t)", "mavlink_proto.DEVICE_OP_READ_bank", ftypes.UINT8, nil)

f.DEVICE_OP_READ_REPLY_request_id = ProtoField.new("request_id (uint32_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_request_id", ftypes.UINT32, nil)
f.DEVICE_OP_READ_REPLY_result = ProtoField.new("result (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_result", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_regstart = ProtoField.new("regstart (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_regstart", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_count = ProtoField.new("count (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_count", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_0", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_1", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_2", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_3", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_4", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_5", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_6", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_7", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_8 = ProtoField.new("data[8] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_8", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_9 = ProtoField.new("data[9] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_9", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_10 = ProtoField.new("data[10] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_10", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_11 = ProtoField.new("data[11] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_11", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_12 = ProtoField.new("data[12] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_12", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_13 = ProtoField.new("data[13] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_13", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_14 = ProtoField.new("data[14] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_14", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_15 = ProtoField.new("data[15] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_15", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_16 = ProtoField.new("data[16] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_16", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_17 = ProtoField.new("data[17] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_17", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_18 = ProtoField.new("data[18] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_18", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_19 = ProtoField.new("data[19] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_19", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_20 = ProtoField.new("data[20] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_20", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_21 = ProtoField.new("data[21] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_21", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_22 = ProtoField.new("data[22] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_22", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_23 = ProtoField.new("data[23] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_23", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_24 = ProtoField.new("data[24] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_24", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_25 = ProtoField.new("data[25] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_25", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_26 = ProtoField.new("data[26] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_26", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_27 = ProtoField.new("data[27] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_27", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_28 = ProtoField.new("data[28] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_28", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_29 = ProtoField.new("data[29] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_29", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_30 = ProtoField.new("data[30] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_30", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_31 = ProtoField.new("data[31] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_31", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_32 = ProtoField.new("data[32] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_32", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_33 = ProtoField.new("data[33] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_33", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_34 = ProtoField.new("data[34] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_34", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_35 = ProtoField.new("data[35] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_35", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_36 = ProtoField.new("data[36] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_36", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_37 = ProtoField.new("data[37] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_37", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_38 = ProtoField.new("data[38] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_38", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_39 = ProtoField.new("data[39] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_39", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_40 = ProtoField.new("data[40] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_40", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_41 = ProtoField.new("data[41] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_41", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_42 = ProtoField.new("data[42] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_42", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_43 = ProtoField.new("data[43] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_43", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_44 = ProtoField.new("data[44] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_44", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_45 = ProtoField.new("data[45] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_45", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_46 = ProtoField.new("data[46] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_46", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_47 = ProtoField.new("data[47] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_47", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_48 = ProtoField.new("data[48] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_48", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_49 = ProtoField.new("data[49] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_49", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_50 = ProtoField.new("data[50] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_50", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_51 = ProtoField.new("data[51] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_51", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_52 = ProtoField.new("data[52] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_52", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_53 = ProtoField.new("data[53] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_53", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_54 = ProtoField.new("data[54] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_54", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_55 = ProtoField.new("data[55] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_55", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_56 = ProtoField.new("data[56] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_56", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_57 = ProtoField.new("data[57] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_57", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_58 = ProtoField.new("data[58] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_58", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_59 = ProtoField.new("data[59] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_59", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_60 = ProtoField.new("data[60] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_60", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_61 = ProtoField.new("data[61] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_61", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_62 = ProtoField.new("data[62] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_62", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_63 = ProtoField.new("data[63] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_63", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_64 = ProtoField.new("data[64] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_64", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_65 = ProtoField.new("data[65] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_65", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_66 = ProtoField.new("data[66] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_66", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_67 = ProtoField.new("data[67] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_67", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_68 = ProtoField.new("data[68] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_68", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_69 = ProtoField.new("data[69] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_69", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_70 = ProtoField.new("data[70] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_70", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_71 = ProtoField.new("data[71] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_71", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_72 = ProtoField.new("data[72] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_72", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_73 = ProtoField.new("data[73] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_73", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_74 = ProtoField.new("data[74] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_74", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_75 = ProtoField.new("data[75] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_75", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_76 = ProtoField.new("data[76] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_76", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_77 = ProtoField.new("data[77] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_77", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_78 = ProtoField.new("data[78] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_78", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_79 = ProtoField.new("data[79] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_79", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_80 = ProtoField.new("data[80] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_80", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_81 = ProtoField.new("data[81] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_81", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_82 = ProtoField.new("data[82] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_82", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_83 = ProtoField.new("data[83] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_83", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_84 = ProtoField.new("data[84] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_84", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_85 = ProtoField.new("data[85] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_85", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_86 = ProtoField.new("data[86] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_86", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_87 = ProtoField.new("data[87] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_87", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_88 = ProtoField.new("data[88] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_88", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_89 = ProtoField.new("data[89] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_89", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_90 = ProtoField.new("data[90] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_90", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_91 = ProtoField.new("data[91] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_91", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_92 = ProtoField.new("data[92] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_92", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_93 = ProtoField.new("data[93] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_93", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_94 = ProtoField.new("data[94] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_94", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_95 = ProtoField.new("data[95] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_95", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_96 = ProtoField.new("data[96] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_96", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_97 = ProtoField.new("data[97] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_97", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_98 = ProtoField.new("data[98] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_98", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_99 = ProtoField.new("data[99] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_99", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_100 = ProtoField.new("data[100] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_100", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_101 = ProtoField.new("data[101] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_101", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_102 = ProtoField.new("data[102] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_102", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_103 = ProtoField.new("data[103] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_103", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_104 = ProtoField.new("data[104] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_104", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_105 = ProtoField.new("data[105] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_105", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_106 = ProtoField.new("data[106] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_106", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_107 = ProtoField.new("data[107] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_107", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_108 = ProtoField.new("data[108] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_108", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_109 = ProtoField.new("data[109] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_109", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_110 = ProtoField.new("data[110] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_110", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_111 = ProtoField.new("data[111] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_111", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_112 = ProtoField.new("data[112] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_112", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_113 = ProtoField.new("data[113] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_113", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_114 = ProtoField.new("data[114] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_114", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_115 = ProtoField.new("data[115] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_115", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_116 = ProtoField.new("data[116] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_116", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_117 = ProtoField.new("data[117] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_117", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_118 = ProtoField.new("data[118] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_118", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_119 = ProtoField.new("data[119] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_119", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_120 = ProtoField.new("data[120] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_120", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_121 = ProtoField.new("data[121] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_121", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_122 = ProtoField.new("data[122] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_122", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_123 = ProtoField.new("data[123] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_123", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_124 = ProtoField.new("data[124] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_124", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_125 = ProtoField.new("data[125] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_125", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_126 = ProtoField.new("data[126] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_126", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_data_127 = ProtoField.new("data[127] (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_data_127", ftypes.UINT8, nil)
f.DEVICE_OP_READ_REPLY_bank = ProtoField.new("bank (uint8_t)", "mavlink_proto.DEVICE_OP_READ_REPLY_bank", ftypes.UINT8, nil)

f.DEVICE_OP_WRITE_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_target_system", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_target_component", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_request_id = ProtoField.new("request_id (uint32_t)", "mavlink_proto.DEVICE_OP_WRITE_request_id", ftypes.UINT32, nil)
f.DEVICE_OP_WRITE_bustype = ProtoField.new("bustype (DEVICE_OP_BUSTYPE)", "mavlink_proto.DEVICE_OP_WRITE_bustype", ftypes.UINT8, enumEntryName.DEVICE_OP_BUSTYPE)
f.DEVICE_OP_WRITE_bus = ProtoField.new("bus (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_bus", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_address = ProtoField.new("address (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_address", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_busname = ProtoField.new("busname (char)", "mavlink_proto.DEVICE_OP_WRITE_busname", ftypes.STRING, nil)
f.DEVICE_OP_WRITE_regstart = ProtoField.new("regstart (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_regstart", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_count = ProtoField.new("count (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_count", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_0", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_1", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_2", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_3", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_4", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_5", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_6", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_7", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_8 = ProtoField.new("data[8] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_8", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_9 = ProtoField.new("data[9] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_9", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_10 = ProtoField.new("data[10] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_10", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_11 = ProtoField.new("data[11] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_11", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_12 = ProtoField.new("data[12] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_12", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_13 = ProtoField.new("data[13] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_13", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_14 = ProtoField.new("data[14] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_14", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_15 = ProtoField.new("data[15] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_15", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_16 = ProtoField.new("data[16] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_16", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_17 = ProtoField.new("data[17] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_17", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_18 = ProtoField.new("data[18] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_18", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_19 = ProtoField.new("data[19] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_19", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_20 = ProtoField.new("data[20] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_20", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_21 = ProtoField.new("data[21] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_21", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_22 = ProtoField.new("data[22] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_22", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_23 = ProtoField.new("data[23] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_23", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_24 = ProtoField.new("data[24] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_24", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_25 = ProtoField.new("data[25] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_25", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_26 = ProtoField.new("data[26] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_26", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_27 = ProtoField.new("data[27] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_27", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_28 = ProtoField.new("data[28] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_28", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_29 = ProtoField.new("data[29] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_29", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_30 = ProtoField.new("data[30] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_30", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_31 = ProtoField.new("data[31] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_31", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_32 = ProtoField.new("data[32] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_32", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_33 = ProtoField.new("data[33] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_33", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_34 = ProtoField.new("data[34] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_34", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_35 = ProtoField.new("data[35] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_35", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_36 = ProtoField.new("data[36] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_36", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_37 = ProtoField.new("data[37] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_37", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_38 = ProtoField.new("data[38] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_38", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_39 = ProtoField.new("data[39] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_39", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_40 = ProtoField.new("data[40] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_40", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_41 = ProtoField.new("data[41] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_41", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_42 = ProtoField.new("data[42] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_42", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_43 = ProtoField.new("data[43] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_43", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_44 = ProtoField.new("data[44] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_44", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_45 = ProtoField.new("data[45] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_45", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_46 = ProtoField.new("data[46] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_46", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_47 = ProtoField.new("data[47] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_47", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_48 = ProtoField.new("data[48] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_48", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_49 = ProtoField.new("data[49] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_49", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_50 = ProtoField.new("data[50] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_50", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_51 = ProtoField.new("data[51] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_51", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_52 = ProtoField.new("data[52] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_52", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_53 = ProtoField.new("data[53] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_53", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_54 = ProtoField.new("data[54] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_54", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_55 = ProtoField.new("data[55] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_55", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_56 = ProtoField.new("data[56] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_56", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_57 = ProtoField.new("data[57] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_57", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_58 = ProtoField.new("data[58] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_58", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_59 = ProtoField.new("data[59] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_59", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_60 = ProtoField.new("data[60] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_60", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_61 = ProtoField.new("data[61] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_61", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_62 = ProtoField.new("data[62] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_62", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_63 = ProtoField.new("data[63] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_63", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_64 = ProtoField.new("data[64] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_64", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_65 = ProtoField.new("data[65] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_65", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_66 = ProtoField.new("data[66] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_66", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_67 = ProtoField.new("data[67] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_67", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_68 = ProtoField.new("data[68] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_68", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_69 = ProtoField.new("data[69] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_69", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_70 = ProtoField.new("data[70] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_70", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_71 = ProtoField.new("data[71] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_71", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_72 = ProtoField.new("data[72] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_72", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_73 = ProtoField.new("data[73] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_73", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_74 = ProtoField.new("data[74] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_74", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_75 = ProtoField.new("data[75] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_75", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_76 = ProtoField.new("data[76] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_76", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_77 = ProtoField.new("data[77] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_77", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_78 = ProtoField.new("data[78] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_78", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_79 = ProtoField.new("data[79] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_79", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_80 = ProtoField.new("data[80] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_80", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_81 = ProtoField.new("data[81] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_81", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_82 = ProtoField.new("data[82] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_82", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_83 = ProtoField.new("data[83] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_83", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_84 = ProtoField.new("data[84] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_84", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_85 = ProtoField.new("data[85] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_85", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_86 = ProtoField.new("data[86] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_86", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_87 = ProtoField.new("data[87] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_87", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_88 = ProtoField.new("data[88] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_88", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_89 = ProtoField.new("data[89] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_89", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_90 = ProtoField.new("data[90] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_90", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_91 = ProtoField.new("data[91] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_91", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_92 = ProtoField.new("data[92] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_92", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_93 = ProtoField.new("data[93] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_93", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_94 = ProtoField.new("data[94] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_94", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_95 = ProtoField.new("data[95] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_95", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_96 = ProtoField.new("data[96] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_96", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_97 = ProtoField.new("data[97] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_97", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_98 = ProtoField.new("data[98] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_98", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_99 = ProtoField.new("data[99] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_99", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_100 = ProtoField.new("data[100] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_100", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_101 = ProtoField.new("data[101] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_101", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_102 = ProtoField.new("data[102] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_102", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_103 = ProtoField.new("data[103] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_103", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_104 = ProtoField.new("data[104] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_104", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_105 = ProtoField.new("data[105] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_105", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_106 = ProtoField.new("data[106] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_106", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_107 = ProtoField.new("data[107] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_107", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_108 = ProtoField.new("data[108] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_108", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_109 = ProtoField.new("data[109] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_109", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_110 = ProtoField.new("data[110] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_110", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_111 = ProtoField.new("data[111] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_111", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_112 = ProtoField.new("data[112] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_112", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_113 = ProtoField.new("data[113] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_113", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_114 = ProtoField.new("data[114] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_114", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_115 = ProtoField.new("data[115] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_115", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_116 = ProtoField.new("data[116] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_116", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_117 = ProtoField.new("data[117] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_117", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_118 = ProtoField.new("data[118] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_118", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_119 = ProtoField.new("data[119] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_119", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_120 = ProtoField.new("data[120] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_120", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_121 = ProtoField.new("data[121] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_121", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_122 = ProtoField.new("data[122] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_122", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_123 = ProtoField.new("data[123] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_123", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_124 = ProtoField.new("data[124] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_124", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_125 = ProtoField.new("data[125] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_125", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_126 = ProtoField.new("data[126] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_126", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_data_127 = ProtoField.new("data[127] (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_data_127", ftypes.UINT8, nil)
f.DEVICE_OP_WRITE_bank = ProtoField.new("bank (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_bank", ftypes.UINT8, nil)

f.DEVICE_OP_WRITE_REPLY_request_id = ProtoField.new("request_id (uint32_t)", "mavlink_proto.DEVICE_OP_WRITE_REPLY_request_id", ftypes.UINT32, nil)
f.DEVICE_OP_WRITE_REPLY_result = ProtoField.new("result (uint8_t)", "mavlink_proto.DEVICE_OP_WRITE_REPLY_result", ftypes.UINT8, nil)

f.SECURE_COMMAND_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.SECURE_COMMAND_target_system", ftypes.UINT8, nil)
f.SECURE_COMMAND_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.SECURE_COMMAND_target_component", ftypes.UINT8, nil)
f.SECURE_COMMAND_sequence = ProtoField.new("sequence (uint32_t)", "mavlink_proto.SECURE_COMMAND_sequence", ftypes.UINT32, nil)
f.SECURE_COMMAND_operation = ProtoField.new("operation (SECURE_COMMAND_OP)", "mavlink_proto.SECURE_COMMAND_operation", ftypes.UINT32, enumEntryName.SECURE_COMMAND_OP)
f.SECURE_COMMAND_data_length = ProtoField.new("data_length (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_length", ftypes.UINT8, nil)
f.SECURE_COMMAND_sig_length = ProtoField.new("sig_length (uint8_t)", "mavlink_proto.SECURE_COMMAND_sig_length", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_0", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_1", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_2", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_3", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_4", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_5", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_6", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_7", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_8 = ProtoField.new("data[8] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_8", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_9 = ProtoField.new("data[9] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_9", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_10 = ProtoField.new("data[10] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_10", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_11 = ProtoField.new("data[11] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_11", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_12 = ProtoField.new("data[12] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_12", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_13 = ProtoField.new("data[13] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_13", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_14 = ProtoField.new("data[14] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_14", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_15 = ProtoField.new("data[15] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_15", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_16 = ProtoField.new("data[16] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_16", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_17 = ProtoField.new("data[17] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_17", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_18 = ProtoField.new("data[18] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_18", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_19 = ProtoField.new("data[19] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_19", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_20 = ProtoField.new("data[20] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_20", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_21 = ProtoField.new("data[21] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_21", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_22 = ProtoField.new("data[22] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_22", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_23 = ProtoField.new("data[23] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_23", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_24 = ProtoField.new("data[24] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_24", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_25 = ProtoField.new("data[25] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_25", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_26 = ProtoField.new("data[26] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_26", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_27 = ProtoField.new("data[27] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_27", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_28 = ProtoField.new("data[28] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_28", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_29 = ProtoField.new("data[29] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_29", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_30 = ProtoField.new("data[30] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_30", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_31 = ProtoField.new("data[31] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_31", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_32 = ProtoField.new("data[32] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_32", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_33 = ProtoField.new("data[33] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_33", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_34 = ProtoField.new("data[34] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_34", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_35 = ProtoField.new("data[35] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_35", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_36 = ProtoField.new("data[36] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_36", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_37 = ProtoField.new("data[37] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_37", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_38 = ProtoField.new("data[38] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_38", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_39 = ProtoField.new("data[39] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_39", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_40 = ProtoField.new("data[40] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_40", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_41 = ProtoField.new("data[41] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_41", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_42 = ProtoField.new("data[42] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_42", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_43 = ProtoField.new("data[43] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_43", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_44 = ProtoField.new("data[44] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_44", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_45 = ProtoField.new("data[45] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_45", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_46 = ProtoField.new("data[46] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_46", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_47 = ProtoField.new("data[47] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_47", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_48 = ProtoField.new("data[48] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_48", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_49 = ProtoField.new("data[49] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_49", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_50 = ProtoField.new("data[50] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_50", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_51 = ProtoField.new("data[51] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_51", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_52 = ProtoField.new("data[52] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_52", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_53 = ProtoField.new("data[53] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_53", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_54 = ProtoField.new("data[54] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_54", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_55 = ProtoField.new("data[55] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_55", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_56 = ProtoField.new("data[56] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_56", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_57 = ProtoField.new("data[57] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_57", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_58 = ProtoField.new("data[58] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_58", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_59 = ProtoField.new("data[59] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_59", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_60 = ProtoField.new("data[60] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_60", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_61 = ProtoField.new("data[61] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_61", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_62 = ProtoField.new("data[62] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_62", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_63 = ProtoField.new("data[63] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_63", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_64 = ProtoField.new("data[64] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_64", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_65 = ProtoField.new("data[65] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_65", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_66 = ProtoField.new("data[66] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_66", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_67 = ProtoField.new("data[67] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_67", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_68 = ProtoField.new("data[68] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_68", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_69 = ProtoField.new("data[69] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_69", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_70 = ProtoField.new("data[70] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_70", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_71 = ProtoField.new("data[71] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_71", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_72 = ProtoField.new("data[72] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_72", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_73 = ProtoField.new("data[73] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_73", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_74 = ProtoField.new("data[74] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_74", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_75 = ProtoField.new("data[75] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_75", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_76 = ProtoField.new("data[76] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_76", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_77 = ProtoField.new("data[77] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_77", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_78 = ProtoField.new("data[78] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_78", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_79 = ProtoField.new("data[79] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_79", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_80 = ProtoField.new("data[80] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_80", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_81 = ProtoField.new("data[81] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_81", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_82 = ProtoField.new("data[82] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_82", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_83 = ProtoField.new("data[83] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_83", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_84 = ProtoField.new("data[84] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_84", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_85 = ProtoField.new("data[85] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_85", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_86 = ProtoField.new("data[86] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_86", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_87 = ProtoField.new("data[87] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_87", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_88 = ProtoField.new("data[88] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_88", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_89 = ProtoField.new("data[89] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_89", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_90 = ProtoField.new("data[90] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_90", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_91 = ProtoField.new("data[91] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_91", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_92 = ProtoField.new("data[92] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_92", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_93 = ProtoField.new("data[93] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_93", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_94 = ProtoField.new("data[94] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_94", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_95 = ProtoField.new("data[95] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_95", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_96 = ProtoField.new("data[96] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_96", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_97 = ProtoField.new("data[97] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_97", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_98 = ProtoField.new("data[98] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_98", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_99 = ProtoField.new("data[99] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_99", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_100 = ProtoField.new("data[100] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_100", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_101 = ProtoField.new("data[101] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_101", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_102 = ProtoField.new("data[102] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_102", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_103 = ProtoField.new("data[103] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_103", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_104 = ProtoField.new("data[104] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_104", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_105 = ProtoField.new("data[105] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_105", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_106 = ProtoField.new("data[106] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_106", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_107 = ProtoField.new("data[107] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_107", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_108 = ProtoField.new("data[108] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_108", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_109 = ProtoField.new("data[109] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_109", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_110 = ProtoField.new("data[110] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_110", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_111 = ProtoField.new("data[111] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_111", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_112 = ProtoField.new("data[112] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_112", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_113 = ProtoField.new("data[113] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_113", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_114 = ProtoField.new("data[114] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_114", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_115 = ProtoField.new("data[115] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_115", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_116 = ProtoField.new("data[116] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_116", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_117 = ProtoField.new("data[117] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_117", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_118 = ProtoField.new("data[118] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_118", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_119 = ProtoField.new("data[119] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_119", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_120 = ProtoField.new("data[120] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_120", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_121 = ProtoField.new("data[121] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_121", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_122 = ProtoField.new("data[122] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_122", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_123 = ProtoField.new("data[123] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_123", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_124 = ProtoField.new("data[124] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_124", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_125 = ProtoField.new("data[125] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_125", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_126 = ProtoField.new("data[126] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_126", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_127 = ProtoField.new("data[127] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_127", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_128 = ProtoField.new("data[128] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_128", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_129 = ProtoField.new("data[129] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_129", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_130 = ProtoField.new("data[130] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_130", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_131 = ProtoField.new("data[131] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_131", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_132 = ProtoField.new("data[132] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_132", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_133 = ProtoField.new("data[133] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_133", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_134 = ProtoField.new("data[134] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_134", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_135 = ProtoField.new("data[135] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_135", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_136 = ProtoField.new("data[136] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_136", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_137 = ProtoField.new("data[137] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_137", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_138 = ProtoField.new("data[138] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_138", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_139 = ProtoField.new("data[139] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_139", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_140 = ProtoField.new("data[140] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_140", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_141 = ProtoField.new("data[141] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_141", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_142 = ProtoField.new("data[142] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_142", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_143 = ProtoField.new("data[143] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_143", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_144 = ProtoField.new("data[144] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_144", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_145 = ProtoField.new("data[145] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_145", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_146 = ProtoField.new("data[146] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_146", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_147 = ProtoField.new("data[147] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_147", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_148 = ProtoField.new("data[148] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_148", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_149 = ProtoField.new("data[149] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_149", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_150 = ProtoField.new("data[150] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_150", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_151 = ProtoField.new("data[151] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_151", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_152 = ProtoField.new("data[152] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_152", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_153 = ProtoField.new("data[153] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_153", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_154 = ProtoField.new("data[154] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_154", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_155 = ProtoField.new("data[155] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_155", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_156 = ProtoField.new("data[156] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_156", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_157 = ProtoField.new("data[157] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_157", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_158 = ProtoField.new("data[158] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_158", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_159 = ProtoField.new("data[159] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_159", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_160 = ProtoField.new("data[160] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_160", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_161 = ProtoField.new("data[161] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_161", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_162 = ProtoField.new("data[162] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_162", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_163 = ProtoField.new("data[163] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_163", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_164 = ProtoField.new("data[164] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_164", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_165 = ProtoField.new("data[165] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_165", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_166 = ProtoField.new("data[166] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_166", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_167 = ProtoField.new("data[167] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_167", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_168 = ProtoField.new("data[168] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_168", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_169 = ProtoField.new("data[169] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_169", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_170 = ProtoField.new("data[170] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_170", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_171 = ProtoField.new("data[171] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_171", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_172 = ProtoField.new("data[172] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_172", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_173 = ProtoField.new("data[173] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_173", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_174 = ProtoField.new("data[174] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_174", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_175 = ProtoField.new("data[175] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_175", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_176 = ProtoField.new("data[176] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_176", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_177 = ProtoField.new("data[177] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_177", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_178 = ProtoField.new("data[178] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_178", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_179 = ProtoField.new("data[179] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_179", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_180 = ProtoField.new("data[180] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_180", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_181 = ProtoField.new("data[181] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_181", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_182 = ProtoField.new("data[182] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_182", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_183 = ProtoField.new("data[183] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_183", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_184 = ProtoField.new("data[184] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_184", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_185 = ProtoField.new("data[185] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_185", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_186 = ProtoField.new("data[186] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_186", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_187 = ProtoField.new("data[187] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_187", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_188 = ProtoField.new("data[188] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_188", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_189 = ProtoField.new("data[189] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_189", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_190 = ProtoField.new("data[190] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_190", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_191 = ProtoField.new("data[191] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_191", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_192 = ProtoField.new("data[192] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_192", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_193 = ProtoField.new("data[193] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_193", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_194 = ProtoField.new("data[194] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_194", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_195 = ProtoField.new("data[195] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_195", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_196 = ProtoField.new("data[196] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_196", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_197 = ProtoField.new("data[197] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_197", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_198 = ProtoField.new("data[198] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_198", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_199 = ProtoField.new("data[199] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_199", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_200 = ProtoField.new("data[200] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_200", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_201 = ProtoField.new("data[201] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_201", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_202 = ProtoField.new("data[202] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_202", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_203 = ProtoField.new("data[203] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_203", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_204 = ProtoField.new("data[204] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_204", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_205 = ProtoField.new("data[205] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_205", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_206 = ProtoField.new("data[206] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_206", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_207 = ProtoField.new("data[207] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_207", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_208 = ProtoField.new("data[208] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_208", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_209 = ProtoField.new("data[209] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_209", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_210 = ProtoField.new("data[210] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_210", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_211 = ProtoField.new("data[211] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_211", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_212 = ProtoField.new("data[212] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_212", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_213 = ProtoField.new("data[213] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_213", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_214 = ProtoField.new("data[214] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_214", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_215 = ProtoField.new("data[215] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_215", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_216 = ProtoField.new("data[216] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_216", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_217 = ProtoField.new("data[217] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_217", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_218 = ProtoField.new("data[218] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_218", ftypes.UINT8, nil)
f.SECURE_COMMAND_data_219 = ProtoField.new("data[219] (uint8_t)", "mavlink_proto.SECURE_COMMAND_data_219", ftypes.UINT8, nil)

f.SECURE_COMMAND_REPLY_sequence = ProtoField.new("sequence (uint32_t)", "mavlink_proto.SECURE_COMMAND_REPLY_sequence", ftypes.UINT32, nil)
f.SECURE_COMMAND_REPLY_operation = ProtoField.new("operation (SECURE_COMMAND_OP)", "mavlink_proto.SECURE_COMMAND_REPLY_operation", ftypes.UINT32, enumEntryName.SECURE_COMMAND_OP)
f.SECURE_COMMAND_REPLY_result = ProtoField.new("result (MAV_RESULT)", "mavlink_proto.SECURE_COMMAND_REPLY_result", ftypes.UINT8, enumEntryName.MAV_RESULT)
f.SECURE_COMMAND_REPLY_data_length = ProtoField.new("data_length (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_length", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_0", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_1", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_2", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_3", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_4", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_5", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_6", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_7", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_8 = ProtoField.new("data[8] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_8", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_9 = ProtoField.new("data[9] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_9", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_10 = ProtoField.new("data[10] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_10", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_11 = ProtoField.new("data[11] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_11", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_12 = ProtoField.new("data[12] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_12", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_13 = ProtoField.new("data[13] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_13", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_14 = ProtoField.new("data[14] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_14", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_15 = ProtoField.new("data[15] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_15", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_16 = ProtoField.new("data[16] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_16", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_17 = ProtoField.new("data[17] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_17", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_18 = ProtoField.new("data[18] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_18", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_19 = ProtoField.new("data[19] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_19", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_20 = ProtoField.new("data[20] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_20", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_21 = ProtoField.new("data[21] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_21", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_22 = ProtoField.new("data[22] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_22", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_23 = ProtoField.new("data[23] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_23", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_24 = ProtoField.new("data[24] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_24", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_25 = ProtoField.new("data[25] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_25", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_26 = ProtoField.new("data[26] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_26", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_27 = ProtoField.new("data[27] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_27", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_28 = ProtoField.new("data[28] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_28", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_29 = ProtoField.new("data[29] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_29", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_30 = ProtoField.new("data[30] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_30", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_31 = ProtoField.new("data[31] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_31", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_32 = ProtoField.new("data[32] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_32", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_33 = ProtoField.new("data[33] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_33", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_34 = ProtoField.new("data[34] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_34", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_35 = ProtoField.new("data[35] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_35", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_36 = ProtoField.new("data[36] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_36", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_37 = ProtoField.new("data[37] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_37", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_38 = ProtoField.new("data[38] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_38", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_39 = ProtoField.new("data[39] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_39", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_40 = ProtoField.new("data[40] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_40", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_41 = ProtoField.new("data[41] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_41", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_42 = ProtoField.new("data[42] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_42", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_43 = ProtoField.new("data[43] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_43", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_44 = ProtoField.new("data[44] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_44", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_45 = ProtoField.new("data[45] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_45", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_46 = ProtoField.new("data[46] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_46", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_47 = ProtoField.new("data[47] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_47", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_48 = ProtoField.new("data[48] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_48", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_49 = ProtoField.new("data[49] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_49", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_50 = ProtoField.new("data[50] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_50", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_51 = ProtoField.new("data[51] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_51", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_52 = ProtoField.new("data[52] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_52", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_53 = ProtoField.new("data[53] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_53", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_54 = ProtoField.new("data[54] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_54", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_55 = ProtoField.new("data[55] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_55", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_56 = ProtoField.new("data[56] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_56", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_57 = ProtoField.new("data[57] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_57", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_58 = ProtoField.new("data[58] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_58", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_59 = ProtoField.new("data[59] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_59", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_60 = ProtoField.new("data[60] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_60", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_61 = ProtoField.new("data[61] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_61", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_62 = ProtoField.new("data[62] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_62", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_63 = ProtoField.new("data[63] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_63", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_64 = ProtoField.new("data[64] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_64", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_65 = ProtoField.new("data[65] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_65", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_66 = ProtoField.new("data[66] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_66", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_67 = ProtoField.new("data[67] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_67", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_68 = ProtoField.new("data[68] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_68", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_69 = ProtoField.new("data[69] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_69", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_70 = ProtoField.new("data[70] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_70", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_71 = ProtoField.new("data[71] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_71", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_72 = ProtoField.new("data[72] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_72", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_73 = ProtoField.new("data[73] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_73", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_74 = ProtoField.new("data[74] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_74", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_75 = ProtoField.new("data[75] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_75", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_76 = ProtoField.new("data[76] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_76", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_77 = ProtoField.new("data[77] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_77", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_78 = ProtoField.new("data[78] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_78", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_79 = ProtoField.new("data[79] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_79", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_80 = ProtoField.new("data[80] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_80", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_81 = ProtoField.new("data[81] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_81", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_82 = ProtoField.new("data[82] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_82", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_83 = ProtoField.new("data[83] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_83", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_84 = ProtoField.new("data[84] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_84", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_85 = ProtoField.new("data[85] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_85", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_86 = ProtoField.new("data[86] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_86", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_87 = ProtoField.new("data[87] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_87", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_88 = ProtoField.new("data[88] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_88", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_89 = ProtoField.new("data[89] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_89", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_90 = ProtoField.new("data[90] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_90", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_91 = ProtoField.new("data[91] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_91", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_92 = ProtoField.new("data[92] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_92", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_93 = ProtoField.new("data[93] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_93", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_94 = ProtoField.new("data[94] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_94", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_95 = ProtoField.new("data[95] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_95", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_96 = ProtoField.new("data[96] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_96", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_97 = ProtoField.new("data[97] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_97", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_98 = ProtoField.new("data[98] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_98", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_99 = ProtoField.new("data[99] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_99", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_100 = ProtoField.new("data[100] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_100", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_101 = ProtoField.new("data[101] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_101", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_102 = ProtoField.new("data[102] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_102", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_103 = ProtoField.new("data[103] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_103", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_104 = ProtoField.new("data[104] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_104", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_105 = ProtoField.new("data[105] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_105", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_106 = ProtoField.new("data[106] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_106", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_107 = ProtoField.new("data[107] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_107", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_108 = ProtoField.new("data[108] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_108", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_109 = ProtoField.new("data[109] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_109", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_110 = ProtoField.new("data[110] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_110", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_111 = ProtoField.new("data[111] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_111", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_112 = ProtoField.new("data[112] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_112", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_113 = ProtoField.new("data[113] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_113", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_114 = ProtoField.new("data[114] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_114", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_115 = ProtoField.new("data[115] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_115", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_116 = ProtoField.new("data[116] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_116", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_117 = ProtoField.new("data[117] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_117", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_118 = ProtoField.new("data[118] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_118", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_119 = ProtoField.new("data[119] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_119", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_120 = ProtoField.new("data[120] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_120", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_121 = ProtoField.new("data[121] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_121", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_122 = ProtoField.new("data[122] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_122", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_123 = ProtoField.new("data[123] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_123", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_124 = ProtoField.new("data[124] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_124", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_125 = ProtoField.new("data[125] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_125", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_126 = ProtoField.new("data[126] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_126", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_127 = ProtoField.new("data[127] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_127", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_128 = ProtoField.new("data[128] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_128", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_129 = ProtoField.new("data[129] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_129", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_130 = ProtoField.new("data[130] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_130", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_131 = ProtoField.new("data[131] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_131", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_132 = ProtoField.new("data[132] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_132", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_133 = ProtoField.new("data[133] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_133", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_134 = ProtoField.new("data[134] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_134", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_135 = ProtoField.new("data[135] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_135", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_136 = ProtoField.new("data[136] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_136", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_137 = ProtoField.new("data[137] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_137", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_138 = ProtoField.new("data[138] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_138", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_139 = ProtoField.new("data[139] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_139", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_140 = ProtoField.new("data[140] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_140", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_141 = ProtoField.new("data[141] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_141", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_142 = ProtoField.new("data[142] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_142", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_143 = ProtoField.new("data[143] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_143", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_144 = ProtoField.new("data[144] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_144", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_145 = ProtoField.new("data[145] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_145", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_146 = ProtoField.new("data[146] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_146", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_147 = ProtoField.new("data[147] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_147", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_148 = ProtoField.new("data[148] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_148", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_149 = ProtoField.new("data[149] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_149", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_150 = ProtoField.new("data[150] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_150", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_151 = ProtoField.new("data[151] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_151", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_152 = ProtoField.new("data[152] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_152", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_153 = ProtoField.new("data[153] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_153", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_154 = ProtoField.new("data[154] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_154", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_155 = ProtoField.new("data[155] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_155", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_156 = ProtoField.new("data[156] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_156", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_157 = ProtoField.new("data[157] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_157", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_158 = ProtoField.new("data[158] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_158", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_159 = ProtoField.new("data[159] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_159", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_160 = ProtoField.new("data[160] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_160", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_161 = ProtoField.new("data[161] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_161", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_162 = ProtoField.new("data[162] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_162", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_163 = ProtoField.new("data[163] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_163", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_164 = ProtoField.new("data[164] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_164", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_165 = ProtoField.new("data[165] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_165", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_166 = ProtoField.new("data[166] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_166", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_167 = ProtoField.new("data[167] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_167", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_168 = ProtoField.new("data[168] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_168", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_169 = ProtoField.new("data[169] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_169", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_170 = ProtoField.new("data[170] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_170", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_171 = ProtoField.new("data[171] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_171", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_172 = ProtoField.new("data[172] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_172", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_173 = ProtoField.new("data[173] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_173", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_174 = ProtoField.new("data[174] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_174", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_175 = ProtoField.new("data[175] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_175", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_176 = ProtoField.new("data[176] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_176", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_177 = ProtoField.new("data[177] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_177", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_178 = ProtoField.new("data[178] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_178", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_179 = ProtoField.new("data[179] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_179", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_180 = ProtoField.new("data[180] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_180", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_181 = ProtoField.new("data[181] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_181", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_182 = ProtoField.new("data[182] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_182", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_183 = ProtoField.new("data[183] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_183", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_184 = ProtoField.new("data[184] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_184", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_185 = ProtoField.new("data[185] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_185", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_186 = ProtoField.new("data[186] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_186", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_187 = ProtoField.new("data[187] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_187", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_188 = ProtoField.new("data[188] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_188", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_189 = ProtoField.new("data[189] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_189", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_190 = ProtoField.new("data[190] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_190", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_191 = ProtoField.new("data[191] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_191", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_192 = ProtoField.new("data[192] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_192", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_193 = ProtoField.new("data[193] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_193", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_194 = ProtoField.new("data[194] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_194", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_195 = ProtoField.new("data[195] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_195", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_196 = ProtoField.new("data[196] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_196", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_197 = ProtoField.new("data[197] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_197", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_198 = ProtoField.new("data[198] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_198", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_199 = ProtoField.new("data[199] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_199", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_200 = ProtoField.new("data[200] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_200", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_201 = ProtoField.new("data[201] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_201", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_202 = ProtoField.new("data[202] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_202", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_203 = ProtoField.new("data[203] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_203", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_204 = ProtoField.new("data[204] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_204", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_205 = ProtoField.new("data[205] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_205", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_206 = ProtoField.new("data[206] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_206", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_207 = ProtoField.new("data[207] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_207", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_208 = ProtoField.new("data[208] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_208", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_209 = ProtoField.new("data[209] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_209", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_210 = ProtoField.new("data[210] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_210", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_211 = ProtoField.new("data[211] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_211", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_212 = ProtoField.new("data[212] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_212", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_213 = ProtoField.new("data[213] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_213", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_214 = ProtoField.new("data[214] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_214", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_215 = ProtoField.new("data[215] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_215", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_216 = ProtoField.new("data[216] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_216", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_217 = ProtoField.new("data[217] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_217", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_218 = ProtoField.new("data[218] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_218", ftypes.UINT8, nil)
f.SECURE_COMMAND_REPLY_data_219 = ProtoField.new("data[219] (uint8_t)", "mavlink_proto.SECURE_COMMAND_REPLY_data_219", ftypes.UINT8, nil)

f.ADAP_TUNING_axis = ProtoField.new("axis (PID_TUNING_AXIS)", "mavlink_proto.ADAP_TUNING_axis", ftypes.UINT8, enumEntryName.PID_TUNING_AXIS)
f.ADAP_TUNING_desired = ProtoField.new("desired (float)", "mavlink_proto.ADAP_TUNING_desired", ftypes.FLOAT, nil)
f.ADAP_TUNING_achieved = ProtoField.new("achieved (float)", "mavlink_proto.ADAP_TUNING_achieved", ftypes.FLOAT, nil)
f.ADAP_TUNING_error = ProtoField.new("error (float)", "mavlink_proto.ADAP_TUNING_error", ftypes.FLOAT, nil)
f.ADAP_TUNING_theta = ProtoField.new("theta (float)", "mavlink_proto.ADAP_TUNING_theta", ftypes.FLOAT, nil)
f.ADAP_TUNING_omega = ProtoField.new("omega (float)", "mavlink_proto.ADAP_TUNING_omega", ftypes.FLOAT, nil)
f.ADAP_TUNING_sigma = ProtoField.new("sigma (float)", "mavlink_proto.ADAP_TUNING_sigma", ftypes.FLOAT, nil)
f.ADAP_TUNING_theta_dot = ProtoField.new("theta_dot (float)", "mavlink_proto.ADAP_TUNING_theta_dot", ftypes.FLOAT, nil)
f.ADAP_TUNING_omega_dot = ProtoField.new("omega_dot (float)", "mavlink_proto.ADAP_TUNING_omega_dot", ftypes.FLOAT, nil)
f.ADAP_TUNING_sigma_dot = ProtoField.new("sigma_dot (float)", "mavlink_proto.ADAP_TUNING_sigma_dot", ftypes.FLOAT, nil)
f.ADAP_TUNING_f = ProtoField.new("f (float)", "mavlink_proto.ADAP_TUNING_f", ftypes.FLOAT, nil)
f.ADAP_TUNING_f_dot = ProtoField.new("f_dot (float)", "mavlink_proto.ADAP_TUNING_f_dot", ftypes.FLOAT, nil)
f.ADAP_TUNING_u = ProtoField.new("u (float)", "mavlink_proto.ADAP_TUNING_u", ftypes.FLOAT, nil)

f.VISION_POSITION_DELTA_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.VISION_POSITION_DELTA_time_usec", ftypes.UINT64, nil)
f.VISION_POSITION_DELTA_time_delta_usec = ProtoField.new("time_delta_usec (uint64_t)", "mavlink_proto.VISION_POSITION_DELTA_time_delta_usec", ftypes.UINT64, nil)
f.VISION_POSITION_DELTA_angle_delta_0 = ProtoField.new("angle_delta[0] (float)", "mavlink_proto.VISION_POSITION_DELTA_angle_delta_0", ftypes.FLOAT, nil)
f.VISION_POSITION_DELTA_angle_delta_1 = ProtoField.new("angle_delta[1] (float)", "mavlink_proto.VISION_POSITION_DELTA_angle_delta_1", ftypes.FLOAT, nil)
f.VISION_POSITION_DELTA_angle_delta_2 = ProtoField.new("angle_delta[2] (float)", "mavlink_proto.VISION_POSITION_DELTA_angle_delta_2", ftypes.FLOAT, nil)
f.VISION_POSITION_DELTA_position_delta_0 = ProtoField.new("position_delta[0] (float)", "mavlink_proto.VISION_POSITION_DELTA_position_delta_0", ftypes.FLOAT, nil)
f.VISION_POSITION_DELTA_position_delta_1 = ProtoField.new("position_delta[1] (float)", "mavlink_proto.VISION_POSITION_DELTA_position_delta_1", ftypes.FLOAT, nil)
f.VISION_POSITION_DELTA_position_delta_2 = ProtoField.new("position_delta[2] (float)", "mavlink_proto.VISION_POSITION_DELTA_position_delta_2", ftypes.FLOAT, nil)
f.VISION_POSITION_DELTA_confidence = ProtoField.new("confidence (float)", "mavlink_proto.VISION_POSITION_DELTA_confidence", ftypes.FLOAT, nil)

f.AOA_SSA_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.AOA_SSA_time_usec", ftypes.UINT64, nil)
f.AOA_SSA_AOA = ProtoField.new("AOA (float)", "mavlink_proto.AOA_SSA_AOA", ftypes.FLOAT, nil)
f.AOA_SSA_SSA = ProtoField.new("SSA (float)", "mavlink_proto.AOA_SSA_SSA", ftypes.FLOAT, nil)

f.ESC_TELEMETRY_1_TO_4_temperature_0 = ProtoField.new("temperature[0] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_1_TO_4_temperature_0", ftypes.UINT8, nil)
f.ESC_TELEMETRY_1_TO_4_temperature_1 = ProtoField.new("temperature[1] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_1_TO_4_temperature_1", ftypes.UINT8, nil)
f.ESC_TELEMETRY_1_TO_4_temperature_2 = ProtoField.new("temperature[2] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_1_TO_4_temperature_2", ftypes.UINT8, nil)
f.ESC_TELEMETRY_1_TO_4_temperature_3 = ProtoField.new("temperature[3] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_1_TO_4_temperature_3", ftypes.UINT8, nil)
f.ESC_TELEMETRY_1_TO_4_voltage_0 = ProtoField.new("voltage[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_1_TO_4_voltage_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_1_TO_4_voltage_1 = ProtoField.new("voltage[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_1_TO_4_voltage_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_1_TO_4_voltage_2 = ProtoField.new("voltage[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_1_TO_4_voltage_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_1_TO_4_voltage_3 = ProtoField.new("voltage[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_1_TO_4_voltage_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_1_TO_4_current_0 = ProtoField.new("current[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_1_TO_4_current_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_1_TO_4_current_1 = ProtoField.new("current[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_1_TO_4_current_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_1_TO_4_current_2 = ProtoField.new("current[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_1_TO_4_current_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_1_TO_4_current_3 = ProtoField.new("current[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_1_TO_4_current_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_1_TO_4_totalcurrent_0 = ProtoField.new("totalcurrent[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_1_TO_4_totalcurrent_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_1_TO_4_totalcurrent_1 = ProtoField.new("totalcurrent[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_1_TO_4_totalcurrent_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_1_TO_4_totalcurrent_2 = ProtoField.new("totalcurrent[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_1_TO_4_totalcurrent_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_1_TO_4_totalcurrent_3 = ProtoField.new("totalcurrent[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_1_TO_4_totalcurrent_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_1_TO_4_rpm_0 = ProtoField.new("rpm[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_1_TO_4_rpm_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_1_TO_4_rpm_1 = ProtoField.new("rpm[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_1_TO_4_rpm_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_1_TO_4_rpm_2 = ProtoField.new("rpm[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_1_TO_4_rpm_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_1_TO_4_rpm_3 = ProtoField.new("rpm[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_1_TO_4_rpm_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_1_TO_4_count_0 = ProtoField.new("count[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_1_TO_4_count_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_1_TO_4_count_1 = ProtoField.new("count[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_1_TO_4_count_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_1_TO_4_count_2 = ProtoField.new("count[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_1_TO_4_count_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_1_TO_4_count_3 = ProtoField.new("count[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_1_TO_4_count_3", ftypes.UINT16, nil)

f.ESC_TELEMETRY_5_TO_8_temperature_0 = ProtoField.new("temperature[0] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_5_TO_8_temperature_0", ftypes.UINT8, nil)
f.ESC_TELEMETRY_5_TO_8_temperature_1 = ProtoField.new("temperature[1] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_5_TO_8_temperature_1", ftypes.UINT8, nil)
f.ESC_TELEMETRY_5_TO_8_temperature_2 = ProtoField.new("temperature[2] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_5_TO_8_temperature_2", ftypes.UINT8, nil)
f.ESC_TELEMETRY_5_TO_8_temperature_3 = ProtoField.new("temperature[3] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_5_TO_8_temperature_3", ftypes.UINT8, nil)
f.ESC_TELEMETRY_5_TO_8_voltage_0 = ProtoField.new("voltage[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_5_TO_8_voltage_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_5_TO_8_voltage_1 = ProtoField.new("voltage[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_5_TO_8_voltage_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_5_TO_8_voltage_2 = ProtoField.new("voltage[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_5_TO_8_voltage_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_5_TO_8_voltage_3 = ProtoField.new("voltage[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_5_TO_8_voltage_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_5_TO_8_current_0 = ProtoField.new("current[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_5_TO_8_current_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_5_TO_8_current_1 = ProtoField.new("current[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_5_TO_8_current_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_5_TO_8_current_2 = ProtoField.new("current[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_5_TO_8_current_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_5_TO_8_current_3 = ProtoField.new("current[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_5_TO_8_current_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_5_TO_8_totalcurrent_0 = ProtoField.new("totalcurrent[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_5_TO_8_totalcurrent_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_5_TO_8_totalcurrent_1 = ProtoField.new("totalcurrent[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_5_TO_8_totalcurrent_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_5_TO_8_totalcurrent_2 = ProtoField.new("totalcurrent[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_5_TO_8_totalcurrent_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_5_TO_8_totalcurrent_3 = ProtoField.new("totalcurrent[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_5_TO_8_totalcurrent_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_5_TO_8_rpm_0 = ProtoField.new("rpm[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_5_TO_8_rpm_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_5_TO_8_rpm_1 = ProtoField.new("rpm[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_5_TO_8_rpm_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_5_TO_8_rpm_2 = ProtoField.new("rpm[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_5_TO_8_rpm_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_5_TO_8_rpm_3 = ProtoField.new("rpm[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_5_TO_8_rpm_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_5_TO_8_count_0 = ProtoField.new("count[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_5_TO_8_count_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_5_TO_8_count_1 = ProtoField.new("count[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_5_TO_8_count_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_5_TO_8_count_2 = ProtoField.new("count[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_5_TO_8_count_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_5_TO_8_count_3 = ProtoField.new("count[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_5_TO_8_count_3", ftypes.UINT16, nil)

f.ESC_TELEMETRY_9_TO_12_temperature_0 = ProtoField.new("temperature[0] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_9_TO_12_temperature_0", ftypes.UINT8, nil)
f.ESC_TELEMETRY_9_TO_12_temperature_1 = ProtoField.new("temperature[1] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_9_TO_12_temperature_1", ftypes.UINT8, nil)
f.ESC_TELEMETRY_9_TO_12_temperature_2 = ProtoField.new("temperature[2] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_9_TO_12_temperature_2", ftypes.UINT8, nil)
f.ESC_TELEMETRY_9_TO_12_temperature_3 = ProtoField.new("temperature[3] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_9_TO_12_temperature_3", ftypes.UINT8, nil)
f.ESC_TELEMETRY_9_TO_12_voltage_0 = ProtoField.new("voltage[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_9_TO_12_voltage_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_9_TO_12_voltage_1 = ProtoField.new("voltage[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_9_TO_12_voltage_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_9_TO_12_voltage_2 = ProtoField.new("voltage[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_9_TO_12_voltage_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_9_TO_12_voltage_3 = ProtoField.new("voltage[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_9_TO_12_voltage_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_9_TO_12_current_0 = ProtoField.new("current[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_9_TO_12_current_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_9_TO_12_current_1 = ProtoField.new("current[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_9_TO_12_current_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_9_TO_12_current_2 = ProtoField.new("current[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_9_TO_12_current_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_9_TO_12_current_3 = ProtoField.new("current[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_9_TO_12_current_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_9_TO_12_totalcurrent_0 = ProtoField.new("totalcurrent[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_9_TO_12_totalcurrent_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_9_TO_12_totalcurrent_1 = ProtoField.new("totalcurrent[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_9_TO_12_totalcurrent_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_9_TO_12_totalcurrent_2 = ProtoField.new("totalcurrent[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_9_TO_12_totalcurrent_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_9_TO_12_totalcurrent_3 = ProtoField.new("totalcurrent[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_9_TO_12_totalcurrent_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_9_TO_12_rpm_0 = ProtoField.new("rpm[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_9_TO_12_rpm_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_9_TO_12_rpm_1 = ProtoField.new("rpm[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_9_TO_12_rpm_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_9_TO_12_rpm_2 = ProtoField.new("rpm[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_9_TO_12_rpm_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_9_TO_12_rpm_3 = ProtoField.new("rpm[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_9_TO_12_rpm_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_9_TO_12_count_0 = ProtoField.new("count[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_9_TO_12_count_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_9_TO_12_count_1 = ProtoField.new("count[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_9_TO_12_count_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_9_TO_12_count_2 = ProtoField.new("count[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_9_TO_12_count_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_9_TO_12_count_3 = ProtoField.new("count[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_9_TO_12_count_3", ftypes.UINT16, nil)

f.OSD_PARAM_CONFIG_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.OSD_PARAM_CONFIG_target_system", ftypes.UINT8, nil)
f.OSD_PARAM_CONFIG_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.OSD_PARAM_CONFIG_target_component", ftypes.UINT8, nil)
f.OSD_PARAM_CONFIG_request_id = ProtoField.new("request_id (uint32_t)", "mavlink_proto.OSD_PARAM_CONFIG_request_id", ftypes.UINT32, nil)
f.OSD_PARAM_CONFIG_osd_screen = ProtoField.new("osd_screen (uint8_t)", "mavlink_proto.OSD_PARAM_CONFIG_osd_screen", ftypes.UINT8, nil)
f.OSD_PARAM_CONFIG_osd_index = ProtoField.new("osd_index (uint8_t)", "mavlink_proto.OSD_PARAM_CONFIG_osd_index", ftypes.UINT8, nil)
f.OSD_PARAM_CONFIG_param_id = ProtoField.new("param_id (char)", "mavlink_proto.OSD_PARAM_CONFIG_param_id", ftypes.STRING, nil)
f.OSD_PARAM_CONFIG_config_type = ProtoField.new("config_type (OSD_PARAM_CONFIG_TYPE)", "mavlink_proto.OSD_PARAM_CONFIG_config_type", ftypes.UINT8, enumEntryName.OSD_PARAM_CONFIG_TYPE)
f.OSD_PARAM_CONFIG_min_value = ProtoField.new("min_value (float)", "mavlink_proto.OSD_PARAM_CONFIG_min_value", ftypes.FLOAT, nil)
f.OSD_PARAM_CONFIG_max_value = ProtoField.new("max_value (float)", "mavlink_proto.OSD_PARAM_CONFIG_max_value", ftypes.FLOAT, nil)
f.OSD_PARAM_CONFIG_increment = ProtoField.new("increment (float)", "mavlink_proto.OSD_PARAM_CONFIG_increment", ftypes.FLOAT, nil)

f.OSD_PARAM_CONFIG_REPLY_request_id = ProtoField.new("request_id (uint32_t)", "mavlink_proto.OSD_PARAM_CONFIG_REPLY_request_id", ftypes.UINT32, nil)
f.OSD_PARAM_CONFIG_REPLY_result = ProtoField.new("result (OSD_PARAM_CONFIG_ERROR)", "mavlink_proto.OSD_PARAM_CONFIG_REPLY_result", ftypes.UINT8, enumEntryName.OSD_PARAM_CONFIG_ERROR)

f.OSD_PARAM_SHOW_CONFIG_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.OSD_PARAM_SHOW_CONFIG_target_system", ftypes.UINT8, nil)
f.OSD_PARAM_SHOW_CONFIG_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.OSD_PARAM_SHOW_CONFIG_target_component", ftypes.UINT8, nil)
f.OSD_PARAM_SHOW_CONFIG_request_id = ProtoField.new("request_id (uint32_t)", "mavlink_proto.OSD_PARAM_SHOW_CONFIG_request_id", ftypes.UINT32, nil)
f.OSD_PARAM_SHOW_CONFIG_osd_screen = ProtoField.new("osd_screen (uint8_t)", "mavlink_proto.OSD_PARAM_SHOW_CONFIG_osd_screen", ftypes.UINT8, nil)
f.OSD_PARAM_SHOW_CONFIG_osd_index = ProtoField.new("osd_index (uint8_t)", "mavlink_proto.OSD_PARAM_SHOW_CONFIG_osd_index", ftypes.UINT8, nil)

f.OSD_PARAM_SHOW_CONFIG_REPLY_request_id = ProtoField.new("request_id (uint32_t)", "mavlink_proto.OSD_PARAM_SHOW_CONFIG_REPLY_request_id", ftypes.UINT32, nil)
f.OSD_PARAM_SHOW_CONFIG_REPLY_result = ProtoField.new("result (OSD_PARAM_CONFIG_ERROR)", "mavlink_proto.OSD_PARAM_SHOW_CONFIG_REPLY_result", ftypes.UINT8, enumEntryName.OSD_PARAM_CONFIG_ERROR)
f.OSD_PARAM_SHOW_CONFIG_REPLY_param_id = ProtoField.new("param_id (char)", "mavlink_proto.OSD_PARAM_SHOW_CONFIG_REPLY_param_id", ftypes.STRING, nil)
f.OSD_PARAM_SHOW_CONFIG_REPLY_config_type = ProtoField.new("config_type (OSD_PARAM_CONFIG_TYPE)", "mavlink_proto.OSD_PARAM_SHOW_CONFIG_REPLY_config_type", ftypes.UINT8, enumEntryName.OSD_PARAM_CONFIG_TYPE)
f.OSD_PARAM_SHOW_CONFIG_REPLY_min_value = ProtoField.new("min_value (float)", "mavlink_proto.OSD_PARAM_SHOW_CONFIG_REPLY_min_value", ftypes.FLOAT, nil)
f.OSD_PARAM_SHOW_CONFIG_REPLY_max_value = ProtoField.new("max_value (float)", "mavlink_proto.OSD_PARAM_SHOW_CONFIG_REPLY_max_value", ftypes.FLOAT, nil)
f.OSD_PARAM_SHOW_CONFIG_REPLY_increment = ProtoField.new("increment (float)", "mavlink_proto.OSD_PARAM_SHOW_CONFIG_REPLY_increment", ftypes.FLOAT, nil)

f.OBSTACLE_DISTANCE_3D_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.OBSTACLE_DISTANCE_3D_time_boot_ms", ftypes.UINT32, nil)
f.OBSTACLE_DISTANCE_3D_sensor_type = ProtoField.new("sensor_type (MAV_DISTANCE_SENSOR)", "mavlink_proto.OBSTACLE_DISTANCE_3D_sensor_type", ftypes.UINT8, enumEntryName.MAV_DISTANCE_SENSOR)
f.OBSTACLE_DISTANCE_3D_frame = ProtoField.new("frame (MAV_FRAME)", "mavlink_proto.OBSTACLE_DISTANCE_3D_frame", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.OBSTACLE_DISTANCE_3D_obstacle_id = ProtoField.new("obstacle_id (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_3D_obstacle_id", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_3D_x = ProtoField.new("x (float)", "mavlink_proto.OBSTACLE_DISTANCE_3D_x", ftypes.FLOAT, nil)
f.OBSTACLE_DISTANCE_3D_y = ProtoField.new("y (float)", "mavlink_proto.OBSTACLE_DISTANCE_3D_y", ftypes.FLOAT, nil)
f.OBSTACLE_DISTANCE_3D_z = ProtoField.new("z (float)", "mavlink_proto.OBSTACLE_DISTANCE_3D_z", ftypes.FLOAT, nil)
f.OBSTACLE_DISTANCE_3D_min_distance = ProtoField.new("min_distance (float)", "mavlink_proto.OBSTACLE_DISTANCE_3D_min_distance", ftypes.FLOAT, nil)
f.OBSTACLE_DISTANCE_3D_max_distance = ProtoField.new("max_distance (float)", "mavlink_proto.OBSTACLE_DISTANCE_3D_max_distance", ftypes.FLOAT, nil)

f.WATER_DEPTH_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.WATER_DEPTH_time_boot_ms", ftypes.UINT32, nil)
f.WATER_DEPTH_id = ProtoField.new("id (uint8_t)", "mavlink_proto.WATER_DEPTH_id", ftypes.UINT8, nil)
f.WATER_DEPTH_healthy = ProtoField.new("healthy (uint8_t)", "mavlink_proto.WATER_DEPTH_healthy", ftypes.UINT8, nil)
f.WATER_DEPTH_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.WATER_DEPTH_lat", ftypes.INT32, nil)
f.WATER_DEPTH_lng = ProtoField.new("lng (int32_t)", "mavlink_proto.WATER_DEPTH_lng", ftypes.INT32, nil)
f.WATER_DEPTH_alt = ProtoField.new("alt (float)", "mavlink_proto.WATER_DEPTH_alt", ftypes.FLOAT, nil)
f.WATER_DEPTH_roll = ProtoField.new("roll (float)", "mavlink_proto.WATER_DEPTH_roll", ftypes.FLOAT, nil)
f.WATER_DEPTH_pitch = ProtoField.new("pitch (float)", "mavlink_proto.WATER_DEPTH_pitch", ftypes.FLOAT, nil)
f.WATER_DEPTH_yaw = ProtoField.new("yaw (float)", "mavlink_proto.WATER_DEPTH_yaw", ftypes.FLOAT, nil)
f.WATER_DEPTH_distance = ProtoField.new("distance (float)", "mavlink_proto.WATER_DEPTH_distance", ftypes.FLOAT, nil)
f.WATER_DEPTH_temperature = ProtoField.new("temperature (float)", "mavlink_proto.WATER_DEPTH_temperature", ftypes.FLOAT, nil)

f.MCU_STATUS_id = ProtoField.new("id (uint8_t)", "mavlink_proto.MCU_STATUS_id", ftypes.UINT8, nil)
f.MCU_STATUS_MCU_temperature = ProtoField.new("MCU_temperature (int16_t)", "mavlink_proto.MCU_STATUS_MCU_temperature", ftypes.INT16, nil)
f.MCU_STATUS_MCU_voltage = ProtoField.new("MCU_voltage (uint16_t)", "mavlink_proto.MCU_STATUS_MCU_voltage", ftypes.UINT16, nil)
f.MCU_STATUS_MCU_voltage_min = ProtoField.new("MCU_voltage_min (uint16_t)", "mavlink_proto.MCU_STATUS_MCU_voltage_min", ftypes.UINT16, nil)
f.MCU_STATUS_MCU_voltage_max = ProtoField.new("MCU_voltage_max (uint16_t)", "mavlink_proto.MCU_STATUS_MCU_voltage_max", ftypes.UINT16, nil)

f.ESC_TELEMETRY_13_TO_16_temperature_0 = ProtoField.new("temperature[0] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_13_TO_16_temperature_0", ftypes.UINT8, nil)
f.ESC_TELEMETRY_13_TO_16_temperature_1 = ProtoField.new("temperature[1] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_13_TO_16_temperature_1", ftypes.UINT8, nil)
f.ESC_TELEMETRY_13_TO_16_temperature_2 = ProtoField.new("temperature[2] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_13_TO_16_temperature_2", ftypes.UINT8, nil)
f.ESC_TELEMETRY_13_TO_16_temperature_3 = ProtoField.new("temperature[3] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_13_TO_16_temperature_3", ftypes.UINT8, nil)
f.ESC_TELEMETRY_13_TO_16_voltage_0 = ProtoField.new("voltage[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_13_TO_16_voltage_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_13_TO_16_voltage_1 = ProtoField.new("voltage[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_13_TO_16_voltage_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_13_TO_16_voltage_2 = ProtoField.new("voltage[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_13_TO_16_voltage_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_13_TO_16_voltage_3 = ProtoField.new("voltage[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_13_TO_16_voltage_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_13_TO_16_current_0 = ProtoField.new("current[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_13_TO_16_current_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_13_TO_16_current_1 = ProtoField.new("current[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_13_TO_16_current_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_13_TO_16_current_2 = ProtoField.new("current[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_13_TO_16_current_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_13_TO_16_current_3 = ProtoField.new("current[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_13_TO_16_current_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_13_TO_16_totalcurrent_0 = ProtoField.new("totalcurrent[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_13_TO_16_totalcurrent_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_13_TO_16_totalcurrent_1 = ProtoField.new("totalcurrent[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_13_TO_16_totalcurrent_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_13_TO_16_totalcurrent_2 = ProtoField.new("totalcurrent[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_13_TO_16_totalcurrent_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_13_TO_16_totalcurrent_3 = ProtoField.new("totalcurrent[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_13_TO_16_totalcurrent_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_13_TO_16_rpm_0 = ProtoField.new("rpm[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_13_TO_16_rpm_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_13_TO_16_rpm_1 = ProtoField.new("rpm[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_13_TO_16_rpm_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_13_TO_16_rpm_2 = ProtoField.new("rpm[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_13_TO_16_rpm_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_13_TO_16_rpm_3 = ProtoField.new("rpm[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_13_TO_16_rpm_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_13_TO_16_count_0 = ProtoField.new("count[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_13_TO_16_count_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_13_TO_16_count_1 = ProtoField.new("count[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_13_TO_16_count_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_13_TO_16_count_2 = ProtoField.new("count[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_13_TO_16_count_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_13_TO_16_count_3 = ProtoField.new("count[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_13_TO_16_count_3", ftypes.UINT16, nil)

f.ESC_TELEMETRY_17_TO_20_temperature_0 = ProtoField.new("temperature[0] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_17_TO_20_temperature_0", ftypes.UINT8, nil)
f.ESC_TELEMETRY_17_TO_20_temperature_1 = ProtoField.new("temperature[1] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_17_TO_20_temperature_1", ftypes.UINT8, nil)
f.ESC_TELEMETRY_17_TO_20_temperature_2 = ProtoField.new("temperature[2] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_17_TO_20_temperature_2", ftypes.UINT8, nil)
f.ESC_TELEMETRY_17_TO_20_temperature_3 = ProtoField.new("temperature[3] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_17_TO_20_temperature_3", ftypes.UINT8, nil)
f.ESC_TELEMETRY_17_TO_20_voltage_0 = ProtoField.new("voltage[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_17_TO_20_voltage_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_17_TO_20_voltage_1 = ProtoField.new("voltage[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_17_TO_20_voltage_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_17_TO_20_voltage_2 = ProtoField.new("voltage[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_17_TO_20_voltage_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_17_TO_20_voltage_3 = ProtoField.new("voltage[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_17_TO_20_voltage_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_17_TO_20_current_0 = ProtoField.new("current[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_17_TO_20_current_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_17_TO_20_current_1 = ProtoField.new("current[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_17_TO_20_current_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_17_TO_20_current_2 = ProtoField.new("current[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_17_TO_20_current_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_17_TO_20_current_3 = ProtoField.new("current[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_17_TO_20_current_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_17_TO_20_totalcurrent_0 = ProtoField.new("totalcurrent[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_17_TO_20_totalcurrent_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_17_TO_20_totalcurrent_1 = ProtoField.new("totalcurrent[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_17_TO_20_totalcurrent_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_17_TO_20_totalcurrent_2 = ProtoField.new("totalcurrent[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_17_TO_20_totalcurrent_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_17_TO_20_totalcurrent_3 = ProtoField.new("totalcurrent[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_17_TO_20_totalcurrent_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_17_TO_20_rpm_0 = ProtoField.new("rpm[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_17_TO_20_rpm_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_17_TO_20_rpm_1 = ProtoField.new("rpm[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_17_TO_20_rpm_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_17_TO_20_rpm_2 = ProtoField.new("rpm[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_17_TO_20_rpm_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_17_TO_20_rpm_3 = ProtoField.new("rpm[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_17_TO_20_rpm_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_17_TO_20_count_0 = ProtoField.new("count[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_17_TO_20_count_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_17_TO_20_count_1 = ProtoField.new("count[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_17_TO_20_count_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_17_TO_20_count_2 = ProtoField.new("count[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_17_TO_20_count_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_17_TO_20_count_3 = ProtoField.new("count[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_17_TO_20_count_3", ftypes.UINT16, nil)

f.ESC_TELEMETRY_21_TO_24_temperature_0 = ProtoField.new("temperature[0] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_21_TO_24_temperature_0", ftypes.UINT8, nil)
f.ESC_TELEMETRY_21_TO_24_temperature_1 = ProtoField.new("temperature[1] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_21_TO_24_temperature_1", ftypes.UINT8, nil)
f.ESC_TELEMETRY_21_TO_24_temperature_2 = ProtoField.new("temperature[2] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_21_TO_24_temperature_2", ftypes.UINT8, nil)
f.ESC_TELEMETRY_21_TO_24_temperature_3 = ProtoField.new("temperature[3] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_21_TO_24_temperature_3", ftypes.UINT8, nil)
f.ESC_TELEMETRY_21_TO_24_voltage_0 = ProtoField.new("voltage[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_21_TO_24_voltage_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_21_TO_24_voltage_1 = ProtoField.new("voltage[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_21_TO_24_voltage_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_21_TO_24_voltage_2 = ProtoField.new("voltage[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_21_TO_24_voltage_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_21_TO_24_voltage_3 = ProtoField.new("voltage[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_21_TO_24_voltage_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_21_TO_24_current_0 = ProtoField.new("current[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_21_TO_24_current_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_21_TO_24_current_1 = ProtoField.new("current[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_21_TO_24_current_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_21_TO_24_current_2 = ProtoField.new("current[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_21_TO_24_current_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_21_TO_24_current_3 = ProtoField.new("current[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_21_TO_24_current_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_21_TO_24_totalcurrent_0 = ProtoField.new("totalcurrent[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_21_TO_24_totalcurrent_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_21_TO_24_totalcurrent_1 = ProtoField.new("totalcurrent[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_21_TO_24_totalcurrent_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_21_TO_24_totalcurrent_2 = ProtoField.new("totalcurrent[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_21_TO_24_totalcurrent_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_21_TO_24_totalcurrent_3 = ProtoField.new("totalcurrent[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_21_TO_24_totalcurrent_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_21_TO_24_rpm_0 = ProtoField.new("rpm[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_21_TO_24_rpm_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_21_TO_24_rpm_1 = ProtoField.new("rpm[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_21_TO_24_rpm_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_21_TO_24_rpm_2 = ProtoField.new("rpm[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_21_TO_24_rpm_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_21_TO_24_rpm_3 = ProtoField.new("rpm[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_21_TO_24_rpm_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_21_TO_24_count_0 = ProtoField.new("count[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_21_TO_24_count_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_21_TO_24_count_1 = ProtoField.new("count[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_21_TO_24_count_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_21_TO_24_count_2 = ProtoField.new("count[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_21_TO_24_count_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_21_TO_24_count_3 = ProtoField.new("count[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_21_TO_24_count_3", ftypes.UINT16, nil)

f.ESC_TELEMETRY_25_TO_28_temperature_0 = ProtoField.new("temperature[0] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_25_TO_28_temperature_0", ftypes.UINT8, nil)
f.ESC_TELEMETRY_25_TO_28_temperature_1 = ProtoField.new("temperature[1] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_25_TO_28_temperature_1", ftypes.UINT8, nil)
f.ESC_TELEMETRY_25_TO_28_temperature_2 = ProtoField.new("temperature[2] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_25_TO_28_temperature_2", ftypes.UINT8, nil)
f.ESC_TELEMETRY_25_TO_28_temperature_3 = ProtoField.new("temperature[3] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_25_TO_28_temperature_3", ftypes.UINT8, nil)
f.ESC_TELEMETRY_25_TO_28_voltage_0 = ProtoField.new("voltage[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_25_TO_28_voltage_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_25_TO_28_voltage_1 = ProtoField.new("voltage[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_25_TO_28_voltage_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_25_TO_28_voltage_2 = ProtoField.new("voltage[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_25_TO_28_voltage_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_25_TO_28_voltage_3 = ProtoField.new("voltage[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_25_TO_28_voltage_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_25_TO_28_current_0 = ProtoField.new("current[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_25_TO_28_current_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_25_TO_28_current_1 = ProtoField.new("current[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_25_TO_28_current_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_25_TO_28_current_2 = ProtoField.new("current[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_25_TO_28_current_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_25_TO_28_current_3 = ProtoField.new("current[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_25_TO_28_current_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_25_TO_28_totalcurrent_0 = ProtoField.new("totalcurrent[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_25_TO_28_totalcurrent_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_25_TO_28_totalcurrent_1 = ProtoField.new("totalcurrent[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_25_TO_28_totalcurrent_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_25_TO_28_totalcurrent_2 = ProtoField.new("totalcurrent[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_25_TO_28_totalcurrent_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_25_TO_28_totalcurrent_3 = ProtoField.new("totalcurrent[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_25_TO_28_totalcurrent_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_25_TO_28_rpm_0 = ProtoField.new("rpm[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_25_TO_28_rpm_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_25_TO_28_rpm_1 = ProtoField.new("rpm[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_25_TO_28_rpm_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_25_TO_28_rpm_2 = ProtoField.new("rpm[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_25_TO_28_rpm_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_25_TO_28_rpm_3 = ProtoField.new("rpm[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_25_TO_28_rpm_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_25_TO_28_count_0 = ProtoField.new("count[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_25_TO_28_count_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_25_TO_28_count_1 = ProtoField.new("count[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_25_TO_28_count_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_25_TO_28_count_2 = ProtoField.new("count[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_25_TO_28_count_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_25_TO_28_count_3 = ProtoField.new("count[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_25_TO_28_count_3", ftypes.UINT16, nil)

f.ESC_TELEMETRY_29_TO_32_temperature_0 = ProtoField.new("temperature[0] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_29_TO_32_temperature_0", ftypes.UINT8, nil)
f.ESC_TELEMETRY_29_TO_32_temperature_1 = ProtoField.new("temperature[1] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_29_TO_32_temperature_1", ftypes.UINT8, nil)
f.ESC_TELEMETRY_29_TO_32_temperature_2 = ProtoField.new("temperature[2] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_29_TO_32_temperature_2", ftypes.UINT8, nil)
f.ESC_TELEMETRY_29_TO_32_temperature_3 = ProtoField.new("temperature[3] (uint8_t)", "mavlink_proto.ESC_TELEMETRY_29_TO_32_temperature_3", ftypes.UINT8, nil)
f.ESC_TELEMETRY_29_TO_32_voltage_0 = ProtoField.new("voltage[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_29_TO_32_voltage_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_29_TO_32_voltage_1 = ProtoField.new("voltage[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_29_TO_32_voltage_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_29_TO_32_voltage_2 = ProtoField.new("voltage[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_29_TO_32_voltage_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_29_TO_32_voltage_3 = ProtoField.new("voltage[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_29_TO_32_voltage_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_29_TO_32_current_0 = ProtoField.new("current[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_29_TO_32_current_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_29_TO_32_current_1 = ProtoField.new("current[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_29_TO_32_current_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_29_TO_32_current_2 = ProtoField.new("current[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_29_TO_32_current_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_29_TO_32_current_3 = ProtoField.new("current[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_29_TO_32_current_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_29_TO_32_totalcurrent_0 = ProtoField.new("totalcurrent[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_29_TO_32_totalcurrent_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_29_TO_32_totalcurrent_1 = ProtoField.new("totalcurrent[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_29_TO_32_totalcurrent_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_29_TO_32_totalcurrent_2 = ProtoField.new("totalcurrent[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_29_TO_32_totalcurrent_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_29_TO_32_totalcurrent_3 = ProtoField.new("totalcurrent[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_29_TO_32_totalcurrent_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_29_TO_32_rpm_0 = ProtoField.new("rpm[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_29_TO_32_rpm_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_29_TO_32_rpm_1 = ProtoField.new("rpm[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_29_TO_32_rpm_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_29_TO_32_rpm_2 = ProtoField.new("rpm[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_29_TO_32_rpm_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_29_TO_32_rpm_3 = ProtoField.new("rpm[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_29_TO_32_rpm_3", ftypes.UINT16, nil)
f.ESC_TELEMETRY_29_TO_32_count_0 = ProtoField.new("count[0] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_29_TO_32_count_0", ftypes.UINT16, nil)
f.ESC_TELEMETRY_29_TO_32_count_1 = ProtoField.new("count[1] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_29_TO_32_count_1", ftypes.UINT16, nil)
f.ESC_TELEMETRY_29_TO_32_count_2 = ProtoField.new("count[2] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_29_TO_32_count_2", ftypes.UINT16, nil)
f.ESC_TELEMETRY_29_TO_32_count_3 = ProtoField.new("count[3] (uint16_t)", "mavlink_proto.ESC_TELEMETRY_29_TO_32_count_3", ftypes.UINT16, nil)

f.VIDEO_STREAM_INFORMATION99_camera_id = ProtoField.new("camera_id (uint8_t)", "mavlink_proto.VIDEO_STREAM_INFORMATION99_camera_id", ftypes.UINT8, nil)
f.VIDEO_STREAM_INFORMATION99_status = ProtoField.new("status (uint8_t)", "mavlink_proto.VIDEO_STREAM_INFORMATION99_status", ftypes.UINT8, nil)
f.VIDEO_STREAM_INFORMATION99_framerate = ProtoField.new("framerate (float)", "mavlink_proto.VIDEO_STREAM_INFORMATION99_framerate", ftypes.FLOAT, nil)
f.VIDEO_STREAM_INFORMATION99_resolution_h = ProtoField.new("resolution_h (uint16_t)", "mavlink_proto.VIDEO_STREAM_INFORMATION99_resolution_h", ftypes.UINT16, nil)
f.VIDEO_STREAM_INFORMATION99_resolution_v = ProtoField.new("resolution_v (uint16_t)", "mavlink_proto.VIDEO_STREAM_INFORMATION99_resolution_v", ftypes.UINT16, nil)
f.VIDEO_STREAM_INFORMATION99_bitrate = ProtoField.new("bitrate (uint32_t)", "mavlink_proto.VIDEO_STREAM_INFORMATION99_bitrate", ftypes.UINT32, nil)
f.VIDEO_STREAM_INFORMATION99_rotation = ProtoField.new("rotation (uint16_t)", "mavlink_proto.VIDEO_STREAM_INFORMATION99_rotation", ftypes.UINT16, nil)
f.VIDEO_STREAM_INFORMATION99_uri = ProtoField.new("uri (char)", "mavlink_proto.VIDEO_STREAM_INFORMATION99_uri", ftypes.STRING, nil)

f.SYS_STATUS_onboard_control_sensors_present = ProtoField.new("onboard_control_sensors_present (MAV_SYS_STATUS_SENSOR)", "mavlink_proto.SYS_STATUS_onboard_control_sensors_present", ftypes.UINT32, nil)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_3D_GYRO = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_3D_GYRO", "MAV_SYS_STATUS_SENSOR_3D_GYRO", 31, nil, 1)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_3D_ACCEL = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_3D_ACCEL", "MAV_SYS_STATUS_SENSOR_3D_ACCEL", 31, nil, 2)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_3D_MAG = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_3D_MAG", "MAV_SYS_STATUS_SENSOR_3D_MAG", 31, nil, 4)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE", "MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE", 31, nil, 8)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE", "MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE", 31, nil, 16)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_GPS = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_GPS", "MAV_SYS_STATUS_SENSOR_GPS", 31, nil, 32)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_OPTICAL_FLOW = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW", "MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW", 31, nil, 64)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_VISION_POSITION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_VISION_POSITION", "MAV_SYS_STATUS_SENSOR_VISION_POSITION", 31, nil, 128)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_LASER_POSITION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_LASER_POSITION", "MAV_SYS_STATUS_SENSOR_LASER_POSITION", 31, nil, 256)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH", "MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH", 31, nil, 512)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL", "MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL", 31, nil, 1024)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION", "MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION", 31, nil, 2048)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_YAW_POSITION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_YAW_POSITION", "MAV_SYS_STATUS_SENSOR_YAW_POSITION", 31, nil, 4096)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL", "MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL", 31, nil, 8192)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL", "MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL", 31, nil, 16384)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS", "MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS", 31, nil, 32768)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_RC_RECEIVER = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_RC_RECEIVER", "MAV_SYS_STATUS_SENSOR_RC_RECEIVER", 31, nil, 65536)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_3D_GYRO2 = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_3D_GYRO2", "MAV_SYS_STATUS_SENSOR_3D_GYRO2", 31, nil, 131072)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_3D_ACCEL2 = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_3D_ACCEL2", "MAV_SYS_STATUS_SENSOR_3D_ACCEL2", 31, nil, 262144)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_3D_MAG2 = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_3D_MAG2", "MAV_SYS_STATUS_SENSOR_3D_MAG2", 31, nil, 524288)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_GEOFENCE = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_GEOFENCE", "MAV_SYS_STATUS_GEOFENCE", 31, nil, 1048576)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_AHRS = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_AHRS", "MAV_SYS_STATUS_AHRS", 31, nil, 2097152)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_TERRAIN = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_TERRAIN", "MAV_SYS_STATUS_TERRAIN", 31, nil, 4194304)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_REVERSE_MOTOR = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_REVERSE_MOTOR", "MAV_SYS_STATUS_REVERSE_MOTOR", 31, nil, 8388608)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_LOGGING = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_LOGGING", "MAV_SYS_STATUS_LOGGING", 31, nil, 16777216)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_BATTERY = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_BATTERY", "MAV_SYS_STATUS_SENSOR_BATTERY", 31, nil, 33554432)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_PROXIMITY = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_PROXIMITY", "MAV_SYS_STATUS_SENSOR_PROXIMITY", 31, nil, 67108864)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_SATCOM = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_SATCOM", "MAV_SYS_STATUS_SENSOR_SATCOM", 31, nil, 134217728)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_PREARM_CHECK = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_PREARM_CHECK", "MAV_SYS_STATUS_PREARM_CHECK", 31, nil, 268435456)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_OBSTACLE_AVOIDANCE = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_OBSTACLE_AVOIDANCE", "MAV_SYS_STATUS_OBSTACLE_AVOIDANCE", 31, nil, 536870912)
f.SYS_STATUS_onboard_control_sensors_present_flagMAV_SYS_STATUS_SENSOR_PROPULSION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_present.MAV_SYS_STATUS_SENSOR_PROPULSION", "MAV_SYS_STATUS_SENSOR_PROPULSION", 31, nil, 1073741824)
f.SYS_STATUS_onboard_control_sensors_enabled = ProtoField.new("onboard_control_sensors_enabled (MAV_SYS_STATUS_SENSOR)", "mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled", ftypes.UINT32, nil)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_3D_GYRO = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_3D_GYRO", "MAV_SYS_STATUS_SENSOR_3D_GYRO", 31, nil, 1)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_3D_ACCEL = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_3D_ACCEL", "MAV_SYS_STATUS_SENSOR_3D_ACCEL", 31, nil, 2)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_3D_MAG = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_3D_MAG", "MAV_SYS_STATUS_SENSOR_3D_MAG", 31, nil, 4)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE", "MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE", 31, nil, 8)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE", "MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE", 31, nil, 16)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_GPS = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_GPS", "MAV_SYS_STATUS_SENSOR_GPS", 31, nil, 32)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_OPTICAL_FLOW = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW", "MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW", 31, nil, 64)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_VISION_POSITION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_VISION_POSITION", "MAV_SYS_STATUS_SENSOR_VISION_POSITION", 31, nil, 128)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_LASER_POSITION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_LASER_POSITION", "MAV_SYS_STATUS_SENSOR_LASER_POSITION", 31, nil, 256)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH", "MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH", 31, nil, 512)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL", "MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL", 31, nil, 1024)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION", "MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION", 31, nil, 2048)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_YAW_POSITION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_YAW_POSITION", "MAV_SYS_STATUS_SENSOR_YAW_POSITION", 31, nil, 4096)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL", "MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL", 31, nil, 8192)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL", "MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL", 31, nil, 16384)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS", "MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS", 31, nil, 32768)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_RC_RECEIVER = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_RC_RECEIVER", "MAV_SYS_STATUS_SENSOR_RC_RECEIVER", 31, nil, 65536)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_3D_GYRO2 = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_3D_GYRO2", "MAV_SYS_STATUS_SENSOR_3D_GYRO2", 31, nil, 131072)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_3D_ACCEL2 = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_3D_ACCEL2", "MAV_SYS_STATUS_SENSOR_3D_ACCEL2", 31, nil, 262144)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_3D_MAG2 = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_3D_MAG2", "MAV_SYS_STATUS_SENSOR_3D_MAG2", 31, nil, 524288)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_GEOFENCE = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_GEOFENCE", "MAV_SYS_STATUS_GEOFENCE", 31, nil, 1048576)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_AHRS = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_AHRS", "MAV_SYS_STATUS_AHRS", 31, nil, 2097152)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_TERRAIN = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_TERRAIN", "MAV_SYS_STATUS_TERRAIN", 31, nil, 4194304)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_REVERSE_MOTOR = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_REVERSE_MOTOR", "MAV_SYS_STATUS_REVERSE_MOTOR", 31, nil, 8388608)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_LOGGING = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_LOGGING", "MAV_SYS_STATUS_LOGGING", 31, nil, 16777216)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_BATTERY = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_BATTERY", "MAV_SYS_STATUS_SENSOR_BATTERY", 31, nil, 33554432)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_PROXIMITY = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_PROXIMITY", "MAV_SYS_STATUS_SENSOR_PROXIMITY", 31, nil, 67108864)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_SATCOM = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_SATCOM", "MAV_SYS_STATUS_SENSOR_SATCOM", 31, nil, 134217728)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_PREARM_CHECK = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_PREARM_CHECK", "MAV_SYS_STATUS_PREARM_CHECK", 31, nil, 268435456)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_OBSTACLE_AVOIDANCE = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_OBSTACLE_AVOIDANCE", "MAV_SYS_STATUS_OBSTACLE_AVOIDANCE", 31, nil, 536870912)
f.SYS_STATUS_onboard_control_sensors_enabled_flagMAV_SYS_STATUS_SENSOR_PROPULSION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_enabled.MAV_SYS_STATUS_SENSOR_PROPULSION", "MAV_SYS_STATUS_SENSOR_PROPULSION", 31, nil, 1073741824)
f.SYS_STATUS_onboard_control_sensors_health = ProtoField.new("onboard_control_sensors_health (MAV_SYS_STATUS_SENSOR)", "mavlink_proto.SYS_STATUS_onboard_control_sensors_health", ftypes.UINT32, nil)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_3D_GYRO = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_3D_GYRO", "MAV_SYS_STATUS_SENSOR_3D_GYRO", 31, nil, 1)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_3D_ACCEL = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_3D_ACCEL", "MAV_SYS_STATUS_SENSOR_3D_ACCEL", 31, nil, 2)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_3D_MAG = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_3D_MAG", "MAV_SYS_STATUS_SENSOR_3D_MAG", 31, nil, 4)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE", "MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE", 31, nil, 8)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE", "MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE", 31, nil, 16)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_GPS = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_GPS", "MAV_SYS_STATUS_SENSOR_GPS", 31, nil, 32)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_OPTICAL_FLOW = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW", "MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW", 31, nil, 64)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_VISION_POSITION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_VISION_POSITION", "MAV_SYS_STATUS_SENSOR_VISION_POSITION", 31, nil, 128)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_LASER_POSITION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_LASER_POSITION", "MAV_SYS_STATUS_SENSOR_LASER_POSITION", 31, nil, 256)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH", "MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH", 31, nil, 512)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL", "MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL", 31, nil, 1024)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION", "MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION", 31, nil, 2048)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_YAW_POSITION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_YAW_POSITION", "MAV_SYS_STATUS_SENSOR_YAW_POSITION", 31, nil, 4096)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL", "MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL", 31, nil, 8192)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL", "MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL", 31, nil, 16384)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS", "MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS", 31, nil, 32768)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_RC_RECEIVER = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_RC_RECEIVER", "MAV_SYS_STATUS_SENSOR_RC_RECEIVER", 31, nil, 65536)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_3D_GYRO2 = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_3D_GYRO2", "MAV_SYS_STATUS_SENSOR_3D_GYRO2", 31, nil, 131072)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_3D_ACCEL2 = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_3D_ACCEL2", "MAV_SYS_STATUS_SENSOR_3D_ACCEL2", 31, nil, 262144)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_3D_MAG2 = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_3D_MAG2", "MAV_SYS_STATUS_SENSOR_3D_MAG2", 31, nil, 524288)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_GEOFENCE = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_GEOFENCE", "MAV_SYS_STATUS_GEOFENCE", 31, nil, 1048576)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_AHRS = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_AHRS", "MAV_SYS_STATUS_AHRS", 31, nil, 2097152)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_TERRAIN = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_TERRAIN", "MAV_SYS_STATUS_TERRAIN", 31, nil, 4194304)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_REVERSE_MOTOR = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_REVERSE_MOTOR", "MAV_SYS_STATUS_REVERSE_MOTOR", 31, nil, 8388608)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_LOGGING = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_LOGGING", "MAV_SYS_STATUS_LOGGING", 31, nil, 16777216)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_BATTERY = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_BATTERY", "MAV_SYS_STATUS_SENSOR_BATTERY", 31, nil, 33554432)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_PROXIMITY = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_PROXIMITY", "MAV_SYS_STATUS_SENSOR_PROXIMITY", 31, nil, 67108864)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_SATCOM = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_SATCOM", "MAV_SYS_STATUS_SENSOR_SATCOM", 31, nil, 134217728)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_PREARM_CHECK = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_PREARM_CHECK", "MAV_SYS_STATUS_PREARM_CHECK", 31, nil, 268435456)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_OBSTACLE_AVOIDANCE = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_OBSTACLE_AVOIDANCE", "MAV_SYS_STATUS_OBSTACLE_AVOIDANCE", 31, nil, 536870912)
f.SYS_STATUS_onboard_control_sensors_health_flagMAV_SYS_STATUS_SENSOR_PROPULSION = ProtoField.bool("mavlink_proto.SYS_STATUS_onboard_control_sensors_health.MAV_SYS_STATUS_SENSOR_PROPULSION", "MAV_SYS_STATUS_SENSOR_PROPULSION", 31, nil, 1073741824)
f.SYS_STATUS_load = ProtoField.new("load (uint16_t)", "mavlink_proto.SYS_STATUS_load", ftypes.UINT16, nil)
f.SYS_STATUS_voltage_battery = ProtoField.new("voltage_battery (uint16_t)", "mavlink_proto.SYS_STATUS_voltage_battery", ftypes.UINT16, nil)
f.SYS_STATUS_current_battery = ProtoField.new("current_battery (int16_t)", "mavlink_proto.SYS_STATUS_current_battery", ftypes.INT16, nil)
f.SYS_STATUS_battery_remaining = ProtoField.new("battery_remaining (int8_t)", "mavlink_proto.SYS_STATUS_battery_remaining", ftypes.INT8, nil)
f.SYS_STATUS_drop_rate_comm = ProtoField.new("drop_rate_comm (uint16_t)", "mavlink_proto.SYS_STATUS_drop_rate_comm", ftypes.UINT16, nil)
f.SYS_STATUS_errors_comm = ProtoField.new("errors_comm (uint16_t)", "mavlink_proto.SYS_STATUS_errors_comm", ftypes.UINT16, nil)
f.SYS_STATUS_errors_count1 = ProtoField.new("errors_count1 (uint16_t)", "mavlink_proto.SYS_STATUS_errors_count1", ftypes.UINT16, nil)
f.SYS_STATUS_errors_count2 = ProtoField.new("errors_count2 (uint16_t)", "mavlink_proto.SYS_STATUS_errors_count2", ftypes.UINT16, nil)
f.SYS_STATUS_errors_count3 = ProtoField.new("errors_count3 (uint16_t)", "mavlink_proto.SYS_STATUS_errors_count3", ftypes.UINT16, nil)
f.SYS_STATUS_errors_count4 = ProtoField.new("errors_count4 (uint16_t)", "mavlink_proto.SYS_STATUS_errors_count4", ftypes.UINT16, nil)

f.SYSTEM_TIME_time_unix_usec = ProtoField.new("time_unix_usec (uint64_t)", "mavlink_proto.SYSTEM_TIME_time_unix_usec", ftypes.UINT64, nil)
f.SYSTEM_TIME_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.SYSTEM_TIME_time_boot_ms", ftypes.UINT32, nil)

f.PING_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.PING_time_usec", ftypes.UINT64, nil)
f.PING_seq = ProtoField.new("seq (uint32_t)", "mavlink_proto.PING_seq", ftypes.UINT32, nil)
f.PING_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.PING_target_system", ftypes.UINT8, nil)
f.PING_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.PING_target_component", ftypes.UINT8, nil)

f.CHANGE_OPERATOR_CONTROL_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.CHANGE_OPERATOR_CONTROL_target_system", ftypes.UINT8, nil)
f.CHANGE_OPERATOR_CONTROL_control_request = ProtoField.new("control_request (uint8_t)", "mavlink_proto.CHANGE_OPERATOR_CONTROL_control_request", ftypes.UINT8, nil)
f.CHANGE_OPERATOR_CONTROL_version = ProtoField.new("version (uint8_t)", "mavlink_proto.CHANGE_OPERATOR_CONTROL_version", ftypes.UINT8, nil)
f.CHANGE_OPERATOR_CONTROL_passkey = ProtoField.new("passkey (char)", "mavlink_proto.CHANGE_OPERATOR_CONTROL_passkey", ftypes.STRING, nil)

f.CHANGE_OPERATOR_CONTROL_ACK_gcs_system_id = ProtoField.new("gcs_system_id (uint8_t)", "mavlink_proto.CHANGE_OPERATOR_CONTROL_ACK_gcs_system_id", ftypes.UINT8, nil)
f.CHANGE_OPERATOR_CONTROL_ACK_control_request = ProtoField.new("control_request (uint8_t)", "mavlink_proto.CHANGE_OPERATOR_CONTROL_ACK_control_request", ftypes.UINT8, nil)
f.CHANGE_OPERATOR_CONTROL_ACK_ack = ProtoField.new("ack (uint8_t)", "mavlink_proto.CHANGE_OPERATOR_CONTROL_ACK_ack", ftypes.UINT8, nil)

f.AUTH_KEY_key = ProtoField.new("key (char)", "mavlink_proto.AUTH_KEY_key", ftypes.STRING, nil)

f.SET_MODE_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.SET_MODE_target_system", ftypes.UINT8, nil)
f.SET_MODE_base_mode = ProtoField.new("base_mode (MAV_MODE)", "mavlink_proto.SET_MODE_base_mode", ftypes.UINT8, enumEntryName.MAV_MODE)
f.SET_MODE_custom_mode = ProtoField.new("custom_mode (uint32_t)", "mavlink_proto.SET_MODE_custom_mode", ftypes.UINT32, nil)

f.PARAM_REQUEST_READ_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.PARAM_REQUEST_READ_target_system", ftypes.UINT8, nil)
f.PARAM_REQUEST_READ_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.PARAM_REQUEST_READ_target_component", ftypes.UINT8, nil)
f.PARAM_REQUEST_READ_param_id = ProtoField.new("param_id (char)", "mavlink_proto.PARAM_REQUEST_READ_param_id", ftypes.STRING, nil)
f.PARAM_REQUEST_READ_param_index = ProtoField.new("param_index (int16_t)", "mavlink_proto.PARAM_REQUEST_READ_param_index", ftypes.INT16, nil)

f.PARAM_REQUEST_LIST_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.PARAM_REQUEST_LIST_target_system", ftypes.UINT8, nil)
f.PARAM_REQUEST_LIST_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.PARAM_REQUEST_LIST_target_component", ftypes.UINT8, nil)

f.PARAM_VALUE_param_id = ProtoField.new("param_id (char)", "mavlink_proto.PARAM_VALUE_param_id", ftypes.STRING, nil)
f.PARAM_VALUE_param_value = ProtoField.new("param_value (float)", "mavlink_proto.PARAM_VALUE_param_value", ftypes.FLOAT, nil)
f.PARAM_VALUE_param_type = ProtoField.new("param_type (MAV_PARAM_TYPE)", "mavlink_proto.PARAM_VALUE_param_type", ftypes.UINT8, enumEntryName.MAV_PARAM_TYPE)
f.PARAM_VALUE_param_count = ProtoField.new("param_count (uint16_t)", "mavlink_proto.PARAM_VALUE_param_count", ftypes.UINT16, nil)
f.PARAM_VALUE_param_index = ProtoField.new("param_index (uint16_t)", "mavlink_proto.PARAM_VALUE_param_index", ftypes.UINT16, nil)

f.PARAM_SET_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.PARAM_SET_target_system", ftypes.UINT8, nil)
f.PARAM_SET_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.PARAM_SET_target_component", ftypes.UINT8, nil)
f.PARAM_SET_param_id = ProtoField.new("param_id (char)", "mavlink_proto.PARAM_SET_param_id", ftypes.STRING, nil)
f.PARAM_SET_param_value = ProtoField.new("param_value (float)", "mavlink_proto.PARAM_SET_param_value", ftypes.FLOAT, nil)
f.PARAM_SET_param_type = ProtoField.new("param_type (MAV_PARAM_TYPE)", "mavlink_proto.PARAM_SET_param_type", ftypes.UINT8, enumEntryName.MAV_PARAM_TYPE)

f.GPS_RAW_INT_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.GPS_RAW_INT_time_usec", ftypes.UINT64, nil)
f.GPS_RAW_INT_fix_type = ProtoField.new("fix_type (GPS_FIX_TYPE)", "mavlink_proto.GPS_RAW_INT_fix_type", ftypes.UINT8, enumEntryName.GPS_FIX_TYPE)
f.GPS_RAW_INT_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.GPS_RAW_INT_lat", ftypes.INT32, nil)
f.GPS_RAW_INT_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.GPS_RAW_INT_lon", ftypes.INT32, nil)
f.GPS_RAW_INT_alt = ProtoField.new("alt (int32_t)", "mavlink_proto.GPS_RAW_INT_alt", ftypes.INT32, nil)
f.GPS_RAW_INT_eph = ProtoField.new("eph (uint16_t)", "mavlink_proto.GPS_RAW_INT_eph", ftypes.UINT16, nil)
f.GPS_RAW_INT_epv = ProtoField.new("epv (uint16_t)", "mavlink_proto.GPS_RAW_INT_epv", ftypes.UINT16, nil)
f.GPS_RAW_INT_vel = ProtoField.new("vel (uint16_t)", "mavlink_proto.GPS_RAW_INT_vel", ftypes.UINT16, nil)
f.GPS_RAW_INT_cog = ProtoField.new("cog (uint16_t)", "mavlink_proto.GPS_RAW_INT_cog", ftypes.UINT16, nil)
f.GPS_RAW_INT_satellites_visible = ProtoField.new("satellites_visible (uint8_t)", "mavlink_proto.GPS_RAW_INT_satellites_visible", ftypes.UINT8, nil)
f.GPS_RAW_INT_alt_ellipsoid = ProtoField.new("alt_ellipsoid (int32_t)", "mavlink_proto.GPS_RAW_INT_alt_ellipsoid", ftypes.INT32, nil)
f.GPS_RAW_INT_h_acc = ProtoField.new("h_acc (uint32_t)", "mavlink_proto.GPS_RAW_INT_h_acc", ftypes.UINT32, nil)
f.GPS_RAW_INT_v_acc = ProtoField.new("v_acc (uint32_t)", "mavlink_proto.GPS_RAW_INT_v_acc", ftypes.UINT32, nil)
f.GPS_RAW_INT_vel_acc = ProtoField.new("vel_acc (uint32_t)", "mavlink_proto.GPS_RAW_INT_vel_acc", ftypes.UINT32, nil)
f.GPS_RAW_INT_hdg_acc = ProtoField.new("hdg_acc (uint32_t)", "mavlink_proto.GPS_RAW_INT_hdg_acc", ftypes.UINT32, nil)
f.GPS_RAW_INT_yaw = ProtoField.new("yaw (uint16_t)", "mavlink_proto.GPS_RAW_INT_yaw", ftypes.UINT16, nil)

f.GPS_STATUS_satellites_visible = ProtoField.new("satellites_visible (uint8_t)", "mavlink_proto.GPS_STATUS_satellites_visible", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_0 = ProtoField.new("satellite_prn[0] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_0", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_1 = ProtoField.new("satellite_prn[1] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_1", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_2 = ProtoField.new("satellite_prn[2] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_2", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_3 = ProtoField.new("satellite_prn[3] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_3", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_4 = ProtoField.new("satellite_prn[4] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_4", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_5 = ProtoField.new("satellite_prn[5] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_5", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_6 = ProtoField.new("satellite_prn[6] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_6", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_7 = ProtoField.new("satellite_prn[7] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_7", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_8 = ProtoField.new("satellite_prn[8] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_8", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_9 = ProtoField.new("satellite_prn[9] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_9", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_10 = ProtoField.new("satellite_prn[10] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_10", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_11 = ProtoField.new("satellite_prn[11] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_11", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_12 = ProtoField.new("satellite_prn[12] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_12", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_13 = ProtoField.new("satellite_prn[13] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_13", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_14 = ProtoField.new("satellite_prn[14] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_14", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_15 = ProtoField.new("satellite_prn[15] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_15", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_16 = ProtoField.new("satellite_prn[16] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_16", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_17 = ProtoField.new("satellite_prn[17] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_17", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_18 = ProtoField.new("satellite_prn[18] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_18", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_prn_19 = ProtoField.new("satellite_prn[19] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_prn_19", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_0 = ProtoField.new("satellite_used[0] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_0", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_1 = ProtoField.new("satellite_used[1] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_1", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_2 = ProtoField.new("satellite_used[2] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_2", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_3 = ProtoField.new("satellite_used[3] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_3", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_4 = ProtoField.new("satellite_used[4] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_4", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_5 = ProtoField.new("satellite_used[5] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_5", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_6 = ProtoField.new("satellite_used[6] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_6", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_7 = ProtoField.new("satellite_used[7] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_7", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_8 = ProtoField.new("satellite_used[8] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_8", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_9 = ProtoField.new("satellite_used[9] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_9", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_10 = ProtoField.new("satellite_used[10] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_10", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_11 = ProtoField.new("satellite_used[11] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_11", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_12 = ProtoField.new("satellite_used[12] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_12", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_13 = ProtoField.new("satellite_used[13] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_13", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_14 = ProtoField.new("satellite_used[14] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_14", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_15 = ProtoField.new("satellite_used[15] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_15", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_16 = ProtoField.new("satellite_used[16] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_16", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_17 = ProtoField.new("satellite_used[17] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_17", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_18 = ProtoField.new("satellite_used[18] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_18", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_used_19 = ProtoField.new("satellite_used[19] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_used_19", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_0 = ProtoField.new("satellite_elevation[0] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_0", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_1 = ProtoField.new("satellite_elevation[1] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_1", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_2 = ProtoField.new("satellite_elevation[2] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_2", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_3 = ProtoField.new("satellite_elevation[3] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_3", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_4 = ProtoField.new("satellite_elevation[4] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_4", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_5 = ProtoField.new("satellite_elevation[5] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_5", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_6 = ProtoField.new("satellite_elevation[6] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_6", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_7 = ProtoField.new("satellite_elevation[7] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_7", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_8 = ProtoField.new("satellite_elevation[8] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_8", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_9 = ProtoField.new("satellite_elevation[9] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_9", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_10 = ProtoField.new("satellite_elevation[10] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_10", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_11 = ProtoField.new("satellite_elevation[11] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_11", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_12 = ProtoField.new("satellite_elevation[12] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_12", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_13 = ProtoField.new("satellite_elevation[13] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_13", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_14 = ProtoField.new("satellite_elevation[14] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_14", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_15 = ProtoField.new("satellite_elevation[15] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_15", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_16 = ProtoField.new("satellite_elevation[16] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_16", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_17 = ProtoField.new("satellite_elevation[17] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_17", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_18 = ProtoField.new("satellite_elevation[18] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_18", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_elevation_19 = ProtoField.new("satellite_elevation[19] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_elevation_19", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_0 = ProtoField.new("satellite_azimuth[0] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_0", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_1 = ProtoField.new("satellite_azimuth[1] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_1", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_2 = ProtoField.new("satellite_azimuth[2] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_2", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_3 = ProtoField.new("satellite_azimuth[3] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_3", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_4 = ProtoField.new("satellite_azimuth[4] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_4", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_5 = ProtoField.new("satellite_azimuth[5] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_5", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_6 = ProtoField.new("satellite_azimuth[6] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_6", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_7 = ProtoField.new("satellite_azimuth[7] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_7", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_8 = ProtoField.new("satellite_azimuth[8] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_8", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_9 = ProtoField.new("satellite_azimuth[9] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_9", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_10 = ProtoField.new("satellite_azimuth[10] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_10", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_11 = ProtoField.new("satellite_azimuth[11] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_11", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_12 = ProtoField.new("satellite_azimuth[12] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_12", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_13 = ProtoField.new("satellite_azimuth[13] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_13", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_14 = ProtoField.new("satellite_azimuth[14] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_14", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_15 = ProtoField.new("satellite_azimuth[15] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_15", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_16 = ProtoField.new("satellite_azimuth[16] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_16", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_17 = ProtoField.new("satellite_azimuth[17] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_17", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_18 = ProtoField.new("satellite_azimuth[18] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_18", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_azimuth_19 = ProtoField.new("satellite_azimuth[19] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_azimuth_19", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_0 = ProtoField.new("satellite_snr[0] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_0", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_1 = ProtoField.new("satellite_snr[1] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_1", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_2 = ProtoField.new("satellite_snr[2] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_2", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_3 = ProtoField.new("satellite_snr[3] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_3", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_4 = ProtoField.new("satellite_snr[4] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_4", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_5 = ProtoField.new("satellite_snr[5] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_5", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_6 = ProtoField.new("satellite_snr[6] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_6", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_7 = ProtoField.new("satellite_snr[7] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_7", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_8 = ProtoField.new("satellite_snr[8] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_8", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_9 = ProtoField.new("satellite_snr[9] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_9", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_10 = ProtoField.new("satellite_snr[10] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_10", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_11 = ProtoField.new("satellite_snr[11] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_11", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_12 = ProtoField.new("satellite_snr[12] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_12", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_13 = ProtoField.new("satellite_snr[13] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_13", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_14 = ProtoField.new("satellite_snr[14] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_14", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_15 = ProtoField.new("satellite_snr[15] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_15", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_16 = ProtoField.new("satellite_snr[16] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_16", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_17 = ProtoField.new("satellite_snr[17] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_17", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_18 = ProtoField.new("satellite_snr[18] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_18", ftypes.UINT8, nil)
f.GPS_STATUS_satellite_snr_19 = ProtoField.new("satellite_snr[19] (uint8_t)", "mavlink_proto.GPS_STATUS_satellite_snr_19", ftypes.UINT8, nil)

f.SCALED_IMU_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.SCALED_IMU_time_boot_ms", ftypes.UINT32, nil)
f.SCALED_IMU_xacc = ProtoField.new("xacc (int16_t)", "mavlink_proto.SCALED_IMU_xacc", ftypes.INT16, nil)
f.SCALED_IMU_yacc = ProtoField.new("yacc (int16_t)", "mavlink_proto.SCALED_IMU_yacc", ftypes.INT16, nil)
f.SCALED_IMU_zacc = ProtoField.new("zacc (int16_t)", "mavlink_proto.SCALED_IMU_zacc", ftypes.INT16, nil)
f.SCALED_IMU_xgyro = ProtoField.new("xgyro (int16_t)", "mavlink_proto.SCALED_IMU_xgyro", ftypes.INT16, nil)
f.SCALED_IMU_ygyro = ProtoField.new("ygyro (int16_t)", "mavlink_proto.SCALED_IMU_ygyro", ftypes.INT16, nil)
f.SCALED_IMU_zgyro = ProtoField.new("zgyro (int16_t)", "mavlink_proto.SCALED_IMU_zgyro", ftypes.INT16, nil)
f.SCALED_IMU_xmag = ProtoField.new("xmag (int16_t)", "mavlink_proto.SCALED_IMU_xmag", ftypes.INT16, nil)
f.SCALED_IMU_ymag = ProtoField.new("ymag (int16_t)", "mavlink_proto.SCALED_IMU_ymag", ftypes.INT16, nil)
f.SCALED_IMU_zmag = ProtoField.new("zmag (int16_t)", "mavlink_proto.SCALED_IMU_zmag", ftypes.INT16, nil)
f.SCALED_IMU_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.SCALED_IMU_temperature", ftypes.INT16, nil)

f.RAW_IMU_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.RAW_IMU_time_usec", ftypes.UINT64, nil)
f.RAW_IMU_xacc = ProtoField.new("xacc (int16_t)", "mavlink_proto.RAW_IMU_xacc", ftypes.INT16, nil)
f.RAW_IMU_yacc = ProtoField.new("yacc (int16_t)", "mavlink_proto.RAW_IMU_yacc", ftypes.INT16, nil)
f.RAW_IMU_zacc = ProtoField.new("zacc (int16_t)", "mavlink_proto.RAW_IMU_zacc", ftypes.INT16, nil)
f.RAW_IMU_xgyro = ProtoField.new("xgyro (int16_t)", "mavlink_proto.RAW_IMU_xgyro", ftypes.INT16, nil)
f.RAW_IMU_ygyro = ProtoField.new("ygyro (int16_t)", "mavlink_proto.RAW_IMU_ygyro", ftypes.INT16, nil)
f.RAW_IMU_zgyro = ProtoField.new("zgyro (int16_t)", "mavlink_proto.RAW_IMU_zgyro", ftypes.INT16, nil)
f.RAW_IMU_xmag = ProtoField.new("xmag (int16_t)", "mavlink_proto.RAW_IMU_xmag", ftypes.INT16, nil)
f.RAW_IMU_ymag = ProtoField.new("ymag (int16_t)", "mavlink_proto.RAW_IMU_ymag", ftypes.INT16, nil)
f.RAW_IMU_zmag = ProtoField.new("zmag (int16_t)", "mavlink_proto.RAW_IMU_zmag", ftypes.INT16, nil)
f.RAW_IMU_id = ProtoField.new("id (uint8_t)", "mavlink_proto.RAW_IMU_id", ftypes.UINT8, nil)
f.RAW_IMU_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.RAW_IMU_temperature", ftypes.INT16, nil)

f.RAW_PRESSURE_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.RAW_PRESSURE_time_usec", ftypes.UINT64, nil)
f.RAW_PRESSURE_press_abs = ProtoField.new("press_abs (int16_t)", "mavlink_proto.RAW_PRESSURE_press_abs", ftypes.INT16, nil)
f.RAW_PRESSURE_press_diff1 = ProtoField.new("press_diff1 (int16_t)", "mavlink_proto.RAW_PRESSURE_press_diff1", ftypes.INT16, nil)
f.RAW_PRESSURE_press_diff2 = ProtoField.new("press_diff2 (int16_t)", "mavlink_proto.RAW_PRESSURE_press_diff2", ftypes.INT16, nil)
f.RAW_PRESSURE_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.RAW_PRESSURE_temperature", ftypes.INT16, nil)

f.SCALED_PRESSURE_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.SCALED_PRESSURE_time_boot_ms", ftypes.UINT32, nil)
f.SCALED_PRESSURE_press_abs = ProtoField.new("press_abs (float)", "mavlink_proto.SCALED_PRESSURE_press_abs", ftypes.FLOAT, nil)
f.SCALED_PRESSURE_press_diff = ProtoField.new("press_diff (float)", "mavlink_proto.SCALED_PRESSURE_press_diff", ftypes.FLOAT, nil)
f.SCALED_PRESSURE_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.SCALED_PRESSURE_temperature", ftypes.INT16, nil)
f.SCALED_PRESSURE_temperature_press_diff = ProtoField.new("temperature_press_diff (int16_t)", "mavlink_proto.SCALED_PRESSURE_temperature_press_diff", ftypes.INT16, nil)

f.ATTITUDE_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.ATTITUDE_time_boot_ms", ftypes.UINT32, nil)
f.ATTITUDE_roll = ProtoField.new("roll (float)", "mavlink_proto.ATTITUDE_roll", ftypes.FLOAT, nil)
f.ATTITUDE_pitch = ProtoField.new("pitch (float)", "mavlink_proto.ATTITUDE_pitch", ftypes.FLOAT, nil)
f.ATTITUDE_yaw = ProtoField.new("yaw (float)", "mavlink_proto.ATTITUDE_yaw", ftypes.FLOAT, nil)
f.ATTITUDE_rollspeed = ProtoField.new("rollspeed (float)", "mavlink_proto.ATTITUDE_rollspeed", ftypes.FLOAT, nil)
f.ATTITUDE_pitchspeed = ProtoField.new("pitchspeed (float)", "mavlink_proto.ATTITUDE_pitchspeed", ftypes.FLOAT, nil)
f.ATTITUDE_yawspeed = ProtoField.new("yawspeed (float)", "mavlink_proto.ATTITUDE_yawspeed", ftypes.FLOAT, nil)

f.ATTITUDE_QUATERNION_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.ATTITUDE_QUATERNION_time_boot_ms", ftypes.UINT32, nil)
f.ATTITUDE_QUATERNION_q1 = ProtoField.new("q1 (float)", "mavlink_proto.ATTITUDE_QUATERNION_q1", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_q2 = ProtoField.new("q2 (float)", "mavlink_proto.ATTITUDE_QUATERNION_q2", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_q3 = ProtoField.new("q3 (float)", "mavlink_proto.ATTITUDE_QUATERNION_q3", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_q4 = ProtoField.new("q4 (float)", "mavlink_proto.ATTITUDE_QUATERNION_q4", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_rollspeed = ProtoField.new("rollspeed (float)", "mavlink_proto.ATTITUDE_QUATERNION_rollspeed", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_pitchspeed = ProtoField.new("pitchspeed (float)", "mavlink_proto.ATTITUDE_QUATERNION_pitchspeed", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_yawspeed = ProtoField.new("yawspeed (float)", "mavlink_proto.ATTITUDE_QUATERNION_yawspeed", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_repr_offset_q_0 = ProtoField.new("repr_offset_q[0] (float)", "mavlink_proto.ATTITUDE_QUATERNION_repr_offset_q_0", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_repr_offset_q_1 = ProtoField.new("repr_offset_q[1] (float)", "mavlink_proto.ATTITUDE_QUATERNION_repr_offset_q_1", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_repr_offset_q_2 = ProtoField.new("repr_offset_q[2] (float)", "mavlink_proto.ATTITUDE_QUATERNION_repr_offset_q_2", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_repr_offset_q_3 = ProtoField.new("repr_offset_q[3] (float)", "mavlink_proto.ATTITUDE_QUATERNION_repr_offset_q_3", ftypes.FLOAT, nil)

f.LOCAL_POSITION_NED_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.LOCAL_POSITION_NED_time_boot_ms", ftypes.UINT32, nil)
f.LOCAL_POSITION_NED_x = ProtoField.new("x (float)", "mavlink_proto.LOCAL_POSITION_NED_x", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_y = ProtoField.new("y (float)", "mavlink_proto.LOCAL_POSITION_NED_y", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_z = ProtoField.new("z (float)", "mavlink_proto.LOCAL_POSITION_NED_z", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_vx = ProtoField.new("vx (float)", "mavlink_proto.LOCAL_POSITION_NED_vx", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_vy = ProtoField.new("vy (float)", "mavlink_proto.LOCAL_POSITION_NED_vy", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_vz = ProtoField.new("vz (float)", "mavlink_proto.LOCAL_POSITION_NED_vz", ftypes.FLOAT, nil)

f.GLOBAL_POSITION_INT_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.GLOBAL_POSITION_INT_time_boot_ms", ftypes.UINT32, nil)
f.GLOBAL_POSITION_INT_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.GLOBAL_POSITION_INT_lat", ftypes.INT32, nil)
f.GLOBAL_POSITION_INT_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.GLOBAL_POSITION_INT_lon", ftypes.INT32, nil)
f.GLOBAL_POSITION_INT_alt = ProtoField.new("alt (int32_t)", "mavlink_proto.GLOBAL_POSITION_INT_alt", ftypes.INT32, nil)
f.GLOBAL_POSITION_INT_relative_alt = ProtoField.new("relative_alt (int32_t)", "mavlink_proto.GLOBAL_POSITION_INT_relative_alt", ftypes.INT32, nil)
f.GLOBAL_POSITION_INT_vx = ProtoField.new("vx (int16_t)", "mavlink_proto.GLOBAL_POSITION_INT_vx", ftypes.INT16, nil)
f.GLOBAL_POSITION_INT_vy = ProtoField.new("vy (int16_t)", "mavlink_proto.GLOBAL_POSITION_INT_vy", ftypes.INT16, nil)
f.GLOBAL_POSITION_INT_vz = ProtoField.new("vz (int16_t)", "mavlink_proto.GLOBAL_POSITION_INT_vz", ftypes.INT16, nil)
f.GLOBAL_POSITION_INT_hdg = ProtoField.new("hdg (uint16_t)", "mavlink_proto.GLOBAL_POSITION_INT_hdg", ftypes.UINT16, nil)

f.RC_CHANNELS_SCALED_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.RC_CHANNELS_SCALED_time_boot_ms", ftypes.UINT32, nil)
f.RC_CHANNELS_SCALED_port = ProtoField.new("port (uint8_t)", "mavlink_proto.RC_CHANNELS_SCALED_port", ftypes.UINT8, nil)
f.RC_CHANNELS_SCALED_chan1_scaled = ProtoField.new("chan1_scaled (int16_t)", "mavlink_proto.RC_CHANNELS_SCALED_chan1_scaled", ftypes.INT16, nil)
f.RC_CHANNELS_SCALED_chan2_scaled = ProtoField.new("chan2_scaled (int16_t)", "mavlink_proto.RC_CHANNELS_SCALED_chan2_scaled", ftypes.INT16, nil)
f.RC_CHANNELS_SCALED_chan3_scaled = ProtoField.new("chan3_scaled (int16_t)", "mavlink_proto.RC_CHANNELS_SCALED_chan3_scaled", ftypes.INT16, nil)
f.RC_CHANNELS_SCALED_chan4_scaled = ProtoField.new("chan4_scaled (int16_t)", "mavlink_proto.RC_CHANNELS_SCALED_chan4_scaled", ftypes.INT16, nil)
f.RC_CHANNELS_SCALED_chan5_scaled = ProtoField.new("chan5_scaled (int16_t)", "mavlink_proto.RC_CHANNELS_SCALED_chan5_scaled", ftypes.INT16, nil)
f.RC_CHANNELS_SCALED_chan6_scaled = ProtoField.new("chan6_scaled (int16_t)", "mavlink_proto.RC_CHANNELS_SCALED_chan6_scaled", ftypes.INT16, nil)
f.RC_CHANNELS_SCALED_chan7_scaled = ProtoField.new("chan7_scaled (int16_t)", "mavlink_proto.RC_CHANNELS_SCALED_chan7_scaled", ftypes.INT16, nil)
f.RC_CHANNELS_SCALED_chan8_scaled = ProtoField.new("chan8_scaled (int16_t)", "mavlink_proto.RC_CHANNELS_SCALED_chan8_scaled", ftypes.INT16, nil)
f.RC_CHANNELS_SCALED_rssi = ProtoField.new("rssi (uint8_t)", "mavlink_proto.RC_CHANNELS_SCALED_rssi", ftypes.UINT8, nil)

f.RC_CHANNELS_RAW_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.RC_CHANNELS_RAW_time_boot_ms", ftypes.UINT32, nil)
f.RC_CHANNELS_RAW_port = ProtoField.new("port (uint8_t)", "mavlink_proto.RC_CHANNELS_RAW_port", ftypes.UINT8, nil)
f.RC_CHANNELS_RAW_chan1_raw = ProtoField.new("chan1_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_RAW_chan1_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_RAW_chan2_raw = ProtoField.new("chan2_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_RAW_chan2_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_RAW_chan3_raw = ProtoField.new("chan3_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_RAW_chan3_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_RAW_chan4_raw = ProtoField.new("chan4_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_RAW_chan4_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_RAW_chan5_raw = ProtoField.new("chan5_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_RAW_chan5_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_RAW_chan6_raw = ProtoField.new("chan6_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_RAW_chan6_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_RAW_chan7_raw = ProtoField.new("chan7_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_RAW_chan7_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_RAW_chan8_raw = ProtoField.new("chan8_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_RAW_chan8_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_RAW_rssi = ProtoField.new("rssi (uint8_t)", "mavlink_proto.RC_CHANNELS_RAW_rssi", ftypes.UINT8, nil)

f.SERVO_OUTPUT_RAW_time_usec = ProtoField.new("time_usec (uint32_t)", "mavlink_proto.SERVO_OUTPUT_RAW_time_usec", ftypes.UINT32, nil)
f.SERVO_OUTPUT_RAW_port = ProtoField.new("port (uint8_t)", "mavlink_proto.SERVO_OUTPUT_RAW_port", ftypes.UINT8, nil)
f.SERVO_OUTPUT_RAW_servo1_raw = ProtoField.new("servo1_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo1_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo2_raw = ProtoField.new("servo2_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo2_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo3_raw = ProtoField.new("servo3_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo3_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo4_raw = ProtoField.new("servo4_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo4_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo5_raw = ProtoField.new("servo5_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo5_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo6_raw = ProtoField.new("servo6_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo6_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo7_raw = ProtoField.new("servo7_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo7_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo8_raw = ProtoField.new("servo8_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo8_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo9_raw = ProtoField.new("servo9_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo9_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo10_raw = ProtoField.new("servo10_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo10_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo11_raw = ProtoField.new("servo11_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo11_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo12_raw = ProtoField.new("servo12_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo12_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo13_raw = ProtoField.new("servo13_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo13_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo14_raw = ProtoField.new("servo14_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo14_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo15_raw = ProtoField.new("servo15_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo15_raw", ftypes.UINT16, nil)
f.SERVO_OUTPUT_RAW_servo16_raw = ProtoField.new("servo16_raw (uint16_t)", "mavlink_proto.SERVO_OUTPUT_RAW_servo16_raw", ftypes.UINT16, nil)

f.MISSION_REQUEST_PARTIAL_LIST_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.MISSION_REQUEST_PARTIAL_LIST_target_system", ftypes.UINT8, nil)
f.MISSION_REQUEST_PARTIAL_LIST_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.MISSION_REQUEST_PARTIAL_LIST_target_component", ftypes.UINT8, nil)
f.MISSION_REQUEST_PARTIAL_LIST_start_index = ProtoField.new("start_index (int16_t)", "mavlink_proto.MISSION_REQUEST_PARTIAL_LIST_start_index", ftypes.INT16, nil)
f.MISSION_REQUEST_PARTIAL_LIST_end_index = ProtoField.new("end_index (int16_t)", "mavlink_proto.MISSION_REQUEST_PARTIAL_LIST_end_index", ftypes.INT16, nil)
f.MISSION_REQUEST_PARTIAL_LIST_mission_type = ProtoField.new("mission_type (MAV_MISSION_TYPE)", "mavlink_proto.MISSION_REQUEST_PARTIAL_LIST_mission_type", ftypes.UINT8, enumEntryName.MAV_MISSION_TYPE)

f.MISSION_WRITE_PARTIAL_LIST_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.MISSION_WRITE_PARTIAL_LIST_target_system", ftypes.UINT8, nil)
f.MISSION_WRITE_PARTIAL_LIST_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.MISSION_WRITE_PARTIAL_LIST_target_component", ftypes.UINT8, nil)
f.MISSION_WRITE_PARTIAL_LIST_start_index = ProtoField.new("start_index (int16_t)", "mavlink_proto.MISSION_WRITE_PARTIAL_LIST_start_index", ftypes.INT16, nil)
f.MISSION_WRITE_PARTIAL_LIST_end_index = ProtoField.new("end_index (int16_t)", "mavlink_proto.MISSION_WRITE_PARTIAL_LIST_end_index", ftypes.INT16, nil)
f.MISSION_WRITE_PARTIAL_LIST_mission_type = ProtoField.new("mission_type (MAV_MISSION_TYPE)", "mavlink_proto.MISSION_WRITE_PARTIAL_LIST_mission_type", ftypes.UINT8, enumEntryName.MAV_MISSION_TYPE)

f.MISSION_ITEM_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.MISSION_ITEM_target_system", ftypes.UINT8, nil)
f.MISSION_ITEM_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.MISSION_ITEM_target_component", ftypes.UINT8, nil)
f.MISSION_ITEM_seq = ProtoField.new("seq (uint16_t)", "mavlink_proto.MISSION_ITEM_seq", ftypes.UINT16, nil)
f.MISSION_ITEM_frame = ProtoField.new("frame (MAV_FRAME)", "mavlink_proto.MISSION_ITEM_frame", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.MISSION_ITEM_command = ProtoField.new("command (MAV_CMD)", "mavlink_proto.MISSION_ITEM_command", ftypes.UINT16, enumEntryName.MAV_CMD)
f.MISSION_ITEM_current = ProtoField.new("current (uint8_t)", "mavlink_proto.MISSION_ITEM_current", ftypes.UINT8, nil)
f.MISSION_ITEM_autocontinue = ProtoField.new("autocontinue (uint8_t)", "mavlink_proto.MISSION_ITEM_autocontinue", ftypes.UINT8, nil)
f.MISSION_ITEM_param1 = ProtoField.new("param1 (float)", "mavlink_proto.MISSION_ITEM_param1", ftypes.FLOAT, nil)
f.MISSION_ITEM_param2 = ProtoField.new("param2 (float)", "mavlink_proto.MISSION_ITEM_param2", ftypes.FLOAT, nil)
f.MISSION_ITEM_param3 = ProtoField.new("param3 (float)", "mavlink_proto.MISSION_ITEM_param3", ftypes.FLOAT, nil)
f.MISSION_ITEM_param4 = ProtoField.new("param4 (float)", "mavlink_proto.MISSION_ITEM_param4", ftypes.FLOAT, nil)
f.MISSION_ITEM_x = ProtoField.new("x (float)", "mavlink_proto.MISSION_ITEM_x", ftypes.FLOAT, nil)
f.MISSION_ITEM_y = ProtoField.new("y (float)", "mavlink_proto.MISSION_ITEM_y", ftypes.FLOAT, nil)
f.MISSION_ITEM_z = ProtoField.new("z (float)", "mavlink_proto.MISSION_ITEM_z", ftypes.FLOAT, nil)
f.MISSION_ITEM_mission_type = ProtoField.new("mission_type (MAV_MISSION_TYPE)", "mavlink_proto.MISSION_ITEM_mission_type", ftypes.UINT8, enumEntryName.MAV_MISSION_TYPE)

f.MISSION_REQUEST_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.MISSION_REQUEST_target_system", ftypes.UINT8, nil)
f.MISSION_REQUEST_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.MISSION_REQUEST_target_component", ftypes.UINT8, nil)
f.MISSION_REQUEST_seq = ProtoField.new("seq (uint16_t)", "mavlink_proto.MISSION_REQUEST_seq", ftypes.UINT16, nil)
f.MISSION_REQUEST_mission_type = ProtoField.new("mission_type (MAV_MISSION_TYPE)", "mavlink_proto.MISSION_REQUEST_mission_type", ftypes.UINT8, enumEntryName.MAV_MISSION_TYPE)

f.MISSION_SET_CURRENT_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.MISSION_SET_CURRENT_target_system", ftypes.UINT8, nil)
f.MISSION_SET_CURRENT_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.MISSION_SET_CURRENT_target_component", ftypes.UINT8, nil)
f.MISSION_SET_CURRENT_seq = ProtoField.new("seq (uint16_t)", "mavlink_proto.MISSION_SET_CURRENT_seq", ftypes.UINT16, nil)

f.MISSION_CURRENT_seq = ProtoField.new("seq (uint16_t)", "mavlink_proto.MISSION_CURRENT_seq", ftypes.UINT16, nil)
f.MISSION_CURRENT_total = ProtoField.new("total (uint16_t)", "mavlink_proto.MISSION_CURRENT_total", ftypes.UINT16, nil)
f.MISSION_CURRENT_mission_state = ProtoField.new("mission_state (MISSION_STATE)", "mavlink_proto.MISSION_CURRENT_mission_state", ftypes.UINT8, enumEntryName.MISSION_STATE)
f.MISSION_CURRENT_mission_mode = ProtoField.new("mission_mode (uint8_t)", "mavlink_proto.MISSION_CURRENT_mission_mode", ftypes.UINT8, nil)

f.MISSION_REQUEST_LIST_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.MISSION_REQUEST_LIST_target_system", ftypes.UINT8, nil)
f.MISSION_REQUEST_LIST_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.MISSION_REQUEST_LIST_target_component", ftypes.UINT8, nil)
f.MISSION_REQUEST_LIST_mission_type = ProtoField.new("mission_type (MAV_MISSION_TYPE)", "mavlink_proto.MISSION_REQUEST_LIST_mission_type", ftypes.UINT8, enumEntryName.MAV_MISSION_TYPE)

f.MISSION_COUNT_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.MISSION_COUNT_target_system", ftypes.UINT8, nil)
f.MISSION_COUNT_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.MISSION_COUNT_target_component", ftypes.UINT8, nil)
f.MISSION_COUNT_count = ProtoField.new("count (uint16_t)", "mavlink_proto.MISSION_COUNT_count", ftypes.UINT16, nil)
f.MISSION_COUNT_mission_type = ProtoField.new("mission_type (MAV_MISSION_TYPE)", "mavlink_proto.MISSION_COUNT_mission_type", ftypes.UINT8, enumEntryName.MAV_MISSION_TYPE)

f.MISSION_CLEAR_ALL_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.MISSION_CLEAR_ALL_target_system", ftypes.UINT8, nil)
f.MISSION_CLEAR_ALL_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.MISSION_CLEAR_ALL_target_component", ftypes.UINT8, nil)
f.MISSION_CLEAR_ALL_mission_type = ProtoField.new("mission_type (MAV_MISSION_TYPE)", "mavlink_proto.MISSION_CLEAR_ALL_mission_type", ftypes.UINT8, enumEntryName.MAV_MISSION_TYPE)

f.MISSION_ITEM_REACHED_seq = ProtoField.new("seq (uint16_t)", "mavlink_proto.MISSION_ITEM_REACHED_seq", ftypes.UINT16, nil)

f.MISSION_ACK_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.MISSION_ACK_target_system", ftypes.UINT8, nil)
f.MISSION_ACK_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.MISSION_ACK_target_component", ftypes.UINT8, nil)
f.MISSION_ACK_type = ProtoField.new("type (MAV_MISSION_RESULT)", "mavlink_proto.MISSION_ACK_type", ftypes.UINT8, enumEntryName.MAV_MISSION_RESULT)
f.MISSION_ACK_mission_type = ProtoField.new("mission_type (MAV_MISSION_TYPE)", "mavlink_proto.MISSION_ACK_mission_type", ftypes.UINT8, enumEntryName.MAV_MISSION_TYPE)

f.SET_GPS_GLOBAL_ORIGIN_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.SET_GPS_GLOBAL_ORIGIN_target_system", ftypes.UINT8, nil)
f.SET_GPS_GLOBAL_ORIGIN_latitude = ProtoField.new("latitude (int32_t)", "mavlink_proto.SET_GPS_GLOBAL_ORIGIN_latitude", ftypes.INT32, nil)
f.SET_GPS_GLOBAL_ORIGIN_longitude = ProtoField.new("longitude (int32_t)", "mavlink_proto.SET_GPS_GLOBAL_ORIGIN_longitude", ftypes.INT32, nil)
f.SET_GPS_GLOBAL_ORIGIN_altitude = ProtoField.new("altitude (int32_t)", "mavlink_proto.SET_GPS_GLOBAL_ORIGIN_altitude", ftypes.INT32, nil)
f.SET_GPS_GLOBAL_ORIGIN_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.SET_GPS_GLOBAL_ORIGIN_time_usec", ftypes.UINT64, nil)

f.GPS_GLOBAL_ORIGIN_latitude = ProtoField.new("latitude (int32_t)", "mavlink_proto.GPS_GLOBAL_ORIGIN_latitude", ftypes.INT32, nil)
f.GPS_GLOBAL_ORIGIN_longitude = ProtoField.new("longitude (int32_t)", "mavlink_proto.GPS_GLOBAL_ORIGIN_longitude", ftypes.INT32, nil)
f.GPS_GLOBAL_ORIGIN_altitude = ProtoField.new("altitude (int32_t)", "mavlink_proto.GPS_GLOBAL_ORIGIN_altitude", ftypes.INT32, nil)
f.GPS_GLOBAL_ORIGIN_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.GPS_GLOBAL_ORIGIN_time_usec", ftypes.UINT64, nil)

f.PARAM_MAP_RC_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.PARAM_MAP_RC_target_system", ftypes.UINT8, nil)
f.PARAM_MAP_RC_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.PARAM_MAP_RC_target_component", ftypes.UINT8, nil)
f.PARAM_MAP_RC_param_id = ProtoField.new("param_id (char)", "mavlink_proto.PARAM_MAP_RC_param_id", ftypes.STRING, nil)
f.PARAM_MAP_RC_param_index = ProtoField.new("param_index (int16_t)", "mavlink_proto.PARAM_MAP_RC_param_index", ftypes.INT16, nil)
f.PARAM_MAP_RC_parameter_rc_channel_index = ProtoField.new("parameter_rc_channel_index (uint8_t)", "mavlink_proto.PARAM_MAP_RC_parameter_rc_channel_index", ftypes.UINT8, nil)
f.PARAM_MAP_RC_param_value0 = ProtoField.new("param_value0 (float)", "mavlink_proto.PARAM_MAP_RC_param_value0", ftypes.FLOAT, nil)
f.PARAM_MAP_RC_scale = ProtoField.new("scale (float)", "mavlink_proto.PARAM_MAP_RC_scale", ftypes.FLOAT, nil)
f.PARAM_MAP_RC_param_value_min = ProtoField.new("param_value_min (float)", "mavlink_proto.PARAM_MAP_RC_param_value_min", ftypes.FLOAT, nil)
f.PARAM_MAP_RC_param_value_max = ProtoField.new("param_value_max (float)", "mavlink_proto.PARAM_MAP_RC_param_value_max", ftypes.FLOAT, nil)

f.MISSION_REQUEST_INT_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.MISSION_REQUEST_INT_target_system", ftypes.UINT8, nil)
f.MISSION_REQUEST_INT_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.MISSION_REQUEST_INT_target_component", ftypes.UINT8, nil)
f.MISSION_REQUEST_INT_seq = ProtoField.new("seq (uint16_t)", "mavlink_proto.MISSION_REQUEST_INT_seq", ftypes.UINT16, nil)
f.MISSION_REQUEST_INT_mission_type = ProtoField.new("mission_type (MAV_MISSION_TYPE)", "mavlink_proto.MISSION_REQUEST_INT_mission_type", ftypes.UINT8, enumEntryName.MAV_MISSION_TYPE)

f.SAFETY_SET_ALLOWED_AREA_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.SAFETY_SET_ALLOWED_AREA_target_system", ftypes.UINT8, nil)
f.SAFETY_SET_ALLOWED_AREA_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.SAFETY_SET_ALLOWED_AREA_target_component", ftypes.UINT8, nil)
f.SAFETY_SET_ALLOWED_AREA_frame = ProtoField.new("frame (MAV_FRAME)", "mavlink_proto.SAFETY_SET_ALLOWED_AREA_frame", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.SAFETY_SET_ALLOWED_AREA_p1x = ProtoField.new("p1x (float)", "mavlink_proto.SAFETY_SET_ALLOWED_AREA_p1x", ftypes.FLOAT, nil)
f.SAFETY_SET_ALLOWED_AREA_p1y = ProtoField.new("p1y (float)", "mavlink_proto.SAFETY_SET_ALLOWED_AREA_p1y", ftypes.FLOAT, nil)
f.SAFETY_SET_ALLOWED_AREA_p1z = ProtoField.new("p1z (float)", "mavlink_proto.SAFETY_SET_ALLOWED_AREA_p1z", ftypes.FLOAT, nil)
f.SAFETY_SET_ALLOWED_AREA_p2x = ProtoField.new("p2x (float)", "mavlink_proto.SAFETY_SET_ALLOWED_AREA_p2x", ftypes.FLOAT, nil)
f.SAFETY_SET_ALLOWED_AREA_p2y = ProtoField.new("p2y (float)", "mavlink_proto.SAFETY_SET_ALLOWED_AREA_p2y", ftypes.FLOAT, nil)
f.SAFETY_SET_ALLOWED_AREA_p2z = ProtoField.new("p2z (float)", "mavlink_proto.SAFETY_SET_ALLOWED_AREA_p2z", ftypes.FLOAT, nil)

f.SAFETY_ALLOWED_AREA_frame = ProtoField.new("frame (MAV_FRAME)", "mavlink_proto.SAFETY_ALLOWED_AREA_frame", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.SAFETY_ALLOWED_AREA_p1x = ProtoField.new("p1x (float)", "mavlink_proto.SAFETY_ALLOWED_AREA_p1x", ftypes.FLOAT, nil)
f.SAFETY_ALLOWED_AREA_p1y = ProtoField.new("p1y (float)", "mavlink_proto.SAFETY_ALLOWED_AREA_p1y", ftypes.FLOAT, nil)
f.SAFETY_ALLOWED_AREA_p1z = ProtoField.new("p1z (float)", "mavlink_proto.SAFETY_ALLOWED_AREA_p1z", ftypes.FLOAT, nil)
f.SAFETY_ALLOWED_AREA_p2x = ProtoField.new("p2x (float)", "mavlink_proto.SAFETY_ALLOWED_AREA_p2x", ftypes.FLOAT, nil)
f.SAFETY_ALLOWED_AREA_p2y = ProtoField.new("p2y (float)", "mavlink_proto.SAFETY_ALLOWED_AREA_p2y", ftypes.FLOAT, nil)
f.SAFETY_ALLOWED_AREA_p2z = ProtoField.new("p2z (float)", "mavlink_proto.SAFETY_ALLOWED_AREA_p2z", ftypes.FLOAT, nil)

f.ATTITUDE_QUATERNION_COV_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.ATTITUDE_QUATERNION_COV_time_usec", ftypes.UINT64, nil)
f.ATTITUDE_QUATERNION_COV_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_q_0", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_q_1", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_q_2", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_q_3", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_rollspeed = ProtoField.new("rollspeed (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_rollspeed", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_pitchspeed = ProtoField.new("pitchspeed (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_pitchspeed", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_yawspeed = ProtoField.new("yawspeed (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_yawspeed", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_covariance_0 = ProtoField.new("covariance[0] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_covariance_0", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_covariance_1 = ProtoField.new("covariance[1] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_covariance_1", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_covariance_2 = ProtoField.new("covariance[2] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_covariance_2", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_covariance_3 = ProtoField.new("covariance[3] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_covariance_3", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_covariance_4 = ProtoField.new("covariance[4] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_covariance_4", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_covariance_5 = ProtoField.new("covariance[5] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_covariance_5", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_covariance_6 = ProtoField.new("covariance[6] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_covariance_6", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_covariance_7 = ProtoField.new("covariance[7] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_covariance_7", ftypes.FLOAT, nil)
f.ATTITUDE_QUATERNION_COV_covariance_8 = ProtoField.new("covariance[8] (float)", "mavlink_proto.ATTITUDE_QUATERNION_COV_covariance_8", ftypes.FLOAT, nil)

f.NAV_CONTROLLER_OUTPUT_nav_roll = ProtoField.new("nav_roll (float)", "mavlink_proto.NAV_CONTROLLER_OUTPUT_nav_roll", ftypes.FLOAT, nil)
f.NAV_CONTROLLER_OUTPUT_nav_pitch = ProtoField.new("nav_pitch (float)", "mavlink_proto.NAV_CONTROLLER_OUTPUT_nav_pitch", ftypes.FLOAT, nil)
f.NAV_CONTROLLER_OUTPUT_nav_bearing = ProtoField.new("nav_bearing (int16_t)", "mavlink_proto.NAV_CONTROLLER_OUTPUT_nav_bearing", ftypes.INT16, nil)
f.NAV_CONTROLLER_OUTPUT_target_bearing = ProtoField.new("target_bearing (int16_t)", "mavlink_proto.NAV_CONTROLLER_OUTPUT_target_bearing", ftypes.INT16, nil)
f.NAV_CONTROLLER_OUTPUT_wp_dist = ProtoField.new("wp_dist (uint16_t)", "mavlink_proto.NAV_CONTROLLER_OUTPUT_wp_dist", ftypes.UINT16, nil)
f.NAV_CONTROLLER_OUTPUT_alt_error = ProtoField.new("alt_error (float)", "mavlink_proto.NAV_CONTROLLER_OUTPUT_alt_error", ftypes.FLOAT, nil)
f.NAV_CONTROLLER_OUTPUT_aspd_error = ProtoField.new("aspd_error (float)", "mavlink_proto.NAV_CONTROLLER_OUTPUT_aspd_error", ftypes.FLOAT, nil)
f.NAV_CONTROLLER_OUTPUT_xtrack_error = ProtoField.new("xtrack_error (float)", "mavlink_proto.NAV_CONTROLLER_OUTPUT_xtrack_error", ftypes.FLOAT, nil)

f.GLOBAL_POSITION_INT_COV_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.GLOBAL_POSITION_INT_COV_time_usec", ftypes.UINT64, nil)
f.GLOBAL_POSITION_INT_COV_estimator_type = ProtoField.new("estimator_type (MAV_ESTIMATOR_TYPE)", "mavlink_proto.GLOBAL_POSITION_INT_COV_estimator_type", ftypes.UINT8, enumEntryName.MAV_ESTIMATOR_TYPE)
f.GLOBAL_POSITION_INT_COV_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.GLOBAL_POSITION_INT_COV_lat", ftypes.INT32, nil)
f.GLOBAL_POSITION_INT_COV_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.GLOBAL_POSITION_INT_COV_lon", ftypes.INT32, nil)
f.GLOBAL_POSITION_INT_COV_alt = ProtoField.new("alt (int32_t)", "mavlink_proto.GLOBAL_POSITION_INT_COV_alt", ftypes.INT32, nil)
f.GLOBAL_POSITION_INT_COV_relative_alt = ProtoField.new("relative_alt (int32_t)", "mavlink_proto.GLOBAL_POSITION_INT_COV_relative_alt", ftypes.INT32, nil)
f.GLOBAL_POSITION_INT_COV_vx = ProtoField.new("vx (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_vx", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_vy = ProtoField.new("vy (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_vy", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_vz = ProtoField.new("vz (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_vz", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_0 = ProtoField.new("covariance[0] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_0", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_1 = ProtoField.new("covariance[1] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_1", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_2 = ProtoField.new("covariance[2] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_2", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_3 = ProtoField.new("covariance[3] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_3", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_4 = ProtoField.new("covariance[4] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_4", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_5 = ProtoField.new("covariance[5] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_5", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_6 = ProtoField.new("covariance[6] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_6", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_7 = ProtoField.new("covariance[7] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_7", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_8 = ProtoField.new("covariance[8] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_8", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_9 = ProtoField.new("covariance[9] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_9", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_10 = ProtoField.new("covariance[10] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_10", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_11 = ProtoField.new("covariance[11] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_11", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_12 = ProtoField.new("covariance[12] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_12", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_13 = ProtoField.new("covariance[13] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_13", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_14 = ProtoField.new("covariance[14] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_14", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_15 = ProtoField.new("covariance[15] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_15", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_16 = ProtoField.new("covariance[16] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_16", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_17 = ProtoField.new("covariance[17] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_17", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_18 = ProtoField.new("covariance[18] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_18", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_19 = ProtoField.new("covariance[19] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_19", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_20 = ProtoField.new("covariance[20] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_20", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_21 = ProtoField.new("covariance[21] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_21", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_22 = ProtoField.new("covariance[22] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_22", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_23 = ProtoField.new("covariance[23] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_23", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_24 = ProtoField.new("covariance[24] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_24", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_25 = ProtoField.new("covariance[25] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_25", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_26 = ProtoField.new("covariance[26] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_26", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_27 = ProtoField.new("covariance[27] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_27", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_28 = ProtoField.new("covariance[28] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_28", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_29 = ProtoField.new("covariance[29] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_29", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_30 = ProtoField.new("covariance[30] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_30", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_31 = ProtoField.new("covariance[31] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_31", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_32 = ProtoField.new("covariance[32] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_32", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_33 = ProtoField.new("covariance[33] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_33", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_34 = ProtoField.new("covariance[34] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_34", ftypes.FLOAT, nil)
f.GLOBAL_POSITION_INT_COV_covariance_35 = ProtoField.new("covariance[35] (float)", "mavlink_proto.GLOBAL_POSITION_INT_COV_covariance_35", ftypes.FLOAT, nil)

f.LOCAL_POSITION_NED_COV_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.LOCAL_POSITION_NED_COV_time_usec", ftypes.UINT64, nil)
f.LOCAL_POSITION_NED_COV_estimator_type = ProtoField.new("estimator_type (MAV_ESTIMATOR_TYPE)", "mavlink_proto.LOCAL_POSITION_NED_COV_estimator_type", ftypes.UINT8, enumEntryName.MAV_ESTIMATOR_TYPE)
f.LOCAL_POSITION_NED_COV_x = ProtoField.new("x (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_x", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_y = ProtoField.new("y (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_y", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_z = ProtoField.new("z (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_z", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_vx = ProtoField.new("vx (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_vx", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_vy = ProtoField.new("vy (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_vy", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_vz = ProtoField.new("vz (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_vz", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_ax = ProtoField.new("ax (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_ax", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_ay = ProtoField.new("ay (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_ay", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_az = ProtoField.new("az (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_az", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_0 = ProtoField.new("covariance[0] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_0", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_1 = ProtoField.new("covariance[1] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_1", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_2 = ProtoField.new("covariance[2] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_2", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_3 = ProtoField.new("covariance[3] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_3", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_4 = ProtoField.new("covariance[4] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_4", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_5 = ProtoField.new("covariance[5] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_5", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_6 = ProtoField.new("covariance[6] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_6", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_7 = ProtoField.new("covariance[7] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_7", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_8 = ProtoField.new("covariance[8] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_8", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_9 = ProtoField.new("covariance[9] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_9", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_10 = ProtoField.new("covariance[10] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_10", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_11 = ProtoField.new("covariance[11] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_11", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_12 = ProtoField.new("covariance[12] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_12", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_13 = ProtoField.new("covariance[13] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_13", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_14 = ProtoField.new("covariance[14] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_14", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_15 = ProtoField.new("covariance[15] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_15", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_16 = ProtoField.new("covariance[16] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_16", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_17 = ProtoField.new("covariance[17] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_17", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_18 = ProtoField.new("covariance[18] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_18", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_19 = ProtoField.new("covariance[19] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_19", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_20 = ProtoField.new("covariance[20] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_20", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_21 = ProtoField.new("covariance[21] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_21", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_22 = ProtoField.new("covariance[22] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_22", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_23 = ProtoField.new("covariance[23] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_23", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_24 = ProtoField.new("covariance[24] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_24", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_25 = ProtoField.new("covariance[25] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_25", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_26 = ProtoField.new("covariance[26] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_26", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_27 = ProtoField.new("covariance[27] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_27", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_28 = ProtoField.new("covariance[28] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_28", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_29 = ProtoField.new("covariance[29] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_29", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_30 = ProtoField.new("covariance[30] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_30", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_31 = ProtoField.new("covariance[31] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_31", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_32 = ProtoField.new("covariance[32] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_32", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_33 = ProtoField.new("covariance[33] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_33", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_34 = ProtoField.new("covariance[34] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_34", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_35 = ProtoField.new("covariance[35] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_35", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_36 = ProtoField.new("covariance[36] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_36", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_37 = ProtoField.new("covariance[37] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_37", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_38 = ProtoField.new("covariance[38] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_38", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_39 = ProtoField.new("covariance[39] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_39", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_40 = ProtoField.new("covariance[40] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_40", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_41 = ProtoField.new("covariance[41] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_41", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_42 = ProtoField.new("covariance[42] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_42", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_43 = ProtoField.new("covariance[43] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_43", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_COV_covariance_44 = ProtoField.new("covariance[44] (float)", "mavlink_proto.LOCAL_POSITION_NED_COV_covariance_44", ftypes.FLOAT, nil)

f.RC_CHANNELS_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.RC_CHANNELS_time_boot_ms", ftypes.UINT32, nil)
f.RC_CHANNELS_chancount = ProtoField.new("chancount (uint8_t)", "mavlink_proto.RC_CHANNELS_chancount", ftypes.UINT8, nil)
f.RC_CHANNELS_chan1_raw = ProtoField.new("chan1_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan1_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan2_raw = ProtoField.new("chan2_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan2_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan3_raw = ProtoField.new("chan3_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan3_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan4_raw = ProtoField.new("chan4_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan4_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan5_raw = ProtoField.new("chan5_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan5_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan6_raw = ProtoField.new("chan6_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan6_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan7_raw = ProtoField.new("chan7_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan7_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan8_raw = ProtoField.new("chan8_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan8_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan9_raw = ProtoField.new("chan9_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan9_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan10_raw = ProtoField.new("chan10_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan10_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan11_raw = ProtoField.new("chan11_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan11_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan12_raw = ProtoField.new("chan12_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan12_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan13_raw = ProtoField.new("chan13_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan13_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan14_raw = ProtoField.new("chan14_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan14_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan15_raw = ProtoField.new("chan15_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan15_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan16_raw = ProtoField.new("chan16_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan16_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan17_raw = ProtoField.new("chan17_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan17_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_chan18_raw = ProtoField.new("chan18_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_chan18_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_rssi = ProtoField.new("rssi (uint8_t)", "mavlink_proto.RC_CHANNELS_rssi", ftypes.UINT8, nil)

f.REQUEST_DATA_STREAM_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.REQUEST_DATA_STREAM_target_system", ftypes.UINT8, nil)
f.REQUEST_DATA_STREAM_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.REQUEST_DATA_STREAM_target_component", ftypes.UINT8, nil)
f.REQUEST_DATA_STREAM_req_stream_id = ProtoField.new("req_stream_id (uint8_t)", "mavlink_proto.REQUEST_DATA_STREAM_req_stream_id", ftypes.UINT8, nil)
f.REQUEST_DATA_STREAM_req_message_rate = ProtoField.new("req_message_rate (uint16_t)", "mavlink_proto.REQUEST_DATA_STREAM_req_message_rate", ftypes.UINT16, nil)
f.REQUEST_DATA_STREAM_start_stop = ProtoField.new("start_stop (uint8_t)", "mavlink_proto.REQUEST_DATA_STREAM_start_stop", ftypes.UINT8, nil)

f.DATA_STREAM_stream_id = ProtoField.new("stream_id (uint8_t)", "mavlink_proto.DATA_STREAM_stream_id", ftypes.UINT8, nil)
f.DATA_STREAM_message_rate = ProtoField.new("message_rate (uint16_t)", "mavlink_proto.DATA_STREAM_message_rate", ftypes.UINT16, nil)
f.DATA_STREAM_on_off = ProtoField.new("on_off (uint8_t)", "mavlink_proto.DATA_STREAM_on_off", ftypes.UINT8, nil)

f.MANUAL_CONTROL_target = ProtoField.new("target (uint8_t)", "mavlink_proto.MANUAL_CONTROL_target", ftypes.UINT8, nil)
f.MANUAL_CONTROL_x = ProtoField.new("x (int16_t)", "mavlink_proto.MANUAL_CONTROL_x", ftypes.INT16, nil)
f.MANUAL_CONTROL_y = ProtoField.new("y (int16_t)", "mavlink_proto.MANUAL_CONTROL_y", ftypes.INT16, nil)
f.MANUAL_CONTROL_z = ProtoField.new("z (int16_t)", "mavlink_proto.MANUAL_CONTROL_z", ftypes.INT16, nil)
f.MANUAL_CONTROL_r = ProtoField.new("r (int16_t)", "mavlink_proto.MANUAL_CONTROL_r", ftypes.INT16, nil)
f.MANUAL_CONTROL_buttons = ProtoField.new("buttons (uint16_t)", "mavlink_proto.MANUAL_CONTROL_buttons", ftypes.UINT16, nil)

f.RC_CHANNELS_OVERRIDE_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_target_system", ftypes.UINT8, nil)
f.RC_CHANNELS_OVERRIDE_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_target_component", ftypes.UINT8, nil)
f.RC_CHANNELS_OVERRIDE_chan1_raw = ProtoField.new("chan1_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan1_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan2_raw = ProtoField.new("chan2_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan2_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan3_raw = ProtoField.new("chan3_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan3_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan4_raw = ProtoField.new("chan4_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan4_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan5_raw = ProtoField.new("chan5_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan5_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan6_raw = ProtoField.new("chan6_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan6_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan7_raw = ProtoField.new("chan7_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan7_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan8_raw = ProtoField.new("chan8_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan8_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan9_raw = ProtoField.new("chan9_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan9_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan10_raw = ProtoField.new("chan10_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan10_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan11_raw = ProtoField.new("chan11_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan11_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan12_raw = ProtoField.new("chan12_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan12_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan13_raw = ProtoField.new("chan13_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan13_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan14_raw = ProtoField.new("chan14_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan14_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan15_raw = ProtoField.new("chan15_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan15_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan16_raw = ProtoField.new("chan16_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan16_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan17_raw = ProtoField.new("chan17_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan17_raw", ftypes.UINT16, nil)
f.RC_CHANNELS_OVERRIDE_chan18_raw = ProtoField.new("chan18_raw (uint16_t)", "mavlink_proto.RC_CHANNELS_OVERRIDE_chan18_raw", ftypes.UINT16, nil)

f.MISSION_ITEM_INT_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.MISSION_ITEM_INT_target_system", ftypes.UINT8, nil)
f.MISSION_ITEM_INT_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.MISSION_ITEM_INT_target_component", ftypes.UINT8, nil)
f.MISSION_ITEM_INT_seq = ProtoField.new("seq (uint16_t)", "mavlink_proto.MISSION_ITEM_INT_seq", ftypes.UINT16, nil)
f.MISSION_ITEM_INT_frame = ProtoField.new("frame (MAV_FRAME)", "mavlink_proto.MISSION_ITEM_INT_frame", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.MISSION_ITEM_INT_command = ProtoField.new("command (MAV_CMD)", "mavlink_proto.MISSION_ITEM_INT_command", ftypes.UINT16, enumEntryName.MAV_CMD)
f.MISSION_ITEM_INT_current = ProtoField.new("current (uint8_t)", "mavlink_proto.MISSION_ITEM_INT_current", ftypes.UINT8, nil)
f.MISSION_ITEM_INT_autocontinue = ProtoField.new("autocontinue (uint8_t)", "mavlink_proto.MISSION_ITEM_INT_autocontinue", ftypes.UINT8, nil)
f.MISSION_ITEM_INT_param1 = ProtoField.new("param1 (float)", "mavlink_proto.MISSION_ITEM_INT_param1", ftypes.FLOAT, nil)
f.MISSION_ITEM_INT_param2 = ProtoField.new("param2 (float)", "mavlink_proto.MISSION_ITEM_INT_param2", ftypes.FLOAT, nil)
f.MISSION_ITEM_INT_param3 = ProtoField.new("param3 (float)", "mavlink_proto.MISSION_ITEM_INT_param3", ftypes.FLOAT, nil)
f.MISSION_ITEM_INT_param4 = ProtoField.new("param4 (float)", "mavlink_proto.MISSION_ITEM_INT_param4", ftypes.FLOAT, nil)
f.MISSION_ITEM_INT_x = ProtoField.new("x (int32_t)", "mavlink_proto.MISSION_ITEM_INT_x", ftypes.INT32, nil)
f.MISSION_ITEM_INT_y = ProtoField.new("y (int32_t)", "mavlink_proto.MISSION_ITEM_INT_y", ftypes.INT32, nil)
f.MISSION_ITEM_INT_z = ProtoField.new("z (float)", "mavlink_proto.MISSION_ITEM_INT_z", ftypes.FLOAT, nil)
f.MISSION_ITEM_INT_mission_type = ProtoField.new("mission_type (MAV_MISSION_TYPE)", "mavlink_proto.MISSION_ITEM_INT_mission_type", ftypes.UINT8, enumEntryName.MAV_MISSION_TYPE)

f.VFR_HUD_airspeed = ProtoField.new("airspeed (float)", "mavlink_proto.VFR_HUD_airspeed", ftypes.FLOAT, nil)
f.VFR_HUD_groundspeed = ProtoField.new("groundspeed (float)", "mavlink_proto.VFR_HUD_groundspeed", ftypes.FLOAT, nil)
f.VFR_HUD_heading = ProtoField.new("heading (int16_t)", "mavlink_proto.VFR_HUD_heading", ftypes.INT16, nil)
f.VFR_HUD_throttle = ProtoField.new("throttle (uint16_t)", "mavlink_proto.VFR_HUD_throttle", ftypes.UINT16, nil)
f.VFR_HUD_alt = ProtoField.new("alt (float)", "mavlink_proto.VFR_HUD_alt", ftypes.FLOAT, nil)
f.VFR_HUD_climb = ProtoField.new("climb (float)", "mavlink_proto.VFR_HUD_climb", ftypes.FLOAT, nil)

f.COMMAND_INT_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.COMMAND_INT_target_system", ftypes.UINT8, nil)
f.COMMAND_INT_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.COMMAND_INT_target_component", ftypes.UINT8, nil)
f.COMMAND_INT_frame = ProtoField.new("frame (MAV_FRAME)", "mavlink_proto.COMMAND_INT_frame", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.COMMAND_INT_command = ProtoField.new("command (MAV_CMD)", "mavlink_proto.COMMAND_INT_command", ftypes.UINT16, enumEntryName.MAV_CMD)
f.COMMAND_INT_current = ProtoField.new("current (uint8_t)", "mavlink_proto.COMMAND_INT_current", ftypes.UINT8, nil)
f.COMMAND_INT_autocontinue = ProtoField.new("autocontinue (uint8_t)", "mavlink_proto.COMMAND_INT_autocontinue", ftypes.UINT8, nil)
f.COMMAND_INT_param1 = ProtoField.new("param1 (float)", "mavlink_proto.COMMAND_INT_param1", ftypes.FLOAT, nil)
f.COMMAND_INT_param2 = ProtoField.new("param2 (float)", "mavlink_proto.COMMAND_INT_param2", ftypes.FLOAT, nil)
f.COMMAND_INT_param3 = ProtoField.new("param3 (float)", "mavlink_proto.COMMAND_INT_param3", ftypes.FLOAT, nil)
f.COMMAND_INT_param4 = ProtoField.new("param4 (float)", "mavlink_proto.COMMAND_INT_param4", ftypes.FLOAT, nil)
f.COMMAND_INT_x = ProtoField.new("x (int32_t)", "mavlink_proto.COMMAND_INT_x", ftypes.INT32, nil)
f.COMMAND_INT_y = ProtoField.new("y (int32_t)", "mavlink_proto.COMMAND_INT_y", ftypes.INT32, nil)
f.COMMAND_INT_z = ProtoField.new("z (float)", "mavlink_proto.COMMAND_INT_z", ftypes.FLOAT, nil)

f.COMMAND_LONG_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.COMMAND_LONG_target_system", ftypes.UINT8, nil)
f.COMMAND_LONG_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.COMMAND_LONG_target_component", ftypes.UINT8, nil)
f.COMMAND_LONG_command = ProtoField.new("command (MAV_CMD)", "mavlink_proto.COMMAND_LONG_command", ftypes.UINT16, enumEntryName.MAV_CMD)
f.COMMAND_LONG_confirmation = ProtoField.new("confirmation (uint8_t)", "mavlink_proto.COMMAND_LONG_confirmation", ftypes.UINT8, nil)
f.COMMAND_LONG_param1 = ProtoField.new("param1 (float)", "mavlink_proto.COMMAND_LONG_param1", ftypes.FLOAT, nil)
f.COMMAND_LONG_param2 = ProtoField.new("param2 (float)", "mavlink_proto.COMMAND_LONG_param2", ftypes.FLOAT, nil)
f.COMMAND_LONG_param3 = ProtoField.new("param3 (float)", "mavlink_proto.COMMAND_LONG_param3", ftypes.FLOAT, nil)
f.COMMAND_LONG_param4 = ProtoField.new("param4 (float)", "mavlink_proto.COMMAND_LONG_param4", ftypes.FLOAT, nil)
f.COMMAND_LONG_param5 = ProtoField.new("param5 (float)", "mavlink_proto.COMMAND_LONG_param5", ftypes.FLOAT, nil)
f.COMMAND_LONG_param6 = ProtoField.new("param6 (float)", "mavlink_proto.COMMAND_LONG_param6", ftypes.FLOAT, nil)
f.COMMAND_LONG_param7 = ProtoField.new("param7 (float)", "mavlink_proto.COMMAND_LONG_param7", ftypes.FLOAT, nil)

f.COMMAND_ACK_command = ProtoField.new("command (MAV_CMD)", "mavlink_proto.COMMAND_ACK_command", ftypes.UINT16, enumEntryName.MAV_CMD)
f.COMMAND_ACK_result = ProtoField.new("result (MAV_RESULT)", "mavlink_proto.COMMAND_ACK_result", ftypes.UINT8, enumEntryName.MAV_RESULT)
f.COMMAND_ACK_progress = ProtoField.new("progress (uint8_t)", "mavlink_proto.COMMAND_ACK_progress", ftypes.UINT8, nil)
f.COMMAND_ACK_result_param2 = ProtoField.new("result_param2 (int32_t)", "mavlink_proto.COMMAND_ACK_result_param2", ftypes.INT32, nil)
f.COMMAND_ACK_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.COMMAND_ACK_target_system", ftypes.UINT8, nil)
f.COMMAND_ACK_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.COMMAND_ACK_target_component", ftypes.UINT8, nil)

f.MANUAL_SETPOINT_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.MANUAL_SETPOINT_time_boot_ms", ftypes.UINT32, nil)
f.MANUAL_SETPOINT_roll = ProtoField.new("roll (float)", "mavlink_proto.MANUAL_SETPOINT_roll", ftypes.FLOAT, nil)
f.MANUAL_SETPOINT_pitch = ProtoField.new("pitch (float)", "mavlink_proto.MANUAL_SETPOINT_pitch", ftypes.FLOAT, nil)
f.MANUAL_SETPOINT_yaw = ProtoField.new("yaw (float)", "mavlink_proto.MANUAL_SETPOINT_yaw", ftypes.FLOAT, nil)
f.MANUAL_SETPOINT_thrust = ProtoField.new("thrust (float)", "mavlink_proto.MANUAL_SETPOINT_thrust", ftypes.FLOAT, nil)
f.MANUAL_SETPOINT_mode_switch = ProtoField.new("mode_switch (uint8_t)", "mavlink_proto.MANUAL_SETPOINT_mode_switch", ftypes.UINT8, nil)
f.MANUAL_SETPOINT_manual_override_switch = ProtoField.new("manual_override_switch (uint8_t)", "mavlink_proto.MANUAL_SETPOINT_manual_override_switch", ftypes.UINT8, nil)

f.SET_ATTITUDE_TARGET_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.SET_ATTITUDE_TARGET_time_boot_ms", ftypes.UINT32, nil)
f.SET_ATTITUDE_TARGET_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.SET_ATTITUDE_TARGET_target_system", ftypes.UINT8, nil)
f.SET_ATTITUDE_TARGET_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.SET_ATTITUDE_TARGET_target_component", ftypes.UINT8, nil)
f.SET_ATTITUDE_TARGET_type_mask = ProtoField.new("type_mask (ATTITUDE_TARGET_TYPEMASK)", "mavlink_proto.SET_ATTITUDE_TARGET_type_mask", ftypes.UINT8, nil)
f.SET_ATTITUDE_TARGET_type_mask_flagATTITUDE_TARGET_TYPEMASK_BODY_ROLL_RATE_IGNORE = ProtoField.bool("mavlink_proto.SET_ATTITUDE_TARGET_type_mask.ATTITUDE_TARGET_TYPEMASK_BODY_ROLL_RATE_IGNORE", "ATTITUDE_TARGET_TYPEMASK_BODY_ROLL_RATE_IGNORE", 8, nil, 1)
f.SET_ATTITUDE_TARGET_type_mask_flagATTITUDE_TARGET_TYPEMASK_BODY_PITCH_RATE_IGNORE = ProtoField.bool("mavlink_proto.SET_ATTITUDE_TARGET_type_mask.ATTITUDE_TARGET_TYPEMASK_BODY_PITCH_RATE_IGNORE", "ATTITUDE_TARGET_TYPEMASK_BODY_PITCH_RATE_IGNORE", 8, nil, 2)
f.SET_ATTITUDE_TARGET_type_mask_flagATTITUDE_TARGET_TYPEMASK_BODY_YAW_RATE_IGNORE = ProtoField.bool("mavlink_proto.SET_ATTITUDE_TARGET_type_mask.ATTITUDE_TARGET_TYPEMASK_BODY_YAW_RATE_IGNORE", "ATTITUDE_TARGET_TYPEMASK_BODY_YAW_RATE_IGNORE", 8, nil, 4)
f.SET_ATTITUDE_TARGET_type_mask_flagATTITUDE_TARGET_TYPEMASK_THROTTLE_IGNORE = ProtoField.bool("mavlink_proto.SET_ATTITUDE_TARGET_type_mask.ATTITUDE_TARGET_TYPEMASK_THROTTLE_IGNORE", "ATTITUDE_TARGET_TYPEMASK_THROTTLE_IGNORE", 8, nil, 64)
f.SET_ATTITUDE_TARGET_type_mask_flagATTITUDE_TARGET_TYPEMASK_ATTITUDE_IGNORE = ProtoField.bool("mavlink_proto.SET_ATTITUDE_TARGET_type_mask.ATTITUDE_TARGET_TYPEMASK_ATTITUDE_IGNORE", "ATTITUDE_TARGET_TYPEMASK_ATTITUDE_IGNORE", 8, nil, 128)
f.SET_ATTITUDE_TARGET_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.SET_ATTITUDE_TARGET_q_0", ftypes.FLOAT, nil)
f.SET_ATTITUDE_TARGET_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.SET_ATTITUDE_TARGET_q_1", ftypes.FLOAT, nil)
f.SET_ATTITUDE_TARGET_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.SET_ATTITUDE_TARGET_q_2", ftypes.FLOAT, nil)
f.SET_ATTITUDE_TARGET_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.SET_ATTITUDE_TARGET_q_3", ftypes.FLOAT, nil)
f.SET_ATTITUDE_TARGET_body_roll_rate = ProtoField.new("body_roll_rate (float)", "mavlink_proto.SET_ATTITUDE_TARGET_body_roll_rate", ftypes.FLOAT, nil)
f.SET_ATTITUDE_TARGET_body_pitch_rate = ProtoField.new("body_pitch_rate (float)", "mavlink_proto.SET_ATTITUDE_TARGET_body_pitch_rate", ftypes.FLOAT, nil)
f.SET_ATTITUDE_TARGET_body_yaw_rate = ProtoField.new("body_yaw_rate (float)", "mavlink_proto.SET_ATTITUDE_TARGET_body_yaw_rate", ftypes.FLOAT, nil)
f.SET_ATTITUDE_TARGET_thrust = ProtoField.new("thrust (float)", "mavlink_proto.SET_ATTITUDE_TARGET_thrust", ftypes.FLOAT, nil)

f.ATTITUDE_TARGET_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.ATTITUDE_TARGET_time_boot_ms", ftypes.UINT32, nil)
f.ATTITUDE_TARGET_type_mask = ProtoField.new("type_mask (ATTITUDE_TARGET_TYPEMASK)", "mavlink_proto.ATTITUDE_TARGET_type_mask", ftypes.UINT8, nil)
f.ATTITUDE_TARGET_type_mask_flagATTITUDE_TARGET_TYPEMASK_BODY_ROLL_RATE_IGNORE = ProtoField.bool("mavlink_proto.ATTITUDE_TARGET_type_mask.ATTITUDE_TARGET_TYPEMASK_BODY_ROLL_RATE_IGNORE", "ATTITUDE_TARGET_TYPEMASK_BODY_ROLL_RATE_IGNORE", 8, nil, 1)
f.ATTITUDE_TARGET_type_mask_flagATTITUDE_TARGET_TYPEMASK_BODY_PITCH_RATE_IGNORE = ProtoField.bool("mavlink_proto.ATTITUDE_TARGET_type_mask.ATTITUDE_TARGET_TYPEMASK_BODY_PITCH_RATE_IGNORE", "ATTITUDE_TARGET_TYPEMASK_BODY_PITCH_RATE_IGNORE", 8, nil, 2)
f.ATTITUDE_TARGET_type_mask_flagATTITUDE_TARGET_TYPEMASK_BODY_YAW_RATE_IGNORE = ProtoField.bool("mavlink_proto.ATTITUDE_TARGET_type_mask.ATTITUDE_TARGET_TYPEMASK_BODY_YAW_RATE_IGNORE", "ATTITUDE_TARGET_TYPEMASK_BODY_YAW_RATE_IGNORE", 8, nil, 4)
f.ATTITUDE_TARGET_type_mask_flagATTITUDE_TARGET_TYPEMASK_THROTTLE_IGNORE = ProtoField.bool("mavlink_proto.ATTITUDE_TARGET_type_mask.ATTITUDE_TARGET_TYPEMASK_THROTTLE_IGNORE", "ATTITUDE_TARGET_TYPEMASK_THROTTLE_IGNORE", 8, nil, 64)
f.ATTITUDE_TARGET_type_mask_flagATTITUDE_TARGET_TYPEMASK_ATTITUDE_IGNORE = ProtoField.bool("mavlink_proto.ATTITUDE_TARGET_type_mask.ATTITUDE_TARGET_TYPEMASK_ATTITUDE_IGNORE", "ATTITUDE_TARGET_TYPEMASK_ATTITUDE_IGNORE", 8, nil, 128)
f.ATTITUDE_TARGET_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.ATTITUDE_TARGET_q_0", ftypes.FLOAT, nil)
f.ATTITUDE_TARGET_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.ATTITUDE_TARGET_q_1", ftypes.FLOAT, nil)
f.ATTITUDE_TARGET_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.ATTITUDE_TARGET_q_2", ftypes.FLOAT, nil)
f.ATTITUDE_TARGET_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.ATTITUDE_TARGET_q_3", ftypes.FLOAT, nil)
f.ATTITUDE_TARGET_body_roll_rate = ProtoField.new("body_roll_rate (float)", "mavlink_proto.ATTITUDE_TARGET_body_roll_rate", ftypes.FLOAT, nil)
f.ATTITUDE_TARGET_body_pitch_rate = ProtoField.new("body_pitch_rate (float)", "mavlink_proto.ATTITUDE_TARGET_body_pitch_rate", ftypes.FLOAT, nil)
f.ATTITUDE_TARGET_body_yaw_rate = ProtoField.new("body_yaw_rate (float)", "mavlink_proto.ATTITUDE_TARGET_body_yaw_rate", ftypes.FLOAT, nil)
f.ATTITUDE_TARGET_thrust = ProtoField.new("thrust (float)", "mavlink_proto.ATTITUDE_TARGET_thrust", ftypes.FLOAT, nil)

f.SET_POSITION_TARGET_LOCAL_NED_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_time_boot_ms", ftypes.UINT32, nil)
f.SET_POSITION_TARGET_LOCAL_NED_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_target_system", ftypes.UINT8, nil)
f.SET_POSITION_TARGET_LOCAL_NED_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_target_component", ftypes.UINT8, nil)
f.SET_POSITION_TARGET_LOCAL_NED_coordinate_frame = ProtoField.new("coordinate_frame (MAV_FRAME)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_coordinate_frame", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.SET_POSITION_TARGET_LOCAL_NED_type_mask = ProtoField.new("type_mask (POSITION_TARGET_TYPEMASK)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask", ftypes.UINT16, nil)
f.SET_POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_X_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_X_IGNORE", "POSITION_TARGET_TYPEMASK_X_IGNORE", 12, nil, 1)
f.SET_POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_Y_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_Y_IGNORE", "POSITION_TARGET_TYPEMASK_Y_IGNORE", 12, nil, 2)
f.SET_POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_Z_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_Z_IGNORE", "POSITION_TARGET_TYPEMASK_Z_IGNORE", 12, nil, 4)
f.SET_POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_VX_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_VX_IGNORE", "POSITION_TARGET_TYPEMASK_VX_IGNORE", 12, nil, 8)
f.SET_POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_VY_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_VY_IGNORE", "POSITION_TARGET_TYPEMASK_VY_IGNORE", 12, nil, 16)
f.SET_POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_VZ_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_VZ_IGNORE", "POSITION_TARGET_TYPEMASK_VZ_IGNORE", 12, nil, 32)
f.SET_POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_AX_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_AX_IGNORE", "POSITION_TARGET_TYPEMASK_AX_IGNORE", 12, nil, 64)
f.SET_POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_AY_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_AY_IGNORE", "POSITION_TARGET_TYPEMASK_AY_IGNORE", 12, nil, 128)
f.SET_POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_AZ_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_AZ_IGNORE", "POSITION_TARGET_TYPEMASK_AZ_IGNORE", 12, nil, 256)
f.SET_POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_FORCE_SET = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_FORCE_SET", "POSITION_TARGET_TYPEMASK_FORCE_SET", 12, nil, 512)
f.SET_POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_YAW_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_YAW_IGNORE", "POSITION_TARGET_TYPEMASK_YAW_IGNORE", 12, nil, 1024)
f.SET_POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE", "POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE", 12, nil, 2048)
f.SET_POSITION_TARGET_LOCAL_NED_x = ProtoField.new("x (float)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_x", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_LOCAL_NED_y = ProtoField.new("y (float)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_y", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_LOCAL_NED_z = ProtoField.new("z (float)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_z", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_LOCAL_NED_vx = ProtoField.new("vx (float)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_vx", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_LOCAL_NED_vy = ProtoField.new("vy (float)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_vy", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_LOCAL_NED_vz = ProtoField.new("vz (float)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_vz", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_LOCAL_NED_afx = ProtoField.new("afx (float)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_afx", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_LOCAL_NED_afy = ProtoField.new("afy (float)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_afy", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_LOCAL_NED_afz = ProtoField.new("afz (float)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_afz", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_LOCAL_NED_yaw = ProtoField.new("yaw (float)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_yaw", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_LOCAL_NED_yaw_rate = ProtoField.new("yaw_rate (float)", "mavlink_proto.SET_POSITION_TARGET_LOCAL_NED_yaw_rate", ftypes.FLOAT, nil)

f.POSITION_TARGET_LOCAL_NED_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_time_boot_ms", ftypes.UINT32, nil)
f.POSITION_TARGET_LOCAL_NED_coordinate_frame = ProtoField.new("coordinate_frame (MAV_FRAME)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_coordinate_frame", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.POSITION_TARGET_LOCAL_NED_type_mask = ProtoField.new("type_mask (POSITION_TARGET_TYPEMASK)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask", ftypes.UINT16, nil)
f.POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_X_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_X_IGNORE", "POSITION_TARGET_TYPEMASK_X_IGNORE", 12, nil, 1)
f.POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_Y_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_Y_IGNORE", "POSITION_TARGET_TYPEMASK_Y_IGNORE", 12, nil, 2)
f.POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_Z_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_Z_IGNORE", "POSITION_TARGET_TYPEMASK_Z_IGNORE", 12, nil, 4)
f.POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_VX_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_VX_IGNORE", "POSITION_TARGET_TYPEMASK_VX_IGNORE", 12, nil, 8)
f.POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_VY_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_VY_IGNORE", "POSITION_TARGET_TYPEMASK_VY_IGNORE", 12, nil, 16)
f.POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_VZ_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_VZ_IGNORE", "POSITION_TARGET_TYPEMASK_VZ_IGNORE", 12, nil, 32)
f.POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_AX_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_AX_IGNORE", "POSITION_TARGET_TYPEMASK_AX_IGNORE", 12, nil, 64)
f.POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_AY_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_AY_IGNORE", "POSITION_TARGET_TYPEMASK_AY_IGNORE", 12, nil, 128)
f.POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_AZ_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_AZ_IGNORE", "POSITION_TARGET_TYPEMASK_AZ_IGNORE", 12, nil, 256)
f.POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_FORCE_SET = ProtoField.bool("mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_FORCE_SET", "POSITION_TARGET_TYPEMASK_FORCE_SET", 12, nil, 512)
f.POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_YAW_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_YAW_IGNORE", "POSITION_TARGET_TYPEMASK_YAW_IGNORE", 12, nil, 1024)
f.POSITION_TARGET_LOCAL_NED_type_mask_flagPOSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_LOCAL_NED_type_mask.POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE", "POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE", 12, nil, 2048)
f.POSITION_TARGET_LOCAL_NED_x = ProtoField.new("x (float)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_x", ftypes.FLOAT, nil)
f.POSITION_TARGET_LOCAL_NED_y = ProtoField.new("y (float)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_y", ftypes.FLOAT, nil)
f.POSITION_TARGET_LOCAL_NED_z = ProtoField.new("z (float)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_z", ftypes.FLOAT, nil)
f.POSITION_TARGET_LOCAL_NED_vx = ProtoField.new("vx (float)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_vx", ftypes.FLOAT, nil)
f.POSITION_TARGET_LOCAL_NED_vy = ProtoField.new("vy (float)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_vy", ftypes.FLOAT, nil)
f.POSITION_TARGET_LOCAL_NED_vz = ProtoField.new("vz (float)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_vz", ftypes.FLOAT, nil)
f.POSITION_TARGET_LOCAL_NED_afx = ProtoField.new("afx (float)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_afx", ftypes.FLOAT, nil)
f.POSITION_TARGET_LOCAL_NED_afy = ProtoField.new("afy (float)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_afy", ftypes.FLOAT, nil)
f.POSITION_TARGET_LOCAL_NED_afz = ProtoField.new("afz (float)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_afz", ftypes.FLOAT, nil)
f.POSITION_TARGET_LOCAL_NED_yaw = ProtoField.new("yaw (float)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_yaw", ftypes.FLOAT, nil)
f.POSITION_TARGET_LOCAL_NED_yaw_rate = ProtoField.new("yaw_rate (float)", "mavlink_proto.POSITION_TARGET_LOCAL_NED_yaw_rate", ftypes.FLOAT, nil)

f.SET_POSITION_TARGET_GLOBAL_INT_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_time_boot_ms", ftypes.UINT32, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_target_system", ftypes.UINT8, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_target_component", ftypes.UINT8, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_coordinate_frame = ProtoField.new("coordinate_frame (MAV_FRAME)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_coordinate_frame", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask = ProtoField.new("type_mask (POSITION_TARGET_TYPEMASK)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask", ftypes.UINT16, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_X_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_X_IGNORE", "POSITION_TARGET_TYPEMASK_X_IGNORE", 12, nil, 1)
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_Y_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_Y_IGNORE", "POSITION_TARGET_TYPEMASK_Y_IGNORE", 12, nil, 2)
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_Z_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_Z_IGNORE", "POSITION_TARGET_TYPEMASK_Z_IGNORE", 12, nil, 4)
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_VX_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_VX_IGNORE", "POSITION_TARGET_TYPEMASK_VX_IGNORE", 12, nil, 8)
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_VY_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_VY_IGNORE", "POSITION_TARGET_TYPEMASK_VY_IGNORE", 12, nil, 16)
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_VZ_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_VZ_IGNORE", "POSITION_TARGET_TYPEMASK_VZ_IGNORE", 12, nil, 32)
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_AX_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_AX_IGNORE", "POSITION_TARGET_TYPEMASK_AX_IGNORE", 12, nil, 64)
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_AY_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_AY_IGNORE", "POSITION_TARGET_TYPEMASK_AY_IGNORE", 12, nil, 128)
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_AZ_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_AZ_IGNORE", "POSITION_TARGET_TYPEMASK_AZ_IGNORE", 12, nil, 256)
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_FORCE_SET = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_FORCE_SET", "POSITION_TARGET_TYPEMASK_FORCE_SET", 12, nil, 512)
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_YAW_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_YAW_IGNORE", "POSITION_TARGET_TYPEMASK_YAW_IGNORE", 12, nil, 1024)
f.SET_POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE = ProtoField.bool("mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE", "POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE", 12, nil, 2048)
f.SET_POSITION_TARGET_GLOBAL_INT_lat_int = ProtoField.new("lat_int (int32_t)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_lat_int", ftypes.INT32, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_lon_int = ProtoField.new("lon_int (int32_t)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_lon_int", ftypes.INT32, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_alt = ProtoField.new("alt (float)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_alt", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_vx = ProtoField.new("vx (float)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_vx", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_vy = ProtoField.new("vy (float)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_vy", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_vz = ProtoField.new("vz (float)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_vz", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_afx = ProtoField.new("afx (float)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_afx", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_afy = ProtoField.new("afy (float)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_afy", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_afz = ProtoField.new("afz (float)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_afz", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_yaw = ProtoField.new("yaw (float)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_yaw", ftypes.FLOAT, nil)
f.SET_POSITION_TARGET_GLOBAL_INT_yaw_rate = ProtoField.new("yaw_rate (float)", "mavlink_proto.SET_POSITION_TARGET_GLOBAL_INT_yaw_rate", ftypes.FLOAT, nil)

f.POSITION_TARGET_GLOBAL_INT_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_time_boot_ms", ftypes.UINT32, nil)
f.POSITION_TARGET_GLOBAL_INT_coordinate_frame = ProtoField.new("coordinate_frame (MAV_FRAME)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_coordinate_frame", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.POSITION_TARGET_GLOBAL_INT_type_mask = ProtoField.new("type_mask (POSITION_TARGET_TYPEMASK)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask", ftypes.UINT16, nil)
f.POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_X_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_X_IGNORE", "POSITION_TARGET_TYPEMASK_X_IGNORE", 12, nil, 1)
f.POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_Y_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_Y_IGNORE", "POSITION_TARGET_TYPEMASK_Y_IGNORE", 12, nil, 2)
f.POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_Z_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_Z_IGNORE", "POSITION_TARGET_TYPEMASK_Z_IGNORE", 12, nil, 4)
f.POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_VX_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_VX_IGNORE", "POSITION_TARGET_TYPEMASK_VX_IGNORE", 12, nil, 8)
f.POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_VY_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_VY_IGNORE", "POSITION_TARGET_TYPEMASK_VY_IGNORE", 12, nil, 16)
f.POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_VZ_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_VZ_IGNORE", "POSITION_TARGET_TYPEMASK_VZ_IGNORE", 12, nil, 32)
f.POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_AX_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_AX_IGNORE", "POSITION_TARGET_TYPEMASK_AX_IGNORE", 12, nil, 64)
f.POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_AY_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_AY_IGNORE", "POSITION_TARGET_TYPEMASK_AY_IGNORE", 12, nil, 128)
f.POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_AZ_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_AZ_IGNORE", "POSITION_TARGET_TYPEMASK_AZ_IGNORE", 12, nil, 256)
f.POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_FORCE_SET = ProtoField.bool("mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_FORCE_SET", "POSITION_TARGET_TYPEMASK_FORCE_SET", 12, nil, 512)
f.POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_YAW_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_YAW_IGNORE", "POSITION_TARGET_TYPEMASK_YAW_IGNORE", 12, nil, 1024)
f.POSITION_TARGET_GLOBAL_INT_type_mask_flagPOSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE = ProtoField.bool("mavlink_proto.POSITION_TARGET_GLOBAL_INT_type_mask.POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE", "POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE", 12, nil, 2048)
f.POSITION_TARGET_GLOBAL_INT_lat_int = ProtoField.new("lat_int (int32_t)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_lat_int", ftypes.INT32, nil)
f.POSITION_TARGET_GLOBAL_INT_lon_int = ProtoField.new("lon_int (int32_t)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_lon_int", ftypes.INT32, nil)
f.POSITION_TARGET_GLOBAL_INT_alt = ProtoField.new("alt (float)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_alt", ftypes.FLOAT, nil)
f.POSITION_TARGET_GLOBAL_INT_vx = ProtoField.new("vx (float)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_vx", ftypes.FLOAT, nil)
f.POSITION_TARGET_GLOBAL_INT_vy = ProtoField.new("vy (float)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_vy", ftypes.FLOAT, nil)
f.POSITION_TARGET_GLOBAL_INT_vz = ProtoField.new("vz (float)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_vz", ftypes.FLOAT, nil)
f.POSITION_TARGET_GLOBAL_INT_afx = ProtoField.new("afx (float)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_afx", ftypes.FLOAT, nil)
f.POSITION_TARGET_GLOBAL_INT_afy = ProtoField.new("afy (float)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_afy", ftypes.FLOAT, nil)
f.POSITION_TARGET_GLOBAL_INT_afz = ProtoField.new("afz (float)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_afz", ftypes.FLOAT, nil)
f.POSITION_TARGET_GLOBAL_INT_yaw = ProtoField.new("yaw (float)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_yaw", ftypes.FLOAT, nil)
f.POSITION_TARGET_GLOBAL_INT_yaw_rate = ProtoField.new("yaw_rate (float)", "mavlink_proto.POSITION_TARGET_GLOBAL_INT_yaw_rate", ftypes.FLOAT, nil)

f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_time_boot_ms", ftypes.UINT32, nil)
f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_x = ProtoField.new("x (float)", "mavlink_proto.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_x", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_y = ProtoField.new("y (float)", "mavlink_proto.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_y", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_z = ProtoField.new("z (float)", "mavlink_proto.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_z", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_roll = ProtoField.new("roll (float)", "mavlink_proto.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_roll", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_pitch = ProtoField.new("pitch (float)", "mavlink_proto.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_pitch", ftypes.FLOAT, nil)
f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_yaw = ProtoField.new("yaw (float)", "mavlink_proto.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_yaw", ftypes.FLOAT, nil)

f.HIL_STATE_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.HIL_STATE_time_usec", ftypes.UINT64, nil)
f.HIL_STATE_roll = ProtoField.new("roll (float)", "mavlink_proto.HIL_STATE_roll", ftypes.FLOAT, nil)
f.HIL_STATE_pitch = ProtoField.new("pitch (float)", "mavlink_proto.HIL_STATE_pitch", ftypes.FLOAT, nil)
f.HIL_STATE_yaw = ProtoField.new("yaw (float)", "mavlink_proto.HIL_STATE_yaw", ftypes.FLOAT, nil)
f.HIL_STATE_rollspeed = ProtoField.new("rollspeed (float)", "mavlink_proto.HIL_STATE_rollspeed", ftypes.FLOAT, nil)
f.HIL_STATE_pitchspeed = ProtoField.new("pitchspeed (float)", "mavlink_proto.HIL_STATE_pitchspeed", ftypes.FLOAT, nil)
f.HIL_STATE_yawspeed = ProtoField.new("yawspeed (float)", "mavlink_proto.HIL_STATE_yawspeed", ftypes.FLOAT, nil)
f.HIL_STATE_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.HIL_STATE_lat", ftypes.INT32, nil)
f.HIL_STATE_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.HIL_STATE_lon", ftypes.INT32, nil)
f.HIL_STATE_alt = ProtoField.new("alt (int32_t)", "mavlink_proto.HIL_STATE_alt", ftypes.INT32, nil)
f.HIL_STATE_vx = ProtoField.new("vx (int16_t)", "mavlink_proto.HIL_STATE_vx", ftypes.INT16, nil)
f.HIL_STATE_vy = ProtoField.new("vy (int16_t)", "mavlink_proto.HIL_STATE_vy", ftypes.INT16, nil)
f.HIL_STATE_vz = ProtoField.new("vz (int16_t)", "mavlink_proto.HIL_STATE_vz", ftypes.INT16, nil)
f.HIL_STATE_xacc = ProtoField.new("xacc (int16_t)", "mavlink_proto.HIL_STATE_xacc", ftypes.INT16, nil)
f.HIL_STATE_yacc = ProtoField.new("yacc (int16_t)", "mavlink_proto.HIL_STATE_yacc", ftypes.INT16, nil)
f.HIL_STATE_zacc = ProtoField.new("zacc (int16_t)", "mavlink_proto.HIL_STATE_zacc", ftypes.INT16, nil)

f.HIL_CONTROLS_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.HIL_CONTROLS_time_usec", ftypes.UINT64, nil)
f.HIL_CONTROLS_roll_ailerons = ProtoField.new("roll_ailerons (float)", "mavlink_proto.HIL_CONTROLS_roll_ailerons", ftypes.FLOAT, nil)
f.HIL_CONTROLS_pitch_elevator = ProtoField.new("pitch_elevator (float)", "mavlink_proto.HIL_CONTROLS_pitch_elevator", ftypes.FLOAT, nil)
f.HIL_CONTROLS_yaw_rudder = ProtoField.new("yaw_rudder (float)", "mavlink_proto.HIL_CONTROLS_yaw_rudder", ftypes.FLOAT, nil)
f.HIL_CONTROLS_throttle = ProtoField.new("throttle (float)", "mavlink_proto.HIL_CONTROLS_throttle", ftypes.FLOAT, nil)
f.HIL_CONTROLS_aux1 = ProtoField.new("aux1 (float)", "mavlink_proto.HIL_CONTROLS_aux1", ftypes.FLOAT, nil)
f.HIL_CONTROLS_aux2 = ProtoField.new("aux2 (float)", "mavlink_proto.HIL_CONTROLS_aux2", ftypes.FLOAT, nil)
f.HIL_CONTROLS_aux3 = ProtoField.new("aux3 (float)", "mavlink_proto.HIL_CONTROLS_aux3", ftypes.FLOAT, nil)
f.HIL_CONTROLS_aux4 = ProtoField.new("aux4 (float)", "mavlink_proto.HIL_CONTROLS_aux4", ftypes.FLOAT, nil)
f.HIL_CONTROLS_mode = ProtoField.new("mode (MAV_MODE)", "mavlink_proto.HIL_CONTROLS_mode", ftypes.UINT8, enumEntryName.MAV_MODE)
f.HIL_CONTROLS_nav_mode = ProtoField.new("nav_mode (uint8_t)", "mavlink_proto.HIL_CONTROLS_nav_mode", ftypes.UINT8, nil)

f.HIL_RC_INPUTS_RAW_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_time_usec", ftypes.UINT64, nil)
f.HIL_RC_INPUTS_RAW_chan1_raw = ProtoField.new("chan1_raw (uint16_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_chan1_raw", ftypes.UINT16, nil)
f.HIL_RC_INPUTS_RAW_chan2_raw = ProtoField.new("chan2_raw (uint16_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_chan2_raw", ftypes.UINT16, nil)
f.HIL_RC_INPUTS_RAW_chan3_raw = ProtoField.new("chan3_raw (uint16_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_chan3_raw", ftypes.UINT16, nil)
f.HIL_RC_INPUTS_RAW_chan4_raw = ProtoField.new("chan4_raw (uint16_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_chan4_raw", ftypes.UINT16, nil)
f.HIL_RC_INPUTS_RAW_chan5_raw = ProtoField.new("chan5_raw (uint16_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_chan5_raw", ftypes.UINT16, nil)
f.HIL_RC_INPUTS_RAW_chan6_raw = ProtoField.new("chan6_raw (uint16_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_chan6_raw", ftypes.UINT16, nil)
f.HIL_RC_INPUTS_RAW_chan7_raw = ProtoField.new("chan7_raw (uint16_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_chan7_raw", ftypes.UINT16, nil)
f.HIL_RC_INPUTS_RAW_chan8_raw = ProtoField.new("chan8_raw (uint16_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_chan8_raw", ftypes.UINT16, nil)
f.HIL_RC_INPUTS_RAW_chan9_raw = ProtoField.new("chan9_raw (uint16_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_chan9_raw", ftypes.UINT16, nil)
f.HIL_RC_INPUTS_RAW_chan10_raw = ProtoField.new("chan10_raw (uint16_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_chan10_raw", ftypes.UINT16, nil)
f.HIL_RC_INPUTS_RAW_chan11_raw = ProtoField.new("chan11_raw (uint16_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_chan11_raw", ftypes.UINT16, nil)
f.HIL_RC_INPUTS_RAW_chan12_raw = ProtoField.new("chan12_raw (uint16_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_chan12_raw", ftypes.UINT16, nil)
f.HIL_RC_INPUTS_RAW_rssi = ProtoField.new("rssi (uint8_t)", "mavlink_proto.HIL_RC_INPUTS_RAW_rssi", ftypes.UINT8, nil)

f.HIL_ACTUATOR_CONTROLS_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_time_usec", ftypes.UINT64, nil)
f.HIL_ACTUATOR_CONTROLS_controls_0 = ProtoField.new("controls[0] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_0", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_1 = ProtoField.new("controls[1] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_1", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_2 = ProtoField.new("controls[2] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_2", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_3 = ProtoField.new("controls[3] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_3", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_4 = ProtoField.new("controls[4] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_4", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_5 = ProtoField.new("controls[5] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_5", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_6 = ProtoField.new("controls[6] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_6", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_7 = ProtoField.new("controls[7] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_7", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_8 = ProtoField.new("controls[8] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_8", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_9 = ProtoField.new("controls[9] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_9", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_10 = ProtoField.new("controls[10] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_10", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_11 = ProtoField.new("controls[11] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_11", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_12 = ProtoField.new("controls[12] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_12", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_13 = ProtoField.new("controls[13] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_13", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_14 = ProtoField.new("controls[14] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_14", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_controls_15 = ProtoField.new("controls[15] (float)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_controls_15", ftypes.FLOAT, nil)
f.HIL_ACTUATOR_CONTROLS_mode = ProtoField.new("mode (MAV_MODE_FLAG)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_mode", ftypes.UINT8, nil)
f.HIL_ACTUATOR_CONTROLS_mode_flagMAV_MODE_FLAG_CUSTOM_MODE_ENABLED = ProtoField.bool("mavlink_proto.HIL_ACTUATOR_CONTROLS_mode.MAV_MODE_FLAG_CUSTOM_MODE_ENABLED", "MAV_MODE_FLAG_CUSTOM_MODE_ENABLED", 8, nil, 1)
f.HIL_ACTUATOR_CONTROLS_mode_flagMAV_MODE_FLAG_TEST_ENABLED = ProtoField.bool("mavlink_proto.HIL_ACTUATOR_CONTROLS_mode.MAV_MODE_FLAG_TEST_ENABLED", "MAV_MODE_FLAG_TEST_ENABLED", 8, nil, 2)
f.HIL_ACTUATOR_CONTROLS_mode_flagMAV_MODE_FLAG_AUTO_ENABLED = ProtoField.bool("mavlink_proto.HIL_ACTUATOR_CONTROLS_mode.MAV_MODE_FLAG_AUTO_ENABLED", "MAV_MODE_FLAG_AUTO_ENABLED", 8, nil, 4)
f.HIL_ACTUATOR_CONTROLS_mode_flagMAV_MODE_FLAG_GUIDED_ENABLED = ProtoField.bool("mavlink_proto.HIL_ACTUATOR_CONTROLS_mode.MAV_MODE_FLAG_GUIDED_ENABLED", "MAV_MODE_FLAG_GUIDED_ENABLED", 8, nil, 8)
f.HIL_ACTUATOR_CONTROLS_mode_flagMAV_MODE_FLAG_STABILIZE_ENABLED = ProtoField.bool("mavlink_proto.HIL_ACTUATOR_CONTROLS_mode.MAV_MODE_FLAG_STABILIZE_ENABLED", "MAV_MODE_FLAG_STABILIZE_ENABLED", 8, nil, 16)
f.HIL_ACTUATOR_CONTROLS_mode_flagMAV_MODE_FLAG_HIL_ENABLED = ProtoField.bool("mavlink_proto.HIL_ACTUATOR_CONTROLS_mode.MAV_MODE_FLAG_HIL_ENABLED", "MAV_MODE_FLAG_HIL_ENABLED", 8, nil, 32)
f.HIL_ACTUATOR_CONTROLS_mode_flagMAV_MODE_FLAG_MANUAL_INPUT_ENABLED = ProtoField.bool("mavlink_proto.HIL_ACTUATOR_CONTROLS_mode.MAV_MODE_FLAG_MANUAL_INPUT_ENABLED", "MAV_MODE_FLAG_MANUAL_INPUT_ENABLED", 8, nil, 64)
f.HIL_ACTUATOR_CONTROLS_mode_flagMAV_MODE_FLAG_SAFETY_ARMED = ProtoField.bool("mavlink_proto.HIL_ACTUATOR_CONTROLS_mode.MAV_MODE_FLAG_SAFETY_ARMED", "MAV_MODE_FLAG_SAFETY_ARMED", 8, nil, 128)
f.HIL_ACTUATOR_CONTROLS_flags = ProtoField.new("flags (uint64_t)", "mavlink_proto.HIL_ACTUATOR_CONTROLS_flags", ftypes.UINT64, nil)

f.OPTICAL_FLOW_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.OPTICAL_FLOW_time_usec", ftypes.UINT64, nil)
f.OPTICAL_FLOW_sensor_id = ProtoField.new("sensor_id (uint8_t)", "mavlink_proto.OPTICAL_FLOW_sensor_id", ftypes.UINT8, nil)
f.OPTICAL_FLOW_flow_x = ProtoField.new("flow_x (int16_t)", "mavlink_proto.OPTICAL_FLOW_flow_x", ftypes.INT16, nil)
f.OPTICAL_FLOW_flow_y = ProtoField.new("flow_y (int16_t)", "mavlink_proto.OPTICAL_FLOW_flow_y", ftypes.INT16, nil)
f.OPTICAL_FLOW_flow_comp_m_x = ProtoField.new("flow_comp_m_x (float)", "mavlink_proto.OPTICAL_FLOW_flow_comp_m_x", ftypes.FLOAT, nil)
f.OPTICAL_FLOW_flow_comp_m_y = ProtoField.new("flow_comp_m_y (float)", "mavlink_proto.OPTICAL_FLOW_flow_comp_m_y", ftypes.FLOAT, nil)
f.OPTICAL_FLOW_quality = ProtoField.new("quality (uint8_t)", "mavlink_proto.OPTICAL_FLOW_quality", ftypes.UINT8, nil)
f.OPTICAL_FLOW_ground_distance = ProtoField.new("ground_distance (float)", "mavlink_proto.OPTICAL_FLOW_ground_distance", ftypes.FLOAT, nil)
f.OPTICAL_FLOW_flow_rate_x = ProtoField.new("flow_rate_x (float)", "mavlink_proto.OPTICAL_FLOW_flow_rate_x", ftypes.FLOAT, nil)
f.OPTICAL_FLOW_flow_rate_y = ProtoField.new("flow_rate_y (float)", "mavlink_proto.OPTICAL_FLOW_flow_rate_y", ftypes.FLOAT, nil)

f.GLOBAL_VISION_POSITION_ESTIMATE_usec = ProtoField.new("usec (uint64_t)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_usec", ftypes.UINT64, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_x = ProtoField.new("x (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_x", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_y = ProtoField.new("y (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_y", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_z = ProtoField.new("z (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_z", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_roll = ProtoField.new("roll (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_roll", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_pitch = ProtoField.new("pitch (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_pitch", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_yaw = ProtoField.new("yaw (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_yaw", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_0 = ProtoField.new("covariance[0] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_0", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_1 = ProtoField.new("covariance[1] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_1", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_2 = ProtoField.new("covariance[2] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_2", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_3 = ProtoField.new("covariance[3] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_3", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_4 = ProtoField.new("covariance[4] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_4", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_5 = ProtoField.new("covariance[5] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_5", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_6 = ProtoField.new("covariance[6] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_6", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_7 = ProtoField.new("covariance[7] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_7", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_8 = ProtoField.new("covariance[8] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_8", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_9 = ProtoField.new("covariance[9] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_9", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_10 = ProtoField.new("covariance[10] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_10", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_11 = ProtoField.new("covariance[11] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_11", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_12 = ProtoField.new("covariance[12] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_12", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_13 = ProtoField.new("covariance[13] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_13", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_14 = ProtoField.new("covariance[14] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_14", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_15 = ProtoField.new("covariance[15] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_15", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_16 = ProtoField.new("covariance[16] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_16", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_17 = ProtoField.new("covariance[17] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_17", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_18 = ProtoField.new("covariance[18] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_18", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_19 = ProtoField.new("covariance[19] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_19", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_20 = ProtoField.new("covariance[20] (float)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_covariance_20", ftypes.FLOAT, nil)
f.GLOBAL_VISION_POSITION_ESTIMATE_reset_counter = ProtoField.new("reset_counter (uint8_t)", "mavlink_proto.GLOBAL_VISION_POSITION_ESTIMATE_reset_counter", ftypes.UINT8, nil)

f.VISION_POSITION_ESTIMATE_usec = ProtoField.new("usec (uint64_t)", "mavlink_proto.VISION_POSITION_ESTIMATE_usec", ftypes.UINT64, nil)
f.VISION_POSITION_ESTIMATE_x = ProtoField.new("x (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_x", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_y = ProtoField.new("y (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_y", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_z = ProtoField.new("z (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_z", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_roll = ProtoField.new("roll (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_roll", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_pitch = ProtoField.new("pitch (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_pitch", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_yaw = ProtoField.new("yaw (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_yaw", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_0 = ProtoField.new("covariance[0] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_0", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_1 = ProtoField.new("covariance[1] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_1", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_2 = ProtoField.new("covariance[2] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_2", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_3 = ProtoField.new("covariance[3] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_3", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_4 = ProtoField.new("covariance[4] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_4", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_5 = ProtoField.new("covariance[5] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_5", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_6 = ProtoField.new("covariance[6] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_6", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_7 = ProtoField.new("covariance[7] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_7", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_8 = ProtoField.new("covariance[8] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_8", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_9 = ProtoField.new("covariance[9] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_9", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_10 = ProtoField.new("covariance[10] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_10", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_11 = ProtoField.new("covariance[11] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_11", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_12 = ProtoField.new("covariance[12] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_12", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_13 = ProtoField.new("covariance[13] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_13", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_14 = ProtoField.new("covariance[14] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_14", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_15 = ProtoField.new("covariance[15] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_15", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_16 = ProtoField.new("covariance[16] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_16", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_17 = ProtoField.new("covariance[17] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_17", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_18 = ProtoField.new("covariance[18] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_18", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_19 = ProtoField.new("covariance[19] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_19", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_covariance_20 = ProtoField.new("covariance[20] (float)", "mavlink_proto.VISION_POSITION_ESTIMATE_covariance_20", ftypes.FLOAT, nil)
f.VISION_POSITION_ESTIMATE_reset_counter = ProtoField.new("reset_counter (uint8_t)", "mavlink_proto.VISION_POSITION_ESTIMATE_reset_counter", ftypes.UINT8, nil)

f.VISION_SPEED_ESTIMATE_usec = ProtoField.new("usec (uint64_t)", "mavlink_proto.VISION_SPEED_ESTIMATE_usec", ftypes.UINT64, nil)
f.VISION_SPEED_ESTIMATE_x = ProtoField.new("x (float)", "mavlink_proto.VISION_SPEED_ESTIMATE_x", ftypes.FLOAT, nil)
f.VISION_SPEED_ESTIMATE_y = ProtoField.new("y (float)", "mavlink_proto.VISION_SPEED_ESTIMATE_y", ftypes.FLOAT, nil)
f.VISION_SPEED_ESTIMATE_z = ProtoField.new("z (float)", "mavlink_proto.VISION_SPEED_ESTIMATE_z", ftypes.FLOAT, nil)
f.VISION_SPEED_ESTIMATE_covariance_0 = ProtoField.new("covariance[0] (float)", "mavlink_proto.VISION_SPEED_ESTIMATE_covariance_0", ftypes.FLOAT, nil)
f.VISION_SPEED_ESTIMATE_covariance_1 = ProtoField.new("covariance[1] (float)", "mavlink_proto.VISION_SPEED_ESTIMATE_covariance_1", ftypes.FLOAT, nil)
f.VISION_SPEED_ESTIMATE_covariance_2 = ProtoField.new("covariance[2] (float)", "mavlink_proto.VISION_SPEED_ESTIMATE_covariance_2", ftypes.FLOAT, nil)
f.VISION_SPEED_ESTIMATE_covariance_3 = ProtoField.new("covariance[3] (float)", "mavlink_proto.VISION_SPEED_ESTIMATE_covariance_3", ftypes.FLOAT, nil)
f.VISION_SPEED_ESTIMATE_covariance_4 = ProtoField.new("covariance[4] (float)", "mavlink_proto.VISION_SPEED_ESTIMATE_covariance_4", ftypes.FLOAT, nil)
f.VISION_SPEED_ESTIMATE_covariance_5 = ProtoField.new("covariance[5] (float)", "mavlink_proto.VISION_SPEED_ESTIMATE_covariance_5", ftypes.FLOAT, nil)
f.VISION_SPEED_ESTIMATE_covariance_6 = ProtoField.new("covariance[6] (float)", "mavlink_proto.VISION_SPEED_ESTIMATE_covariance_6", ftypes.FLOAT, nil)
f.VISION_SPEED_ESTIMATE_covariance_7 = ProtoField.new("covariance[7] (float)", "mavlink_proto.VISION_SPEED_ESTIMATE_covariance_7", ftypes.FLOAT, nil)
f.VISION_SPEED_ESTIMATE_covariance_8 = ProtoField.new("covariance[8] (float)", "mavlink_proto.VISION_SPEED_ESTIMATE_covariance_8", ftypes.FLOAT, nil)
f.VISION_SPEED_ESTIMATE_reset_counter = ProtoField.new("reset_counter (uint8_t)", "mavlink_proto.VISION_SPEED_ESTIMATE_reset_counter", ftypes.UINT8, nil)

f.VICON_POSITION_ESTIMATE_usec = ProtoField.new("usec (uint64_t)", "mavlink_proto.VICON_POSITION_ESTIMATE_usec", ftypes.UINT64, nil)
f.VICON_POSITION_ESTIMATE_x = ProtoField.new("x (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_x", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_y = ProtoField.new("y (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_y", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_z = ProtoField.new("z (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_z", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_roll = ProtoField.new("roll (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_roll", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_pitch = ProtoField.new("pitch (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_pitch", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_yaw = ProtoField.new("yaw (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_yaw", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_0 = ProtoField.new("covariance[0] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_0", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_1 = ProtoField.new("covariance[1] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_1", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_2 = ProtoField.new("covariance[2] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_2", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_3 = ProtoField.new("covariance[3] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_3", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_4 = ProtoField.new("covariance[4] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_4", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_5 = ProtoField.new("covariance[5] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_5", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_6 = ProtoField.new("covariance[6] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_6", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_7 = ProtoField.new("covariance[7] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_7", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_8 = ProtoField.new("covariance[8] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_8", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_9 = ProtoField.new("covariance[9] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_9", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_10 = ProtoField.new("covariance[10] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_10", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_11 = ProtoField.new("covariance[11] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_11", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_12 = ProtoField.new("covariance[12] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_12", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_13 = ProtoField.new("covariance[13] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_13", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_14 = ProtoField.new("covariance[14] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_14", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_15 = ProtoField.new("covariance[15] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_15", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_16 = ProtoField.new("covariance[16] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_16", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_17 = ProtoField.new("covariance[17] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_17", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_18 = ProtoField.new("covariance[18] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_18", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_19 = ProtoField.new("covariance[19] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_19", ftypes.FLOAT, nil)
f.VICON_POSITION_ESTIMATE_covariance_20 = ProtoField.new("covariance[20] (float)", "mavlink_proto.VICON_POSITION_ESTIMATE_covariance_20", ftypes.FLOAT, nil)

f.HIGHRES_IMU_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.HIGHRES_IMU_time_usec", ftypes.UINT64, nil)
f.HIGHRES_IMU_xacc = ProtoField.new("xacc (float)", "mavlink_proto.HIGHRES_IMU_xacc", ftypes.FLOAT, nil)
f.HIGHRES_IMU_yacc = ProtoField.new("yacc (float)", "mavlink_proto.HIGHRES_IMU_yacc", ftypes.FLOAT, nil)
f.HIGHRES_IMU_zacc = ProtoField.new("zacc (float)", "mavlink_proto.HIGHRES_IMU_zacc", ftypes.FLOAT, nil)
f.HIGHRES_IMU_xgyro = ProtoField.new("xgyro (float)", "mavlink_proto.HIGHRES_IMU_xgyro", ftypes.FLOAT, nil)
f.HIGHRES_IMU_ygyro = ProtoField.new("ygyro (float)", "mavlink_proto.HIGHRES_IMU_ygyro", ftypes.FLOAT, nil)
f.HIGHRES_IMU_zgyro = ProtoField.new("zgyro (float)", "mavlink_proto.HIGHRES_IMU_zgyro", ftypes.FLOAT, nil)
f.HIGHRES_IMU_xmag = ProtoField.new("xmag (float)", "mavlink_proto.HIGHRES_IMU_xmag", ftypes.FLOAT, nil)
f.HIGHRES_IMU_ymag = ProtoField.new("ymag (float)", "mavlink_proto.HIGHRES_IMU_ymag", ftypes.FLOAT, nil)
f.HIGHRES_IMU_zmag = ProtoField.new("zmag (float)", "mavlink_proto.HIGHRES_IMU_zmag", ftypes.FLOAT, nil)
f.HIGHRES_IMU_abs_pressure = ProtoField.new("abs_pressure (float)", "mavlink_proto.HIGHRES_IMU_abs_pressure", ftypes.FLOAT, nil)
f.HIGHRES_IMU_diff_pressure = ProtoField.new("diff_pressure (float)", "mavlink_proto.HIGHRES_IMU_diff_pressure", ftypes.FLOAT, nil)
f.HIGHRES_IMU_pressure_alt = ProtoField.new("pressure_alt (float)", "mavlink_proto.HIGHRES_IMU_pressure_alt", ftypes.FLOAT, nil)
f.HIGHRES_IMU_temperature = ProtoField.new("temperature (float)", "mavlink_proto.HIGHRES_IMU_temperature", ftypes.FLOAT, nil)
f.HIGHRES_IMU_fields_updated = ProtoField.new("fields_updated (uint16_t)", "mavlink_proto.HIGHRES_IMU_fields_updated", ftypes.UINT16, nil)
f.HIGHRES_IMU_id = ProtoField.new("id (uint8_t)", "mavlink_proto.HIGHRES_IMU_id", ftypes.UINT8, nil)

f.OPTICAL_FLOW_RAD_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.OPTICAL_FLOW_RAD_time_usec", ftypes.UINT64, nil)
f.OPTICAL_FLOW_RAD_sensor_id = ProtoField.new("sensor_id (uint8_t)", "mavlink_proto.OPTICAL_FLOW_RAD_sensor_id", ftypes.UINT8, nil)
f.OPTICAL_FLOW_RAD_integration_time_us = ProtoField.new("integration_time_us (uint32_t)", "mavlink_proto.OPTICAL_FLOW_RAD_integration_time_us", ftypes.UINT32, nil)
f.OPTICAL_FLOW_RAD_integrated_x = ProtoField.new("integrated_x (float)", "mavlink_proto.OPTICAL_FLOW_RAD_integrated_x", ftypes.FLOAT, nil)
f.OPTICAL_FLOW_RAD_integrated_y = ProtoField.new("integrated_y (float)", "mavlink_proto.OPTICAL_FLOW_RAD_integrated_y", ftypes.FLOAT, nil)
f.OPTICAL_FLOW_RAD_integrated_xgyro = ProtoField.new("integrated_xgyro (float)", "mavlink_proto.OPTICAL_FLOW_RAD_integrated_xgyro", ftypes.FLOAT, nil)
f.OPTICAL_FLOW_RAD_integrated_ygyro = ProtoField.new("integrated_ygyro (float)", "mavlink_proto.OPTICAL_FLOW_RAD_integrated_ygyro", ftypes.FLOAT, nil)
f.OPTICAL_FLOW_RAD_integrated_zgyro = ProtoField.new("integrated_zgyro (float)", "mavlink_proto.OPTICAL_FLOW_RAD_integrated_zgyro", ftypes.FLOAT, nil)
f.OPTICAL_FLOW_RAD_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.OPTICAL_FLOW_RAD_temperature", ftypes.INT16, nil)
f.OPTICAL_FLOW_RAD_quality = ProtoField.new("quality (uint8_t)", "mavlink_proto.OPTICAL_FLOW_RAD_quality", ftypes.UINT8, nil)
f.OPTICAL_FLOW_RAD_time_delta_distance_us = ProtoField.new("time_delta_distance_us (uint32_t)", "mavlink_proto.OPTICAL_FLOW_RAD_time_delta_distance_us", ftypes.UINT32, nil)
f.OPTICAL_FLOW_RAD_distance = ProtoField.new("distance (float)", "mavlink_proto.OPTICAL_FLOW_RAD_distance", ftypes.FLOAT, nil)

f.HIL_SENSOR_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.HIL_SENSOR_time_usec", ftypes.UINT64, nil)
f.HIL_SENSOR_xacc = ProtoField.new("xacc (float)", "mavlink_proto.HIL_SENSOR_xacc", ftypes.FLOAT, nil)
f.HIL_SENSOR_yacc = ProtoField.new("yacc (float)", "mavlink_proto.HIL_SENSOR_yacc", ftypes.FLOAT, nil)
f.HIL_SENSOR_zacc = ProtoField.new("zacc (float)", "mavlink_proto.HIL_SENSOR_zacc", ftypes.FLOAT, nil)
f.HIL_SENSOR_xgyro = ProtoField.new("xgyro (float)", "mavlink_proto.HIL_SENSOR_xgyro", ftypes.FLOAT, nil)
f.HIL_SENSOR_ygyro = ProtoField.new("ygyro (float)", "mavlink_proto.HIL_SENSOR_ygyro", ftypes.FLOAT, nil)
f.HIL_SENSOR_zgyro = ProtoField.new("zgyro (float)", "mavlink_proto.HIL_SENSOR_zgyro", ftypes.FLOAT, nil)
f.HIL_SENSOR_xmag = ProtoField.new("xmag (float)", "mavlink_proto.HIL_SENSOR_xmag", ftypes.FLOAT, nil)
f.HIL_SENSOR_ymag = ProtoField.new("ymag (float)", "mavlink_proto.HIL_SENSOR_ymag", ftypes.FLOAT, nil)
f.HIL_SENSOR_zmag = ProtoField.new("zmag (float)", "mavlink_proto.HIL_SENSOR_zmag", ftypes.FLOAT, nil)
f.HIL_SENSOR_abs_pressure = ProtoField.new("abs_pressure (float)", "mavlink_proto.HIL_SENSOR_abs_pressure", ftypes.FLOAT, nil)
f.HIL_SENSOR_diff_pressure = ProtoField.new("diff_pressure (float)", "mavlink_proto.HIL_SENSOR_diff_pressure", ftypes.FLOAT, nil)
f.HIL_SENSOR_pressure_alt = ProtoField.new("pressure_alt (float)", "mavlink_proto.HIL_SENSOR_pressure_alt", ftypes.FLOAT, nil)
f.HIL_SENSOR_temperature = ProtoField.new("temperature (float)", "mavlink_proto.HIL_SENSOR_temperature", ftypes.FLOAT, nil)
f.HIL_SENSOR_fields_updated = ProtoField.new("fields_updated (uint32_t)", "mavlink_proto.HIL_SENSOR_fields_updated", ftypes.UINT32, nil)
f.HIL_SENSOR_id = ProtoField.new("id (uint8_t)", "mavlink_proto.HIL_SENSOR_id", ftypes.UINT8, nil)

f.SIM_STATE_q1 = ProtoField.new("q1 (float)", "mavlink_proto.SIM_STATE_q1", ftypes.FLOAT, nil)
f.SIM_STATE_q2 = ProtoField.new("q2 (float)", "mavlink_proto.SIM_STATE_q2", ftypes.FLOAT, nil)
f.SIM_STATE_q3 = ProtoField.new("q3 (float)", "mavlink_proto.SIM_STATE_q3", ftypes.FLOAT, nil)
f.SIM_STATE_q4 = ProtoField.new("q4 (float)", "mavlink_proto.SIM_STATE_q4", ftypes.FLOAT, nil)
f.SIM_STATE_roll = ProtoField.new("roll (float)", "mavlink_proto.SIM_STATE_roll", ftypes.FLOAT, nil)
f.SIM_STATE_pitch = ProtoField.new("pitch (float)", "mavlink_proto.SIM_STATE_pitch", ftypes.FLOAT, nil)
f.SIM_STATE_yaw = ProtoField.new("yaw (float)", "mavlink_proto.SIM_STATE_yaw", ftypes.FLOAT, nil)
f.SIM_STATE_xacc = ProtoField.new("xacc (float)", "mavlink_proto.SIM_STATE_xacc", ftypes.FLOAT, nil)
f.SIM_STATE_yacc = ProtoField.new("yacc (float)", "mavlink_proto.SIM_STATE_yacc", ftypes.FLOAT, nil)
f.SIM_STATE_zacc = ProtoField.new("zacc (float)", "mavlink_proto.SIM_STATE_zacc", ftypes.FLOAT, nil)
f.SIM_STATE_xgyro = ProtoField.new("xgyro (float)", "mavlink_proto.SIM_STATE_xgyro", ftypes.FLOAT, nil)
f.SIM_STATE_ygyro = ProtoField.new("ygyro (float)", "mavlink_proto.SIM_STATE_ygyro", ftypes.FLOAT, nil)
f.SIM_STATE_zgyro = ProtoField.new("zgyro (float)", "mavlink_proto.SIM_STATE_zgyro", ftypes.FLOAT, nil)
f.SIM_STATE_lat = ProtoField.new("lat (float)", "mavlink_proto.SIM_STATE_lat", ftypes.FLOAT, nil)
f.SIM_STATE_lon = ProtoField.new("lon (float)", "mavlink_proto.SIM_STATE_lon", ftypes.FLOAT, nil)
f.SIM_STATE_alt = ProtoField.new("alt (float)", "mavlink_proto.SIM_STATE_alt", ftypes.FLOAT, nil)
f.SIM_STATE_std_dev_horz = ProtoField.new("std_dev_horz (float)", "mavlink_proto.SIM_STATE_std_dev_horz", ftypes.FLOAT, nil)
f.SIM_STATE_std_dev_vert = ProtoField.new("std_dev_vert (float)", "mavlink_proto.SIM_STATE_std_dev_vert", ftypes.FLOAT, nil)
f.SIM_STATE_vn = ProtoField.new("vn (float)", "mavlink_proto.SIM_STATE_vn", ftypes.FLOAT, nil)
f.SIM_STATE_ve = ProtoField.new("ve (float)", "mavlink_proto.SIM_STATE_ve", ftypes.FLOAT, nil)
f.SIM_STATE_vd = ProtoField.new("vd (float)", "mavlink_proto.SIM_STATE_vd", ftypes.FLOAT, nil)

f.RADIO_STATUS_rssi = ProtoField.new("rssi (uint8_t)", "mavlink_proto.RADIO_STATUS_rssi", ftypes.UINT8, nil)
f.RADIO_STATUS_remrssi = ProtoField.new("remrssi (uint8_t)", "mavlink_proto.RADIO_STATUS_remrssi", ftypes.UINT8, nil)
f.RADIO_STATUS_txbuf = ProtoField.new("txbuf (uint8_t)", "mavlink_proto.RADIO_STATUS_txbuf", ftypes.UINT8, nil)
f.RADIO_STATUS_noise = ProtoField.new("noise (uint8_t)", "mavlink_proto.RADIO_STATUS_noise", ftypes.UINT8, nil)
f.RADIO_STATUS_remnoise = ProtoField.new("remnoise (uint8_t)", "mavlink_proto.RADIO_STATUS_remnoise", ftypes.UINT8, nil)
f.RADIO_STATUS_rxerrors = ProtoField.new("rxerrors (uint16_t)", "mavlink_proto.RADIO_STATUS_rxerrors", ftypes.UINT16, nil)
f.RADIO_STATUS_fixed = ProtoField.new("fixed (uint16_t)", "mavlink_proto.RADIO_STATUS_fixed", ftypes.UINT16, nil)

f.FILE_TRANSFER_PROTOCOL_target_network = ProtoField.new("target_network (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_target_network", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_target_system", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_target_component", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_0 = ProtoField.new("payload[0] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_0", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_1 = ProtoField.new("payload[1] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_1", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_2 = ProtoField.new("payload[2] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_2", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_3 = ProtoField.new("payload[3] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_3", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_4 = ProtoField.new("payload[4] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_4", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_5 = ProtoField.new("payload[5] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_5", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_6 = ProtoField.new("payload[6] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_6", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_7 = ProtoField.new("payload[7] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_7", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_8 = ProtoField.new("payload[8] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_8", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_9 = ProtoField.new("payload[9] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_9", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_10 = ProtoField.new("payload[10] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_10", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_11 = ProtoField.new("payload[11] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_11", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_12 = ProtoField.new("payload[12] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_12", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_13 = ProtoField.new("payload[13] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_13", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_14 = ProtoField.new("payload[14] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_14", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_15 = ProtoField.new("payload[15] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_15", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_16 = ProtoField.new("payload[16] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_16", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_17 = ProtoField.new("payload[17] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_17", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_18 = ProtoField.new("payload[18] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_18", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_19 = ProtoField.new("payload[19] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_19", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_20 = ProtoField.new("payload[20] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_20", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_21 = ProtoField.new("payload[21] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_21", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_22 = ProtoField.new("payload[22] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_22", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_23 = ProtoField.new("payload[23] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_23", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_24 = ProtoField.new("payload[24] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_24", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_25 = ProtoField.new("payload[25] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_25", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_26 = ProtoField.new("payload[26] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_26", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_27 = ProtoField.new("payload[27] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_27", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_28 = ProtoField.new("payload[28] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_28", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_29 = ProtoField.new("payload[29] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_29", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_30 = ProtoField.new("payload[30] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_30", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_31 = ProtoField.new("payload[31] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_31", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_32 = ProtoField.new("payload[32] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_32", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_33 = ProtoField.new("payload[33] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_33", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_34 = ProtoField.new("payload[34] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_34", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_35 = ProtoField.new("payload[35] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_35", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_36 = ProtoField.new("payload[36] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_36", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_37 = ProtoField.new("payload[37] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_37", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_38 = ProtoField.new("payload[38] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_38", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_39 = ProtoField.new("payload[39] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_39", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_40 = ProtoField.new("payload[40] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_40", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_41 = ProtoField.new("payload[41] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_41", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_42 = ProtoField.new("payload[42] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_42", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_43 = ProtoField.new("payload[43] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_43", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_44 = ProtoField.new("payload[44] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_44", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_45 = ProtoField.new("payload[45] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_45", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_46 = ProtoField.new("payload[46] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_46", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_47 = ProtoField.new("payload[47] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_47", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_48 = ProtoField.new("payload[48] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_48", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_49 = ProtoField.new("payload[49] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_49", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_50 = ProtoField.new("payload[50] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_50", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_51 = ProtoField.new("payload[51] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_51", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_52 = ProtoField.new("payload[52] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_52", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_53 = ProtoField.new("payload[53] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_53", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_54 = ProtoField.new("payload[54] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_54", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_55 = ProtoField.new("payload[55] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_55", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_56 = ProtoField.new("payload[56] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_56", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_57 = ProtoField.new("payload[57] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_57", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_58 = ProtoField.new("payload[58] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_58", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_59 = ProtoField.new("payload[59] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_59", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_60 = ProtoField.new("payload[60] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_60", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_61 = ProtoField.new("payload[61] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_61", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_62 = ProtoField.new("payload[62] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_62", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_63 = ProtoField.new("payload[63] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_63", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_64 = ProtoField.new("payload[64] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_64", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_65 = ProtoField.new("payload[65] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_65", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_66 = ProtoField.new("payload[66] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_66", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_67 = ProtoField.new("payload[67] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_67", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_68 = ProtoField.new("payload[68] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_68", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_69 = ProtoField.new("payload[69] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_69", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_70 = ProtoField.new("payload[70] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_70", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_71 = ProtoField.new("payload[71] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_71", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_72 = ProtoField.new("payload[72] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_72", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_73 = ProtoField.new("payload[73] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_73", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_74 = ProtoField.new("payload[74] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_74", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_75 = ProtoField.new("payload[75] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_75", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_76 = ProtoField.new("payload[76] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_76", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_77 = ProtoField.new("payload[77] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_77", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_78 = ProtoField.new("payload[78] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_78", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_79 = ProtoField.new("payload[79] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_79", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_80 = ProtoField.new("payload[80] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_80", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_81 = ProtoField.new("payload[81] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_81", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_82 = ProtoField.new("payload[82] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_82", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_83 = ProtoField.new("payload[83] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_83", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_84 = ProtoField.new("payload[84] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_84", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_85 = ProtoField.new("payload[85] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_85", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_86 = ProtoField.new("payload[86] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_86", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_87 = ProtoField.new("payload[87] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_87", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_88 = ProtoField.new("payload[88] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_88", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_89 = ProtoField.new("payload[89] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_89", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_90 = ProtoField.new("payload[90] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_90", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_91 = ProtoField.new("payload[91] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_91", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_92 = ProtoField.new("payload[92] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_92", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_93 = ProtoField.new("payload[93] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_93", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_94 = ProtoField.new("payload[94] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_94", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_95 = ProtoField.new("payload[95] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_95", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_96 = ProtoField.new("payload[96] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_96", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_97 = ProtoField.new("payload[97] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_97", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_98 = ProtoField.new("payload[98] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_98", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_99 = ProtoField.new("payload[99] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_99", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_100 = ProtoField.new("payload[100] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_100", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_101 = ProtoField.new("payload[101] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_101", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_102 = ProtoField.new("payload[102] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_102", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_103 = ProtoField.new("payload[103] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_103", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_104 = ProtoField.new("payload[104] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_104", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_105 = ProtoField.new("payload[105] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_105", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_106 = ProtoField.new("payload[106] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_106", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_107 = ProtoField.new("payload[107] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_107", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_108 = ProtoField.new("payload[108] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_108", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_109 = ProtoField.new("payload[109] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_109", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_110 = ProtoField.new("payload[110] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_110", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_111 = ProtoField.new("payload[111] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_111", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_112 = ProtoField.new("payload[112] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_112", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_113 = ProtoField.new("payload[113] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_113", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_114 = ProtoField.new("payload[114] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_114", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_115 = ProtoField.new("payload[115] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_115", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_116 = ProtoField.new("payload[116] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_116", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_117 = ProtoField.new("payload[117] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_117", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_118 = ProtoField.new("payload[118] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_118", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_119 = ProtoField.new("payload[119] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_119", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_120 = ProtoField.new("payload[120] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_120", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_121 = ProtoField.new("payload[121] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_121", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_122 = ProtoField.new("payload[122] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_122", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_123 = ProtoField.new("payload[123] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_123", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_124 = ProtoField.new("payload[124] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_124", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_125 = ProtoField.new("payload[125] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_125", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_126 = ProtoField.new("payload[126] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_126", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_127 = ProtoField.new("payload[127] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_127", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_128 = ProtoField.new("payload[128] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_128", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_129 = ProtoField.new("payload[129] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_129", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_130 = ProtoField.new("payload[130] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_130", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_131 = ProtoField.new("payload[131] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_131", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_132 = ProtoField.new("payload[132] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_132", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_133 = ProtoField.new("payload[133] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_133", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_134 = ProtoField.new("payload[134] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_134", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_135 = ProtoField.new("payload[135] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_135", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_136 = ProtoField.new("payload[136] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_136", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_137 = ProtoField.new("payload[137] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_137", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_138 = ProtoField.new("payload[138] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_138", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_139 = ProtoField.new("payload[139] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_139", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_140 = ProtoField.new("payload[140] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_140", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_141 = ProtoField.new("payload[141] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_141", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_142 = ProtoField.new("payload[142] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_142", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_143 = ProtoField.new("payload[143] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_143", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_144 = ProtoField.new("payload[144] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_144", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_145 = ProtoField.new("payload[145] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_145", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_146 = ProtoField.new("payload[146] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_146", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_147 = ProtoField.new("payload[147] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_147", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_148 = ProtoField.new("payload[148] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_148", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_149 = ProtoField.new("payload[149] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_149", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_150 = ProtoField.new("payload[150] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_150", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_151 = ProtoField.new("payload[151] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_151", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_152 = ProtoField.new("payload[152] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_152", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_153 = ProtoField.new("payload[153] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_153", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_154 = ProtoField.new("payload[154] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_154", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_155 = ProtoField.new("payload[155] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_155", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_156 = ProtoField.new("payload[156] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_156", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_157 = ProtoField.new("payload[157] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_157", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_158 = ProtoField.new("payload[158] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_158", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_159 = ProtoField.new("payload[159] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_159", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_160 = ProtoField.new("payload[160] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_160", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_161 = ProtoField.new("payload[161] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_161", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_162 = ProtoField.new("payload[162] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_162", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_163 = ProtoField.new("payload[163] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_163", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_164 = ProtoField.new("payload[164] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_164", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_165 = ProtoField.new("payload[165] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_165", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_166 = ProtoField.new("payload[166] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_166", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_167 = ProtoField.new("payload[167] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_167", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_168 = ProtoField.new("payload[168] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_168", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_169 = ProtoField.new("payload[169] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_169", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_170 = ProtoField.new("payload[170] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_170", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_171 = ProtoField.new("payload[171] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_171", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_172 = ProtoField.new("payload[172] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_172", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_173 = ProtoField.new("payload[173] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_173", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_174 = ProtoField.new("payload[174] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_174", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_175 = ProtoField.new("payload[175] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_175", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_176 = ProtoField.new("payload[176] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_176", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_177 = ProtoField.new("payload[177] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_177", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_178 = ProtoField.new("payload[178] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_178", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_179 = ProtoField.new("payload[179] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_179", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_180 = ProtoField.new("payload[180] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_180", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_181 = ProtoField.new("payload[181] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_181", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_182 = ProtoField.new("payload[182] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_182", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_183 = ProtoField.new("payload[183] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_183", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_184 = ProtoField.new("payload[184] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_184", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_185 = ProtoField.new("payload[185] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_185", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_186 = ProtoField.new("payload[186] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_186", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_187 = ProtoField.new("payload[187] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_187", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_188 = ProtoField.new("payload[188] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_188", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_189 = ProtoField.new("payload[189] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_189", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_190 = ProtoField.new("payload[190] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_190", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_191 = ProtoField.new("payload[191] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_191", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_192 = ProtoField.new("payload[192] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_192", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_193 = ProtoField.new("payload[193] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_193", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_194 = ProtoField.new("payload[194] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_194", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_195 = ProtoField.new("payload[195] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_195", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_196 = ProtoField.new("payload[196] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_196", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_197 = ProtoField.new("payload[197] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_197", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_198 = ProtoField.new("payload[198] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_198", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_199 = ProtoField.new("payload[199] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_199", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_200 = ProtoField.new("payload[200] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_200", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_201 = ProtoField.new("payload[201] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_201", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_202 = ProtoField.new("payload[202] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_202", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_203 = ProtoField.new("payload[203] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_203", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_204 = ProtoField.new("payload[204] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_204", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_205 = ProtoField.new("payload[205] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_205", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_206 = ProtoField.new("payload[206] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_206", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_207 = ProtoField.new("payload[207] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_207", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_208 = ProtoField.new("payload[208] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_208", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_209 = ProtoField.new("payload[209] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_209", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_210 = ProtoField.new("payload[210] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_210", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_211 = ProtoField.new("payload[211] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_211", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_212 = ProtoField.new("payload[212] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_212", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_213 = ProtoField.new("payload[213] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_213", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_214 = ProtoField.new("payload[214] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_214", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_215 = ProtoField.new("payload[215] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_215", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_216 = ProtoField.new("payload[216] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_216", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_217 = ProtoField.new("payload[217] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_217", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_218 = ProtoField.new("payload[218] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_218", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_219 = ProtoField.new("payload[219] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_219", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_220 = ProtoField.new("payload[220] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_220", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_221 = ProtoField.new("payload[221] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_221", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_222 = ProtoField.new("payload[222] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_222", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_223 = ProtoField.new("payload[223] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_223", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_224 = ProtoField.new("payload[224] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_224", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_225 = ProtoField.new("payload[225] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_225", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_226 = ProtoField.new("payload[226] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_226", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_227 = ProtoField.new("payload[227] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_227", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_228 = ProtoField.new("payload[228] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_228", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_229 = ProtoField.new("payload[229] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_229", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_230 = ProtoField.new("payload[230] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_230", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_231 = ProtoField.new("payload[231] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_231", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_232 = ProtoField.new("payload[232] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_232", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_233 = ProtoField.new("payload[233] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_233", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_234 = ProtoField.new("payload[234] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_234", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_235 = ProtoField.new("payload[235] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_235", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_236 = ProtoField.new("payload[236] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_236", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_237 = ProtoField.new("payload[237] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_237", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_238 = ProtoField.new("payload[238] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_238", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_239 = ProtoField.new("payload[239] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_239", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_240 = ProtoField.new("payload[240] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_240", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_241 = ProtoField.new("payload[241] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_241", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_242 = ProtoField.new("payload[242] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_242", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_243 = ProtoField.new("payload[243] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_243", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_244 = ProtoField.new("payload[244] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_244", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_245 = ProtoField.new("payload[245] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_245", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_246 = ProtoField.new("payload[246] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_246", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_247 = ProtoField.new("payload[247] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_247", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_248 = ProtoField.new("payload[248] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_248", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_249 = ProtoField.new("payload[249] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_249", ftypes.UINT8, nil)
f.FILE_TRANSFER_PROTOCOL_payload_250 = ProtoField.new("payload[250] (uint8_t)", "mavlink_proto.FILE_TRANSFER_PROTOCOL_payload_250", ftypes.UINT8, nil)

f.TIMESYNC_tc1 = ProtoField.new("tc1 (int64_t)", "mavlink_proto.TIMESYNC_tc1", ftypes.INT64, nil)
f.TIMESYNC_ts1 = ProtoField.new("ts1 (int64_t)", "mavlink_proto.TIMESYNC_ts1", ftypes.INT64, nil)

f.CAMERA_TRIGGER_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.CAMERA_TRIGGER_time_usec", ftypes.UINT64, nil)
f.CAMERA_TRIGGER_seq = ProtoField.new("seq (uint32_t)", "mavlink_proto.CAMERA_TRIGGER_seq", ftypes.UINT32, nil)

f.HIL_GPS_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.HIL_GPS_time_usec", ftypes.UINT64, nil)
f.HIL_GPS_fix_type = ProtoField.new("fix_type (uint8_t)", "mavlink_proto.HIL_GPS_fix_type", ftypes.UINT8, nil)
f.HIL_GPS_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.HIL_GPS_lat", ftypes.INT32, nil)
f.HIL_GPS_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.HIL_GPS_lon", ftypes.INT32, nil)
f.HIL_GPS_alt = ProtoField.new("alt (int32_t)", "mavlink_proto.HIL_GPS_alt", ftypes.INT32, nil)
f.HIL_GPS_eph = ProtoField.new("eph (uint16_t)", "mavlink_proto.HIL_GPS_eph", ftypes.UINT16, nil)
f.HIL_GPS_epv = ProtoField.new("epv (uint16_t)", "mavlink_proto.HIL_GPS_epv", ftypes.UINT16, nil)
f.HIL_GPS_vel = ProtoField.new("vel (uint16_t)", "mavlink_proto.HIL_GPS_vel", ftypes.UINT16, nil)
f.HIL_GPS_vn = ProtoField.new("vn (int16_t)", "mavlink_proto.HIL_GPS_vn", ftypes.INT16, nil)
f.HIL_GPS_ve = ProtoField.new("ve (int16_t)", "mavlink_proto.HIL_GPS_ve", ftypes.INT16, nil)
f.HIL_GPS_vd = ProtoField.new("vd (int16_t)", "mavlink_proto.HIL_GPS_vd", ftypes.INT16, nil)
f.HIL_GPS_cog = ProtoField.new("cog (uint16_t)", "mavlink_proto.HIL_GPS_cog", ftypes.UINT16, nil)
f.HIL_GPS_satellites_visible = ProtoField.new("satellites_visible (uint8_t)", "mavlink_proto.HIL_GPS_satellites_visible", ftypes.UINT8, nil)
f.HIL_GPS_id = ProtoField.new("id (uint8_t)", "mavlink_proto.HIL_GPS_id", ftypes.UINT8, nil)
f.HIL_GPS_yaw = ProtoField.new("yaw (uint16_t)", "mavlink_proto.HIL_GPS_yaw", ftypes.UINT16, nil)

f.HIL_OPTICAL_FLOW_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.HIL_OPTICAL_FLOW_time_usec", ftypes.UINT64, nil)
f.HIL_OPTICAL_FLOW_sensor_id = ProtoField.new("sensor_id (uint8_t)", "mavlink_proto.HIL_OPTICAL_FLOW_sensor_id", ftypes.UINT8, nil)
f.HIL_OPTICAL_FLOW_integration_time_us = ProtoField.new("integration_time_us (uint32_t)", "mavlink_proto.HIL_OPTICAL_FLOW_integration_time_us", ftypes.UINT32, nil)
f.HIL_OPTICAL_FLOW_integrated_x = ProtoField.new("integrated_x (float)", "mavlink_proto.HIL_OPTICAL_FLOW_integrated_x", ftypes.FLOAT, nil)
f.HIL_OPTICAL_FLOW_integrated_y = ProtoField.new("integrated_y (float)", "mavlink_proto.HIL_OPTICAL_FLOW_integrated_y", ftypes.FLOAT, nil)
f.HIL_OPTICAL_FLOW_integrated_xgyro = ProtoField.new("integrated_xgyro (float)", "mavlink_proto.HIL_OPTICAL_FLOW_integrated_xgyro", ftypes.FLOAT, nil)
f.HIL_OPTICAL_FLOW_integrated_ygyro = ProtoField.new("integrated_ygyro (float)", "mavlink_proto.HIL_OPTICAL_FLOW_integrated_ygyro", ftypes.FLOAT, nil)
f.HIL_OPTICAL_FLOW_integrated_zgyro = ProtoField.new("integrated_zgyro (float)", "mavlink_proto.HIL_OPTICAL_FLOW_integrated_zgyro", ftypes.FLOAT, nil)
f.HIL_OPTICAL_FLOW_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.HIL_OPTICAL_FLOW_temperature", ftypes.INT16, nil)
f.HIL_OPTICAL_FLOW_quality = ProtoField.new("quality (uint8_t)", "mavlink_proto.HIL_OPTICAL_FLOW_quality", ftypes.UINT8, nil)
f.HIL_OPTICAL_FLOW_time_delta_distance_us = ProtoField.new("time_delta_distance_us (uint32_t)", "mavlink_proto.HIL_OPTICAL_FLOW_time_delta_distance_us", ftypes.UINT32, nil)
f.HIL_OPTICAL_FLOW_distance = ProtoField.new("distance (float)", "mavlink_proto.HIL_OPTICAL_FLOW_distance", ftypes.FLOAT, nil)

f.HIL_STATE_QUATERNION_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.HIL_STATE_QUATERNION_time_usec", ftypes.UINT64, nil)
f.HIL_STATE_QUATERNION_attitude_quaternion_0 = ProtoField.new("attitude_quaternion[0] (float)", "mavlink_proto.HIL_STATE_QUATERNION_attitude_quaternion_0", ftypes.FLOAT, nil)
f.HIL_STATE_QUATERNION_attitude_quaternion_1 = ProtoField.new("attitude_quaternion[1] (float)", "mavlink_proto.HIL_STATE_QUATERNION_attitude_quaternion_1", ftypes.FLOAT, nil)
f.HIL_STATE_QUATERNION_attitude_quaternion_2 = ProtoField.new("attitude_quaternion[2] (float)", "mavlink_proto.HIL_STATE_QUATERNION_attitude_quaternion_2", ftypes.FLOAT, nil)
f.HIL_STATE_QUATERNION_attitude_quaternion_3 = ProtoField.new("attitude_quaternion[3] (float)", "mavlink_proto.HIL_STATE_QUATERNION_attitude_quaternion_3", ftypes.FLOAT, nil)
f.HIL_STATE_QUATERNION_rollspeed = ProtoField.new("rollspeed (float)", "mavlink_proto.HIL_STATE_QUATERNION_rollspeed", ftypes.FLOAT, nil)
f.HIL_STATE_QUATERNION_pitchspeed = ProtoField.new("pitchspeed (float)", "mavlink_proto.HIL_STATE_QUATERNION_pitchspeed", ftypes.FLOAT, nil)
f.HIL_STATE_QUATERNION_yawspeed = ProtoField.new("yawspeed (float)", "mavlink_proto.HIL_STATE_QUATERNION_yawspeed", ftypes.FLOAT, nil)
f.HIL_STATE_QUATERNION_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.HIL_STATE_QUATERNION_lat", ftypes.INT32, nil)
f.HIL_STATE_QUATERNION_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.HIL_STATE_QUATERNION_lon", ftypes.INT32, nil)
f.HIL_STATE_QUATERNION_alt = ProtoField.new("alt (int32_t)", "mavlink_proto.HIL_STATE_QUATERNION_alt", ftypes.INT32, nil)
f.HIL_STATE_QUATERNION_vx = ProtoField.new("vx (int16_t)", "mavlink_proto.HIL_STATE_QUATERNION_vx", ftypes.INT16, nil)
f.HIL_STATE_QUATERNION_vy = ProtoField.new("vy (int16_t)", "mavlink_proto.HIL_STATE_QUATERNION_vy", ftypes.INT16, nil)
f.HIL_STATE_QUATERNION_vz = ProtoField.new("vz (int16_t)", "mavlink_proto.HIL_STATE_QUATERNION_vz", ftypes.INT16, nil)
f.HIL_STATE_QUATERNION_ind_airspeed = ProtoField.new("ind_airspeed (uint16_t)", "mavlink_proto.HIL_STATE_QUATERNION_ind_airspeed", ftypes.UINT16, nil)
f.HIL_STATE_QUATERNION_true_airspeed = ProtoField.new("true_airspeed (uint16_t)", "mavlink_proto.HIL_STATE_QUATERNION_true_airspeed", ftypes.UINT16, nil)
f.HIL_STATE_QUATERNION_xacc = ProtoField.new("xacc (int16_t)", "mavlink_proto.HIL_STATE_QUATERNION_xacc", ftypes.INT16, nil)
f.HIL_STATE_QUATERNION_yacc = ProtoField.new("yacc (int16_t)", "mavlink_proto.HIL_STATE_QUATERNION_yacc", ftypes.INT16, nil)
f.HIL_STATE_QUATERNION_zacc = ProtoField.new("zacc (int16_t)", "mavlink_proto.HIL_STATE_QUATERNION_zacc", ftypes.INT16, nil)

f.SCALED_IMU2_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.SCALED_IMU2_time_boot_ms", ftypes.UINT32, nil)
f.SCALED_IMU2_xacc = ProtoField.new("xacc (int16_t)", "mavlink_proto.SCALED_IMU2_xacc", ftypes.INT16, nil)
f.SCALED_IMU2_yacc = ProtoField.new("yacc (int16_t)", "mavlink_proto.SCALED_IMU2_yacc", ftypes.INT16, nil)
f.SCALED_IMU2_zacc = ProtoField.new("zacc (int16_t)", "mavlink_proto.SCALED_IMU2_zacc", ftypes.INT16, nil)
f.SCALED_IMU2_xgyro = ProtoField.new("xgyro (int16_t)", "mavlink_proto.SCALED_IMU2_xgyro", ftypes.INT16, nil)
f.SCALED_IMU2_ygyro = ProtoField.new("ygyro (int16_t)", "mavlink_proto.SCALED_IMU2_ygyro", ftypes.INT16, nil)
f.SCALED_IMU2_zgyro = ProtoField.new("zgyro (int16_t)", "mavlink_proto.SCALED_IMU2_zgyro", ftypes.INT16, nil)
f.SCALED_IMU2_xmag = ProtoField.new("xmag (int16_t)", "mavlink_proto.SCALED_IMU2_xmag", ftypes.INT16, nil)
f.SCALED_IMU2_ymag = ProtoField.new("ymag (int16_t)", "mavlink_proto.SCALED_IMU2_ymag", ftypes.INT16, nil)
f.SCALED_IMU2_zmag = ProtoField.new("zmag (int16_t)", "mavlink_proto.SCALED_IMU2_zmag", ftypes.INT16, nil)
f.SCALED_IMU2_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.SCALED_IMU2_temperature", ftypes.INT16, nil)

f.LOG_REQUEST_LIST_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.LOG_REQUEST_LIST_target_system", ftypes.UINT8, nil)
f.LOG_REQUEST_LIST_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.LOG_REQUEST_LIST_target_component", ftypes.UINT8, nil)
f.LOG_REQUEST_LIST_start = ProtoField.new("start (uint16_t)", "mavlink_proto.LOG_REQUEST_LIST_start", ftypes.UINT16, nil)
f.LOG_REQUEST_LIST_end = ProtoField.new("end (uint16_t)", "mavlink_proto.LOG_REQUEST_LIST_end", ftypes.UINT16, nil)

f.LOG_ENTRY_id = ProtoField.new("id (uint16_t)", "mavlink_proto.LOG_ENTRY_id", ftypes.UINT16, nil)
f.LOG_ENTRY_num_logs = ProtoField.new("num_logs (uint16_t)", "mavlink_proto.LOG_ENTRY_num_logs", ftypes.UINT16, nil)
f.LOG_ENTRY_last_log_num = ProtoField.new("last_log_num (uint16_t)", "mavlink_proto.LOG_ENTRY_last_log_num", ftypes.UINT16, nil)
f.LOG_ENTRY_time_utc = ProtoField.new("time_utc (uint32_t)", "mavlink_proto.LOG_ENTRY_time_utc", ftypes.UINT32, nil)
f.LOG_ENTRY_size = ProtoField.new("size (uint32_t)", "mavlink_proto.LOG_ENTRY_size", ftypes.UINT32, nil)

f.LOG_REQUEST_DATA_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.LOG_REQUEST_DATA_target_system", ftypes.UINT8, nil)
f.LOG_REQUEST_DATA_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.LOG_REQUEST_DATA_target_component", ftypes.UINT8, nil)
f.LOG_REQUEST_DATA_id = ProtoField.new("id (uint16_t)", "mavlink_proto.LOG_REQUEST_DATA_id", ftypes.UINT16, nil)
f.LOG_REQUEST_DATA_ofs = ProtoField.new("ofs (uint32_t)", "mavlink_proto.LOG_REQUEST_DATA_ofs", ftypes.UINT32, nil)
f.LOG_REQUEST_DATA_count = ProtoField.new("count (uint32_t)", "mavlink_proto.LOG_REQUEST_DATA_count", ftypes.UINT32, nil)

f.LOG_DATA_id = ProtoField.new("id (uint16_t)", "mavlink_proto.LOG_DATA_id", ftypes.UINT16, nil)
f.LOG_DATA_ofs = ProtoField.new("ofs (uint32_t)", "mavlink_proto.LOG_DATA_ofs", ftypes.UINT32, nil)
f.LOG_DATA_count = ProtoField.new("count (uint8_t)", "mavlink_proto.LOG_DATA_count", ftypes.UINT8, nil)
f.LOG_DATA_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.LOG_DATA_data_0", ftypes.UINT8, nil)
f.LOG_DATA_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.LOG_DATA_data_1", ftypes.UINT8, nil)
f.LOG_DATA_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.LOG_DATA_data_2", ftypes.UINT8, nil)
f.LOG_DATA_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.LOG_DATA_data_3", ftypes.UINT8, nil)
f.LOG_DATA_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.LOG_DATA_data_4", ftypes.UINT8, nil)
f.LOG_DATA_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.LOG_DATA_data_5", ftypes.UINT8, nil)
f.LOG_DATA_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.LOG_DATA_data_6", ftypes.UINT8, nil)
f.LOG_DATA_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.LOG_DATA_data_7", ftypes.UINT8, nil)
f.LOG_DATA_data_8 = ProtoField.new("data[8] (uint8_t)", "mavlink_proto.LOG_DATA_data_8", ftypes.UINT8, nil)
f.LOG_DATA_data_9 = ProtoField.new("data[9] (uint8_t)", "mavlink_proto.LOG_DATA_data_9", ftypes.UINT8, nil)
f.LOG_DATA_data_10 = ProtoField.new("data[10] (uint8_t)", "mavlink_proto.LOG_DATA_data_10", ftypes.UINT8, nil)
f.LOG_DATA_data_11 = ProtoField.new("data[11] (uint8_t)", "mavlink_proto.LOG_DATA_data_11", ftypes.UINT8, nil)
f.LOG_DATA_data_12 = ProtoField.new("data[12] (uint8_t)", "mavlink_proto.LOG_DATA_data_12", ftypes.UINT8, nil)
f.LOG_DATA_data_13 = ProtoField.new("data[13] (uint8_t)", "mavlink_proto.LOG_DATA_data_13", ftypes.UINT8, nil)
f.LOG_DATA_data_14 = ProtoField.new("data[14] (uint8_t)", "mavlink_proto.LOG_DATA_data_14", ftypes.UINT8, nil)
f.LOG_DATA_data_15 = ProtoField.new("data[15] (uint8_t)", "mavlink_proto.LOG_DATA_data_15", ftypes.UINT8, nil)
f.LOG_DATA_data_16 = ProtoField.new("data[16] (uint8_t)", "mavlink_proto.LOG_DATA_data_16", ftypes.UINT8, nil)
f.LOG_DATA_data_17 = ProtoField.new("data[17] (uint8_t)", "mavlink_proto.LOG_DATA_data_17", ftypes.UINT8, nil)
f.LOG_DATA_data_18 = ProtoField.new("data[18] (uint8_t)", "mavlink_proto.LOG_DATA_data_18", ftypes.UINT8, nil)
f.LOG_DATA_data_19 = ProtoField.new("data[19] (uint8_t)", "mavlink_proto.LOG_DATA_data_19", ftypes.UINT8, nil)
f.LOG_DATA_data_20 = ProtoField.new("data[20] (uint8_t)", "mavlink_proto.LOG_DATA_data_20", ftypes.UINT8, nil)
f.LOG_DATA_data_21 = ProtoField.new("data[21] (uint8_t)", "mavlink_proto.LOG_DATA_data_21", ftypes.UINT8, nil)
f.LOG_DATA_data_22 = ProtoField.new("data[22] (uint8_t)", "mavlink_proto.LOG_DATA_data_22", ftypes.UINT8, nil)
f.LOG_DATA_data_23 = ProtoField.new("data[23] (uint8_t)", "mavlink_proto.LOG_DATA_data_23", ftypes.UINT8, nil)
f.LOG_DATA_data_24 = ProtoField.new("data[24] (uint8_t)", "mavlink_proto.LOG_DATA_data_24", ftypes.UINT8, nil)
f.LOG_DATA_data_25 = ProtoField.new("data[25] (uint8_t)", "mavlink_proto.LOG_DATA_data_25", ftypes.UINT8, nil)
f.LOG_DATA_data_26 = ProtoField.new("data[26] (uint8_t)", "mavlink_proto.LOG_DATA_data_26", ftypes.UINT8, nil)
f.LOG_DATA_data_27 = ProtoField.new("data[27] (uint8_t)", "mavlink_proto.LOG_DATA_data_27", ftypes.UINT8, nil)
f.LOG_DATA_data_28 = ProtoField.new("data[28] (uint8_t)", "mavlink_proto.LOG_DATA_data_28", ftypes.UINT8, nil)
f.LOG_DATA_data_29 = ProtoField.new("data[29] (uint8_t)", "mavlink_proto.LOG_DATA_data_29", ftypes.UINT8, nil)
f.LOG_DATA_data_30 = ProtoField.new("data[30] (uint8_t)", "mavlink_proto.LOG_DATA_data_30", ftypes.UINT8, nil)
f.LOG_DATA_data_31 = ProtoField.new("data[31] (uint8_t)", "mavlink_proto.LOG_DATA_data_31", ftypes.UINT8, nil)
f.LOG_DATA_data_32 = ProtoField.new("data[32] (uint8_t)", "mavlink_proto.LOG_DATA_data_32", ftypes.UINT8, nil)
f.LOG_DATA_data_33 = ProtoField.new("data[33] (uint8_t)", "mavlink_proto.LOG_DATA_data_33", ftypes.UINT8, nil)
f.LOG_DATA_data_34 = ProtoField.new("data[34] (uint8_t)", "mavlink_proto.LOG_DATA_data_34", ftypes.UINT8, nil)
f.LOG_DATA_data_35 = ProtoField.new("data[35] (uint8_t)", "mavlink_proto.LOG_DATA_data_35", ftypes.UINT8, nil)
f.LOG_DATA_data_36 = ProtoField.new("data[36] (uint8_t)", "mavlink_proto.LOG_DATA_data_36", ftypes.UINT8, nil)
f.LOG_DATA_data_37 = ProtoField.new("data[37] (uint8_t)", "mavlink_proto.LOG_DATA_data_37", ftypes.UINT8, nil)
f.LOG_DATA_data_38 = ProtoField.new("data[38] (uint8_t)", "mavlink_proto.LOG_DATA_data_38", ftypes.UINT8, nil)
f.LOG_DATA_data_39 = ProtoField.new("data[39] (uint8_t)", "mavlink_proto.LOG_DATA_data_39", ftypes.UINT8, nil)
f.LOG_DATA_data_40 = ProtoField.new("data[40] (uint8_t)", "mavlink_proto.LOG_DATA_data_40", ftypes.UINT8, nil)
f.LOG_DATA_data_41 = ProtoField.new("data[41] (uint8_t)", "mavlink_proto.LOG_DATA_data_41", ftypes.UINT8, nil)
f.LOG_DATA_data_42 = ProtoField.new("data[42] (uint8_t)", "mavlink_proto.LOG_DATA_data_42", ftypes.UINT8, nil)
f.LOG_DATA_data_43 = ProtoField.new("data[43] (uint8_t)", "mavlink_proto.LOG_DATA_data_43", ftypes.UINT8, nil)
f.LOG_DATA_data_44 = ProtoField.new("data[44] (uint8_t)", "mavlink_proto.LOG_DATA_data_44", ftypes.UINT8, nil)
f.LOG_DATA_data_45 = ProtoField.new("data[45] (uint8_t)", "mavlink_proto.LOG_DATA_data_45", ftypes.UINT8, nil)
f.LOG_DATA_data_46 = ProtoField.new("data[46] (uint8_t)", "mavlink_proto.LOG_DATA_data_46", ftypes.UINT8, nil)
f.LOG_DATA_data_47 = ProtoField.new("data[47] (uint8_t)", "mavlink_proto.LOG_DATA_data_47", ftypes.UINT8, nil)
f.LOG_DATA_data_48 = ProtoField.new("data[48] (uint8_t)", "mavlink_proto.LOG_DATA_data_48", ftypes.UINT8, nil)
f.LOG_DATA_data_49 = ProtoField.new("data[49] (uint8_t)", "mavlink_proto.LOG_DATA_data_49", ftypes.UINT8, nil)
f.LOG_DATA_data_50 = ProtoField.new("data[50] (uint8_t)", "mavlink_proto.LOG_DATA_data_50", ftypes.UINT8, nil)
f.LOG_DATA_data_51 = ProtoField.new("data[51] (uint8_t)", "mavlink_proto.LOG_DATA_data_51", ftypes.UINT8, nil)
f.LOG_DATA_data_52 = ProtoField.new("data[52] (uint8_t)", "mavlink_proto.LOG_DATA_data_52", ftypes.UINT8, nil)
f.LOG_DATA_data_53 = ProtoField.new("data[53] (uint8_t)", "mavlink_proto.LOG_DATA_data_53", ftypes.UINT8, nil)
f.LOG_DATA_data_54 = ProtoField.new("data[54] (uint8_t)", "mavlink_proto.LOG_DATA_data_54", ftypes.UINT8, nil)
f.LOG_DATA_data_55 = ProtoField.new("data[55] (uint8_t)", "mavlink_proto.LOG_DATA_data_55", ftypes.UINT8, nil)
f.LOG_DATA_data_56 = ProtoField.new("data[56] (uint8_t)", "mavlink_proto.LOG_DATA_data_56", ftypes.UINT8, nil)
f.LOG_DATA_data_57 = ProtoField.new("data[57] (uint8_t)", "mavlink_proto.LOG_DATA_data_57", ftypes.UINT8, nil)
f.LOG_DATA_data_58 = ProtoField.new("data[58] (uint8_t)", "mavlink_proto.LOG_DATA_data_58", ftypes.UINT8, nil)
f.LOG_DATA_data_59 = ProtoField.new("data[59] (uint8_t)", "mavlink_proto.LOG_DATA_data_59", ftypes.UINT8, nil)
f.LOG_DATA_data_60 = ProtoField.new("data[60] (uint8_t)", "mavlink_proto.LOG_DATA_data_60", ftypes.UINT8, nil)
f.LOG_DATA_data_61 = ProtoField.new("data[61] (uint8_t)", "mavlink_proto.LOG_DATA_data_61", ftypes.UINT8, nil)
f.LOG_DATA_data_62 = ProtoField.new("data[62] (uint8_t)", "mavlink_proto.LOG_DATA_data_62", ftypes.UINT8, nil)
f.LOG_DATA_data_63 = ProtoField.new("data[63] (uint8_t)", "mavlink_proto.LOG_DATA_data_63", ftypes.UINT8, nil)
f.LOG_DATA_data_64 = ProtoField.new("data[64] (uint8_t)", "mavlink_proto.LOG_DATA_data_64", ftypes.UINT8, nil)
f.LOG_DATA_data_65 = ProtoField.new("data[65] (uint8_t)", "mavlink_proto.LOG_DATA_data_65", ftypes.UINT8, nil)
f.LOG_DATA_data_66 = ProtoField.new("data[66] (uint8_t)", "mavlink_proto.LOG_DATA_data_66", ftypes.UINT8, nil)
f.LOG_DATA_data_67 = ProtoField.new("data[67] (uint8_t)", "mavlink_proto.LOG_DATA_data_67", ftypes.UINT8, nil)
f.LOG_DATA_data_68 = ProtoField.new("data[68] (uint8_t)", "mavlink_proto.LOG_DATA_data_68", ftypes.UINT8, nil)
f.LOG_DATA_data_69 = ProtoField.new("data[69] (uint8_t)", "mavlink_proto.LOG_DATA_data_69", ftypes.UINT8, nil)
f.LOG_DATA_data_70 = ProtoField.new("data[70] (uint8_t)", "mavlink_proto.LOG_DATA_data_70", ftypes.UINT8, nil)
f.LOG_DATA_data_71 = ProtoField.new("data[71] (uint8_t)", "mavlink_proto.LOG_DATA_data_71", ftypes.UINT8, nil)
f.LOG_DATA_data_72 = ProtoField.new("data[72] (uint8_t)", "mavlink_proto.LOG_DATA_data_72", ftypes.UINT8, nil)
f.LOG_DATA_data_73 = ProtoField.new("data[73] (uint8_t)", "mavlink_proto.LOG_DATA_data_73", ftypes.UINT8, nil)
f.LOG_DATA_data_74 = ProtoField.new("data[74] (uint8_t)", "mavlink_proto.LOG_DATA_data_74", ftypes.UINT8, nil)
f.LOG_DATA_data_75 = ProtoField.new("data[75] (uint8_t)", "mavlink_proto.LOG_DATA_data_75", ftypes.UINT8, nil)
f.LOG_DATA_data_76 = ProtoField.new("data[76] (uint8_t)", "mavlink_proto.LOG_DATA_data_76", ftypes.UINT8, nil)
f.LOG_DATA_data_77 = ProtoField.new("data[77] (uint8_t)", "mavlink_proto.LOG_DATA_data_77", ftypes.UINT8, nil)
f.LOG_DATA_data_78 = ProtoField.new("data[78] (uint8_t)", "mavlink_proto.LOG_DATA_data_78", ftypes.UINT8, nil)
f.LOG_DATA_data_79 = ProtoField.new("data[79] (uint8_t)", "mavlink_proto.LOG_DATA_data_79", ftypes.UINT8, nil)
f.LOG_DATA_data_80 = ProtoField.new("data[80] (uint8_t)", "mavlink_proto.LOG_DATA_data_80", ftypes.UINT8, nil)
f.LOG_DATA_data_81 = ProtoField.new("data[81] (uint8_t)", "mavlink_proto.LOG_DATA_data_81", ftypes.UINT8, nil)
f.LOG_DATA_data_82 = ProtoField.new("data[82] (uint8_t)", "mavlink_proto.LOG_DATA_data_82", ftypes.UINT8, nil)
f.LOG_DATA_data_83 = ProtoField.new("data[83] (uint8_t)", "mavlink_proto.LOG_DATA_data_83", ftypes.UINT8, nil)
f.LOG_DATA_data_84 = ProtoField.new("data[84] (uint8_t)", "mavlink_proto.LOG_DATA_data_84", ftypes.UINT8, nil)
f.LOG_DATA_data_85 = ProtoField.new("data[85] (uint8_t)", "mavlink_proto.LOG_DATA_data_85", ftypes.UINT8, nil)
f.LOG_DATA_data_86 = ProtoField.new("data[86] (uint8_t)", "mavlink_proto.LOG_DATA_data_86", ftypes.UINT8, nil)
f.LOG_DATA_data_87 = ProtoField.new("data[87] (uint8_t)", "mavlink_proto.LOG_DATA_data_87", ftypes.UINT8, nil)
f.LOG_DATA_data_88 = ProtoField.new("data[88] (uint8_t)", "mavlink_proto.LOG_DATA_data_88", ftypes.UINT8, nil)
f.LOG_DATA_data_89 = ProtoField.new("data[89] (uint8_t)", "mavlink_proto.LOG_DATA_data_89", ftypes.UINT8, nil)

f.LOG_ERASE_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.LOG_ERASE_target_system", ftypes.UINT8, nil)
f.LOG_ERASE_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.LOG_ERASE_target_component", ftypes.UINT8, nil)

f.LOG_REQUEST_END_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.LOG_REQUEST_END_target_system", ftypes.UINT8, nil)
f.LOG_REQUEST_END_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.LOG_REQUEST_END_target_component", ftypes.UINT8, nil)

f.GPS_INJECT_DATA_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_target_system", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_target_component", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_len = ProtoField.new("len (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_len", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_0", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_1", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_2", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_3", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_4", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_5", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_6", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_7", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_8 = ProtoField.new("data[8] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_8", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_9 = ProtoField.new("data[9] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_9", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_10 = ProtoField.new("data[10] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_10", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_11 = ProtoField.new("data[11] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_11", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_12 = ProtoField.new("data[12] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_12", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_13 = ProtoField.new("data[13] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_13", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_14 = ProtoField.new("data[14] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_14", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_15 = ProtoField.new("data[15] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_15", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_16 = ProtoField.new("data[16] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_16", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_17 = ProtoField.new("data[17] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_17", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_18 = ProtoField.new("data[18] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_18", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_19 = ProtoField.new("data[19] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_19", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_20 = ProtoField.new("data[20] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_20", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_21 = ProtoField.new("data[21] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_21", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_22 = ProtoField.new("data[22] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_22", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_23 = ProtoField.new("data[23] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_23", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_24 = ProtoField.new("data[24] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_24", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_25 = ProtoField.new("data[25] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_25", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_26 = ProtoField.new("data[26] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_26", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_27 = ProtoField.new("data[27] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_27", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_28 = ProtoField.new("data[28] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_28", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_29 = ProtoField.new("data[29] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_29", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_30 = ProtoField.new("data[30] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_30", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_31 = ProtoField.new("data[31] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_31", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_32 = ProtoField.new("data[32] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_32", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_33 = ProtoField.new("data[33] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_33", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_34 = ProtoField.new("data[34] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_34", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_35 = ProtoField.new("data[35] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_35", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_36 = ProtoField.new("data[36] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_36", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_37 = ProtoField.new("data[37] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_37", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_38 = ProtoField.new("data[38] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_38", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_39 = ProtoField.new("data[39] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_39", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_40 = ProtoField.new("data[40] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_40", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_41 = ProtoField.new("data[41] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_41", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_42 = ProtoField.new("data[42] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_42", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_43 = ProtoField.new("data[43] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_43", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_44 = ProtoField.new("data[44] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_44", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_45 = ProtoField.new("data[45] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_45", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_46 = ProtoField.new("data[46] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_46", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_47 = ProtoField.new("data[47] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_47", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_48 = ProtoField.new("data[48] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_48", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_49 = ProtoField.new("data[49] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_49", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_50 = ProtoField.new("data[50] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_50", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_51 = ProtoField.new("data[51] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_51", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_52 = ProtoField.new("data[52] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_52", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_53 = ProtoField.new("data[53] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_53", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_54 = ProtoField.new("data[54] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_54", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_55 = ProtoField.new("data[55] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_55", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_56 = ProtoField.new("data[56] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_56", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_57 = ProtoField.new("data[57] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_57", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_58 = ProtoField.new("data[58] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_58", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_59 = ProtoField.new("data[59] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_59", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_60 = ProtoField.new("data[60] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_60", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_61 = ProtoField.new("data[61] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_61", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_62 = ProtoField.new("data[62] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_62", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_63 = ProtoField.new("data[63] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_63", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_64 = ProtoField.new("data[64] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_64", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_65 = ProtoField.new("data[65] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_65", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_66 = ProtoField.new("data[66] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_66", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_67 = ProtoField.new("data[67] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_67", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_68 = ProtoField.new("data[68] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_68", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_69 = ProtoField.new("data[69] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_69", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_70 = ProtoField.new("data[70] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_70", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_71 = ProtoField.new("data[71] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_71", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_72 = ProtoField.new("data[72] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_72", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_73 = ProtoField.new("data[73] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_73", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_74 = ProtoField.new("data[74] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_74", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_75 = ProtoField.new("data[75] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_75", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_76 = ProtoField.new("data[76] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_76", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_77 = ProtoField.new("data[77] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_77", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_78 = ProtoField.new("data[78] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_78", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_79 = ProtoField.new("data[79] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_79", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_80 = ProtoField.new("data[80] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_80", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_81 = ProtoField.new("data[81] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_81", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_82 = ProtoField.new("data[82] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_82", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_83 = ProtoField.new("data[83] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_83", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_84 = ProtoField.new("data[84] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_84", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_85 = ProtoField.new("data[85] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_85", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_86 = ProtoField.new("data[86] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_86", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_87 = ProtoField.new("data[87] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_87", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_88 = ProtoField.new("data[88] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_88", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_89 = ProtoField.new("data[89] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_89", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_90 = ProtoField.new("data[90] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_90", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_91 = ProtoField.new("data[91] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_91", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_92 = ProtoField.new("data[92] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_92", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_93 = ProtoField.new("data[93] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_93", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_94 = ProtoField.new("data[94] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_94", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_95 = ProtoField.new("data[95] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_95", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_96 = ProtoField.new("data[96] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_96", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_97 = ProtoField.new("data[97] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_97", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_98 = ProtoField.new("data[98] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_98", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_99 = ProtoField.new("data[99] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_99", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_100 = ProtoField.new("data[100] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_100", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_101 = ProtoField.new("data[101] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_101", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_102 = ProtoField.new("data[102] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_102", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_103 = ProtoField.new("data[103] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_103", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_104 = ProtoField.new("data[104] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_104", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_105 = ProtoField.new("data[105] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_105", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_106 = ProtoField.new("data[106] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_106", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_107 = ProtoField.new("data[107] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_107", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_108 = ProtoField.new("data[108] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_108", ftypes.UINT8, nil)
f.GPS_INJECT_DATA_data_109 = ProtoField.new("data[109] (uint8_t)", "mavlink_proto.GPS_INJECT_DATA_data_109", ftypes.UINT8, nil)

f.GPS2_RAW_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.GPS2_RAW_time_usec", ftypes.UINT64, nil)
f.GPS2_RAW_fix_type = ProtoField.new("fix_type (GPS_FIX_TYPE)", "mavlink_proto.GPS2_RAW_fix_type", ftypes.UINT8, enumEntryName.GPS_FIX_TYPE)
f.GPS2_RAW_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.GPS2_RAW_lat", ftypes.INT32, nil)
f.GPS2_RAW_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.GPS2_RAW_lon", ftypes.INT32, nil)
f.GPS2_RAW_alt = ProtoField.new("alt (int32_t)", "mavlink_proto.GPS2_RAW_alt", ftypes.INT32, nil)
f.GPS2_RAW_eph = ProtoField.new("eph (uint16_t)", "mavlink_proto.GPS2_RAW_eph", ftypes.UINT16, nil)
f.GPS2_RAW_epv = ProtoField.new("epv (uint16_t)", "mavlink_proto.GPS2_RAW_epv", ftypes.UINT16, nil)
f.GPS2_RAW_vel = ProtoField.new("vel (uint16_t)", "mavlink_proto.GPS2_RAW_vel", ftypes.UINT16, nil)
f.GPS2_RAW_cog = ProtoField.new("cog (uint16_t)", "mavlink_proto.GPS2_RAW_cog", ftypes.UINT16, nil)
f.GPS2_RAW_satellites_visible = ProtoField.new("satellites_visible (uint8_t)", "mavlink_proto.GPS2_RAW_satellites_visible", ftypes.UINT8, nil)
f.GPS2_RAW_dgps_numch = ProtoField.new("dgps_numch (uint8_t)", "mavlink_proto.GPS2_RAW_dgps_numch", ftypes.UINT8, nil)
f.GPS2_RAW_dgps_age = ProtoField.new("dgps_age (uint32_t)", "mavlink_proto.GPS2_RAW_dgps_age", ftypes.UINT32, nil)
f.GPS2_RAW_yaw = ProtoField.new("yaw (uint16_t)", "mavlink_proto.GPS2_RAW_yaw", ftypes.UINT16, nil)
f.GPS2_RAW_alt_ellipsoid = ProtoField.new("alt_ellipsoid (int32_t)", "mavlink_proto.GPS2_RAW_alt_ellipsoid", ftypes.INT32, nil)
f.GPS2_RAW_h_acc = ProtoField.new("h_acc (uint32_t)", "mavlink_proto.GPS2_RAW_h_acc", ftypes.UINT32, nil)
f.GPS2_RAW_v_acc = ProtoField.new("v_acc (uint32_t)", "mavlink_proto.GPS2_RAW_v_acc", ftypes.UINT32, nil)
f.GPS2_RAW_vel_acc = ProtoField.new("vel_acc (uint32_t)", "mavlink_proto.GPS2_RAW_vel_acc", ftypes.UINT32, nil)
f.GPS2_RAW_hdg_acc = ProtoField.new("hdg_acc (uint32_t)", "mavlink_proto.GPS2_RAW_hdg_acc", ftypes.UINT32, nil)

f.POWER_STATUS_Vcc = ProtoField.new("Vcc (uint16_t)", "mavlink_proto.POWER_STATUS_Vcc", ftypes.UINT16, nil)
f.POWER_STATUS_Vservo = ProtoField.new("Vservo (uint16_t)", "mavlink_proto.POWER_STATUS_Vservo", ftypes.UINT16, nil)
f.POWER_STATUS_flags = ProtoField.new("flags (MAV_POWER_STATUS)", "mavlink_proto.POWER_STATUS_flags", ftypes.UINT16, nil)
f.POWER_STATUS_flags_flagMAV_POWER_STATUS_BRICK_VALID = ProtoField.bool("mavlink_proto.POWER_STATUS_flags.MAV_POWER_STATUS_BRICK_VALID", "MAV_POWER_STATUS_BRICK_VALID", 6, nil, 1)
f.POWER_STATUS_flags_flagMAV_POWER_STATUS_SERVO_VALID = ProtoField.bool("mavlink_proto.POWER_STATUS_flags.MAV_POWER_STATUS_SERVO_VALID", "MAV_POWER_STATUS_SERVO_VALID", 6, nil, 2)
f.POWER_STATUS_flags_flagMAV_POWER_STATUS_USB_CONNECTED = ProtoField.bool("mavlink_proto.POWER_STATUS_flags.MAV_POWER_STATUS_USB_CONNECTED", "MAV_POWER_STATUS_USB_CONNECTED", 6, nil, 4)
f.POWER_STATUS_flags_flagMAV_POWER_STATUS_PERIPH_OVERCURRENT = ProtoField.bool("mavlink_proto.POWER_STATUS_flags.MAV_POWER_STATUS_PERIPH_OVERCURRENT", "MAV_POWER_STATUS_PERIPH_OVERCURRENT", 6, nil, 8)
f.POWER_STATUS_flags_flagMAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT = ProtoField.bool("mavlink_proto.POWER_STATUS_flags.MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT", "MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT", 6, nil, 16)
f.POWER_STATUS_flags_flagMAV_POWER_STATUS_CHANGED = ProtoField.bool("mavlink_proto.POWER_STATUS_flags.MAV_POWER_STATUS_CHANGED", "MAV_POWER_STATUS_CHANGED", 6, nil, 32)

f.SERIAL_CONTROL_device = ProtoField.new("device (SERIAL_CONTROL_DEV)", "mavlink_proto.SERIAL_CONTROL_device", ftypes.UINT8, enumEntryName.SERIAL_CONTROL_DEV)
f.SERIAL_CONTROL_flags = ProtoField.new("flags (SERIAL_CONTROL_FLAG)", "mavlink_proto.SERIAL_CONTROL_flags", ftypes.UINT8, nil)
f.SERIAL_CONTROL_flags_flagSERIAL_CONTROL_FLAG_REPLY = ProtoField.bool("mavlink_proto.SERIAL_CONTROL_flags.SERIAL_CONTROL_FLAG_REPLY", "SERIAL_CONTROL_FLAG_REPLY", 5, nil, 1)
f.SERIAL_CONTROL_flags_flagSERIAL_CONTROL_FLAG_RESPOND = ProtoField.bool("mavlink_proto.SERIAL_CONTROL_flags.SERIAL_CONTROL_FLAG_RESPOND", "SERIAL_CONTROL_FLAG_RESPOND", 5, nil, 2)
f.SERIAL_CONTROL_flags_flagSERIAL_CONTROL_FLAG_EXCLUSIVE = ProtoField.bool("mavlink_proto.SERIAL_CONTROL_flags.SERIAL_CONTROL_FLAG_EXCLUSIVE", "SERIAL_CONTROL_FLAG_EXCLUSIVE", 5, nil, 4)
f.SERIAL_CONTROL_flags_flagSERIAL_CONTROL_FLAG_BLOCKING = ProtoField.bool("mavlink_proto.SERIAL_CONTROL_flags.SERIAL_CONTROL_FLAG_BLOCKING", "SERIAL_CONTROL_FLAG_BLOCKING", 5, nil, 8)
f.SERIAL_CONTROL_flags_flagSERIAL_CONTROL_FLAG_MULTI = ProtoField.bool("mavlink_proto.SERIAL_CONTROL_flags.SERIAL_CONTROL_FLAG_MULTI", "SERIAL_CONTROL_FLAG_MULTI", 5, nil, 16)
f.SERIAL_CONTROL_timeout = ProtoField.new("timeout (uint16_t)", "mavlink_proto.SERIAL_CONTROL_timeout", ftypes.UINT16, nil)
f.SERIAL_CONTROL_baudrate = ProtoField.new("baudrate (uint32_t)", "mavlink_proto.SERIAL_CONTROL_baudrate", ftypes.UINT32, nil)
f.SERIAL_CONTROL_count = ProtoField.new("count (uint8_t)", "mavlink_proto.SERIAL_CONTROL_count", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_0", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_1", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_2", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_3", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_4", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_5", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_6", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_7", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_8 = ProtoField.new("data[8] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_8", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_9 = ProtoField.new("data[9] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_9", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_10 = ProtoField.new("data[10] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_10", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_11 = ProtoField.new("data[11] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_11", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_12 = ProtoField.new("data[12] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_12", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_13 = ProtoField.new("data[13] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_13", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_14 = ProtoField.new("data[14] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_14", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_15 = ProtoField.new("data[15] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_15", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_16 = ProtoField.new("data[16] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_16", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_17 = ProtoField.new("data[17] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_17", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_18 = ProtoField.new("data[18] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_18", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_19 = ProtoField.new("data[19] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_19", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_20 = ProtoField.new("data[20] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_20", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_21 = ProtoField.new("data[21] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_21", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_22 = ProtoField.new("data[22] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_22", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_23 = ProtoField.new("data[23] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_23", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_24 = ProtoField.new("data[24] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_24", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_25 = ProtoField.new("data[25] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_25", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_26 = ProtoField.new("data[26] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_26", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_27 = ProtoField.new("data[27] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_27", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_28 = ProtoField.new("data[28] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_28", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_29 = ProtoField.new("data[29] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_29", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_30 = ProtoField.new("data[30] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_30", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_31 = ProtoField.new("data[31] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_31", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_32 = ProtoField.new("data[32] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_32", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_33 = ProtoField.new("data[33] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_33", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_34 = ProtoField.new("data[34] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_34", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_35 = ProtoField.new("data[35] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_35", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_36 = ProtoField.new("data[36] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_36", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_37 = ProtoField.new("data[37] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_37", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_38 = ProtoField.new("data[38] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_38", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_39 = ProtoField.new("data[39] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_39", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_40 = ProtoField.new("data[40] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_40", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_41 = ProtoField.new("data[41] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_41", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_42 = ProtoField.new("data[42] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_42", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_43 = ProtoField.new("data[43] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_43", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_44 = ProtoField.new("data[44] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_44", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_45 = ProtoField.new("data[45] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_45", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_46 = ProtoField.new("data[46] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_46", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_47 = ProtoField.new("data[47] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_47", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_48 = ProtoField.new("data[48] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_48", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_49 = ProtoField.new("data[49] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_49", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_50 = ProtoField.new("data[50] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_50", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_51 = ProtoField.new("data[51] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_51", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_52 = ProtoField.new("data[52] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_52", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_53 = ProtoField.new("data[53] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_53", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_54 = ProtoField.new("data[54] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_54", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_55 = ProtoField.new("data[55] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_55", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_56 = ProtoField.new("data[56] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_56", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_57 = ProtoField.new("data[57] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_57", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_58 = ProtoField.new("data[58] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_58", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_59 = ProtoField.new("data[59] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_59", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_60 = ProtoField.new("data[60] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_60", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_61 = ProtoField.new("data[61] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_61", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_62 = ProtoField.new("data[62] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_62", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_63 = ProtoField.new("data[63] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_63", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_64 = ProtoField.new("data[64] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_64", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_65 = ProtoField.new("data[65] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_65", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_66 = ProtoField.new("data[66] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_66", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_67 = ProtoField.new("data[67] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_67", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_68 = ProtoField.new("data[68] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_68", ftypes.UINT8, nil)
f.SERIAL_CONTROL_data_69 = ProtoField.new("data[69] (uint8_t)", "mavlink_proto.SERIAL_CONTROL_data_69", ftypes.UINT8, nil)

f.GPS_RTK_time_last_baseline_ms = ProtoField.new("time_last_baseline_ms (uint32_t)", "mavlink_proto.GPS_RTK_time_last_baseline_ms", ftypes.UINT32, nil)
f.GPS_RTK_rtk_receiver_id = ProtoField.new("rtk_receiver_id (uint8_t)", "mavlink_proto.GPS_RTK_rtk_receiver_id", ftypes.UINT8, nil)
f.GPS_RTK_wn = ProtoField.new("wn (uint16_t)", "mavlink_proto.GPS_RTK_wn", ftypes.UINT16, nil)
f.GPS_RTK_tow = ProtoField.new("tow (uint32_t)", "mavlink_proto.GPS_RTK_tow", ftypes.UINT32, nil)
f.GPS_RTK_rtk_health = ProtoField.new("rtk_health (uint8_t)", "mavlink_proto.GPS_RTK_rtk_health", ftypes.UINT8, nil)
f.GPS_RTK_rtk_rate = ProtoField.new("rtk_rate (uint8_t)", "mavlink_proto.GPS_RTK_rtk_rate", ftypes.UINT8, nil)
f.GPS_RTK_nsats = ProtoField.new("nsats (uint8_t)", "mavlink_proto.GPS_RTK_nsats", ftypes.UINT8, nil)
f.GPS_RTK_baseline_coords_type = ProtoField.new("baseline_coords_type (RTK_BASELINE_COORDINATE_SYSTEM)", "mavlink_proto.GPS_RTK_baseline_coords_type", ftypes.UINT8, enumEntryName.RTK_BASELINE_COORDINATE_SYSTEM)
f.GPS_RTK_baseline_a_mm = ProtoField.new("baseline_a_mm (int32_t)", "mavlink_proto.GPS_RTK_baseline_a_mm", ftypes.INT32, nil)
f.GPS_RTK_baseline_b_mm = ProtoField.new("baseline_b_mm (int32_t)", "mavlink_proto.GPS_RTK_baseline_b_mm", ftypes.INT32, nil)
f.GPS_RTK_baseline_c_mm = ProtoField.new("baseline_c_mm (int32_t)", "mavlink_proto.GPS_RTK_baseline_c_mm", ftypes.INT32, nil)
f.GPS_RTK_accuracy = ProtoField.new("accuracy (uint32_t)", "mavlink_proto.GPS_RTK_accuracy", ftypes.UINT32, nil)
f.GPS_RTK_iar_num_hypotheses = ProtoField.new("iar_num_hypotheses (int32_t)", "mavlink_proto.GPS_RTK_iar_num_hypotheses", ftypes.INT32, nil)

f.GPS2_RTK_time_last_baseline_ms = ProtoField.new("time_last_baseline_ms (uint32_t)", "mavlink_proto.GPS2_RTK_time_last_baseline_ms", ftypes.UINT32, nil)
f.GPS2_RTK_rtk_receiver_id = ProtoField.new("rtk_receiver_id (uint8_t)", "mavlink_proto.GPS2_RTK_rtk_receiver_id", ftypes.UINT8, nil)
f.GPS2_RTK_wn = ProtoField.new("wn (uint16_t)", "mavlink_proto.GPS2_RTK_wn", ftypes.UINT16, nil)
f.GPS2_RTK_tow = ProtoField.new("tow (uint32_t)", "mavlink_proto.GPS2_RTK_tow", ftypes.UINT32, nil)
f.GPS2_RTK_rtk_health = ProtoField.new("rtk_health (uint8_t)", "mavlink_proto.GPS2_RTK_rtk_health", ftypes.UINT8, nil)
f.GPS2_RTK_rtk_rate = ProtoField.new("rtk_rate (uint8_t)", "mavlink_proto.GPS2_RTK_rtk_rate", ftypes.UINT8, nil)
f.GPS2_RTK_nsats = ProtoField.new("nsats (uint8_t)", "mavlink_proto.GPS2_RTK_nsats", ftypes.UINT8, nil)
f.GPS2_RTK_baseline_coords_type = ProtoField.new("baseline_coords_type (RTK_BASELINE_COORDINATE_SYSTEM)", "mavlink_proto.GPS2_RTK_baseline_coords_type", ftypes.UINT8, enumEntryName.RTK_BASELINE_COORDINATE_SYSTEM)
f.GPS2_RTK_baseline_a_mm = ProtoField.new("baseline_a_mm (int32_t)", "mavlink_proto.GPS2_RTK_baseline_a_mm", ftypes.INT32, nil)
f.GPS2_RTK_baseline_b_mm = ProtoField.new("baseline_b_mm (int32_t)", "mavlink_proto.GPS2_RTK_baseline_b_mm", ftypes.INT32, nil)
f.GPS2_RTK_baseline_c_mm = ProtoField.new("baseline_c_mm (int32_t)", "mavlink_proto.GPS2_RTK_baseline_c_mm", ftypes.INT32, nil)
f.GPS2_RTK_accuracy = ProtoField.new("accuracy (uint32_t)", "mavlink_proto.GPS2_RTK_accuracy", ftypes.UINT32, nil)
f.GPS2_RTK_iar_num_hypotheses = ProtoField.new("iar_num_hypotheses (int32_t)", "mavlink_proto.GPS2_RTK_iar_num_hypotheses", ftypes.INT32, nil)

f.SCALED_IMU3_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.SCALED_IMU3_time_boot_ms", ftypes.UINT32, nil)
f.SCALED_IMU3_xacc = ProtoField.new("xacc (int16_t)", "mavlink_proto.SCALED_IMU3_xacc", ftypes.INT16, nil)
f.SCALED_IMU3_yacc = ProtoField.new("yacc (int16_t)", "mavlink_proto.SCALED_IMU3_yacc", ftypes.INT16, nil)
f.SCALED_IMU3_zacc = ProtoField.new("zacc (int16_t)", "mavlink_proto.SCALED_IMU3_zacc", ftypes.INT16, nil)
f.SCALED_IMU3_xgyro = ProtoField.new("xgyro (int16_t)", "mavlink_proto.SCALED_IMU3_xgyro", ftypes.INT16, nil)
f.SCALED_IMU3_ygyro = ProtoField.new("ygyro (int16_t)", "mavlink_proto.SCALED_IMU3_ygyro", ftypes.INT16, nil)
f.SCALED_IMU3_zgyro = ProtoField.new("zgyro (int16_t)", "mavlink_proto.SCALED_IMU3_zgyro", ftypes.INT16, nil)
f.SCALED_IMU3_xmag = ProtoField.new("xmag (int16_t)", "mavlink_proto.SCALED_IMU3_xmag", ftypes.INT16, nil)
f.SCALED_IMU3_ymag = ProtoField.new("ymag (int16_t)", "mavlink_proto.SCALED_IMU3_ymag", ftypes.INT16, nil)
f.SCALED_IMU3_zmag = ProtoField.new("zmag (int16_t)", "mavlink_proto.SCALED_IMU3_zmag", ftypes.INT16, nil)
f.SCALED_IMU3_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.SCALED_IMU3_temperature", ftypes.INT16, nil)

f.DATA_TRANSMISSION_HANDSHAKE_type = ProtoField.new("type (MAVLINK_DATA_STREAM_TYPE)", "mavlink_proto.DATA_TRANSMISSION_HANDSHAKE_type", ftypes.UINT8, enumEntryName.MAVLINK_DATA_STREAM_TYPE)
f.DATA_TRANSMISSION_HANDSHAKE_size = ProtoField.new("size (uint32_t)", "mavlink_proto.DATA_TRANSMISSION_HANDSHAKE_size", ftypes.UINT32, nil)
f.DATA_TRANSMISSION_HANDSHAKE_width = ProtoField.new("width (uint16_t)", "mavlink_proto.DATA_TRANSMISSION_HANDSHAKE_width", ftypes.UINT16, nil)
f.DATA_TRANSMISSION_HANDSHAKE_height = ProtoField.new("height (uint16_t)", "mavlink_proto.DATA_TRANSMISSION_HANDSHAKE_height", ftypes.UINT16, nil)
f.DATA_TRANSMISSION_HANDSHAKE_packets = ProtoField.new("packets (uint16_t)", "mavlink_proto.DATA_TRANSMISSION_HANDSHAKE_packets", ftypes.UINT16, nil)
f.DATA_TRANSMISSION_HANDSHAKE_payload = ProtoField.new("payload (uint8_t)", "mavlink_proto.DATA_TRANSMISSION_HANDSHAKE_payload", ftypes.UINT8, nil)
f.DATA_TRANSMISSION_HANDSHAKE_jpg_quality = ProtoField.new("jpg_quality (uint8_t)", "mavlink_proto.DATA_TRANSMISSION_HANDSHAKE_jpg_quality", ftypes.UINT8, nil)

f.ENCAPSULATED_DATA_seqnr = ProtoField.new("seqnr (uint16_t)", "mavlink_proto.ENCAPSULATED_DATA_seqnr", ftypes.UINT16, nil)
f.ENCAPSULATED_DATA_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_0", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_1", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_2", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_3", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_4", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_5", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_6", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_7", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_8 = ProtoField.new("data[8] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_8", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_9 = ProtoField.new("data[9] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_9", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_10 = ProtoField.new("data[10] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_10", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_11 = ProtoField.new("data[11] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_11", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_12 = ProtoField.new("data[12] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_12", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_13 = ProtoField.new("data[13] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_13", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_14 = ProtoField.new("data[14] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_14", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_15 = ProtoField.new("data[15] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_15", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_16 = ProtoField.new("data[16] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_16", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_17 = ProtoField.new("data[17] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_17", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_18 = ProtoField.new("data[18] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_18", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_19 = ProtoField.new("data[19] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_19", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_20 = ProtoField.new("data[20] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_20", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_21 = ProtoField.new("data[21] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_21", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_22 = ProtoField.new("data[22] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_22", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_23 = ProtoField.new("data[23] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_23", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_24 = ProtoField.new("data[24] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_24", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_25 = ProtoField.new("data[25] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_25", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_26 = ProtoField.new("data[26] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_26", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_27 = ProtoField.new("data[27] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_27", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_28 = ProtoField.new("data[28] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_28", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_29 = ProtoField.new("data[29] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_29", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_30 = ProtoField.new("data[30] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_30", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_31 = ProtoField.new("data[31] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_31", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_32 = ProtoField.new("data[32] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_32", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_33 = ProtoField.new("data[33] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_33", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_34 = ProtoField.new("data[34] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_34", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_35 = ProtoField.new("data[35] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_35", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_36 = ProtoField.new("data[36] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_36", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_37 = ProtoField.new("data[37] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_37", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_38 = ProtoField.new("data[38] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_38", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_39 = ProtoField.new("data[39] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_39", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_40 = ProtoField.new("data[40] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_40", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_41 = ProtoField.new("data[41] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_41", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_42 = ProtoField.new("data[42] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_42", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_43 = ProtoField.new("data[43] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_43", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_44 = ProtoField.new("data[44] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_44", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_45 = ProtoField.new("data[45] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_45", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_46 = ProtoField.new("data[46] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_46", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_47 = ProtoField.new("data[47] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_47", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_48 = ProtoField.new("data[48] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_48", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_49 = ProtoField.new("data[49] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_49", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_50 = ProtoField.new("data[50] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_50", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_51 = ProtoField.new("data[51] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_51", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_52 = ProtoField.new("data[52] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_52", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_53 = ProtoField.new("data[53] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_53", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_54 = ProtoField.new("data[54] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_54", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_55 = ProtoField.new("data[55] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_55", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_56 = ProtoField.new("data[56] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_56", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_57 = ProtoField.new("data[57] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_57", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_58 = ProtoField.new("data[58] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_58", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_59 = ProtoField.new("data[59] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_59", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_60 = ProtoField.new("data[60] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_60", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_61 = ProtoField.new("data[61] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_61", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_62 = ProtoField.new("data[62] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_62", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_63 = ProtoField.new("data[63] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_63", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_64 = ProtoField.new("data[64] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_64", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_65 = ProtoField.new("data[65] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_65", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_66 = ProtoField.new("data[66] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_66", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_67 = ProtoField.new("data[67] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_67", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_68 = ProtoField.new("data[68] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_68", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_69 = ProtoField.new("data[69] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_69", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_70 = ProtoField.new("data[70] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_70", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_71 = ProtoField.new("data[71] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_71", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_72 = ProtoField.new("data[72] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_72", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_73 = ProtoField.new("data[73] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_73", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_74 = ProtoField.new("data[74] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_74", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_75 = ProtoField.new("data[75] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_75", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_76 = ProtoField.new("data[76] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_76", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_77 = ProtoField.new("data[77] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_77", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_78 = ProtoField.new("data[78] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_78", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_79 = ProtoField.new("data[79] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_79", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_80 = ProtoField.new("data[80] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_80", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_81 = ProtoField.new("data[81] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_81", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_82 = ProtoField.new("data[82] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_82", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_83 = ProtoField.new("data[83] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_83", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_84 = ProtoField.new("data[84] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_84", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_85 = ProtoField.new("data[85] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_85", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_86 = ProtoField.new("data[86] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_86", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_87 = ProtoField.new("data[87] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_87", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_88 = ProtoField.new("data[88] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_88", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_89 = ProtoField.new("data[89] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_89", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_90 = ProtoField.new("data[90] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_90", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_91 = ProtoField.new("data[91] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_91", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_92 = ProtoField.new("data[92] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_92", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_93 = ProtoField.new("data[93] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_93", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_94 = ProtoField.new("data[94] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_94", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_95 = ProtoField.new("data[95] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_95", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_96 = ProtoField.new("data[96] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_96", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_97 = ProtoField.new("data[97] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_97", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_98 = ProtoField.new("data[98] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_98", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_99 = ProtoField.new("data[99] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_99", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_100 = ProtoField.new("data[100] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_100", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_101 = ProtoField.new("data[101] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_101", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_102 = ProtoField.new("data[102] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_102", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_103 = ProtoField.new("data[103] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_103", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_104 = ProtoField.new("data[104] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_104", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_105 = ProtoField.new("data[105] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_105", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_106 = ProtoField.new("data[106] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_106", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_107 = ProtoField.new("data[107] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_107", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_108 = ProtoField.new("data[108] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_108", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_109 = ProtoField.new("data[109] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_109", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_110 = ProtoField.new("data[110] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_110", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_111 = ProtoField.new("data[111] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_111", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_112 = ProtoField.new("data[112] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_112", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_113 = ProtoField.new("data[113] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_113", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_114 = ProtoField.new("data[114] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_114", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_115 = ProtoField.new("data[115] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_115", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_116 = ProtoField.new("data[116] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_116", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_117 = ProtoField.new("data[117] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_117", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_118 = ProtoField.new("data[118] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_118", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_119 = ProtoField.new("data[119] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_119", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_120 = ProtoField.new("data[120] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_120", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_121 = ProtoField.new("data[121] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_121", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_122 = ProtoField.new("data[122] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_122", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_123 = ProtoField.new("data[123] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_123", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_124 = ProtoField.new("data[124] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_124", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_125 = ProtoField.new("data[125] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_125", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_126 = ProtoField.new("data[126] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_126", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_127 = ProtoField.new("data[127] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_127", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_128 = ProtoField.new("data[128] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_128", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_129 = ProtoField.new("data[129] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_129", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_130 = ProtoField.new("data[130] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_130", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_131 = ProtoField.new("data[131] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_131", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_132 = ProtoField.new("data[132] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_132", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_133 = ProtoField.new("data[133] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_133", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_134 = ProtoField.new("data[134] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_134", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_135 = ProtoField.new("data[135] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_135", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_136 = ProtoField.new("data[136] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_136", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_137 = ProtoField.new("data[137] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_137", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_138 = ProtoField.new("data[138] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_138", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_139 = ProtoField.new("data[139] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_139", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_140 = ProtoField.new("data[140] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_140", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_141 = ProtoField.new("data[141] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_141", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_142 = ProtoField.new("data[142] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_142", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_143 = ProtoField.new("data[143] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_143", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_144 = ProtoField.new("data[144] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_144", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_145 = ProtoField.new("data[145] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_145", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_146 = ProtoField.new("data[146] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_146", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_147 = ProtoField.new("data[147] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_147", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_148 = ProtoField.new("data[148] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_148", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_149 = ProtoField.new("data[149] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_149", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_150 = ProtoField.new("data[150] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_150", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_151 = ProtoField.new("data[151] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_151", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_152 = ProtoField.new("data[152] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_152", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_153 = ProtoField.new("data[153] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_153", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_154 = ProtoField.new("data[154] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_154", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_155 = ProtoField.new("data[155] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_155", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_156 = ProtoField.new("data[156] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_156", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_157 = ProtoField.new("data[157] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_157", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_158 = ProtoField.new("data[158] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_158", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_159 = ProtoField.new("data[159] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_159", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_160 = ProtoField.new("data[160] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_160", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_161 = ProtoField.new("data[161] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_161", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_162 = ProtoField.new("data[162] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_162", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_163 = ProtoField.new("data[163] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_163", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_164 = ProtoField.new("data[164] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_164", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_165 = ProtoField.new("data[165] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_165", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_166 = ProtoField.new("data[166] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_166", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_167 = ProtoField.new("data[167] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_167", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_168 = ProtoField.new("data[168] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_168", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_169 = ProtoField.new("data[169] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_169", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_170 = ProtoField.new("data[170] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_170", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_171 = ProtoField.new("data[171] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_171", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_172 = ProtoField.new("data[172] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_172", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_173 = ProtoField.new("data[173] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_173", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_174 = ProtoField.new("data[174] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_174", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_175 = ProtoField.new("data[175] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_175", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_176 = ProtoField.new("data[176] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_176", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_177 = ProtoField.new("data[177] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_177", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_178 = ProtoField.new("data[178] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_178", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_179 = ProtoField.new("data[179] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_179", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_180 = ProtoField.new("data[180] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_180", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_181 = ProtoField.new("data[181] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_181", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_182 = ProtoField.new("data[182] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_182", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_183 = ProtoField.new("data[183] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_183", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_184 = ProtoField.new("data[184] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_184", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_185 = ProtoField.new("data[185] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_185", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_186 = ProtoField.new("data[186] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_186", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_187 = ProtoField.new("data[187] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_187", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_188 = ProtoField.new("data[188] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_188", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_189 = ProtoField.new("data[189] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_189", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_190 = ProtoField.new("data[190] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_190", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_191 = ProtoField.new("data[191] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_191", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_192 = ProtoField.new("data[192] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_192", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_193 = ProtoField.new("data[193] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_193", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_194 = ProtoField.new("data[194] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_194", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_195 = ProtoField.new("data[195] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_195", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_196 = ProtoField.new("data[196] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_196", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_197 = ProtoField.new("data[197] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_197", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_198 = ProtoField.new("data[198] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_198", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_199 = ProtoField.new("data[199] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_199", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_200 = ProtoField.new("data[200] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_200", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_201 = ProtoField.new("data[201] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_201", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_202 = ProtoField.new("data[202] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_202", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_203 = ProtoField.new("data[203] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_203", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_204 = ProtoField.new("data[204] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_204", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_205 = ProtoField.new("data[205] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_205", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_206 = ProtoField.new("data[206] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_206", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_207 = ProtoField.new("data[207] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_207", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_208 = ProtoField.new("data[208] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_208", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_209 = ProtoField.new("data[209] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_209", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_210 = ProtoField.new("data[210] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_210", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_211 = ProtoField.new("data[211] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_211", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_212 = ProtoField.new("data[212] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_212", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_213 = ProtoField.new("data[213] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_213", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_214 = ProtoField.new("data[214] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_214", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_215 = ProtoField.new("data[215] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_215", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_216 = ProtoField.new("data[216] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_216", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_217 = ProtoField.new("data[217] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_217", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_218 = ProtoField.new("data[218] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_218", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_219 = ProtoField.new("data[219] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_219", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_220 = ProtoField.new("data[220] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_220", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_221 = ProtoField.new("data[221] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_221", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_222 = ProtoField.new("data[222] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_222", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_223 = ProtoField.new("data[223] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_223", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_224 = ProtoField.new("data[224] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_224", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_225 = ProtoField.new("data[225] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_225", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_226 = ProtoField.new("data[226] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_226", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_227 = ProtoField.new("data[227] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_227", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_228 = ProtoField.new("data[228] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_228", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_229 = ProtoField.new("data[229] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_229", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_230 = ProtoField.new("data[230] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_230", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_231 = ProtoField.new("data[231] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_231", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_232 = ProtoField.new("data[232] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_232", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_233 = ProtoField.new("data[233] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_233", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_234 = ProtoField.new("data[234] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_234", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_235 = ProtoField.new("data[235] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_235", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_236 = ProtoField.new("data[236] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_236", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_237 = ProtoField.new("data[237] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_237", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_238 = ProtoField.new("data[238] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_238", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_239 = ProtoField.new("data[239] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_239", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_240 = ProtoField.new("data[240] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_240", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_241 = ProtoField.new("data[241] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_241", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_242 = ProtoField.new("data[242] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_242", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_243 = ProtoField.new("data[243] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_243", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_244 = ProtoField.new("data[244] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_244", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_245 = ProtoField.new("data[245] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_245", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_246 = ProtoField.new("data[246] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_246", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_247 = ProtoField.new("data[247] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_247", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_248 = ProtoField.new("data[248] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_248", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_249 = ProtoField.new("data[249] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_249", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_250 = ProtoField.new("data[250] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_250", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_251 = ProtoField.new("data[251] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_251", ftypes.UINT8, nil)
f.ENCAPSULATED_DATA_data_252 = ProtoField.new("data[252] (uint8_t)", "mavlink_proto.ENCAPSULATED_DATA_data_252", ftypes.UINT8, nil)

f.DISTANCE_SENSOR_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.DISTANCE_SENSOR_time_boot_ms", ftypes.UINT32, nil)
f.DISTANCE_SENSOR_min_distance = ProtoField.new("min_distance (uint16_t)", "mavlink_proto.DISTANCE_SENSOR_min_distance", ftypes.UINT16, nil)
f.DISTANCE_SENSOR_max_distance = ProtoField.new("max_distance (uint16_t)", "mavlink_proto.DISTANCE_SENSOR_max_distance", ftypes.UINT16, nil)
f.DISTANCE_SENSOR_current_distance = ProtoField.new("current_distance (uint16_t)", "mavlink_proto.DISTANCE_SENSOR_current_distance", ftypes.UINT16, nil)
f.DISTANCE_SENSOR_type = ProtoField.new("type (MAV_DISTANCE_SENSOR)", "mavlink_proto.DISTANCE_SENSOR_type", ftypes.UINT8, enumEntryName.MAV_DISTANCE_SENSOR)
f.DISTANCE_SENSOR_id = ProtoField.new("id (uint8_t)", "mavlink_proto.DISTANCE_SENSOR_id", ftypes.UINT8, nil)
f.DISTANCE_SENSOR_orientation = ProtoField.new("orientation (MAV_SENSOR_ORIENTATION)", "mavlink_proto.DISTANCE_SENSOR_orientation", ftypes.UINT8, enumEntryName.MAV_SENSOR_ORIENTATION)
f.DISTANCE_SENSOR_covariance = ProtoField.new("covariance (uint8_t)", "mavlink_proto.DISTANCE_SENSOR_covariance", ftypes.UINT8, nil)
f.DISTANCE_SENSOR_horizontal_fov = ProtoField.new("horizontal_fov (float)", "mavlink_proto.DISTANCE_SENSOR_horizontal_fov", ftypes.FLOAT, nil)
f.DISTANCE_SENSOR_vertical_fov = ProtoField.new("vertical_fov (float)", "mavlink_proto.DISTANCE_SENSOR_vertical_fov", ftypes.FLOAT, nil)
f.DISTANCE_SENSOR_quaternion_0 = ProtoField.new("quaternion[0] (float)", "mavlink_proto.DISTANCE_SENSOR_quaternion_0", ftypes.FLOAT, nil)
f.DISTANCE_SENSOR_quaternion_1 = ProtoField.new("quaternion[1] (float)", "mavlink_proto.DISTANCE_SENSOR_quaternion_1", ftypes.FLOAT, nil)
f.DISTANCE_SENSOR_quaternion_2 = ProtoField.new("quaternion[2] (float)", "mavlink_proto.DISTANCE_SENSOR_quaternion_2", ftypes.FLOAT, nil)
f.DISTANCE_SENSOR_quaternion_3 = ProtoField.new("quaternion[3] (float)", "mavlink_proto.DISTANCE_SENSOR_quaternion_3", ftypes.FLOAT, nil)
f.DISTANCE_SENSOR_signal_quality = ProtoField.new("signal_quality (uint8_t)", "mavlink_proto.DISTANCE_SENSOR_signal_quality", ftypes.UINT8, nil)

f.TERRAIN_REQUEST_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.TERRAIN_REQUEST_lat", ftypes.INT32, nil)
f.TERRAIN_REQUEST_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.TERRAIN_REQUEST_lon", ftypes.INT32, nil)
f.TERRAIN_REQUEST_grid_spacing = ProtoField.new("grid_spacing (uint16_t)", "mavlink_proto.TERRAIN_REQUEST_grid_spacing", ftypes.UINT16, nil)
f.TERRAIN_REQUEST_mask = ProtoField.new("mask (uint64_t)", "mavlink_proto.TERRAIN_REQUEST_mask", ftypes.UINT64, nil)

f.TERRAIN_DATA_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.TERRAIN_DATA_lat", ftypes.INT32, nil)
f.TERRAIN_DATA_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.TERRAIN_DATA_lon", ftypes.INT32, nil)
f.TERRAIN_DATA_grid_spacing = ProtoField.new("grid_spacing (uint16_t)", "mavlink_proto.TERRAIN_DATA_grid_spacing", ftypes.UINT16, nil)
f.TERRAIN_DATA_gridbit = ProtoField.new("gridbit (uint8_t)", "mavlink_proto.TERRAIN_DATA_gridbit", ftypes.UINT8, nil)
f.TERRAIN_DATA_data_0 = ProtoField.new("data[0] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_0", ftypes.INT16, nil)
f.TERRAIN_DATA_data_1 = ProtoField.new("data[1] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_1", ftypes.INT16, nil)
f.TERRAIN_DATA_data_2 = ProtoField.new("data[2] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_2", ftypes.INT16, nil)
f.TERRAIN_DATA_data_3 = ProtoField.new("data[3] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_3", ftypes.INT16, nil)
f.TERRAIN_DATA_data_4 = ProtoField.new("data[4] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_4", ftypes.INT16, nil)
f.TERRAIN_DATA_data_5 = ProtoField.new("data[5] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_5", ftypes.INT16, nil)
f.TERRAIN_DATA_data_6 = ProtoField.new("data[6] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_6", ftypes.INT16, nil)
f.TERRAIN_DATA_data_7 = ProtoField.new("data[7] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_7", ftypes.INT16, nil)
f.TERRAIN_DATA_data_8 = ProtoField.new("data[8] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_8", ftypes.INT16, nil)
f.TERRAIN_DATA_data_9 = ProtoField.new("data[9] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_9", ftypes.INT16, nil)
f.TERRAIN_DATA_data_10 = ProtoField.new("data[10] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_10", ftypes.INT16, nil)
f.TERRAIN_DATA_data_11 = ProtoField.new("data[11] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_11", ftypes.INT16, nil)
f.TERRAIN_DATA_data_12 = ProtoField.new("data[12] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_12", ftypes.INT16, nil)
f.TERRAIN_DATA_data_13 = ProtoField.new("data[13] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_13", ftypes.INT16, nil)
f.TERRAIN_DATA_data_14 = ProtoField.new("data[14] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_14", ftypes.INT16, nil)
f.TERRAIN_DATA_data_15 = ProtoField.new("data[15] (int16_t)", "mavlink_proto.TERRAIN_DATA_data_15", ftypes.INT16, nil)

f.TERRAIN_CHECK_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.TERRAIN_CHECK_lat", ftypes.INT32, nil)
f.TERRAIN_CHECK_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.TERRAIN_CHECK_lon", ftypes.INT32, nil)

f.TERRAIN_REPORT_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.TERRAIN_REPORT_lat", ftypes.INT32, nil)
f.TERRAIN_REPORT_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.TERRAIN_REPORT_lon", ftypes.INT32, nil)
f.TERRAIN_REPORT_spacing = ProtoField.new("spacing (uint16_t)", "mavlink_proto.TERRAIN_REPORT_spacing", ftypes.UINT16, nil)
f.TERRAIN_REPORT_terrain_height = ProtoField.new("terrain_height (float)", "mavlink_proto.TERRAIN_REPORT_terrain_height", ftypes.FLOAT, nil)
f.TERRAIN_REPORT_current_height = ProtoField.new("current_height (float)", "mavlink_proto.TERRAIN_REPORT_current_height", ftypes.FLOAT, nil)
f.TERRAIN_REPORT_pending = ProtoField.new("pending (uint16_t)", "mavlink_proto.TERRAIN_REPORT_pending", ftypes.UINT16, nil)
f.TERRAIN_REPORT_loaded = ProtoField.new("loaded (uint16_t)", "mavlink_proto.TERRAIN_REPORT_loaded", ftypes.UINT16, nil)

f.SCALED_PRESSURE2_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.SCALED_PRESSURE2_time_boot_ms", ftypes.UINT32, nil)
f.SCALED_PRESSURE2_press_abs = ProtoField.new("press_abs (float)", "mavlink_proto.SCALED_PRESSURE2_press_abs", ftypes.FLOAT, nil)
f.SCALED_PRESSURE2_press_diff = ProtoField.new("press_diff (float)", "mavlink_proto.SCALED_PRESSURE2_press_diff", ftypes.FLOAT, nil)
f.SCALED_PRESSURE2_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.SCALED_PRESSURE2_temperature", ftypes.INT16, nil)
f.SCALED_PRESSURE2_temperature_press_diff = ProtoField.new("temperature_press_diff (int16_t)", "mavlink_proto.SCALED_PRESSURE2_temperature_press_diff", ftypes.INT16, nil)

f.ATT_POS_MOCAP_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.ATT_POS_MOCAP_time_usec", ftypes.UINT64, nil)
f.ATT_POS_MOCAP_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.ATT_POS_MOCAP_q_0", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.ATT_POS_MOCAP_q_1", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.ATT_POS_MOCAP_q_2", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.ATT_POS_MOCAP_q_3", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_x = ProtoField.new("x (float)", "mavlink_proto.ATT_POS_MOCAP_x", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_y = ProtoField.new("y (float)", "mavlink_proto.ATT_POS_MOCAP_y", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_z = ProtoField.new("z (float)", "mavlink_proto.ATT_POS_MOCAP_z", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_0 = ProtoField.new("covariance[0] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_0", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_1 = ProtoField.new("covariance[1] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_1", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_2 = ProtoField.new("covariance[2] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_2", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_3 = ProtoField.new("covariance[3] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_3", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_4 = ProtoField.new("covariance[4] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_4", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_5 = ProtoField.new("covariance[5] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_5", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_6 = ProtoField.new("covariance[6] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_6", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_7 = ProtoField.new("covariance[7] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_7", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_8 = ProtoField.new("covariance[8] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_8", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_9 = ProtoField.new("covariance[9] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_9", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_10 = ProtoField.new("covariance[10] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_10", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_11 = ProtoField.new("covariance[11] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_11", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_12 = ProtoField.new("covariance[12] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_12", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_13 = ProtoField.new("covariance[13] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_13", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_14 = ProtoField.new("covariance[14] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_14", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_15 = ProtoField.new("covariance[15] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_15", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_16 = ProtoField.new("covariance[16] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_16", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_17 = ProtoField.new("covariance[17] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_17", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_18 = ProtoField.new("covariance[18] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_18", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_19 = ProtoField.new("covariance[19] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_19", ftypes.FLOAT, nil)
f.ATT_POS_MOCAP_covariance_20 = ProtoField.new("covariance[20] (float)", "mavlink_proto.ATT_POS_MOCAP_covariance_20", ftypes.FLOAT, nil)

f.SET_ACTUATOR_CONTROL_TARGET_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.SET_ACTUATOR_CONTROL_TARGET_time_usec", ftypes.UINT64, nil)
f.SET_ACTUATOR_CONTROL_TARGET_group_mlx = ProtoField.new("group_mlx (uint8_t)", "mavlink_proto.SET_ACTUATOR_CONTROL_TARGET_group_mlx", ftypes.UINT8, nil)
f.SET_ACTUATOR_CONTROL_TARGET_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.SET_ACTUATOR_CONTROL_TARGET_target_system", ftypes.UINT8, nil)
f.SET_ACTUATOR_CONTROL_TARGET_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.SET_ACTUATOR_CONTROL_TARGET_target_component", ftypes.UINT8, nil)
f.SET_ACTUATOR_CONTROL_TARGET_controls_0 = ProtoField.new("controls[0] (float)", "mavlink_proto.SET_ACTUATOR_CONTROL_TARGET_controls_0", ftypes.FLOAT, nil)
f.SET_ACTUATOR_CONTROL_TARGET_controls_1 = ProtoField.new("controls[1] (float)", "mavlink_proto.SET_ACTUATOR_CONTROL_TARGET_controls_1", ftypes.FLOAT, nil)
f.SET_ACTUATOR_CONTROL_TARGET_controls_2 = ProtoField.new("controls[2] (float)", "mavlink_proto.SET_ACTUATOR_CONTROL_TARGET_controls_2", ftypes.FLOAT, nil)
f.SET_ACTUATOR_CONTROL_TARGET_controls_3 = ProtoField.new("controls[3] (float)", "mavlink_proto.SET_ACTUATOR_CONTROL_TARGET_controls_3", ftypes.FLOAT, nil)
f.SET_ACTUATOR_CONTROL_TARGET_controls_4 = ProtoField.new("controls[4] (float)", "mavlink_proto.SET_ACTUATOR_CONTROL_TARGET_controls_4", ftypes.FLOAT, nil)
f.SET_ACTUATOR_CONTROL_TARGET_controls_5 = ProtoField.new("controls[5] (float)", "mavlink_proto.SET_ACTUATOR_CONTROL_TARGET_controls_5", ftypes.FLOAT, nil)
f.SET_ACTUATOR_CONTROL_TARGET_controls_6 = ProtoField.new("controls[6] (float)", "mavlink_proto.SET_ACTUATOR_CONTROL_TARGET_controls_6", ftypes.FLOAT, nil)
f.SET_ACTUATOR_CONTROL_TARGET_controls_7 = ProtoField.new("controls[7] (float)", "mavlink_proto.SET_ACTUATOR_CONTROL_TARGET_controls_7", ftypes.FLOAT, nil)

f.ACTUATOR_CONTROL_TARGET_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.ACTUATOR_CONTROL_TARGET_time_usec", ftypes.UINT64, nil)
f.ACTUATOR_CONTROL_TARGET_group_mlx = ProtoField.new("group_mlx (uint8_t)", "mavlink_proto.ACTUATOR_CONTROL_TARGET_group_mlx", ftypes.UINT8, nil)
f.ACTUATOR_CONTROL_TARGET_controls_0 = ProtoField.new("controls[0] (float)", "mavlink_proto.ACTUATOR_CONTROL_TARGET_controls_0", ftypes.FLOAT, nil)
f.ACTUATOR_CONTROL_TARGET_controls_1 = ProtoField.new("controls[1] (float)", "mavlink_proto.ACTUATOR_CONTROL_TARGET_controls_1", ftypes.FLOAT, nil)
f.ACTUATOR_CONTROL_TARGET_controls_2 = ProtoField.new("controls[2] (float)", "mavlink_proto.ACTUATOR_CONTROL_TARGET_controls_2", ftypes.FLOAT, nil)
f.ACTUATOR_CONTROL_TARGET_controls_3 = ProtoField.new("controls[3] (float)", "mavlink_proto.ACTUATOR_CONTROL_TARGET_controls_3", ftypes.FLOAT, nil)
f.ACTUATOR_CONTROL_TARGET_controls_4 = ProtoField.new("controls[4] (float)", "mavlink_proto.ACTUATOR_CONTROL_TARGET_controls_4", ftypes.FLOAT, nil)
f.ACTUATOR_CONTROL_TARGET_controls_5 = ProtoField.new("controls[5] (float)", "mavlink_proto.ACTUATOR_CONTROL_TARGET_controls_5", ftypes.FLOAT, nil)
f.ACTUATOR_CONTROL_TARGET_controls_6 = ProtoField.new("controls[6] (float)", "mavlink_proto.ACTUATOR_CONTROL_TARGET_controls_6", ftypes.FLOAT, nil)
f.ACTUATOR_CONTROL_TARGET_controls_7 = ProtoField.new("controls[7] (float)", "mavlink_proto.ACTUATOR_CONTROL_TARGET_controls_7", ftypes.FLOAT, nil)

f.ALTITUDE_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.ALTITUDE_time_usec", ftypes.UINT64, nil)
f.ALTITUDE_altitude_monotonic = ProtoField.new("altitude_monotonic (float)", "mavlink_proto.ALTITUDE_altitude_monotonic", ftypes.FLOAT, nil)
f.ALTITUDE_altitude_amsl = ProtoField.new("altitude_amsl (float)", "mavlink_proto.ALTITUDE_altitude_amsl", ftypes.FLOAT, nil)
f.ALTITUDE_altitude_local = ProtoField.new("altitude_local (float)", "mavlink_proto.ALTITUDE_altitude_local", ftypes.FLOAT, nil)
f.ALTITUDE_altitude_relative = ProtoField.new("altitude_relative (float)", "mavlink_proto.ALTITUDE_altitude_relative", ftypes.FLOAT, nil)
f.ALTITUDE_altitude_terrain = ProtoField.new("altitude_terrain (float)", "mavlink_proto.ALTITUDE_altitude_terrain", ftypes.FLOAT, nil)
f.ALTITUDE_bottom_clearance = ProtoField.new("bottom_clearance (float)", "mavlink_proto.ALTITUDE_bottom_clearance", ftypes.FLOAT, nil)

f.RESOURCE_REQUEST_request_id = ProtoField.new("request_id (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_request_id", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_type = ProtoField.new("uri_type (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_type", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_0 = ProtoField.new("uri[0] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_0", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_1 = ProtoField.new("uri[1] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_1", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_2 = ProtoField.new("uri[2] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_2", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_3 = ProtoField.new("uri[3] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_3", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_4 = ProtoField.new("uri[4] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_4", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_5 = ProtoField.new("uri[5] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_5", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_6 = ProtoField.new("uri[6] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_6", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_7 = ProtoField.new("uri[7] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_7", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_8 = ProtoField.new("uri[8] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_8", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_9 = ProtoField.new("uri[9] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_9", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_10 = ProtoField.new("uri[10] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_10", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_11 = ProtoField.new("uri[11] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_11", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_12 = ProtoField.new("uri[12] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_12", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_13 = ProtoField.new("uri[13] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_13", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_14 = ProtoField.new("uri[14] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_14", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_15 = ProtoField.new("uri[15] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_15", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_16 = ProtoField.new("uri[16] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_16", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_17 = ProtoField.new("uri[17] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_17", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_18 = ProtoField.new("uri[18] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_18", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_19 = ProtoField.new("uri[19] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_19", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_20 = ProtoField.new("uri[20] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_20", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_21 = ProtoField.new("uri[21] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_21", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_22 = ProtoField.new("uri[22] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_22", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_23 = ProtoField.new("uri[23] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_23", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_24 = ProtoField.new("uri[24] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_24", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_25 = ProtoField.new("uri[25] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_25", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_26 = ProtoField.new("uri[26] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_26", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_27 = ProtoField.new("uri[27] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_27", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_28 = ProtoField.new("uri[28] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_28", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_29 = ProtoField.new("uri[29] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_29", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_30 = ProtoField.new("uri[30] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_30", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_31 = ProtoField.new("uri[31] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_31", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_32 = ProtoField.new("uri[32] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_32", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_33 = ProtoField.new("uri[33] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_33", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_34 = ProtoField.new("uri[34] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_34", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_35 = ProtoField.new("uri[35] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_35", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_36 = ProtoField.new("uri[36] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_36", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_37 = ProtoField.new("uri[37] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_37", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_38 = ProtoField.new("uri[38] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_38", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_39 = ProtoField.new("uri[39] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_39", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_40 = ProtoField.new("uri[40] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_40", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_41 = ProtoField.new("uri[41] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_41", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_42 = ProtoField.new("uri[42] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_42", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_43 = ProtoField.new("uri[43] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_43", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_44 = ProtoField.new("uri[44] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_44", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_45 = ProtoField.new("uri[45] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_45", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_46 = ProtoField.new("uri[46] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_46", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_47 = ProtoField.new("uri[47] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_47", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_48 = ProtoField.new("uri[48] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_48", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_49 = ProtoField.new("uri[49] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_49", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_50 = ProtoField.new("uri[50] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_50", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_51 = ProtoField.new("uri[51] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_51", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_52 = ProtoField.new("uri[52] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_52", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_53 = ProtoField.new("uri[53] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_53", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_54 = ProtoField.new("uri[54] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_54", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_55 = ProtoField.new("uri[55] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_55", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_56 = ProtoField.new("uri[56] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_56", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_57 = ProtoField.new("uri[57] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_57", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_58 = ProtoField.new("uri[58] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_58", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_59 = ProtoField.new("uri[59] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_59", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_60 = ProtoField.new("uri[60] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_60", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_61 = ProtoField.new("uri[61] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_61", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_62 = ProtoField.new("uri[62] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_62", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_63 = ProtoField.new("uri[63] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_63", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_64 = ProtoField.new("uri[64] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_64", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_65 = ProtoField.new("uri[65] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_65", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_66 = ProtoField.new("uri[66] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_66", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_67 = ProtoField.new("uri[67] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_67", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_68 = ProtoField.new("uri[68] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_68", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_69 = ProtoField.new("uri[69] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_69", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_70 = ProtoField.new("uri[70] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_70", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_71 = ProtoField.new("uri[71] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_71", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_72 = ProtoField.new("uri[72] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_72", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_73 = ProtoField.new("uri[73] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_73", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_74 = ProtoField.new("uri[74] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_74", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_75 = ProtoField.new("uri[75] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_75", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_76 = ProtoField.new("uri[76] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_76", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_77 = ProtoField.new("uri[77] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_77", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_78 = ProtoField.new("uri[78] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_78", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_79 = ProtoField.new("uri[79] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_79", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_80 = ProtoField.new("uri[80] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_80", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_81 = ProtoField.new("uri[81] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_81", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_82 = ProtoField.new("uri[82] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_82", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_83 = ProtoField.new("uri[83] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_83", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_84 = ProtoField.new("uri[84] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_84", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_85 = ProtoField.new("uri[85] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_85", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_86 = ProtoField.new("uri[86] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_86", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_87 = ProtoField.new("uri[87] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_87", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_88 = ProtoField.new("uri[88] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_88", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_89 = ProtoField.new("uri[89] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_89", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_90 = ProtoField.new("uri[90] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_90", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_91 = ProtoField.new("uri[91] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_91", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_92 = ProtoField.new("uri[92] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_92", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_93 = ProtoField.new("uri[93] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_93", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_94 = ProtoField.new("uri[94] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_94", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_95 = ProtoField.new("uri[95] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_95", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_96 = ProtoField.new("uri[96] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_96", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_97 = ProtoField.new("uri[97] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_97", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_98 = ProtoField.new("uri[98] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_98", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_99 = ProtoField.new("uri[99] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_99", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_100 = ProtoField.new("uri[100] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_100", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_101 = ProtoField.new("uri[101] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_101", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_102 = ProtoField.new("uri[102] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_102", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_103 = ProtoField.new("uri[103] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_103", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_104 = ProtoField.new("uri[104] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_104", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_105 = ProtoField.new("uri[105] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_105", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_106 = ProtoField.new("uri[106] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_106", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_107 = ProtoField.new("uri[107] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_107", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_108 = ProtoField.new("uri[108] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_108", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_109 = ProtoField.new("uri[109] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_109", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_110 = ProtoField.new("uri[110] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_110", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_111 = ProtoField.new("uri[111] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_111", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_112 = ProtoField.new("uri[112] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_112", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_113 = ProtoField.new("uri[113] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_113", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_114 = ProtoField.new("uri[114] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_114", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_115 = ProtoField.new("uri[115] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_115", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_116 = ProtoField.new("uri[116] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_116", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_117 = ProtoField.new("uri[117] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_117", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_118 = ProtoField.new("uri[118] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_118", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_uri_119 = ProtoField.new("uri[119] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_uri_119", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_transfer_type = ProtoField.new("transfer_type (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_transfer_type", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_0 = ProtoField.new("storage[0] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_0", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_1 = ProtoField.new("storage[1] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_1", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_2 = ProtoField.new("storage[2] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_2", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_3 = ProtoField.new("storage[3] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_3", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_4 = ProtoField.new("storage[4] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_4", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_5 = ProtoField.new("storage[5] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_5", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_6 = ProtoField.new("storage[6] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_6", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_7 = ProtoField.new("storage[7] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_7", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_8 = ProtoField.new("storage[8] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_8", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_9 = ProtoField.new("storage[9] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_9", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_10 = ProtoField.new("storage[10] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_10", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_11 = ProtoField.new("storage[11] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_11", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_12 = ProtoField.new("storage[12] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_12", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_13 = ProtoField.new("storage[13] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_13", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_14 = ProtoField.new("storage[14] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_14", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_15 = ProtoField.new("storage[15] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_15", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_16 = ProtoField.new("storage[16] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_16", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_17 = ProtoField.new("storage[17] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_17", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_18 = ProtoField.new("storage[18] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_18", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_19 = ProtoField.new("storage[19] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_19", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_20 = ProtoField.new("storage[20] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_20", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_21 = ProtoField.new("storage[21] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_21", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_22 = ProtoField.new("storage[22] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_22", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_23 = ProtoField.new("storage[23] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_23", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_24 = ProtoField.new("storage[24] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_24", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_25 = ProtoField.new("storage[25] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_25", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_26 = ProtoField.new("storage[26] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_26", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_27 = ProtoField.new("storage[27] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_27", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_28 = ProtoField.new("storage[28] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_28", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_29 = ProtoField.new("storage[29] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_29", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_30 = ProtoField.new("storage[30] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_30", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_31 = ProtoField.new("storage[31] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_31", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_32 = ProtoField.new("storage[32] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_32", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_33 = ProtoField.new("storage[33] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_33", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_34 = ProtoField.new("storage[34] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_34", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_35 = ProtoField.new("storage[35] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_35", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_36 = ProtoField.new("storage[36] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_36", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_37 = ProtoField.new("storage[37] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_37", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_38 = ProtoField.new("storage[38] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_38", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_39 = ProtoField.new("storage[39] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_39", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_40 = ProtoField.new("storage[40] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_40", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_41 = ProtoField.new("storage[41] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_41", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_42 = ProtoField.new("storage[42] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_42", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_43 = ProtoField.new("storage[43] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_43", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_44 = ProtoField.new("storage[44] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_44", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_45 = ProtoField.new("storage[45] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_45", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_46 = ProtoField.new("storage[46] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_46", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_47 = ProtoField.new("storage[47] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_47", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_48 = ProtoField.new("storage[48] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_48", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_49 = ProtoField.new("storage[49] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_49", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_50 = ProtoField.new("storage[50] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_50", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_51 = ProtoField.new("storage[51] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_51", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_52 = ProtoField.new("storage[52] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_52", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_53 = ProtoField.new("storage[53] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_53", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_54 = ProtoField.new("storage[54] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_54", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_55 = ProtoField.new("storage[55] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_55", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_56 = ProtoField.new("storage[56] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_56", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_57 = ProtoField.new("storage[57] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_57", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_58 = ProtoField.new("storage[58] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_58", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_59 = ProtoField.new("storage[59] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_59", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_60 = ProtoField.new("storage[60] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_60", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_61 = ProtoField.new("storage[61] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_61", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_62 = ProtoField.new("storage[62] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_62", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_63 = ProtoField.new("storage[63] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_63", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_64 = ProtoField.new("storage[64] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_64", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_65 = ProtoField.new("storage[65] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_65", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_66 = ProtoField.new("storage[66] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_66", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_67 = ProtoField.new("storage[67] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_67", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_68 = ProtoField.new("storage[68] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_68", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_69 = ProtoField.new("storage[69] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_69", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_70 = ProtoField.new("storage[70] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_70", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_71 = ProtoField.new("storage[71] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_71", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_72 = ProtoField.new("storage[72] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_72", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_73 = ProtoField.new("storage[73] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_73", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_74 = ProtoField.new("storage[74] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_74", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_75 = ProtoField.new("storage[75] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_75", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_76 = ProtoField.new("storage[76] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_76", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_77 = ProtoField.new("storage[77] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_77", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_78 = ProtoField.new("storage[78] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_78", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_79 = ProtoField.new("storage[79] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_79", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_80 = ProtoField.new("storage[80] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_80", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_81 = ProtoField.new("storage[81] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_81", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_82 = ProtoField.new("storage[82] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_82", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_83 = ProtoField.new("storage[83] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_83", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_84 = ProtoField.new("storage[84] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_84", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_85 = ProtoField.new("storage[85] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_85", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_86 = ProtoField.new("storage[86] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_86", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_87 = ProtoField.new("storage[87] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_87", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_88 = ProtoField.new("storage[88] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_88", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_89 = ProtoField.new("storage[89] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_89", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_90 = ProtoField.new("storage[90] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_90", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_91 = ProtoField.new("storage[91] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_91", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_92 = ProtoField.new("storage[92] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_92", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_93 = ProtoField.new("storage[93] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_93", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_94 = ProtoField.new("storage[94] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_94", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_95 = ProtoField.new("storage[95] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_95", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_96 = ProtoField.new("storage[96] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_96", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_97 = ProtoField.new("storage[97] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_97", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_98 = ProtoField.new("storage[98] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_98", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_99 = ProtoField.new("storage[99] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_99", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_100 = ProtoField.new("storage[100] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_100", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_101 = ProtoField.new("storage[101] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_101", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_102 = ProtoField.new("storage[102] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_102", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_103 = ProtoField.new("storage[103] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_103", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_104 = ProtoField.new("storage[104] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_104", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_105 = ProtoField.new("storage[105] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_105", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_106 = ProtoField.new("storage[106] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_106", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_107 = ProtoField.new("storage[107] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_107", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_108 = ProtoField.new("storage[108] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_108", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_109 = ProtoField.new("storage[109] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_109", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_110 = ProtoField.new("storage[110] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_110", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_111 = ProtoField.new("storage[111] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_111", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_112 = ProtoField.new("storage[112] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_112", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_113 = ProtoField.new("storage[113] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_113", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_114 = ProtoField.new("storage[114] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_114", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_115 = ProtoField.new("storage[115] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_115", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_116 = ProtoField.new("storage[116] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_116", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_117 = ProtoField.new("storage[117] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_117", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_118 = ProtoField.new("storage[118] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_118", ftypes.UINT8, nil)
f.RESOURCE_REQUEST_storage_119 = ProtoField.new("storage[119] (uint8_t)", "mavlink_proto.RESOURCE_REQUEST_storage_119", ftypes.UINT8, nil)

f.SCALED_PRESSURE3_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.SCALED_PRESSURE3_time_boot_ms", ftypes.UINT32, nil)
f.SCALED_PRESSURE3_press_abs = ProtoField.new("press_abs (float)", "mavlink_proto.SCALED_PRESSURE3_press_abs", ftypes.FLOAT, nil)
f.SCALED_PRESSURE3_press_diff = ProtoField.new("press_diff (float)", "mavlink_proto.SCALED_PRESSURE3_press_diff", ftypes.FLOAT, nil)
f.SCALED_PRESSURE3_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.SCALED_PRESSURE3_temperature", ftypes.INT16, nil)
f.SCALED_PRESSURE3_temperature_press_diff = ProtoField.new("temperature_press_diff (int16_t)", "mavlink_proto.SCALED_PRESSURE3_temperature_press_diff", ftypes.INT16, nil)

f.FOLLOW_TARGET_timestamp = ProtoField.new("timestamp (uint64_t)", "mavlink_proto.FOLLOW_TARGET_timestamp", ftypes.UINT64, nil)
f.FOLLOW_TARGET_est_capabilities = ProtoField.new("est_capabilities (uint8_t)", "mavlink_proto.FOLLOW_TARGET_est_capabilities", ftypes.UINT8, nil)
f.FOLLOW_TARGET_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.FOLLOW_TARGET_lat", ftypes.INT32, nil)
f.FOLLOW_TARGET_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.FOLLOW_TARGET_lon", ftypes.INT32, nil)
f.FOLLOW_TARGET_alt = ProtoField.new("alt (float)", "mavlink_proto.FOLLOW_TARGET_alt", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_vel_0 = ProtoField.new("vel[0] (float)", "mavlink_proto.FOLLOW_TARGET_vel_0", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_vel_1 = ProtoField.new("vel[1] (float)", "mavlink_proto.FOLLOW_TARGET_vel_1", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_vel_2 = ProtoField.new("vel[2] (float)", "mavlink_proto.FOLLOW_TARGET_vel_2", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_acc_0 = ProtoField.new("acc[0] (float)", "mavlink_proto.FOLLOW_TARGET_acc_0", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_acc_1 = ProtoField.new("acc[1] (float)", "mavlink_proto.FOLLOW_TARGET_acc_1", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_acc_2 = ProtoField.new("acc[2] (float)", "mavlink_proto.FOLLOW_TARGET_acc_2", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_attitude_q_0 = ProtoField.new("attitude_q[0] (float)", "mavlink_proto.FOLLOW_TARGET_attitude_q_0", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_attitude_q_1 = ProtoField.new("attitude_q[1] (float)", "mavlink_proto.FOLLOW_TARGET_attitude_q_1", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_attitude_q_2 = ProtoField.new("attitude_q[2] (float)", "mavlink_proto.FOLLOW_TARGET_attitude_q_2", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_attitude_q_3 = ProtoField.new("attitude_q[3] (float)", "mavlink_proto.FOLLOW_TARGET_attitude_q_3", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_rates_0 = ProtoField.new("rates[0] (float)", "mavlink_proto.FOLLOW_TARGET_rates_0", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_rates_1 = ProtoField.new("rates[1] (float)", "mavlink_proto.FOLLOW_TARGET_rates_1", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_rates_2 = ProtoField.new("rates[2] (float)", "mavlink_proto.FOLLOW_TARGET_rates_2", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_position_cov_0 = ProtoField.new("position_cov[0] (float)", "mavlink_proto.FOLLOW_TARGET_position_cov_0", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_position_cov_1 = ProtoField.new("position_cov[1] (float)", "mavlink_proto.FOLLOW_TARGET_position_cov_1", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_position_cov_2 = ProtoField.new("position_cov[2] (float)", "mavlink_proto.FOLLOW_TARGET_position_cov_2", ftypes.FLOAT, nil)
f.FOLLOW_TARGET_custom_state = ProtoField.new("custom_state (uint64_t)", "mavlink_proto.FOLLOW_TARGET_custom_state", ftypes.UINT64, nil)

f.CONTROL_SYSTEM_STATE_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.CONTROL_SYSTEM_STATE_time_usec", ftypes.UINT64, nil)
f.CONTROL_SYSTEM_STATE_x_acc = ProtoField.new("x_acc (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_x_acc", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_y_acc = ProtoField.new("y_acc (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_y_acc", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_z_acc = ProtoField.new("z_acc (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_z_acc", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_x_vel = ProtoField.new("x_vel (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_x_vel", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_y_vel = ProtoField.new("y_vel (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_y_vel", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_z_vel = ProtoField.new("z_vel (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_z_vel", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_x_pos = ProtoField.new("x_pos (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_x_pos", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_y_pos = ProtoField.new("y_pos (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_y_pos", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_z_pos = ProtoField.new("z_pos (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_z_pos", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_airspeed = ProtoField.new("airspeed (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_airspeed", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_vel_variance_0 = ProtoField.new("vel_variance[0] (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_vel_variance_0", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_vel_variance_1 = ProtoField.new("vel_variance[1] (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_vel_variance_1", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_vel_variance_2 = ProtoField.new("vel_variance[2] (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_vel_variance_2", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_pos_variance_0 = ProtoField.new("pos_variance[0] (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_pos_variance_0", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_pos_variance_1 = ProtoField.new("pos_variance[1] (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_pos_variance_1", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_pos_variance_2 = ProtoField.new("pos_variance[2] (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_pos_variance_2", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_q_0", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_q_1", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_q_2", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_q_3", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_roll_rate = ProtoField.new("roll_rate (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_roll_rate", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_pitch_rate = ProtoField.new("pitch_rate (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_pitch_rate", ftypes.FLOAT, nil)
f.CONTROL_SYSTEM_STATE_yaw_rate = ProtoField.new("yaw_rate (float)", "mavlink_proto.CONTROL_SYSTEM_STATE_yaw_rate", ftypes.FLOAT, nil)

f.BATTERY_STATUS_id = ProtoField.new("id (uint8_t)", "mavlink_proto.BATTERY_STATUS_id", ftypes.UINT8, nil)
f.BATTERY_STATUS_battery_function = ProtoField.new("battery_function (MAV_BATTERY_FUNCTION)", "mavlink_proto.BATTERY_STATUS_battery_function", ftypes.UINT8, enumEntryName.MAV_BATTERY_FUNCTION)
f.BATTERY_STATUS_type = ProtoField.new("type (MAV_BATTERY_TYPE)", "mavlink_proto.BATTERY_STATUS_type", ftypes.UINT8, enumEntryName.MAV_BATTERY_TYPE)
f.BATTERY_STATUS_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.BATTERY_STATUS_temperature", ftypes.INT16, nil)
f.BATTERY_STATUS_voltages_0 = ProtoField.new("voltages[0] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_0", ftypes.UINT16, nil)
f.BATTERY_STATUS_voltages_1 = ProtoField.new("voltages[1] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_1", ftypes.UINT16, nil)
f.BATTERY_STATUS_voltages_2 = ProtoField.new("voltages[2] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_2", ftypes.UINT16, nil)
f.BATTERY_STATUS_voltages_3 = ProtoField.new("voltages[3] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_3", ftypes.UINT16, nil)
f.BATTERY_STATUS_voltages_4 = ProtoField.new("voltages[4] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_4", ftypes.UINT16, nil)
f.BATTERY_STATUS_voltages_5 = ProtoField.new("voltages[5] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_5", ftypes.UINT16, nil)
f.BATTERY_STATUS_voltages_6 = ProtoField.new("voltages[6] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_6", ftypes.UINT16, nil)
f.BATTERY_STATUS_voltages_7 = ProtoField.new("voltages[7] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_7", ftypes.UINT16, nil)
f.BATTERY_STATUS_voltages_8 = ProtoField.new("voltages[8] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_8", ftypes.UINT16, nil)
f.BATTERY_STATUS_voltages_9 = ProtoField.new("voltages[9] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_9", ftypes.UINT16, nil)
f.BATTERY_STATUS_current_battery = ProtoField.new("current_battery (int16_t)", "mavlink_proto.BATTERY_STATUS_current_battery", ftypes.INT16, nil)
f.BATTERY_STATUS_current_consumed = ProtoField.new("current_consumed (int32_t)", "mavlink_proto.BATTERY_STATUS_current_consumed", ftypes.INT32, nil)
f.BATTERY_STATUS_energy_consumed = ProtoField.new("energy_consumed (int32_t)", "mavlink_proto.BATTERY_STATUS_energy_consumed", ftypes.INT32, nil)
f.BATTERY_STATUS_battery_remaining = ProtoField.new("battery_remaining (int8_t)", "mavlink_proto.BATTERY_STATUS_battery_remaining", ftypes.INT8, nil)
f.BATTERY_STATUS_time_remaining = ProtoField.new("time_remaining (int32_t)", "mavlink_proto.BATTERY_STATUS_time_remaining", ftypes.INT32, nil)
f.BATTERY_STATUS_charge_state = ProtoField.new("charge_state (MAV_BATTERY_CHARGE_STATE)", "mavlink_proto.BATTERY_STATUS_charge_state", ftypes.UINT8, enumEntryName.MAV_BATTERY_CHARGE_STATE)
f.BATTERY_STATUS_voltages_ext_0 = ProtoField.new("voltages_ext[0] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_ext_0", ftypes.UINT16, nil)
f.BATTERY_STATUS_voltages_ext_1 = ProtoField.new("voltages_ext[1] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_ext_1", ftypes.UINT16, nil)
f.BATTERY_STATUS_voltages_ext_2 = ProtoField.new("voltages_ext[2] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_ext_2", ftypes.UINT16, nil)
f.BATTERY_STATUS_voltages_ext_3 = ProtoField.new("voltages_ext[3] (uint16_t)", "mavlink_proto.BATTERY_STATUS_voltages_ext_3", ftypes.UINT16, nil)
f.BATTERY_STATUS_mode = ProtoField.new("mode (MAV_BATTERY_MODE)", "mavlink_proto.BATTERY_STATUS_mode", ftypes.UINT8, enumEntryName.MAV_BATTERY_MODE)
f.BATTERY_STATUS_fault_bitmask = ProtoField.new("fault_bitmask (MAV_BATTERY_FAULT)", "mavlink_proto.BATTERY_STATUS_fault_bitmask", ftypes.UINT32, nil)
f.BATTERY_STATUS_fault_bitmask_flagMAV_BATTERY_FAULT_DEEP_DISCHARGE = ProtoField.bool("mavlink_proto.BATTERY_STATUS_fault_bitmask.MAV_BATTERY_FAULT_DEEP_DISCHARGE", "MAV_BATTERY_FAULT_DEEP_DISCHARGE", 9, nil, 1)
f.BATTERY_STATUS_fault_bitmask_flagMAV_BATTERY_FAULT_SPIKES = ProtoField.bool("mavlink_proto.BATTERY_STATUS_fault_bitmask.MAV_BATTERY_FAULT_SPIKES", "MAV_BATTERY_FAULT_SPIKES", 9, nil, 2)
f.BATTERY_STATUS_fault_bitmask_flagMAV_BATTERY_FAULT_CELL_FAIL = ProtoField.bool("mavlink_proto.BATTERY_STATUS_fault_bitmask.MAV_BATTERY_FAULT_CELL_FAIL", "MAV_BATTERY_FAULT_CELL_FAIL", 9, nil, 4)
f.BATTERY_STATUS_fault_bitmask_flagMAV_BATTERY_FAULT_OVER_CURRENT = ProtoField.bool("mavlink_proto.BATTERY_STATUS_fault_bitmask.MAV_BATTERY_FAULT_OVER_CURRENT", "MAV_BATTERY_FAULT_OVER_CURRENT", 9, nil, 8)
f.BATTERY_STATUS_fault_bitmask_flagMAV_BATTERY_FAULT_OVER_TEMPERATURE = ProtoField.bool("mavlink_proto.BATTERY_STATUS_fault_bitmask.MAV_BATTERY_FAULT_OVER_TEMPERATURE", "MAV_BATTERY_FAULT_OVER_TEMPERATURE", 9, nil, 16)
f.BATTERY_STATUS_fault_bitmask_flagMAV_BATTERY_FAULT_UNDER_TEMPERATURE = ProtoField.bool("mavlink_proto.BATTERY_STATUS_fault_bitmask.MAV_BATTERY_FAULT_UNDER_TEMPERATURE", "MAV_BATTERY_FAULT_UNDER_TEMPERATURE", 9, nil, 32)
f.BATTERY_STATUS_fault_bitmask_flagMAV_BATTERY_FAULT_INCOMPATIBLE_VOLTAGE = ProtoField.bool("mavlink_proto.BATTERY_STATUS_fault_bitmask.MAV_BATTERY_FAULT_INCOMPATIBLE_VOLTAGE", "MAV_BATTERY_FAULT_INCOMPATIBLE_VOLTAGE", 9, nil, 64)
f.BATTERY_STATUS_fault_bitmask_flagMAV_BATTERY_FAULT_INCOMPATIBLE_FIRMWARE = ProtoField.bool("mavlink_proto.BATTERY_STATUS_fault_bitmask.MAV_BATTERY_FAULT_INCOMPATIBLE_FIRMWARE", "MAV_BATTERY_FAULT_INCOMPATIBLE_FIRMWARE", 9, nil, 128)
f.BATTERY_STATUS_fault_bitmask_flagBATTERY_FAULT_INCOMPATIBLE_CELLS_CONFIGURATION = ProtoField.bool("mavlink_proto.BATTERY_STATUS_fault_bitmask.BATTERY_FAULT_INCOMPATIBLE_CELLS_CONFIGURATION", "BATTERY_FAULT_INCOMPATIBLE_CELLS_CONFIGURATION", 9, nil, 256)

f.AUTOPILOT_VERSION_capabilities = ProtoField.new("capabilities (MAV_PROTOCOL_CAPABILITY)", "mavlink_proto.AUTOPILOT_VERSION_capabilities", ftypes.UINT64, nil)
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_MISSION_FLOAT = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT", "MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT", 17, nil, 1)
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_PARAM_FLOAT = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT", "MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT", 17, nil, 2)
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_MISSION_INT = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_MISSION_INT", "MAV_PROTOCOL_CAPABILITY_MISSION_INT", 17, nil, 4)
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_COMMAND_INT = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_COMMAND_INT", "MAV_PROTOCOL_CAPABILITY_COMMAND_INT", 17, nil, 8)
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_PARAM_UNION = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_PARAM_UNION", "MAV_PROTOCOL_CAPABILITY_PARAM_UNION", 17, nil, 16)
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_FTP = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_FTP", "MAV_PROTOCOL_CAPABILITY_FTP", 17, nil, 32)
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET", "MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET", 17, nil, 64)
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED", "MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED", 17, nil, 128)
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT", "MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT", 17, nil, 256)
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_TERRAIN = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_TERRAIN", "MAV_PROTOCOL_CAPABILITY_TERRAIN", 17, nil, 512)
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET", "MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET", 17, nil, 1024)
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION", "MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION", 17, nil, 2048)
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION", "MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION", 17, nil, 4096)
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_MAVLINK2 = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_MAVLINK2", "MAV_PROTOCOL_CAPABILITY_MAVLINK2", 17, nil, 8192)
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_MISSION_FENCE = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_MISSION_FENCE", "MAV_PROTOCOL_CAPABILITY_MISSION_FENCE", 17, nil, 16384)
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_MISSION_RALLY = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_MISSION_RALLY", "MAV_PROTOCOL_CAPABILITY_MISSION_RALLY", 17, nil, 32768)
f.AUTOPILOT_VERSION_capabilities_flagMAV_PROTOCOL_CAPABILITY_FLIGHT_INFORMATION = ProtoField.bool("mavlink_proto.AUTOPILOT_VERSION_capabilities.MAV_PROTOCOL_CAPABILITY_FLIGHT_INFORMATION", "MAV_PROTOCOL_CAPABILITY_FLIGHT_INFORMATION", 17, nil, 65536)
f.AUTOPILOT_VERSION_flight_sw_version = ProtoField.new("flight_sw_version (uint32_t)", "mavlink_proto.AUTOPILOT_VERSION_flight_sw_version", ftypes.UINT32, nil)
f.AUTOPILOT_VERSION_middleware_sw_version = ProtoField.new("middleware_sw_version (uint32_t)", "mavlink_proto.AUTOPILOT_VERSION_middleware_sw_version", ftypes.UINT32, nil)
f.AUTOPILOT_VERSION_os_sw_version = ProtoField.new("os_sw_version (uint32_t)", "mavlink_proto.AUTOPILOT_VERSION_os_sw_version", ftypes.UINT32, nil)
f.AUTOPILOT_VERSION_board_version = ProtoField.new("board_version (uint32_t)", "mavlink_proto.AUTOPILOT_VERSION_board_version", ftypes.UINT32, nil)
f.AUTOPILOT_VERSION_flight_custom_version_0 = ProtoField.new("flight_custom_version[0] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_flight_custom_version_0", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_flight_custom_version_1 = ProtoField.new("flight_custom_version[1] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_flight_custom_version_1", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_flight_custom_version_2 = ProtoField.new("flight_custom_version[2] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_flight_custom_version_2", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_flight_custom_version_3 = ProtoField.new("flight_custom_version[3] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_flight_custom_version_3", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_flight_custom_version_4 = ProtoField.new("flight_custom_version[4] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_flight_custom_version_4", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_flight_custom_version_5 = ProtoField.new("flight_custom_version[5] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_flight_custom_version_5", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_flight_custom_version_6 = ProtoField.new("flight_custom_version[6] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_flight_custom_version_6", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_flight_custom_version_7 = ProtoField.new("flight_custom_version[7] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_flight_custom_version_7", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_middleware_custom_version_0 = ProtoField.new("middleware_custom_version[0] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_middleware_custom_version_0", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_middleware_custom_version_1 = ProtoField.new("middleware_custom_version[1] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_middleware_custom_version_1", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_middleware_custom_version_2 = ProtoField.new("middleware_custom_version[2] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_middleware_custom_version_2", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_middleware_custom_version_3 = ProtoField.new("middleware_custom_version[3] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_middleware_custom_version_3", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_middleware_custom_version_4 = ProtoField.new("middleware_custom_version[4] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_middleware_custom_version_4", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_middleware_custom_version_5 = ProtoField.new("middleware_custom_version[5] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_middleware_custom_version_5", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_middleware_custom_version_6 = ProtoField.new("middleware_custom_version[6] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_middleware_custom_version_6", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_middleware_custom_version_7 = ProtoField.new("middleware_custom_version[7] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_middleware_custom_version_7", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_os_custom_version_0 = ProtoField.new("os_custom_version[0] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_os_custom_version_0", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_os_custom_version_1 = ProtoField.new("os_custom_version[1] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_os_custom_version_1", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_os_custom_version_2 = ProtoField.new("os_custom_version[2] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_os_custom_version_2", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_os_custom_version_3 = ProtoField.new("os_custom_version[3] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_os_custom_version_3", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_os_custom_version_4 = ProtoField.new("os_custom_version[4] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_os_custom_version_4", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_os_custom_version_5 = ProtoField.new("os_custom_version[5] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_os_custom_version_5", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_os_custom_version_6 = ProtoField.new("os_custom_version[6] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_os_custom_version_6", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_os_custom_version_7 = ProtoField.new("os_custom_version[7] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_os_custom_version_7", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_vendor_id = ProtoField.new("vendor_id (uint16_t)", "mavlink_proto.AUTOPILOT_VERSION_vendor_id", ftypes.UINT16, nil)
f.AUTOPILOT_VERSION_product_id = ProtoField.new("product_id (uint16_t)", "mavlink_proto.AUTOPILOT_VERSION_product_id", ftypes.UINT16, nil)
f.AUTOPILOT_VERSION_uid = ProtoField.new("uid (uint64_t)", "mavlink_proto.AUTOPILOT_VERSION_uid", ftypes.UINT64, nil)
f.AUTOPILOT_VERSION_uid2_0 = ProtoField.new("uid2[0] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_0", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_1 = ProtoField.new("uid2[1] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_1", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_2 = ProtoField.new("uid2[2] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_2", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_3 = ProtoField.new("uid2[3] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_3", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_4 = ProtoField.new("uid2[4] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_4", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_5 = ProtoField.new("uid2[5] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_5", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_6 = ProtoField.new("uid2[6] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_6", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_7 = ProtoField.new("uid2[7] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_7", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_8 = ProtoField.new("uid2[8] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_8", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_9 = ProtoField.new("uid2[9] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_9", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_10 = ProtoField.new("uid2[10] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_10", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_11 = ProtoField.new("uid2[11] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_11", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_12 = ProtoField.new("uid2[12] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_12", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_13 = ProtoField.new("uid2[13] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_13", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_14 = ProtoField.new("uid2[14] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_14", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_15 = ProtoField.new("uid2[15] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_15", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_16 = ProtoField.new("uid2[16] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_16", ftypes.UINT8, nil)
f.AUTOPILOT_VERSION_uid2_17 = ProtoField.new("uid2[17] (uint8_t)", "mavlink_proto.AUTOPILOT_VERSION_uid2_17", ftypes.UINT8, nil)

f.LANDING_TARGET_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.LANDING_TARGET_time_usec", ftypes.UINT64, nil)
f.LANDING_TARGET_target_num = ProtoField.new("target_num (uint8_t)", "mavlink_proto.LANDING_TARGET_target_num", ftypes.UINT8, nil)
f.LANDING_TARGET_frame = ProtoField.new("frame (MAV_FRAME)", "mavlink_proto.LANDING_TARGET_frame", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.LANDING_TARGET_angle_x = ProtoField.new("angle_x (float)", "mavlink_proto.LANDING_TARGET_angle_x", ftypes.FLOAT, nil)
f.LANDING_TARGET_angle_y = ProtoField.new("angle_y (float)", "mavlink_proto.LANDING_TARGET_angle_y", ftypes.FLOAT, nil)
f.LANDING_TARGET_distance = ProtoField.new("distance (float)", "mavlink_proto.LANDING_TARGET_distance", ftypes.FLOAT, nil)
f.LANDING_TARGET_size_x = ProtoField.new("size_x (float)", "mavlink_proto.LANDING_TARGET_size_x", ftypes.FLOAT, nil)
f.LANDING_TARGET_size_y = ProtoField.new("size_y (float)", "mavlink_proto.LANDING_TARGET_size_y", ftypes.FLOAT, nil)
f.LANDING_TARGET_x = ProtoField.new("x (float)", "mavlink_proto.LANDING_TARGET_x", ftypes.FLOAT, nil)
f.LANDING_TARGET_y = ProtoField.new("y (float)", "mavlink_proto.LANDING_TARGET_y", ftypes.FLOAT, nil)
f.LANDING_TARGET_z = ProtoField.new("z (float)", "mavlink_proto.LANDING_TARGET_z", ftypes.FLOAT, nil)
f.LANDING_TARGET_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.LANDING_TARGET_q_0", ftypes.FLOAT, nil)
f.LANDING_TARGET_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.LANDING_TARGET_q_1", ftypes.FLOAT, nil)
f.LANDING_TARGET_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.LANDING_TARGET_q_2", ftypes.FLOAT, nil)
f.LANDING_TARGET_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.LANDING_TARGET_q_3", ftypes.FLOAT, nil)
f.LANDING_TARGET_type = ProtoField.new("type (LANDING_TARGET_TYPE)", "mavlink_proto.LANDING_TARGET_type", ftypes.UINT8, enumEntryName.LANDING_TARGET_TYPE)
f.LANDING_TARGET_position_valid = ProtoField.new("position_valid (uint8_t)", "mavlink_proto.LANDING_TARGET_position_valid", ftypes.UINT8, nil)

f.FENCE_STATUS_breach_status = ProtoField.new("breach_status (uint8_t)", "mavlink_proto.FENCE_STATUS_breach_status", ftypes.UINT8, nil)
f.FENCE_STATUS_breach_count = ProtoField.new("breach_count (uint16_t)", "mavlink_proto.FENCE_STATUS_breach_count", ftypes.UINT16, nil)
f.FENCE_STATUS_breach_type = ProtoField.new("breach_type (FENCE_BREACH)", "mavlink_proto.FENCE_STATUS_breach_type", ftypes.UINT8, enumEntryName.FENCE_BREACH)
f.FENCE_STATUS_breach_time = ProtoField.new("breach_time (uint32_t)", "mavlink_proto.FENCE_STATUS_breach_time", ftypes.UINT32, nil)
f.FENCE_STATUS_breach_mitigation = ProtoField.new("breach_mitigation (FENCE_MITIGATE)", "mavlink_proto.FENCE_STATUS_breach_mitigation", ftypes.UINT8, enumEntryName.FENCE_MITIGATE)

f.MAG_CAL_REPORT_compass_id = ProtoField.new("compass_id (uint8_t)", "mavlink_proto.MAG_CAL_REPORT_compass_id", ftypes.UINT8, nil)
f.MAG_CAL_REPORT_cal_mask = ProtoField.new("cal_mask (uint8_t)", "mavlink_proto.MAG_CAL_REPORT_cal_mask", ftypes.UINT8, nil)
f.MAG_CAL_REPORT_cal_status = ProtoField.new("cal_status (MAG_CAL_STATUS)", "mavlink_proto.MAG_CAL_REPORT_cal_status", ftypes.UINT8, enumEntryName.MAG_CAL_STATUS)
f.MAG_CAL_REPORT_autosaved = ProtoField.new("autosaved (uint8_t)", "mavlink_proto.MAG_CAL_REPORT_autosaved", ftypes.UINT8, nil)
f.MAG_CAL_REPORT_fitness = ProtoField.new("fitness (float)", "mavlink_proto.MAG_CAL_REPORT_fitness", ftypes.FLOAT, nil)
f.MAG_CAL_REPORT_ofs_x = ProtoField.new("ofs_x (float)", "mavlink_proto.MAG_CAL_REPORT_ofs_x", ftypes.FLOAT, nil)
f.MAG_CAL_REPORT_ofs_y = ProtoField.new("ofs_y (float)", "mavlink_proto.MAG_CAL_REPORT_ofs_y", ftypes.FLOAT, nil)
f.MAG_CAL_REPORT_ofs_z = ProtoField.new("ofs_z (float)", "mavlink_proto.MAG_CAL_REPORT_ofs_z", ftypes.FLOAT, nil)
f.MAG_CAL_REPORT_diag_x = ProtoField.new("diag_x (float)", "mavlink_proto.MAG_CAL_REPORT_diag_x", ftypes.FLOAT, nil)
f.MAG_CAL_REPORT_diag_y = ProtoField.new("diag_y (float)", "mavlink_proto.MAG_CAL_REPORT_diag_y", ftypes.FLOAT, nil)
f.MAG_CAL_REPORT_diag_z = ProtoField.new("diag_z (float)", "mavlink_proto.MAG_CAL_REPORT_diag_z", ftypes.FLOAT, nil)
f.MAG_CAL_REPORT_offdiag_x = ProtoField.new("offdiag_x (float)", "mavlink_proto.MAG_CAL_REPORT_offdiag_x", ftypes.FLOAT, nil)
f.MAG_CAL_REPORT_offdiag_y = ProtoField.new("offdiag_y (float)", "mavlink_proto.MAG_CAL_REPORT_offdiag_y", ftypes.FLOAT, nil)
f.MAG_CAL_REPORT_offdiag_z = ProtoField.new("offdiag_z (float)", "mavlink_proto.MAG_CAL_REPORT_offdiag_z", ftypes.FLOAT, nil)
f.MAG_CAL_REPORT_orientation_confidence = ProtoField.new("orientation_confidence (float)", "mavlink_proto.MAG_CAL_REPORT_orientation_confidence", ftypes.FLOAT, nil)
f.MAG_CAL_REPORT_old_orientation = ProtoField.new("old_orientation (MAV_SENSOR_ORIENTATION)", "mavlink_proto.MAG_CAL_REPORT_old_orientation", ftypes.UINT8, enumEntryName.MAV_SENSOR_ORIENTATION)
f.MAG_CAL_REPORT_new_orientation = ProtoField.new("new_orientation (MAV_SENSOR_ORIENTATION)", "mavlink_proto.MAG_CAL_REPORT_new_orientation", ftypes.UINT8, enumEntryName.MAV_SENSOR_ORIENTATION)
f.MAG_CAL_REPORT_scale_factor = ProtoField.new("scale_factor (float)", "mavlink_proto.MAG_CAL_REPORT_scale_factor", ftypes.FLOAT, nil)

f.EFI_STATUS_health = ProtoField.new("health (uint8_t)", "mavlink_proto.EFI_STATUS_health", ftypes.UINT8, nil)
f.EFI_STATUS_ecu_index = ProtoField.new("ecu_index (float)", "mavlink_proto.EFI_STATUS_ecu_index", ftypes.FLOAT, nil)
f.EFI_STATUS_rpm = ProtoField.new("rpm (float)", "mavlink_proto.EFI_STATUS_rpm", ftypes.FLOAT, nil)
f.EFI_STATUS_fuel_consumed = ProtoField.new("fuel_consumed (float)", "mavlink_proto.EFI_STATUS_fuel_consumed", ftypes.FLOAT, nil)
f.EFI_STATUS_fuel_flow = ProtoField.new("fuel_flow (float)", "mavlink_proto.EFI_STATUS_fuel_flow", ftypes.FLOAT, nil)
f.EFI_STATUS_engine_load = ProtoField.new("engine_load (float)", "mavlink_proto.EFI_STATUS_engine_load", ftypes.FLOAT, nil)
f.EFI_STATUS_throttle_position = ProtoField.new("throttle_position (float)", "mavlink_proto.EFI_STATUS_throttle_position", ftypes.FLOAT, nil)
f.EFI_STATUS_spark_dwell_time = ProtoField.new("spark_dwell_time (float)", "mavlink_proto.EFI_STATUS_spark_dwell_time", ftypes.FLOAT, nil)
f.EFI_STATUS_barometric_pressure = ProtoField.new("barometric_pressure (float)", "mavlink_proto.EFI_STATUS_barometric_pressure", ftypes.FLOAT, nil)
f.EFI_STATUS_intake_manifold_pressure = ProtoField.new("intake_manifold_pressure (float)", "mavlink_proto.EFI_STATUS_intake_manifold_pressure", ftypes.FLOAT, nil)
f.EFI_STATUS_intake_manifold_temperature = ProtoField.new("intake_manifold_temperature (float)", "mavlink_proto.EFI_STATUS_intake_manifold_temperature", ftypes.FLOAT, nil)
f.EFI_STATUS_cylinder_head_temperature = ProtoField.new("cylinder_head_temperature (float)", "mavlink_proto.EFI_STATUS_cylinder_head_temperature", ftypes.FLOAT, nil)
f.EFI_STATUS_ignition_timing = ProtoField.new("ignition_timing (float)", "mavlink_proto.EFI_STATUS_ignition_timing", ftypes.FLOAT, nil)
f.EFI_STATUS_injection_time = ProtoField.new("injection_time (float)", "mavlink_proto.EFI_STATUS_injection_time", ftypes.FLOAT, nil)
f.EFI_STATUS_exhaust_gas_temperature = ProtoField.new("exhaust_gas_temperature (float)", "mavlink_proto.EFI_STATUS_exhaust_gas_temperature", ftypes.FLOAT, nil)
f.EFI_STATUS_throttle_out = ProtoField.new("throttle_out (float)", "mavlink_proto.EFI_STATUS_throttle_out", ftypes.FLOAT, nil)
f.EFI_STATUS_pt_compensation = ProtoField.new("pt_compensation (float)", "mavlink_proto.EFI_STATUS_pt_compensation", ftypes.FLOAT, nil)
f.EFI_STATUS_ignition_voltage = ProtoField.new("ignition_voltage (float)", "mavlink_proto.EFI_STATUS_ignition_voltage", ftypes.FLOAT, nil)
f.EFI_STATUS_fuel_pressure = ProtoField.new("fuel_pressure (float)", "mavlink_proto.EFI_STATUS_fuel_pressure", ftypes.FLOAT, nil)

f.ESTIMATOR_STATUS_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.ESTIMATOR_STATUS_time_usec", ftypes.UINT64, nil)
f.ESTIMATOR_STATUS_flags = ProtoField.new("flags (ESTIMATOR_STATUS_FLAGS)", "mavlink_proto.ESTIMATOR_STATUS_flags", ftypes.UINT16, nil)
f.ESTIMATOR_STATUS_flags_flagESTIMATOR_ATTITUDE = ProtoField.bool("mavlink_proto.ESTIMATOR_STATUS_flags.ESTIMATOR_ATTITUDE", "ESTIMATOR_ATTITUDE", 12, nil, 1)
f.ESTIMATOR_STATUS_flags_flagESTIMATOR_VELOCITY_HORIZ = ProtoField.bool("mavlink_proto.ESTIMATOR_STATUS_flags.ESTIMATOR_VELOCITY_HORIZ", "ESTIMATOR_VELOCITY_HORIZ", 12, nil, 2)
f.ESTIMATOR_STATUS_flags_flagESTIMATOR_VELOCITY_VERT = ProtoField.bool("mavlink_proto.ESTIMATOR_STATUS_flags.ESTIMATOR_VELOCITY_VERT", "ESTIMATOR_VELOCITY_VERT", 12, nil, 4)
f.ESTIMATOR_STATUS_flags_flagESTIMATOR_POS_HORIZ_REL = ProtoField.bool("mavlink_proto.ESTIMATOR_STATUS_flags.ESTIMATOR_POS_HORIZ_REL", "ESTIMATOR_POS_HORIZ_REL", 12, nil, 8)
f.ESTIMATOR_STATUS_flags_flagESTIMATOR_POS_HORIZ_ABS = ProtoField.bool("mavlink_proto.ESTIMATOR_STATUS_flags.ESTIMATOR_POS_HORIZ_ABS", "ESTIMATOR_POS_HORIZ_ABS", 12, nil, 16)
f.ESTIMATOR_STATUS_flags_flagESTIMATOR_POS_VERT_ABS = ProtoField.bool("mavlink_proto.ESTIMATOR_STATUS_flags.ESTIMATOR_POS_VERT_ABS", "ESTIMATOR_POS_VERT_ABS", 12, nil, 32)
f.ESTIMATOR_STATUS_flags_flagESTIMATOR_POS_VERT_AGL = ProtoField.bool("mavlink_proto.ESTIMATOR_STATUS_flags.ESTIMATOR_POS_VERT_AGL", "ESTIMATOR_POS_VERT_AGL", 12, nil, 64)
f.ESTIMATOR_STATUS_flags_flagESTIMATOR_CONST_POS_MODE = ProtoField.bool("mavlink_proto.ESTIMATOR_STATUS_flags.ESTIMATOR_CONST_POS_MODE", "ESTIMATOR_CONST_POS_MODE", 12, nil, 128)
f.ESTIMATOR_STATUS_flags_flagESTIMATOR_PRED_POS_HORIZ_REL = ProtoField.bool("mavlink_proto.ESTIMATOR_STATUS_flags.ESTIMATOR_PRED_POS_HORIZ_REL", "ESTIMATOR_PRED_POS_HORIZ_REL", 12, nil, 256)
f.ESTIMATOR_STATUS_flags_flagESTIMATOR_PRED_POS_HORIZ_ABS = ProtoField.bool("mavlink_proto.ESTIMATOR_STATUS_flags.ESTIMATOR_PRED_POS_HORIZ_ABS", "ESTIMATOR_PRED_POS_HORIZ_ABS", 12, nil, 512)
f.ESTIMATOR_STATUS_flags_flagESTIMATOR_GPS_GLITCH = ProtoField.bool("mavlink_proto.ESTIMATOR_STATUS_flags.ESTIMATOR_GPS_GLITCH", "ESTIMATOR_GPS_GLITCH", 12, nil, 1024)
f.ESTIMATOR_STATUS_flags_flagESTIMATOR_ACCEL_ERROR = ProtoField.bool("mavlink_proto.ESTIMATOR_STATUS_flags.ESTIMATOR_ACCEL_ERROR", "ESTIMATOR_ACCEL_ERROR", 12, nil, 2048)
f.ESTIMATOR_STATUS_vel_ratio = ProtoField.new("vel_ratio (float)", "mavlink_proto.ESTIMATOR_STATUS_vel_ratio", ftypes.FLOAT, nil)
f.ESTIMATOR_STATUS_pos_horiz_ratio = ProtoField.new("pos_horiz_ratio (float)", "mavlink_proto.ESTIMATOR_STATUS_pos_horiz_ratio", ftypes.FLOAT, nil)
f.ESTIMATOR_STATUS_pos_vert_ratio = ProtoField.new("pos_vert_ratio (float)", "mavlink_proto.ESTIMATOR_STATUS_pos_vert_ratio", ftypes.FLOAT, nil)
f.ESTIMATOR_STATUS_mag_ratio = ProtoField.new("mag_ratio (float)", "mavlink_proto.ESTIMATOR_STATUS_mag_ratio", ftypes.FLOAT, nil)
f.ESTIMATOR_STATUS_hagl_ratio = ProtoField.new("hagl_ratio (float)", "mavlink_proto.ESTIMATOR_STATUS_hagl_ratio", ftypes.FLOAT, nil)
f.ESTIMATOR_STATUS_tas_ratio = ProtoField.new("tas_ratio (float)", "mavlink_proto.ESTIMATOR_STATUS_tas_ratio", ftypes.FLOAT, nil)
f.ESTIMATOR_STATUS_pos_horiz_accuracy = ProtoField.new("pos_horiz_accuracy (float)", "mavlink_proto.ESTIMATOR_STATUS_pos_horiz_accuracy", ftypes.FLOAT, nil)
f.ESTIMATOR_STATUS_pos_vert_accuracy = ProtoField.new("pos_vert_accuracy (float)", "mavlink_proto.ESTIMATOR_STATUS_pos_vert_accuracy", ftypes.FLOAT, nil)

f.WIND_COV_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.WIND_COV_time_usec", ftypes.UINT64, nil)
f.WIND_COV_wind_x = ProtoField.new("wind_x (float)", "mavlink_proto.WIND_COV_wind_x", ftypes.FLOAT, nil)
f.WIND_COV_wind_y = ProtoField.new("wind_y (float)", "mavlink_proto.WIND_COV_wind_y", ftypes.FLOAT, nil)
f.WIND_COV_wind_z = ProtoField.new("wind_z (float)", "mavlink_proto.WIND_COV_wind_z", ftypes.FLOAT, nil)
f.WIND_COV_var_horiz = ProtoField.new("var_horiz (float)", "mavlink_proto.WIND_COV_var_horiz", ftypes.FLOAT, nil)
f.WIND_COV_var_vert = ProtoField.new("var_vert (float)", "mavlink_proto.WIND_COV_var_vert", ftypes.FLOAT, nil)
f.WIND_COV_wind_alt = ProtoField.new("wind_alt (float)", "mavlink_proto.WIND_COV_wind_alt", ftypes.FLOAT, nil)
f.WIND_COV_horiz_accuracy = ProtoField.new("horiz_accuracy (float)", "mavlink_proto.WIND_COV_horiz_accuracy", ftypes.FLOAT, nil)
f.WIND_COV_vert_accuracy = ProtoField.new("vert_accuracy (float)", "mavlink_proto.WIND_COV_vert_accuracy", ftypes.FLOAT, nil)

f.GPS_INPUT_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.GPS_INPUT_time_usec", ftypes.UINT64, nil)
f.GPS_INPUT_gps_id = ProtoField.new("gps_id (uint8_t)", "mavlink_proto.GPS_INPUT_gps_id", ftypes.UINT8, nil)
f.GPS_INPUT_ignore_flags = ProtoField.new("ignore_flags (GPS_INPUT_IGNORE_FLAGS)", "mavlink_proto.GPS_INPUT_ignore_flags", ftypes.UINT16, nil)
f.GPS_INPUT_ignore_flags_flagGPS_INPUT_IGNORE_FLAG_ALT = ProtoField.bool("mavlink_proto.GPS_INPUT_ignore_flags.GPS_INPUT_IGNORE_FLAG_ALT", "GPS_INPUT_IGNORE_FLAG_ALT", 8, nil, 1)
f.GPS_INPUT_ignore_flags_flagGPS_INPUT_IGNORE_FLAG_HDOP = ProtoField.bool("mavlink_proto.GPS_INPUT_ignore_flags.GPS_INPUT_IGNORE_FLAG_HDOP", "GPS_INPUT_IGNORE_FLAG_HDOP", 8, nil, 2)
f.GPS_INPUT_ignore_flags_flagGPS_INPUT_IGNORE_FLAG_VDOP = ProtoField.bool("mavlink_proto.GPS_INPUT_ignore_flags.GPS_INPUT_IGNORE_FLAG_VDOP", "GPS_INPUT_IGNORE_FLAG_VDOP", 8, nil, 4)
f.GPS_INPUT_ignore_flags_flagGPS_INPUT_IGNORE_FLAG_VEL_HORIZ = ProtoField.bool("mavlink_proto.GPS_INPUT_ignore_flags.GPS_INPUT_IGNORE_FLAG_VEL_HORIZ", "GPS_INPUT_IGNORE_FLAG_VEL_HORIZ", 8, nil, 8)
f.GPS_INPUT_ignore_flags_flagGPS_INPUT_IGNORE_FLAG_VEL_VERT = ProtoField.bool("mavlink_proto.GPS_INPUT_ignore_flags.GPS_INPUT_IGNORE_FLAG_VEL_VERT", "GPS_INPUT_IGNORE_FLAG_VEL_VERT", 8, nil, 16)
f.GPS_INPUT_ignore_flags_flagGPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY = ProtoField.bool("mavlink_proto.GPS_INPUT_ignore_flags.GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY", "GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY", 8, nil, 32)
f.GPS_INPUT_ignore_flags_flagGPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY = ProtoField.bool("mavlink_proto.GPS_INPUT_ignore_flags.GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY", "GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY", 8, nil, 64)
f.GPS_INPUT_ignore_flags_flagGPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY = ProtoField.bool("mavlink_proto.GPS_INPUT_ignore_flags.GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY", "GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY", 8, nil, 128)
f.GPS_INPUT_time_week_ms = ProtoField.new("time_week_ms (uint32_t)", "mavlink_proto.GPS_INPUT_time_week_ms", ftypes.UINT32, nil)
f.GPS_INPUT_time_week = ProtoField.new("time_week (uint16_t)", "mavlink_proto.GPS_INPUT_time_week", ftypes.UINT16, nil)
f.GPS_INPUT_fix_type = ProtoField.new("fix_type (uint8_t)", "mavlink_proto.GPS_INPUT_fix_type", ftypes.UINT8, nil)
f.GPS_INPUT_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.GPS_INPUT_lat", ftypes.INT32, nil)
f.GPS_INPUT_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.GPS_INPUT_lon", ftypes.INT32, nil)
f.GPS_INPUT_alt = ProtoField.new("alt (float)", "mavlink_proto.GPS_INPUT_alt", ftypes.FLOAT, nil)
f.GPS_INPUT_hdop = ProtoField.new("hdop (float)", "mavlink_proto.GPS_INPUT_hdop", ftypes.FLOAT, nil)
f.GPS_INPUT_vdop = ProtoField.new("vdop (float)", "mavlink_proto.GPS_INPUT_vdop", ftypes.FLOAT, nil)
f.GPS_INPUT_vn = ProtoField.new("vn (float)", "mavlink_proto.GPS_INPUT_vn", ftypes.FLOAT, nil)
f.GPS_INPUT_ve = ProtoField.new("ve (float)", "mavlink_proto.GPS_INPUT_ve", ftypes.FLOAT, nil)
f.GPS_INPUT_vd = ProtoField.new("vd (float)", "mavlink_proto.GPS_INPUT_vd", ftypes.FLOAT, nil)
f.GPS_INPUT_speed_accuracy = ProtoField.new("speed_accuracy (float)", "mavlink_proto.GPS_INPUT_speed_accuracy", ftypes.FLOAT, nil)
f.GPS_INPUT_horiz_accuracy = ProtoField.new("horiz_accuracy (float)", "mavlink_proto.GPS_INPUT_horiz_accuracy", ftypes.FLOAT, nil)
f.GPS_INPUT_vert_accuracy = ProtoField.new("vert_accuracy (float)", "mavlink_proto.GPS_INPUT_vert_accuracy", ftypes.FLOAT, nil)
f.GPS_INPUT_satellites_visible = ProtoField.new("satellites_visible (uint8_t)", "mavlink_proto.GPS_INPUT_satellites_visible", ftypes.UINT8, nil)
f.GPS_INPUT_yaw = ProtoField.new("yaw (uint16_t)", "mavlink_proto.GPS_INPUT_yaw", ftypes.UINT16, nil)

f.GPS_RTCM_DATA_flags = ProtoField.new("flags (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_flags", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_len = ProtoField.new("len (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_len", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_0", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_1", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_2", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_3", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_4", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_5", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_6", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_7", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_8 = ProtoField.new("data[8] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_8", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_9 = ProtoField.new("data[9] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_9", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_10 = ProtoField.new("data[10] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_10", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_11 = ProtoField.new("data[11] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_11", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_12 = ProtoField.new("data[12] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_12", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_13 = ProtoField.new("data[13] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_13", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_14 = ProtoField.new("data[14] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_14", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_15 = ProtoField.new("data[15] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_15", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_16 = ProtoField.new("data[16] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_16", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_17 = ProtoField.new("data[17] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_17", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_18 = ProtoField.new("data[18] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_18", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_19 = ProtoField.new("data[19] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_19", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_20 = ProtoField.new("data[20] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_20", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_21 = ProtoField.new("data[21] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_21", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_22 = ProtoField.new("data[22] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_22", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_23 = ProtoField.new("data[23] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_23", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_24 = ProtoField.new("data[24] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_24", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_25 = ProtoField.new("data[25] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_25", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_26 = ProtoField.new("data[26] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_26", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_27 = ProtoField.new("data[27] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_27", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_28 = ProtoField.new("data[28] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_28", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_29 = ProtoField.new("data[29] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_29", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_30 = ProtoField.new("data[30] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_30", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_31 = ProtoField.new("data[31] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_31", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_32 = ProtoField.new("data[32] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_32", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_33 = ProtoField.new("data[33] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_33", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_34 = ProtoField.new("data[34] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_34", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_35 = ProtoField.new("data[35] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_35", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_36 = ProtoField.new("data[36] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_36", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_37 = ProtoField.new("data[37] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_37", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_38 = ProtoField.new("data[38] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_38", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_39 = ProtoField.new("data[39] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_39", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_40 = ProtoField.new("data[40] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_40", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_41 = ProtoField.new("data[41] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_41", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_42 = ProtoField.new("data[42] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_42", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_43 = ProtoField.new("data[43] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_43", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_44 = ProtoField.new("data[44] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_44", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_45 = ProtoField.new("data[45] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_45", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_46 = ProtoField.new("data[46] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_46", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_47 = ProtoField.new("data[47] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_47", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_48 = ProtoField.new("data[48] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_48", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_49 = ProtoField.new("data[49] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_49", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_50 = ProtoField.new("data[50] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_50", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_51 = ProtoField.new("data[51] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_51", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_52 = ProtoField.new("data[52] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_52", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_53 = ProtoField.new("data[53] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_53", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_54 = ProtoField.new("data[54] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_54", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_55 = ProtoField.new("data[55] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_55", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_56 = ProtoField.new("data[56] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_56", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_57 = ProtoField.new("data[57] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_57", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_58 = ProtoField.new("data[58] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_58", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_59 = ProtoField.new("data[59] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_59", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_60 = ProtoField.new("data[60] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_60", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_61 = ProtoField.new("data[61] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_61", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_62 = ProtoField.new("data[62] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_62", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_63 = ProtoField.new("data[63] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_63", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_64 = ProtoField.new("data[64] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_64", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_65 = ProtoField.new("data[65] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_65", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_66 = ProtoField.new("data[66] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_66", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_67 = ProtoField.new("data[67] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_67", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_68 = ProtoField.new("data[68] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_68", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_69 = ProtoField.new("data[69] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_69", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_70 = ProtoField.new("data[70] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_70", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_71 = ProtoField.new("data[71] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_71", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_72 = ProtoField.new("data[72] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_72", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_73 = ProtoField.new("data[73] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_73", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_74 = ProtoField.new("data[74] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_74", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_75 = ProtoField.new("data[75] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_75", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_76 = ProtoField.new("data[76] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_76", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_77 = ProtoField.new("data[77] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_77", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_78 = ProtoField.new("data[78] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_78", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_79 = ProtoField.new("data[79] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_79", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_80 = ProtoField.new("data[80] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_80", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_81 = ProtoField.new("data[81] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_81", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_82 = ProtoField.new("data[82] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_82", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_83 = ProtoField.new("data[83] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_83", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_84 = ProtoField.new("data[84] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_84", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_85 = ProtoField.new("data[85] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_85", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_86 = ProtoField.new("data[86] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_86", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_87 = ProtoField.new("data[87] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_87", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_88 = ProtoField.new("data[88] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_88", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_89 = ProtoField.new("data[89] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_89", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_90 = ProtoField.new("data[90] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_90", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_91 = ProtoField.new("data[91] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_91", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_92 = ProtoField.new("data[92] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_92", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_93 = ProtoField.new("data[93] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_93", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_94 = ProtoField.new("data[94] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_94", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_95 = ProtoField.new("data[95] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_95", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_96 = ProtoField.new("data[96] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_96", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_97 = ProtoField.new("data[97] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_97", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_98 = ProtoField.new("data[98] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_98", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_99 = ProtoField.new("data[99] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_99", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_100 = ProtoField.new("data[100] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_100", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_101 = ProtoField.new("data[101] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_101", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_102 = ProtoField.new("data[102] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_102", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_103 = ProtoField.new("data[103] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_103", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_104 = ProtoField.new("data[104] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_104", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_105 = ProtoField.new("data[105] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_105", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_106 = ProtoField.new("data[106] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_106", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_107 = ProtoField.new("data[107] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_107", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_108 = ProtoField.new("data[108] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_108", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_109 = ProtoField.new("data[109] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_109", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_110 = ProtoField.new("data[110] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_110", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_111 = ProtoField.new("data[111] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_111", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_112 = ProtoField.new("data[112] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_112", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_113 = ProtoField.new("data[113] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_113", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_114 = ProtoField.new("data[114] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_114", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_115 = ProtoField.new("data[115] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_115", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_116 = ProtoField.new("data[116] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_116", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_117 = ProtoField.new("data[117] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_117", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_118 = ProtoField.new("data[118] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_118", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_119 = ProtoField.new("data[119] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_119", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_120 = ProtoField.new("data[120] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_120", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_121 = ProtoField.new("data[121] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_121", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_122 = ProtoField.new("data[122] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_122", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_123 = ProtoField.new("data[123] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_123", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_124 = ProtoField.new("data[124] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_124", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_125 = ProtoField.new("data[125] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_125", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_126 = ProtoField.new("data[126] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_126", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_127 = ProtoField.new("data[127] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_127", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_128 = ProtoField.new("data[128] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_128", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_129 = ProtoField.new("data[129] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_129", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_130 = ProtoField.new("data[130] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_130", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_131 = ProtoField.new("data[131] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_131", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_132 = ProtoField.new("data[132] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_132", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_133 = ProtoField.new("data[133] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_133", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_134 = ProtoField.new("data[134] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_134", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_135 = ProtoField.new("data[135] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_135", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_136 = ProtoField.new("data[136] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_136", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_137 = ProtoField.new("data[137] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_137", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_138 = ProtoField.new("data[138] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_138", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_139 = ProtoField.new("data[139] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_139", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_140 = ProtoField.new("data[140] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_140", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_141 = ProtoField.new("data[141] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_141", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_142 = ProtoField.new("data[142] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_142", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_143 = ProtoField.new("data[143] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_143", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_144 = ProtoField.new("data[144] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_144", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_145 = ProtoField.new("data[145] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_145", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_146 = ProtoField.new("data[146] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_146", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_147 = ProtoField.new("data[147] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_147", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_148 = ProtoField.new("data[148] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_148", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_149 = ProtoField.new("data[149] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_149", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_150 = ProtoField.new("data[150] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_150", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_151 = ProtoField.new("data[151] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_151", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_152 = ProtoField.new("data[152] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_152", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_153 = ProtoField.new("data[153] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_153", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_154 = ProtoField.new("data[154] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_154", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_155 = ProtoField.new("data[155] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_155", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_156 = ProtoField.new("data[156] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_156", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_157 = ProtoField.new("data[157] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_157", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_158 = ProtoField.new("data[158] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_158", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_159 = ProtoField.new("data[159] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_159", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_160 = ProtoField.new("data[160] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_160", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_161 = ProtoField.new("data[161] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_161", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_162 = ProtoField.new("data[162] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_162", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_163 = ProtoField.new("data[163] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_163", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_164 = ProtoField.new("data[164] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_164", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_165 = ProtoField.new("data[165] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_165", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_166 = ProtoField.new("data[166] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_166", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_167 = ProtoField.new("data[167] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_167", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_168 = ProtoField.new("data[168] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_168", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_169 = ProtoField.new("data[169] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_169", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_170 = ProtoField.new("data[170] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_170", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_171 = ProtoField.new("data[171] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_171", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_172 = ProtoField.new("data[172] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_172", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_173 = ProtoField.new("data[173] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_173", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_174 = ProtoField.new("data[174] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_174", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_175 = ProtoField.new("data[175] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_175", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_176 = ProtoField.new("data[176] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_176", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_177 = ProtoField.new("data[177] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_177", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_178 = ProtoField.new("data[178] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_178", ftypes.UINT8, nil)
f.GPS_RTCM_DATA_data_179 = ProtoField.new("data[179] (uint8_t)", "mavlink_proto.GPS_RTCM_DATA_data_179", ftypes.UINT8, nil)

f.HIGH_LATENCY_base_mode = ProtoField.new("base_mode (MAV_MODE_FLAG)", "mavlink_proto.HIGH_LATENCY_base_mode", ftypes.UINT8, nil)
f.HIGH_LATENCY_base_mode_flagMAV_MODE_FLAG_CUSTOM_MODE_ENABLED = ProtoField.bool("mavlink_proto.HIGH_LATENCY_base_mode.MAV_MODE_FLAG_CUSTOM_MODE_ENABLED", "MAV_MODE_FLAG_CUSTOM_MODE_ENABLED", 8, nil, 1)
f.HIGH_LATENCY_base_mode_flagMAV_MODE_FLAG_TEST_ENABLED = ProtoField.bool("mavlink_proto.HIGH_LATENCY_base_mode.MAV_MODE_FLAG_TEST_ENABLED", "MAV_MODE_FLAG_TEST_ENABLED", 8, nil, 2)
f.HIGH_LATENCY_base_mode_flagMAV_MODE_FLAG_AUTO_ENABLED = ProtoField.bool("mavlink_proto.HIGH_LATENCY_base_mode.MAV_MODE_FLAG_AUTO_ENABLED", "MAV_MODE_FLAG_AUTO_ENABLED", 8, nil, 4)
f.HIGH_LATENCY_base_mode_flagMAV_MODE_FLAG_GUIDED_ENABLED = ProtoField.bool("mavlink_proto.HIGH_LATENCY_base_mode.MAV_MODE_FLAG_GUIDED_ENABLED", "MAV_MODE_FLAG_GUIDED_ENABLED", 8, nil, 8)
f.HIGH_LATENCY_base_mode_flagMAV_MODE_FLAG_STABILIZE_ENABLED = ProtoField.bool("mavlink_proto.HIGH_LATENCY_base_mode.MAV_MODE_FLAG_STABILIZE_ENABLED", "MAV_MODE_FLAG_STABILIZE_ENABLED", 8, nil, 16)
f.HIGH_LATENCY_base_mode_flagMAV_MODE_FLAG_HIL_ENABLED = ProtoField.bool("mavlink_proto.HIGH_LATENCY_base_mode.MAV_MODE_FLAG_HIL_ENABLED", "MAV_MODE_FLAG_HIL_ENABLED", 8, nil, 32)
f.HIGH_LATENCY_base_mode_flagMAV_MODE_FLAG_MANUAL_INPUT_ENABLED = ProtoField.bool("mavlink_proto.HIGH_LATENCY_base_mode.MAV_MODE_FLAG_MANUAL_INPUT_ENABLED", "MAV_MODE_FLAG_MANUAL_INPUT_ENABLED", 8, nil, 64)
f.HIGH_LATENCY_base_mode_flagMAV_MODE_FLAG_SAFETY_ARMED = ProtoField.bool("mavlink_proto.HIGH_LATENCY_base_mode.MAV_MODE_FLAG_SAFETY_ARMED", "MAV_MODE_FLAG_SAFETY_ARMED", 8, nil, 128)
f.HIGH_LATENCY_custom_mode = ProtoField.new("custom_mode (uint32_t)", "mavlink_proto.HIGH_LATENCY_custom_mode", ftypes.UINT32, nil)
f.HIGH_LATENCY_landed_state = ProtoField.new("landed_state (MAV_LANDED_STATE)", "mavlink_proto.HIGH_LATENCY_landed_state", ftypes.UINT8, enumEntryName.MAV_LANDED_STATE)
f.HIGH_LATENCY_roll = ProtoField.new("roll (int16_t)", "mavlink_proto.HIGH_LATENCY_roll", ftypes.INT16, nil)
f.HIGH_LATENCY_pitch = ProtoField.new("pitch (int16_t)", "mavlink_proto.HIGH_LATENCY_pitch", ftypes.INT16, nil)
f.HIGH_LATENCY_heading = ProtoField.new("heading (uint16_t)", "mavlink_proto.HIGH_LATENCY_heading", ftypes.UINT16, nil)
f.HIGH_LATENCY_throttle = ProtoField.new("throttle (int8_t)", "mavlink_proto.HIGH_LATENCY_throttle", ftypes.INT8, nil)
f.HIGH_LATENCY_heading_sp = ProtoField.new("heading_sp (int16_t)", "mavlink_proto.HIGH_LATENCY_heading_sp", ftypes.INT16, nil)
f.HIGH_LATENCY_latitude = ProtoField.new("latitude (int32_t)", "mavlink_proto.HIGH_LATENCY_latitude", ftypes.INT32, nil)
f.HIGH_LATENCY_longitude = ProtoField.new("longitude (int32_t)", "mavlink_proto.HIGH_LATENCY_longitude", ftypes.INT32, nil)
f.HIGH_LATENCY_altitude_amsl = ProtoField.new("altitude_amsl (int16_t)", "mavlink_proto.HIGH_LATENCY_altitude_amsl", ftypes.INT16, nil)
f.HIGH_LATENCY_altitude_sp = ProtoField.new("altitude_sp (int16_t)", "mavlink_proto.HIGH_LATENCY_altitude_sp", ftypes.INT16, nil)
f.HIGH_LATENCY_airspeed = ProtoField.new("airspeed (uint8_t)", "mavlink_proto.HIGH_LATENCY_airspeed", ftypes.UINT8, nil)
f.HIGH_LATENCY_airspeed_sp = ProtoField.new("airspeed_sp (uint8_t)", "mavlink_proto.HIGH_LATENCY_airspeed_sp", ftypes.UINT8, nil)
f.HIGH_LATENCY_groundspeed = ProtoField.new("groundspeed (uint8_t)", "mavlink_proto.HIGH_LATENCY_groundspeed", ftypes.UINT8, nil)
f.HIGH_LATENCY_climb_rate = ProtoField.new("climb_rate (int8_t)", "mavlink_proto.HIGH_LATENCY_climb_rate", ftypes.INT8, nil)
f.HIGH_LATENCY_gps_nsat = ProtoField.new("gps_nsat (uint8_t)", "mavlink_proto.HIGH_LATENCY_gps_nsat", ftypes.UINT8, nil)
f.HIGH_LATENCY_gps_fix_type = ProtoField.new("gps_fix_type (GPS_FIX_TYPE)", "mavlink_proto.HIGH_LATENCY_gps_fix_type", ftypes.UINT8, enumEntryName.GPS_FIX_TYPE)
f.HIGH_LATENCY_battery_remaining = ProtoField.new("battery_remaining (uint8_t)", "mavlink_proto.HIGH_LATENCY_battery_remaining", ftypes.UINT8, nil)
f.HIGH_LATENCY_temperature = ProtoField.new("temperature (int8_t)", "mavlink_proto.HIGH_LATENCY_temperature", ftypes.INT8, nil)
f.HIGH_LATENCY_temperature_air = ProtoField.new("temperature_air (int8_t)", "mavlink_proto.HIGH_LATENCY_temperature_air", ftypes.INT8, nil)
f.HIGH_LATENCY_failsafe = ProtoField.new("failsafe (uint8_t)", "mavlink_proto.HIGH_LATENCY_failsafe", ftypes.UINT8, nil)
f.HIGH_LATENCY_wp_num = ProtoField.new("wp_num (uint8_t)", "mavlink_proto.HIGH_LATENCY_wp_num", ftypes.UINT8, nil)
f.HIGH_LATENCY_wp_distance = ProtoField.new("wp_distance (uint16_t)", "mavlink_proto.HIGH_LATENCY_wp_distance", ftypes.UINT16, nil)

f.HIGH_LATENCY2_timestamp = ProtoField.new("timestamp (uint32_t)", "mavlink_proto.HIGH_LATENCY2_timestamp", ftypes.UINT32, nil)
f.HIGH_LATENCY2_type = ProtoField.new("type (MAV_TYPE)", "mavlink_proto.HIGH_LATENCY2_type", ftypes.UINT8, enumEntryName.MAV_TYPE)
f.HIGH_LATENCY2_autopilot = ProtoField.new("autopilot (MAV_AUTOPILOT)", "mavlink_proto.HIGH_LATENCY2_autopilot", ftypes.UINT8, enumEntryName.MAV_AUTOPILOT)
f.HIGH_LATENCY2_custom_mode = ProtoField.new("custom_mode (uint16_t)", "mavlink_proto.HIGH_LATENCY2_custom_mode", ftypes.UINT16, nil)
f.HIGH_LATENCY2_latitude = ProtoField.new("latitude (int32_t)", "mavlink_proto.HIGH_LATENCY2_latitude", ftypes.INT32, nil)
f.HIGH_LATENCY2_longitude = ProtoField.new("longitude (int32_t)", "mavlink_proto.HIGH_LATENCY2_longitude", ftypes.INT32, nil)
f.HIGH_LATENCY2_altitude = ProtoField.new("altitude (int16_t)", "mavlink_proto.HIGH_LATENCY2_altitude", ftypes.INT16, nil)
f.HIGH_LATENCY2_target_altitude = ProtoField.new("target_altitude (int16_t)", "mavlink_proto.HIGH_LATENCY2_target_altitude", ftypes.INT16, nil)
f.HIGH_LATENCY2_heading = ProtoField.new("heading (uint8_t)", "mavlink_proto.HIGH_LATENCY2_heading", ftypes.UINT8, nil)
f.HIGH_LATENCY2_target_heading = ProtoField.new("target_heading (uint8_t)", "mavlink_proto.HIGH_LATENCY2_target_heading", ftypes.UINT8, nil)
f.HIGH_LATENCY2_target_distance = ProtoField.new("target_distance (uint16_t)", "mavlink_proto.HIGH_LATENCY2_target_distance", ftypes.UINT16, nil)
f.HIGH_LATENCY2_throttle = ProtoField.new("throttle (uint8_t)", "mavlink_proto.HIGH_LATENCY2_throttle", ftypes.UINT8, nil)
f.HIGH_LATENCY2_airspeed = ProtoField.new("airspeed (uint8_t)", "mavlink_proto.HIGH_LATENCY2_airspeed", ftypes.UINT8, nil)
f.HIGH_LATENCY2_airspeed_sp = ProtoField.new("airspeed_sp (uint8_t)", "mavlink_proto.HIGH_LATENCY2_airspeed_sp", ftypes.UINT8, nil)
f.HIGH_LATENCY2_groundspeed = ProtoField.new("groundspeed (uint8_t)", "mavlink_proto.HIGH_LATENCY2_groundspeed", ftypes.UINT8, nil)
f.HIGH_LATENCY2_windspeed = ProtoField.new("windspeed (uint8_t)", "mavlink_proto.HIGH_LATENCY2_windspeed", ftypes.UINT8, nil)
f.HIGH_LATENCY2_wind_heading = ProtoField.new("wind_heading (uint8_t)", "mavlink_proto.HIGH_LATENCY2_wind_heading", ftypes.UINT8, nil)
f.HIGH_LATENCY2_eph = ProtoField.new("eph (uint8_t)", "mavlink_proto.HIGH_LATENCY2_eph", ftypes.UINT8, nil)
f.HIGH_LATENCY2_epv = ProtoField.new("epv (uint8_t)", "mavlink_proto.HIGH_LATENCY2_epv", ftypes.UINT8, nil)
f.HIGH_LATENCY2_temperature_air = ProtoField.new("temperature_air (int8_t)", "mavlink_proto.HIGH_LATENCY2_temperature_air", ftypes.INT8, nil)
f.HIGH_LATENCY2_climb_rate = ProtoField.new("climb_rate (int8_t)", "mavlink_proto.HIGH_LATENCY2_climb_rate", ftypes.INT8, nil)
f.HIGH_LATENCY2_battery = ProtoField.new("battery (int8_t)", "mavlink_proto.HIGH_LATENCY2_battery", ftypes.INT8, nil)
f.HIGH_LATENCY2_wp_num = ProtoField.new("wp_num (uint16_t)", "mavlink_proto.HIGH_LATENCY2_wp_num", ftypes.UINT16, nil)
f.HIGH_LATENCY2_failure_flags = ProtoField.new("failure_flags (HL_FAILURE_FLAG)", "mavlink_proto.HIGH_LATENCY2_failure_flags", ftypes.UINT16, nil)
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_GPS = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_GPS", "HL_FAILURE_FLAG_GPS", 14, nil, 1)
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_DIFFERENTIAL_PRESSURE = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_DIFFERENTIAL_PRESSURE", "HL_FAILURE_FLAG_DIFFERENTIAL_PRESSURE", 14, nil, 2)
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_ABSOLUTE_PRESSURE = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_ABSOLUTE_PRESSURE", "HL_FAILURE_FLAG_ABSOLUTE_PRESSURE", 14, nil, 4)
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_3D_ACCEL = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_3D_ACCEL", "HL_FAILURE_FLAG_3D_ACCEL", 14, nil, 8)
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_3D_GYRO = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_3D_GYRO", "HL_FAILURE_FLAG_3D_GYRO", 14, nil, 16)
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_3D_MAG = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_3D_MAG", "HL_FAILURE_FLAG_3D_MAG", 14, nil, 32)
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_TERRAIN = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_TERRAIN", "HL_FAILURE_FLAG_TERRAIN", 14, nil, 64)
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_BATTERY = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_BATTERY", "HL_FAILURE_FLAG_BATTERY", 14, nil, 128)
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_RC_RECEIVER = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_RC_RECEIVER", "HL_FAILURE_FLAG_RC_RECEIVER", 14, nil, 256)
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_OFFBOARD_LINK = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_OFFBOARD_LINK", "HL_FAILURE_FLAG_OFFBOARD_LINK", 14, nil, 512)
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_ENGINE = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_ENGINE", "HL_FAILURE_FLAG_ENGINE", 14, nil, 1024)
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_GEOFENCE = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_GEOFENCE", "HL_FAILURE_FLAG_GEOFENCE", 14, nil, 2048)
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_ESTIMATOR = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_ESTIMATOR", "HL_FAILURE_FLAG_ESTIMATOR", 14, nil, 4096)
f.HIGH_LATENCY2_failure_flags_flagHL_FAILURE_FLAG_MISSION = ProtoField.bool("mavlink_proto.HIGH_LATENCY2_failure_flags.HL_FAILURE_FLAG_MISSION", "HL_FAILURE_FLAG_MISSION", 14, nil, 8192)
f.HIGH_LATENCY2_custom0 = ProtoField.new("custom0 (int8_t)", "mavlink_proto.HIGH_LATENCY2_custom0", ftypes.INT8, nil)
f.HIGH_LATENCY2_custom1 = ProtoField.new("custom1 (int8_t)", "mavlink_proto.HIGH_LATENCY2_custom1", ftypes.INT8, nil)
f.HIGH_LATENCY2_custom2 = ProtoField.new("custom2 (int8_t)", "mavlink_proto.HIGH_LATENCY2_custom2", ftypes.INT8, nil)

f.VIBRATION_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.VIBRATION_time_usec", ftypes.UINT64, nil)
f.VIBRATION_vibration_x = ProtoField.new("vibration_x (float)", "mavlink_proto.VIBRATION_vibration_x", ftypes.FLOAT, nil)
f.VIBRATION_vibration_y = ProtoField.new("vibration_y (float)", "mavlink_proto.VIBRATION_vibration_y", ftypes.FLOAT, nil)
f.VIBRATION_vibration_z = ProtoField.new("vibration_z (float)", "mavlink_proto.VIBRATION_vibration_z", ftypes.FLOAT, nil)
f.VIBRATION_clipping_0 = ProtoField.new("clipping_0 (uint32_t)", "mavlink_proto.VIBRATION_clipping_0", ftypes.UINT32, nil)
f.VIBRATION_clipping_1 = ProtoField.new("clipping_1 (uint32_t)", "mavlink_proto.VIBRATION_clipping_1", ftypes.UINT32, nil)
f.VIBRATION_clipping_2 = ProtoField.new("clipping_2 (uint32_t)", "mavlink_proto.VIBRATION_clipping_2", ftypes.UINT32, nil)

f.HOME_POSITION_latitude = ProtoField.new("latitude (int32_t)", "mavlink_proto.HOME_POSITION_latitude", ftypes.INT32, nil)
f.HOME_POSITION_longitude = ProtoField.new("longitude (int32_t)", "mavlink_proto.HOME_POSITION_longitude", ftypes.INT32, nil)
f.HOME_POSITION_altitude = ProtoField.new("altitude (int32_t)", "mavlink_proto.HOME_POSITION_altitude", ftypes.INT32, nil)
f.HOME_POSITION_x = ProtoField.new("x (float)", "mavlink_proto.HOME_POSITION_x", ftypes.FLOAT, nil)
f.HOME_POSITION_y = ProtoField.new("y (float)", "mavlink_proto.HOME_POSITION_y", ftypes.FLOAT, nil)
f.HOME_POSITION_z = ProtoField.new("z (float)", "mavlink_proto.HOME_POSITION_z", ftypes.FLOAT, nil)
f.HOME_POSITION_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.HOME_POSITION_q_0", ftypes.FLOAT, nil)
f.HOME_POSITION_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.HOME_POSITION_q_1", ftypes.FLOAT, nil)
f.HOME_POSITION_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.HOME_POSITION_q_2", ftypes.FLOAT, nil)
f.HOME_POSITION_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.HOME_POSITION_q_3", ftypes.FLOAT, nil)
f.HOME_POSITION_approach_x = ProtoField.new("approach_x (float)", "mavlink_proto.HOME_POSITION_approach_x", ftypes.FLOAT, nil)
f.HOME_POSITION_approach_y = ProtoField.new("approach_y (float)", "mavlink_proto.HOME_POSITION_approach_y", ftypes.FLOAT, nil)
f.HOME_POSITION_approach_z = ProtoField.new("approach_z (float)", "mavlink_proto.HOME_POSITION_approach_z", ftypes.FLOAT, nil)
f.HOME_POSITION_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.HOME_POSITION_time_usec", ftypes.UINT64, nil)

f.SET_HOME_POSITION_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.SET_HOME_POSITION_target_system", ftypes.UINT8, nil)
f.SET_HOME_POSITION_latitude = ProtoField.new("latitude (int32_t)", "mavlink_proto.SET_HOME_POSITION_latitude", ftypes.INT32, nil)
f.SET_HOME_POSITION_longitude = ProtoField.new("longitude (int32_t)", "mavlink_proto.SET_HOME_POSITION_longitude", ftypes.INT32, nil)
f.SET_HOME_POSITION_altitude = ProtoField.new("altitude (int32_t)", "mavlink_proto.SET_HOME_POSITION_altitude", ftypes.INT32, nil)
f.SET_HOME_POSITION_x = ProtoField.new("x (float)", "mavlink_proto.SET_HOME_POSITION_x", ftypes.FLOAT, nil)
f.SET_HOME_POSITION_y = ProtoField.new("y (float)", "mavlink_proto.SET_HOME_POSITION_y", ftypes.FLOAT, nil)
f.SET_HOME_POSITION_z = ProtoField.new("z (float)", "mavlink_proto.SET_HOME_POSITION_z", ftypes.FLOAT, nil)
f.SET_HOME_POSITION_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.SET_HOME_POSITION_q_0", ftypes.FLOAT, nil)
f.SET_HOME_POSITION_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.SET_HOME_POSITION_q_1", ftypes.FLOAT, nil)
f.SET_HOME_POSITION_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.SET_HOME_POSITION_q_2", ftypes.FLOAT, nil)
f.SET_HOME_POSITION_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.SET_HOME_POSITION_q_3", ftypes.FLOAT, nil)
f.SET_HOME_POSITION_approach_x = ProtoField.new("approach_x (float)", "mavlink_proto.SET_HOME_POSITION_approach_x", ftypes.FLOAT, nil)
f.SET_HOME_POSITION_approach_y = ProtoField.new("approach_y (float)", "mavlink_proto.SET_HOME_POSITION_approach_y", ftypes.FLOAT, nil)
f.SET_HOME_POSITION_approach_z = ProtoField.new("approach_z (float)", "mavlink_proto.SET_HOME_POSITION_approach_z", ftypes.FLOAT, nil)
f.SET_HOME_POSITION_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.SET_HOME_POSITION_time_usec", ftypes.UINT64, nil)

f.MESSAGE_INTERVAL_message_id = ProtoField.new("message_id (uint16_t)", "mavlink_proto.MESSAGE_INTERVAL_message_id", ftypes.UINT16, nil)
f.MESSAGE_INTERVAL_interval_us = ProtoField.new("interval_us (int32_t)", "mavlink_proto.MESSAGE_INTERVAL_interval_us", ftypes.INT32, nil)

f.EXTENDED_SYS_STATE_vtol_state = ProtoField.new("vtol_state (MAV_VTOL_STATE)", "mavlink_proto.EXTENDED_SYS_STATE_vtol_state", ftypes.UINT8, enumEntryName.MAV_VTOL_STATE)
f.EXTENDED_SYS_STATE_landed_state = ProtoField.new("landed_state (MAV_LANDED_STATE)", "mavlink_proto.EXTENDED_SYS_STATE_landed_state", ftypes.UINT8, enumEntryName.MAV_LANDED_STATE)

f.ADSB_VEHICLE_ICAO_address = ProtoField.new("ICAO_address (uint32_t)", "mavlink_proto.ADSB_VEHICLE_ICAO_address", ftypes.UINT32, nil)
f.ADSB_VEHICLE_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.ADSB_VEHICLE_lat", ftypes.INT32, nil)
f.ADSB_VEHICLE_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.ADSB_VEHICLE_lon", ftypes.INT32, nil)
f.ADSB_VEHICLE_altitude_type = ProtoField.new("altitude_type (ADSB_ALTITUDE_TYPE)", "mavlink_proto.ADSB_VEHICLE_altitude_type", ftypes.UINT8, enumEntryName.ADSB_ALTITUDE_TYPE)
f.ADSB_VEHICLE_altitude = ProtoField.new("altitude (int32_t)", "mavlink_proto.ADSB_VEHICLE_altitude", ftypes.INT32, nil)
f.ADSB_VEHICLE_heading = ProtoField.new("heading (uint16_t)", "mavlink_proto.ADSB_VEHICLE_heading", ftypes.UINT16, nil)
f.ADSB_VEHICLE_hor_velocity = ProtoField.new("hor_velocity (uint16_t)", "mavlink_proto.ADSB_VEHICLE_hor_velocity", ftypes.UINT16, nil)
f.ADSB_VEHICLE_ver_velocity = ProtoField.new("ver_velocity (int16_t)", "mavlink_proto.ADSB_VEHICLE_ver_velocity", ftypes.INT16, nil)
f.ADSB_VEHICLE_callsign = ProtoField.new("callsign (char)", "mavlink_proto.ADSB_VEHICLE_callsign", ftypes.STRING, nil)
f.ADSB_VEHICLE_emitter_type = ProtoField.new("emitter_type (ADSB_EMITTER_TYPE)", "mavlink_proto.ADSB_VEHICLE_emitter_type", ftypes.UINT8, enumEntryName.ADSB_EMITTER_TYPE)
f.ADSB_VEHICLE_tslc = ProtoField.new("tslc (uint8_t)", "mavlink_proto.ADSB_VEHICLE_tslc", ftypes.UINT8, nil)
f.ADSB_VEHICLE_flags = ProtoField.new("flags (ADSB_FLAGS)", "mavlink_proto.ADSB_VEHICLE_flags", ftypes.UINT16, nil)
f.ADSB_VEHICLE_flags_flagADSB_FLAGS_VALID_COORDS = ProtoField.bool("mavlink_proto.ADSB_VEHICLE_flags.ADSB_FLAGS_VALID_COORDS", "ADSB_FLAGS_VALID_COORDS", 16, nil, 1)
f.ADSB_VEHICLE_flags_flagADSB_FLAGS_VALID_ALTITUDE = ProtoField.bool("mavlink_proto.ADSB_VEHICLE_flags.ADSB_FLAGS_VALID_ALTITUDE", "ADSB_FLAGS_VALID_ALTITUDE", 16, nil, 2)
f.ADSB_VEHICLE_flags_flagADSB_FLAGS_VALID_HEADING = ProtoField.bool("mavlink_proto.ADSB_VEHICLE_flags.ADSB_FLAGS_VALID_HEADING", "ADSB_FLAGS_VALID_HEADING", 16, nil, 4)
f.ADSB_VEHICLE_flags_flagADSB_FLAGS_VALID_VELOCITY = ProtoField.bool("mavlink_proto.ADSB_VEHICLE_flags.ADSB_FLAGS_VALID_VELOCITY", "ADSB_FLAGS_VALID_VELOCITY", 16, nil, 8)
f.ADSB_VEHICLE_flags_flagADSB_FLAGS_VALID_CALLSIGN = ProtoField.bool("mavlink_proto.ADSB_VEHICLE_flags.ADSB_FLAGS_VALID_CALLSIGN", "ADSB_FLAGS_VALID_CALLSIGN", 16, nil, 16)
f.ADSB_VEHICLE_flags_flagADSB_FLAGS_VALID_SQUAWK = ProtoField.bool("mavlink_proto.ADSB_VEHICLE_flags.ADSB_FLAGS_VALID_SQUAWK", "ADSB_FLAGS_VALID_SQUAWK", 16, nil, 32)
f.ADSB_VEHICLE_flags_flagADSB_FLAGS_SIMULATED = ProtoField.bool("mavlink_proto.ADSB_VEHICLE_flags.ADSB_FLAGS_SIMULATED", "ADSB_FLAGS_SIMULATED", 16, nil, 64)
f.ADSB_VEHICLE_flags_flagADSB_FLAGS_VERTICAL_VELOCITY_VALID = ProtoField.bool("mavlink_proto.ADSB_VEHICLE_flags.ADSB_FLAGS_VERTICAL_VELOCITY_VALID", "ADSB_FLAGS_VERTICAL_VELOCITY_VALID", 16, nil, 128)
f.ADSB_VEHICLE_flags_flagADSB_FLAGS_BARO_VALID = ProtoField.bool("mavlink_proto.ADSB_VEHICLE_flags.ADSB_FLAGS_BARO_VALID", "ADSB_FLAGS_BARO_VALID", 16, nil, 256)
f.ADSB_VEHICLE_flags_flagADSB_FLAGS_SOURCE_UAT = ProtoField.bool("mavlink_proto.ADSB_VEHICLE_flags.ADSB_FLAGS_SOURCE_UAT", "ADSB_FLAGS_SOURCE_UAT", 16, nil, 32768)
f.ADSB_VEHICLE_squawk = ProtoField.new("squawk (uint16_t)", "mavlink_proto.ADSB_VEHICLE_squawk", ftypes.UINT16, nil)

f.COLLISION_src = ProtoField.new("src (MAV_COLLISION_SRC)", "mavlink_proto.COLLISION_src", ftypes.UINT8, enumEntryName.MAV_COLLISION_SRC)
f.COLLISION_id = ProtoField.new("id (uint32_t)", "mavlink_proto.COLLISION_id", ftypes.UINT32, nil)
f.COLLISION_action = ProtoField.new("action (MAV_COLLISION_ACTION)", "mavlink_proto.COLLISION_action", ftypes.UINT8, enumEntryName.MAV_COLLISION_ACTION)
f.COLLISION_threat_level = ProtoField.new("threat_level (MAV_COLLISION_THREAT_LEVEL)", "mavlink_proto.COLLISION_threat_level", ftypes.UINT8, enumEntryName.MAV_COLLISION_THREAT_LEVEL)
f.COLLISION_time_to_minimum_delta = ProtoField.new("time_to_minimum_delta (float)", "mavlink_proto.COLLISION_time_to_minimum_delta", ftypes.FLOAT, nil)
f.COLLISION_altitude_minimum_delta = ProtoField.new("altitude_minimum_delta (float)", "mavlink_proto.COLLISION_altitude_minimum_delta", ftypes.FLOAT, nil)
f.COLLISION_horizontal_minimum_delta = ProtoField.new("horizontal_minimum_delta (float)", "mavlink_proto.COLLISION_horizontal_minimum_delta", ftypes.FLOAT, nil)

f.V2_EXTENSION_target_network = ProtoField.new("target_network (uint8_t)", "mavlink_proto.V2_EXTENSION_target_network", ftypes.UINT8, nil)
f.V2_EXTENSION_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.V2_EXTENSION_target_system", ftypes.UINT8, nil)
f.V2_EXTENSION_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.V2_EXTENSION_target_component", ftypes.UINT8, nil)
f.V2_EXTENSION_message_type = ProtoField.new("message_type (uint16_t)", "mavlink_proto.V2_EXTENSION_message_type", ftypes.UINT16, nil)
f.V2_EXTENSION_payload_0 = ProtoField.new("payload[0] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_0", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_1 = ProtoField.new("payload[1] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_1", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_2 = ProtoField.new("payload[2] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_2", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_3 = ProtoField.new("payload[3] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_3", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_4 = ProtoField.new("payload[4] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_4", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_5 = ProtoField.new("payload[5] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_5", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_6 = ProtoField.new("payload[6] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_6", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_7 = ProtoField.new("payload[7] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_7", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_8 = ProtoField.new("payload[8] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_8", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_9 = ProtoField.new("payload[9] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_9", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_10 = ProtoField.new("payload[10] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_10", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_11 = ProtoField.new("payload[11] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_11", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_12 = ProtoField.new("payload[12] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_12", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_13 = ProtoField.new("payload[13] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_13", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_14 = ProtoField.new("payload[14] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_14", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_15 = ProtoField.new("payload[15] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_15", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_16 = ProtoField.new("payload[16] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_16", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_17 = ProtoField.new("payload[17] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_17", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_18 = ProtoField.new("payload[18] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_18", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_19 = ProtoField.new("payload[19] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_19", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_20 = ProtoField.new("payload[20] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_20", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_21 = ProtoField.new("payload[21] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_21", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_22 = ProtoField.new("payload[22] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_22", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_23 = ProtoField.new("payload[23] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_23", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_24 = ProtoField.new("payload[24] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_24", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_25 = ProtoField.new("payload[25] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_25", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_26 = ProtoField.new("payload[26] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_26", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_27 = ProtoField.new("payload[27] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_27", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_28 = ProtoField.new("payload[28] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_28", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_29 = ProtoField.new("payload[29] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_29", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_30 = ProtoField.new("payload[30] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_30", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_31 = ProtoField.new("payload[31] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_31", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_32 = ProtoField.new("payload[32] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_32", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_33 = ProtoField.new("payload[33] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_33", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_34 = ProtoField.new("payload[34] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_34", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_35 = ProtoField.new("payload[35] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_35", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_36 = ProtoField.new("payload[36] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_36", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_37 = ProtoField.new("payload[37] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_37", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_38 = ProtoField.new("payload[38] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_38", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_39 = ProtoField.new("payload[39] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_39", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_40 = ProtoField.new("payload[40] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_40", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_41 = ProtoField.new("payload[41] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_41", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_42 = ProtoField.new("payload[42] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_42", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_43 = ProtoField.new("payload[43] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_43", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_44 = ProtoField.new("payload[44] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_44", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_45 = ProtoField.new("payload[45] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_45", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_46 = ProtoField.new("payload[46] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_46", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_47 = ProtoField.new("payload[47] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_47", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_48 = ProtoField.new("payload[48] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_48", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_49 = ProtoField.new("payload[49] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_49", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_50 = ProtoField.new("payload[50] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_50", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_51 = ProtoField.new("payload[51] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_51", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_52 = ProtoField.new("payload[52] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_52", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_53 = ProtoField.new("payload[53] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_53", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_54 = ProtoField.new("payload[54] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_54", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_55 = ProtoField.new("payload[55] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_55", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_56 = ProtoField.new("payload[56] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_56", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_57 = ProtoField.new("payload[57] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_57", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_58 = ProtoField.new("payload[58] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_58", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_59 = ProtoField.new("payload[59] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_59", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_60 = ProtoField.new("payload[60] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_60", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_61 = ProtoField.new("payload[61] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_61", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_62 = ProtoField.new("payload[62] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_62", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_63 = ProtoField.new("payload[63] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_63", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_64 = ProtoField.new("payload[64] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_64", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_65 = ProtoField.new("payload[65] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_65", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_66 = ProtoField.new("payload[66] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_66", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_67 = ProtoField.new("payload[67] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_67", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_68 = ProtoField.new("payload[68] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_68", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_69 = ProtoField.new("payload[69] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_69", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_70 = ProtoField.new("payload[70] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_70", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_71 = ProtoField.new("payload[71] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_71", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_72 = ProtoField.new("payload[72] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_72", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_73 = ProtoField.new("payload[73] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_73", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_74 = ProtoField.new("payload[74] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_74", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_75 = ProtoField.new("payload[75] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_75", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_76 = ProtoField.new("payload[76] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_76", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_77 = ProtoField.new("payload[77] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_77", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_78 = ProtoField.new("payload[78] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_78", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_79 = ProtoField.new("payload[79] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_79", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_80 = ProtoField.new("payload[80] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_80", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_81 = ProtoField.new("payload[81] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_81", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_82 = ProtoField.new("payload[82] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_82", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_83 = ProtoField.new("payload[83] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_83", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_84 = ProtoField.new("payload[84] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_84", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_85 = ProtoField.new("payload[85] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_85", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_86 = ProtoField.new("payload[86] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_86", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_87 = ProtoField.new("payload[87] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_87", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_88 = ProtoField.new("payload[88] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_88", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_89 = ProtoField.new("payload[89] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_89", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_90 = ProtoField.new("payload[90] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_90", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_91 = ProtoField.new("payload[91] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_91", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_92 = ProtoField.new("payload[92] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_92", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_93 = ProtoField.new("payload[93] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_93", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_94 = ProtoField.new("payload[94] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_94", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_95 = ProtoField.new("payload[95] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_95", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_96 = ProtoField.new("payload[96] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_96", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_97 = ProtoField.new("payload[97] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_97", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_98 = ProtoField.new("payload[98] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_98", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_99 = ProtoField.new("payload[99] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_99", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_100 = ProtoField.new("payload[100] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_100", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_101 = ProtoField.new("payload[101] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_101", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_102 = ProtoField.new("payload[102] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_102", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_103 = ProtoField.new("payload[103] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_103", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_104 = ProtoField.new("payload[104] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_104", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_105 = ProtoField.new("payload[105] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_105", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_106 = ProtoField.new("payload[106] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_106", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_107 = ProtoField.new("payload[107] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_107", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_108 = ProtoField.new("payload[108] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_108", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_109 = ProtoField.new("payload[109] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_109", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_110 = ProtoField.new("payload[110] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_110", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_111 = ProtoField.new("payload[111] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_111", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_112 = ProtoField.new("payload[112] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_112", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_113 = ProtoField.new("payload[113] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_113", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_114 = ProtoField.new("payload[114] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_114", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_115 = ProtoField.new("payload[115] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_115", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_116 = ProtoField.new("payload[116] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_116", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_117 = ProtoField.new("payload[117] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_117", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_118 = ProtoField.new("payload[118] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_118", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_119 = ProtoField.new("payload[119] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_119", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_120 = ProtoField.new("payload[120] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_120", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_121 = ProtoField.new("payload[121] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_121", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_122 = ProtoField.new("payload[122] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_122", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_123 = ProtoField.new("payload[123] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_123", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_124 = ProtoField.new("payload[124] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_124", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_125 = ProtoField.new("payload[125] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_125", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_126 = ProtoField.new("payload[126] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_126", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_127 = ProtoField.new("payload[127] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_127", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_128 = ProtoField.new("payload[128] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_128", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_129 = ProtoField.new("payload[129] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_129", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_130 = ProtoField.new("payload[130] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_130", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_131 = ProtoField.new("payload[131] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_131", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_132 = ProtoField.new("payload[132] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_132", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_133 = ProtoField.new("payload[133] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_133", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_134 = ProtoField.new("payload[134] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_134", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_135 = ProtoField.new("payload[135] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_135", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_136 = ProtoField.new("payload[136] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_136", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_137 = ProtoField.new("payload[137] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_137", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_138 = ProtoField.new("payload[138] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_138", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_139 = ProtoField.new("payload[139] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_139", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_140 = ProtoField.new("payload[140] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_140", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_141 = ProtoField.new("payload[141] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_141", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_142 = ProtoField.new("payload[142] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_142", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_143 = ProtoField.new("payload[143] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_143", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_144 = ProtoField.new("payload[144] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_144", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_145 = ProtoField.new("payload[145] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_145", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_146 = ProtoField.new("payload[146] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_146", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_147 = ProtoField.new("payload[147] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_147", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_148 = ProtoField.new("payload[148] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_148", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_149 = ProtoField.new("payload[149] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_149", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_150 = ProtoField.new("payload[150] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_150", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_151 = ProtoField.new("payload[151] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_151", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_152 = ProtoField.new("payload[152] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_152", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_153 = ProtoField.new("payload[153] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_153", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_154 = ProtoField.new("payload[154] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_154", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_155 = ProtoField.new("payload[155] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_155", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_156 = ProtoField.new("payload[156] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_156", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_157 = ProtoField.new("payload[157] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_157", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_158 = ProtoField.new("payload[158] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_158", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_159 = ProtoField.new("payload[159] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_159", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_160 = ProtoField.new("payload[160] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_160", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_161 = ProtoField.new("payload[161] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_161", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_162 = ProtoField.new("payload[162] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_162", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_163 = ProtoField.new("payload[163] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_163", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_164 = ProtoField.new("payload[164] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_164", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_165 = ProtoField.new("payload[165] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_165", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_166 = ProtoField.new("payload[166] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_166", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_167 = ProtoField.new("payload[167] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_167", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_168 = ProtoField.new("payload[168] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_168", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_169 = ProtoField.new("payload[169] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_169", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_170 = ProtoField.new("payload[170] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_170", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_171 = ProtoField.new("payload[171] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_171", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_172 = ProtoField.new("payload[172] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_172", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_173 = ProtoField.new("payload[173] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_173", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_174 = ProtoField.new("payload[174] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_174", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_175 = ProtoField.new("payload[175] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_175", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_176 = ProtoField.new("payload[176] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_176", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_177 = ProtoField.new("payload[177] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_177", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_178 = ProtoField.new("payload[178] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_178", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_179 = ProtoField.new("payload[179] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_179", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_180 = ProtoField.new("payload[180] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_180", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_181 = ProtoField.new("payload[181] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_181", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_182 = ProtoField.new("payload[182] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_182", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_183 = ProtoField.new("payload[183] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_183", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_184 = ProtoField.new("payload[184] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_184", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_185 = ProtoField.new("payload[185] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_185", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_186 = ProtoField.new("payload[186] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_186", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_187 = ProtoField.new("payload[187] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_187", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_188 = ProtoField.new("payload[188] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_188", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_189 = ProtoField.new("payload[189] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_189", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_190 = ProtoField.new("payload[190] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_190", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_191 = ProtoField.new("payload[191] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_191", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_192 = ProtoField.new("payload[192] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_192", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_193 = ProtoField.new("payload[193] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_193", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_194 = ProtoField.new("payload[194] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_194", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_195 = ProtoField.new("payload[195] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_195", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_196 = ProtoField.new("payload[196] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_196", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_197 = ProtoField.new("payload[197] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_197", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_198 = ProtoField.new("payload[198] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_198", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_199 = ProtoField.new("payload[199] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_199", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_200 = ProtoField.new("payload[200] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_200", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_201 = ProtoField.new("payload[201] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_201", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_202 = ProtoField.new("payload[202] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_202", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_203 = ProtoField.new("payload[203] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_203", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_204 = ProtoField.new("payload[204] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_204", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_205 = ProtoField.new("payload[205] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_205", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_206 = ProtoField.new("payload[206] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_206", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_207 = ProtoField.new("payload[207] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_207", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_208 = ProtoField.new("payload[208] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_208", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_209 = ProtoField.new("payload[209] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_209", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_210 = ProtoField.new("payload[210] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_210", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_211 = ProtoField.new("payload[211] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_211", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_212 = ProtoField.new("payload[212] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_212", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_213 = ProtoField.new("payload[213] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_213", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_214 = ProtoField.new("payload[214] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_214", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_215 = ProtoField.new("payload[215] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_215", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_216 = ProtoField.new("payload[216] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_216", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_217 = ProtoField.new("payload[217] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_217", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_218 = ProtoField.new("payload[218] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_218", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_219 = ProtoField.new("payload[219] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_219", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_220 = ProtoField.new("payload[220] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_220", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_221 = ProtoField.new("payload[221] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_221", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_222 = ProtoField.new("payload[222] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_222", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_223 = ProtoField.new("payload[223] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_223", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_224 = ProtoField.new("payload[224] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_224", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_225 = ProtoField.new("payload[225] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_225", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_226 = ProtoField.new("payload[226] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_226", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_227 = ProtoField.new("payload[227] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_227", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_228 = ProtoField.new("payload[228] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_228", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_229 = ProtoField.new("payload[229] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_229", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_230 = ProtoField.new("payload[230] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_230", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_231 = ProtoField.new("payload[231] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_231", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_232 = ProtoField.new("payload[232] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_232", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_233 = ProtoField.new("payload[233] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_233", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_234 = ProtoField.new("payload[234] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_234", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_235 = ProtoField.new("payload[235] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_235", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_236 = ProtoField.new("payload[236] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_236", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_237 = ProtoField.new("payload[237] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_237", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_238 = ProtoField.new("payload[238] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_238", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_239 = ProtoField.new("payload[239] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_239", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_240 = ProtoField.new("payload[240] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_240", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_241 = ProtoField.new("payload[241] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_241", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_242 = ProtoField.new("payload[242] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_242", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_243 = ProtoField.new("payload[243] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_243", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_244 = ProtoField.new("payload[244] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_244", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_245 = ProtoField.new("payload[245] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_245", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_246 = ProtoField.new("payload[246] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_246", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_247 = ProtoField.new("payload[247] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_247", ftypes.UINT8, nil)
f.V2_EXTENSION_payload_248 = ProtoField.new("payload[248] (uint8_t)", "mavlink_proto.V2_EXTENSION_payload_248", ftypes.UINT8, nil)

f.MEMORY_VECT_address = ProtoField.new("address (uint16_t)", "mavlink_proto.MEMORY_VECT_address", ftypes.UINT16, nil)
f.MEMORY_VECT_ver = ProtoField.new("ver (uint8_t)", "mavlink_proto.MEMORY_VECT_ver", ftypes.UINT8, nil)
f.MEMORY_VECT_type = ProtoField.new("type (uint8_t)", "mavlink_proto.MEMORY_VECT_type", ftypes.UINT8, nil)
f.MEMORY_VECT_value_0 = ProtoField.new("value[0] (int8_t)", "mavlink_proto.MEMORY_VECT_value_0", ftypes.INT8, nil)
f.MEMORY_VECT_value_1 = ProtoField.new("value[1] (int8_t)", "mavlink_proto.MEMORY_VECT_value_1", ftypes.INT8, nil)
f.MEMORY_VECT_value_2 = ProtoField.new("value[2] (int8_t)", "mavlink_proto.MEMORY_VECT_value_2", ftypes.INT8, nil)
f.MEMORY_VECT_value_3 = ProtoField.new("value[3] (int8_t)", "mavlink_proto.MEMORY_VECT_value_3", ftypes.INT8, nil)
f.MEMORY_VECT_value_4 = ProtoField.new("value[4] (int8_t)", "mavlink_proto.MEMORY_VECT_value_4", ftypes.INT8, nil)
f.MEMORY_VECT_value_5 = ProtoField.new("value[5] (int8_t)", "mavlink_proto.MEMORY_VECT_value_5", ftypes.INT8, nil)
f.MEMORY_VECT_value_6 = ProtoField.new("value[6] (int8_t)", "mavlink_proto.MEMORY_VECT_value_6", ftypes.INT8, nil)
f.MEMORY_VECT_value_7 = ProtoField.new("value[7] (int8_t)", "mavlink_proto.MEMORY_VECT_value_7", ftypes.INT8, nil)
f.MEMORY_VECT_value_8 = ProtoField.new("value[8] (int8_t)", "mavlink_proto.MEMORY_VECT_value_8", ftypes.INT8, nil)
f.MEMORY_VECT_value_9 = ProtoField.new("value[9] (int8_t)", "mavlink_proto.MEMORY_VECT_value_9", ftypes.INT8, nil)
f.MEMORY_VECT_value_10 = ProtoField.new("value[10] (int8_t)", "mavlink_proto.MEMORY_VECT_value_10", ftypes.INT8, nil)
f.MEMORY_VECT_value_11 = ProtoField.new("value[11] (int8_t)", "mavlink_proto.MEMORY_VECT_value_11", ftypes.INT8, nil)
f.MEMORY_VECT_value_12 = ProtoField.new("value[12] (int8_t)", "mavlink_proto.MEMORY_VECT_value_12", ftypes.INT8, nil)
f.MEMORY_VECT_value_13 = ProtoField.new("value[13] (int8_t)", "mavlink_proto.MEMORY_VECT_value_13", ftypes.INT8, nil)
f.MEMORY_VECT_value_14 = ProtoField.new("value[14] (int8_t)", "mavlink_proto.MEMORY_VECT_value_14", ftypes.INT8, nil)
f.MEMORY_VECT_value_15 = ProtoField.new("value[15] (int8_t)", "mavlink_proto.MEMORY_VECT_value_15", ftypes.INT8, nil)
f.MEMORY_VECT_value_16 = ProtoField.new("value[16] (int8_t)", "mavlink_proto.MEMORY_VECT_value_16", ftypes.INT8, nil)
f.MEMORY_VECT_value_17 = ProtoField.new("value[17] (int8_t)", "mavlink_proto.MEMORY_VECT_value_17", ftypes.INT8, nil)
f.MEMORY_VECT_value_18 = ProtoField.new("value[18] (int8_t)", "mavlink_proto.MEMORY_VECT_value_18", ftypes.INT8, nil)
f.MEMORY_VECT_value_19 = ProtoField.new("value[19] (int8_t)", "mavlink_proto.MEMORY_VECT_value_19", ftypes.INT8, nil)
f.MEMORY_VECT_value_20 = ProtoField.new("value[20] (int8_t)", "mavlink_proto.MEMORY_VECT_value_20", ftypes.INT8, nil)
f.MEMORY_VECT_value_21 = ProtoField.new("value[21] (int8_t)", "mavlink_proto.MEMORY_VECT_value_21", ftypes.INT8, nil)
f.MEMORY_VECT_value_22 = ProtoField.new("value[22] (int8_t)", "mavlink_proto.MEMORY_VECT_value_22", ftypes.INT8, nil)
f.MEMORY_VECT_value_23 = ProtoField.new("value[23] (int8_t)", "mavlink_proto.MEMORY_VECT_value_23", ftypes.INT8, nil)
f.MEMORY_VECT_value_24 = ProtoField.new("value[24] (int8_t)", "mavlink_proto.MEMORY_VECT_value_24", ftypes.INT8, nil)
f.MEMORY_VECT_value_25 = ProtoField.new("value[25] (int8_t)", "mavlink_proto.MEMORY_VECT_value_25", ftypes.INT8, nil)
f.MEMORY_VECT_value_26 = ProtoField.new("value[26] (int8_t)", "mavlink_proto.MEMORY_VECT_value_26", ftypes.INT8, nil)
f.MEMORY_VECT_value_27 = ProtoField.new("value[27] (int8_t)", "mavlink_proto.MEMORY_VECT_value_27", ftypes.INT8, nil)
f.MEMORY_VECT_value_28 = ProtoField.new("value[28] (int8_t)", "mavlink_proto.MEMORY_VECT_value_28", ftypes.INT8, nil)
f.MEMORY_VECT_value_29 = ProtoField.new("value[29] (int8_t)", "mavlink_proto.MEMORY_VECT_value_29", ftypes.INT8, nil)
f.MEMORY_VECT_value_30 = ProtoField.new("value[30] (int8_t)", "mavlink_proto.MEMORY_VECT_value_30", ftypes.INT8, nil)
f.MEMORY_VECT_value_31 = ProtoField.new("value[31] (int8_t)", "mavlink_proto.MEMORY_VECT_value_31", ftypes.INT8, nil)

f.DEBUG_VECT_name = ProtoField.new("name (char)", "mavlink_proto.DEBUG_VECT_name", ftypes.STRING, nil)
f.DEBUG_VECT_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.DEBUG_VECT_time_usec", ftypes.UINT64, nil)
f.DEBUG_VECT_x = ProtoField.new("x (float)", "mavlink_proto.DEBUG_VECT_x", ftypes.FLOAT, nil)
f.DEBUG_VECT_y = ProtoField.new("y (float)", "mavlink_proto.DEBUG_VECT_y", ftypes.FLOAT, nil)
f.DEBUG_VECT_z = ProtoField.new("z (float)", "mavlink_proto.DEBUG_VECT_z", ftypes.FLOAT, nil)

f.NAMED_VALUE_FLOAT_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.NAMED_VALUE_FLOAT_time_boot_ms", ftypes.UINT32, nil)
f.NAMED_VALUE_FLOAT_name = ProtoField.new("name (char)", "mavlink_proto.NAMED_VALUE_FLOAT_name", ftypes.STRING, nil)
f.NAMED_VALUE_FLOAT_value = ProtoField.new("value (float)", "mavlink_proto.NAMED_VALUE_FLOAT_value", ftypes.FLOAT, nil)

f.NAMED_VALUE_INT_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.NAMED_VALUE_INT_time_boot_ms", ftypes.UINT32, nil)
f.NAMED_VALUE_INT_name = ProtoField.new("name (char)", "mavlink_proto.NAMED_VALUE_INT_name", ftypes.STRING, nil)
f.NAMED_VALUE_INT_value = ProtoField.new("value (int32_t)", "mavlink_proto.NAMED_VALUE_INT_value", ftypes.INT32, nil)

f.STATUSTEXT_severity = ProtoField.new("severity (MAV_SEVERITY)", "mavlink_proto.STATUSTEXT_severity", ftypes.UINT8, enumEntryName.MAV_SEVERITY)
f.STATUSTEXT_text = ProtoField.new("text (char)", "mavlink_proto.STATUSTEXT_text", ftypes.STRING, nil)
f.STATUSTEXT_id = ProtoField.new("id (uint16_t)", "mavlink_proto.STATUSTEXT_id", ftypes.UINT16, nil)
f.STATUSTEXT_chunk_seq = ProtoField.new("chunk_seq (uint8_t)", "mavlink_proto.STATUSTEXT_chunk_seq", ftypes.UINT8, nil)

f.DEBUG_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.DEBUG_time_boot_ms", ftypes.UINT32, nil)
f.DEBUG_ind = ProtoField.new("ind (uint8_t)", "mavlink_proto.DEBUG_ind", ftypes.UINT8, nil)
f.DEBUG_value = ProtoField.new("value (float)", "mavlink_proto.DEBUG_value", ftypes.FLOAT, nil)

f.SETUP_SIGNING_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.SETUP_SIGNING_target_system", ftypes.UINT8, nil)
f.SETUP_SIGNING_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.SETUP_SIGNING_target_component", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_0 = ProtoField.new("secret_key[0] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_0", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_1 = ProtoField.new("secret_key[1] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_1", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_2 = ProtoField.new("secret_key[2] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_2", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_3 = ProtoField.new("secret_key[3] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_3", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_4 = ProtoField.new("secret_key[4] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_4", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_5 = ProtoField.new("secret_key[5] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_5", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_6 = ProtoField.new("secret_key[6] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_6", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_7 = ProtoField.new("secret_key[7] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_7", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_8 = ProtoField.new("secret_key[8] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_8", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_9 = ProtoField.new("secret_key[9] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_9", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_10 = ProtoField.new("secret_key[10] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_10", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_11 = ProtoField.new("secret_key[11] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_11", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_12 = ProtoField.new("secret_key[12] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_12", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_13 = ProtoField.new("secret_key[13] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_13", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_14 = ProtoField.new("secret_key[14] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_14", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_15 = ProtoField.new("secret_key[15] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_15", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_16 = ProtoField.new("secret_key[16] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_16", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_17 = ProtoField.new("secret_key[17] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_17", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_18 = ProtoField.new("secret_key[18] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_18", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_19 = ProtoField.new("secret_key[19] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_19", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_20 = ProtoField.new("secret_key[20] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_20", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_21 = ProtoField.new("secret_key[21] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_21", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_22 = ProtoField.new("secret_key[22] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_22", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_23 = ProtoField.new("secret_key[23] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_23", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_24 = ProtoField.new("secret_key[24] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_24", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_25 = ProtoField.new("secret_key[25] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_25", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_26 = ProtoField.new("secret_key[26] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_26", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_27 = ProtoField.new("secret_key[27] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_27", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_28 = ProtoField.new("secret_key[28] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_28", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_29 = ProtoField.new("secret_key[29] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_29", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_30 = ProtoField.new("secret_key[30] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_30", ftypes.UINT8, nil)
f.SETUP_SIGNING_secret_key_31 = ProtoField.new("secret_key[31] (uint8_t)", "mavlink_proto.SETUP_SIGNING_secret_key_31", ftypes.UINT8, nil)
f.SETUP_SIGNING_initial_timestamp = ProtoField.new("initial_timestamp (uint64_t)", "mavlink_proto.SETUP_SIGNING_initial_timestamp", ftypes.UINT64, nil)

f.BUTTON_CHANGE_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.BUTTON_CHANGE_time_boot_ms", ftypes.UINT32, nil)
f.BUTTON_CHANGE_last_change_ms = ProtoField.new("last_change_ms (uint32_t)", "mavlink_proto.BUTTON_CHANGE_last_change_ms", ftypes.UINT32, nil)
f.BUTTON_CHANGE_state = ProtoField.new("state (uint8_t)", "mavlink_proto.BUTTON_CHANGE_state", ftypes.UINT8, nil)

f.PLAY_TUNE_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.PLAY_TUNE_target_system", ftypes.UINT8, nil)
f.PLAY_TUNE_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.PLAY_TUNE_target_component", ftypes.UINT8, nil)
f.PLAY_TUNE_tune = ProtoField.new("tune (char)", "mavlink_proto.PLAY_TUNE_tune", ftypes.STRING, nil)
f.PLAY_TUNE_tune2 = ProtoField.new("tune2 (char)", "mavlink_proto.PLAY_TUNE_tune2", ftypes.STRING, nil)

f.CAMERA_INFORMATION_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.CAMERA_INFORMATION_time_boot_ms", ftypes.UINT32, nil)
f.CAMERA_INFORMATION_vendor_name_0 = ProtoField.new("vendor_name[0] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_0", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_1 = ProtoField.new("vendor_name[1] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_1", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_2 = ProtoField.new("vendor_name[2] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_2", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_3 = ProtoField.new("vendor_name[3] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_3", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_4 = ProtoField.new("vendor_name[4] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_4", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_5 = ProtoField.new("vendor_name[5] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_5", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_6 = ProtoField.new("vendor_name[6] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_6", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_7 = ProtoField.new("vendor_name[7] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_7", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_8 = ProtoField.new("vendor_name[8] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_8", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_9 = ProtoField.new("vendor_name[9] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_9", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_10 = ProtoField.new("vendor_name[10] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_10", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_11 = ProtoField.new("vendor_name[11] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_11", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_12 = ProtoField.new("vendor_name[12] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_12", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_13 = ProtoField.new("vendor_name[13] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_13", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_14 = ProtoField.new("vendor_name[14] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_14", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_15 = ProtoField.new("vendor_name[15] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_15", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_16 = ProtoField.new("vendor_name[16] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_16", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_17 = ProtoField.new("vendor_name[17] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_17", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_18 = ProtoField.new("vendor_name[18] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_18", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_19 = ProtoField.new("vendor_name[19] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_19", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_20 = ProtoField.new("vendor_name[20] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_20", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_21 = ProtoField.new("vendor_name[21] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_21", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_22 = ProtoField.new("vendor_name[22] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_22", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_23 = ProtoField.new("vendor_name[23] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_23", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_24 = ProtoField.new("vendor_name[24] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_24", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_25 = ProtoField.new("vendor_name[25] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_25", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_26 = ProtoField.new("vendor_name[26] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_26", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_27 = ProtoField.new("vendor_name[27] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_27", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_28 = ProtoField.new("vendor_name[28] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_28", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_29 = ProtoField.new("vendor_name[29] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_29", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_30 = ProtoField.new("vendor_name[30] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_30", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_vendor_name_31 = ProtoField.new("vendor_name[31] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_vendor_name_31", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_0 = ProtoField.new("model_name[0] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_0", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_1 = ProtoField.new("model_name[1] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_1", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_2 = ProtoField.new("model_name[2] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_2", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_3 = ProtoField.new("model_name[3] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_3", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_4 = ProtoField.new("model_name[4] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_4", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_5 = ProtoField.new("model_name[5] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_5", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_6 = ProtoField.new("model_name[6] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_6", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_7 = ProtoField.new("model_name[7] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_7", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_8 = ProtoField.new("model_name[8] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_8", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_9 = ProtoField.new("model_name[9] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_9", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_10 = ProtoField.new("model_name[10] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_10", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_11 = ProtoField.new("model_name[11] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_11", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_12 = ProtoField.new("model_name[12] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_12", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_13 = ProtoField.new("model_name[13] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_13", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_14 = ProtoField.new("model_name[14] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_14", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_15 = ProtoField.new("model_name[15] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_15", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_16 = ProtoField.new("model_name[16] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_16", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_17 = ProtoField.new("model_name[17] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_17", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_18 = ProtoField.new("model_name[18] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_18", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_19 = ProtoField.new("model_name[19] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_19", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_20 = ProtoField.new("model_name[20] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_20", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_21 = ProtoField.new("model_name[21] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_21", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_22 = ProtoField.new("model_name[22] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_22", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_23 = ProtoField.new("model_name[23] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_23", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_24 = ProtoField.new("model_name[24] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_24", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_25 = ProtoField.new("model_name[25] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_25", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_26 = ProtoField.new("model_name[26] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_26", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_27 = ProtoField.new("model_name[27] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_27", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_28 = ProtoField.new("model_name[28] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_28", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_29 = ProtoField.new("model_name[29] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_29", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_30 = ProtoField.new("model_name[30] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_30", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_model_name_31 = ProtoField.new("model_name[31] (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_model_name_31", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_firmware_version = ProtoField.new("firmware_version (uint32_t)", "mavlink_proto.CAMERA_INFORMATION_firmware_version", ftypes.UINT32, nil)
f.CAMERA_INFORMATION_focal_length = ProtoField.new("focal_length (float)", "mavlink_proto.CAMERA_INFORMATION_focal_length", ftypes.FLOAT, nil)
f.CAMERA_INFORMATION_sensor_size_h = ProtoField.new("sensor_size_h (float)", "mavlink_proto.CAMERA_INFORMATION_sensor_size_h", ftypes.FLOAT, nil)
f.CAMERA_INFORMATION_sensor_size_v = ProtoField.new("sensor_size_v (float)", "mavlink_proto.CAMERA_INFORMATION_sensor_size_v", ftypes.FLOAT, nil)
f.CAMERA_INFORMATION_resolution_h = ProtoField.new("resolution_h (uint16_t)", "mavlink_proto.CAMERA_INFORMATION_resolution_h", ftypes.UINT16, nil)
f.CAMERA_INFORMATION_resolution_v = ProtoField.new("resolution_v (uint16_t)", "mavlink_proto.CAMERA_INFORMATION_resolution_v", ftypes.UINT16, nil)
f.CAMERA_INFORMATION_lens_id = ProtoField.new("lens_id (uint8_t)", "mavlink_proto.CAMERA_INFORMATION_lens_id", ftypes.UINT8, nil)
f.CAMERA_INFORMATION_flags = ProtoField.new("flags (CAMERA_CAP_FLAGS)", "mavlink_proto.CAMERA_INFORMATION_flags", ftypes.UINT32, nil)
f.CAMERA_INFORMATION_flags_flagCAMERA_CAP_FLAGS_CAPTURE_VIDEO = ProtoField.bool("mavlink_proto.CAMERA_INFORMATION_flags.CAMERA_CAP_FLAGS_CAPTURE_VIDEO", "CAMERA_CAP_FLAGS_CAPTURE_VIDEO", 12, nil, 1)
f.CAMERA_INFORMATION_flags_flagCAMERA_CAP_FLAGS_CAPTURE_IMAGE = ProtoField.bool("mavlink_proto.CAMERA_INFORMATION_flags.CAMERA_CAP_FLAGS_CAPTURE_IMAGE", "CAMERA_CAP_FLAGS_CAPTURE_IMAGE", 12, nil, 2)
f.CAMERA_INFORMATION_flags_flagCAMERA_CAP_FLAGS_HAS_MODES = ProtoField.bool("mavlink_proto.CAMERA_INFORMATION_flags.CAMERA_CAP_FLAGS_HAS_MODES", "CAMERA_CAP_FLAGS_HAS_MODES", 12, nil, 4)
f.CAMERA_INFORMATION_flags_flagCAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE = ProtoField.bool("mavlink_proto.CAMERA_INFORMATION_flags.CAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE", "CAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE", 12, nil, 8)
f.CAMERA_INFORMATION_flags_flagCAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE = ProtoField.bool("mavlink_proto.CAMERA_INFORMATION_flags.CAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE", "CAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE", 12, nil, 16)
f.CAMERA_INFORMATION_flags_flagCAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE = ProtoField.bool("mavlink_proto.CAMERA_INFORMATION_flags.CAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE", "CAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE", 12, nil, 32)
f.CAMERA_INFORMATION_flags_flagCAMERA_CAP_FLAGS_HAS_BASIC_ZOOM = ProtoField.bool("mavlink_proto.CAMERA_INFORMATION_flags.CAMERA_CAP_FLAGS_HAS_BASIC_ZOOM", "CAMERA_CAP_FLAGS_HAS_BASIC_ZOOM", 12, nil, 64)
f.CAMERA_INFORMATION_flags_flagCAMERA_CAP_FLAGS_HAS_BASIC_FOCUS = ProtoField.bool("mavlink_proto.CAMERA_INFORMATION_flags.CAMERA_CAP_FLAGS_HAS_BASIC_FOCUS", "CAMERA_CAP_FLAGS_HAS_BASIC_FOCUS", 12, nil, 128)
f.CAMERA_INFORMATION_flags_flagCAMERA_CAP_FLAGS_HAS_VIDEO_STREAM = ProtoField.bool("mavlink_proto.CAMERA_INFORMATION_flags.CAMERA_CAP_FLAGS_HAS_VIDEO_STREAM", "CAMERA_CAP_FLAGS_HAS_VIDEO_STREAM", 12, nil, 256)
f.CAMERA_INFORMATION_flags_flagCAMERA_CAP_FLAGS_HAS_TRACKING_POINT = ProtoField.bool("mavlink_proto.CAMERA_INFORMATION_flags.CAMERA_CAP_FLAGS_HAS_TRACKING_POINT", "CAMERA_CAP_FLAGS_HAS_TRACKING_POINT", 12, nil, 512)
f.CAMERA_INFORMATION_flags_flagCAMERA_CAP_FLAGS_HAS_TRACKING_RECTANGLE = ProtoField.bool("mavlink_proto.CAMERA_INFORMATION_flags.CAMERA_CAP_FLAGS_HAS_TRACKING_RECTANGLE", "CAMERA_CAP_FLAGS_HAS_TRACKING_RECTANGLE", 12, nil, 1024)
f.CAMERA_INFORMATION_flags_flagCAMERA_CAP_FLAGS_HAS_TRACKING_GEO_STATUS = ProtoField.bool("mavlink_proto.CAMERA_INFORMATION_flags.CAMERA_CAP_FLAGS_HAS_TRACKING_GEO_STATUS", "CAMERA_CAP_FLAGS_HAS_TRACKING_GEO_STATUS", 12, nil, 2048)
f.CAMERA_INFORMATION_cam_definition_version = ProtoField.new("cam_definition_version (uint16_t)", "mavlink_proto.CAMERA_INFORMATION_cam_definition_version", ftypes.UINT16, nil)
f.CAMERA_INFORMATION_cam_definition_uri = ProtoField.new("cam_definition_uri (char)", "mavlink_proto.CAMERA_INFORMATION_cam_definition_uri", ftypes.STRING, nil)

f.CAMERA_SETTINGS_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.CAMERA_SETTINGS_time_boot_ms", ftypes.UINT32, nil)
f.CAMERA_SETTINGS_mode_id = ProtoField.new("mode_id (CAMERA_MODE)", "mavlink_proto.CAMERA_SETTINGS_mode_id", ftypes.UINT8, enumEntryName.CAMERA_MODE)
f.CAMERA_SETTINGS_zoomLevel = ProtoField.new("zoomLevel (float)", "mavlink_proto.CAMERA_SETTINGS_zoomLevel", ftypes.FLOAT, nil)
f.CAMERA_SETTINGS_focusLevel = ProtoField.new("focusLevel (float)", "mavlink_proto.CAMERA_SETTINGS_focusLevel", ftypes.FLOAT, nil)

f.STORAGE_INFORMATION_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.STORAGE_INFORMATION_time_boot_ms", ftypes.UINT32, nil)
f.STORAGE_INFORMATION_storage_id = ProtoField.new("storage_id (uint8_t)", "mavlink_proto.STORAGE_INFORMATION_storage_id", ftypes.UINT8, nil)
f.STORAGE_INFORMATION_storage_count = ProtoField.new("storage_count (uint8_t)", "mavlink_proto.STORAGE_INFORMATION_storage_count", ftypes.UINT8, nil)
f.STORAGE_INFORMATION_status = ProtoField.new("status (STORAGE_STATUS)", "mavlink_proto.STORAGE_INFORMATION_status", ftypes.UINT8, enumEntryName.STORAGE_STATUS)
f.STORAGE_INFORMATION_total_capacity = ProtoField.new("total_capacity (float)", "mavlink_proto.STORAGE_INFORMATION_total_capacity", ftypes.FLOAT, nil)
f.STORAGE_INFORMATION_used_capacity = ProtoField.new("used_capacity (float)", "mavlink_proto.STORAGE_INFORMATION_used_capacity", ftypes.FLOAT, nil)
f.STORAGE_INFORMATION_available_capacity = ProtoField.new("available_capacity (float)", "mavlink_proto.STORAGE_INFORMATION_available_capacity", ftypes.FLOAT, nil)
f.STORAGE_INFORMATION_read_speed = ProtoField.new("read_speed (float)", "mavlink_proto.STORAGE_INFORMATION_read_speed", ftypes.FLOAT, nil)
f.STORAGE_INFORMATION_write_speed = ProtoField.new("write_speed (float)", "mavlink_proto.STORAGE_INFORMATION_write_speed", ftypes.FLOAT, nil)
f.STORAGE_INFORMATION_type = ProtoField.new("type (STORAGE_TYPE)", "mavlink_proto.STORAGE_INFORMATION_type", ftypes.UINT8, enumEntryName.STORAGE_TYPE)
f.STORAGE_INFORMATION_name = ProtoField.new("name (char)", "mavlink_proto.STORAGE_INFORMATION_name", ftypes.STRING, nil)

f.CAMERA_CAPTURE_STATUS_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.CAMERA_CAPTURE_STATUS_time_boot_ms", ftypes.UINT32, nil)
f.CAMERA_CAPTURE_STATUS_image_status = ProtoField.new("image_status (uint8_t)", "mavlink_proto.CAMERA_CAPTURE_STATUS_image_status", ftypes.UINT8, nil)
f.CAMERA_CAPTURE_STATUS_video_status = ProtoField.new("video_status (uint8_t)", "mavlink_proto.CAMERA_CAPTURE_STATUS_video_status", ftypes.UINT8, nil)
f.CAMERA_CAPTURE_STATUS_image_interval = ProtoField.new("image_interval (float)", "mavlink_proto.CAMERA_CAPTURE_STATUS_image_interval", ftypes.FLOAT, nil)
f.CAMERA_CAPTURE_STATUS_recording_time_ms = ProtoField.new("recording_time_ms (uint32_t)", "mavlink_proto.CAMERA_CAPTURE_STATUS_recording_time_ms", ftypes.UINT32, nil)
f.CAMERA_CAPTURE_STATUS_available_capacity = ProtoField.new("available_capacity (float)", "mavlink_proto.CAMERA_CAPTURE_STATUS_available_capacity", ftypes.FLOAT, nil)
f.CAMERA_CAPTURE_STATUS_image_count = ProtoField.new("image_count (int32_t)", "mavlink_proto.CAMERA_CAPTURE_STATUS_image_count", ftypes.INT32, nil)

f.CAMERA_IMAGE_CAPTURED_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_time_boot_ms", ftypes.UINT32, nil)
f.CAMERA_IMAGE_CAPTURED_time_utc = ProtoField.new("time_utc (uint64_t)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_time_utc", ftypes.UINT64, nil)
f.CAMERA_IMAGE_CAPTURED_camera_id = ProtoField.new("camera_id (uint8_t)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_camera_id", ftypes.UINT8, nil)
f.CAMERA_IMAGE_CAPTURED_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_lat", ftypes.INT32, nil)
f.CAMERA_IMAGE_CAPTURED_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_lon", ftypes.INT32, nil)
f.CAMERA_IMAGE_CAPTURED_alt = ProtoField.new("alt (int32_t)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_alt", ftypes.INT32, nil)
f.CAMERA_IMAGE_CAPTURED_relative_alt = ProtoField.new("relative_alt (int32_t)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_relative_alt", ftypes.INT32, nil)
f.CAMERA_IMAGE_CAPTURED_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_q_0", ftypes.FLOAT, nil)
f.CAMERA_IMAGE_CAPTURED_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_q_1", ftypes.FLOAT, nil)
f.CAMERA_IMAGE_CAPTURED_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_q_2", ftypes.FLOAT, nil)
f.CAMERA_IMAGE_CAPTURED_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_q_3", ftypes.FLOAT, nil)
f.CAMERA_IMAGE_CAPTURED_image_index = ProtoField.new("image_index (int32_t)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_image_index", ftypes.INT32, nil)
f.CAMERA_IMAGE_CAPTURED_capture_result = ProtoField.new("capture_result (int8_t)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_capture_result", ftypes.INT8, nil)
f.CAMERA_IMAGE_CAPTURED_file_url = ProtoField.new("file_url (char)", "mavlink_proto.CAMERA_IMAGE_CAPTURED_file_url", ftypes.STRING, nil)

f.FLIGHT_INFORMATION_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.FLIGHT_INFORMATION_time_boot_ms", ftypes.UINT32, nil)
f.FLIGHT_INFORMATION_arming_time_utc = ProtoField.new("arming_time_utc (uint64_t)", "mavlink_proto.FLIGHT_INFORMATION_arming_time_utc", ftypes.UINT64, nil)
f.FLIGHT_INFORMATION_takeoff_time_utc = ProtoField.new("takeoff_time_utc (uint64_t)", "mavlink_proto.FLIGHT_INFORMATION_takeoff_time_utc", ftypes.UINT64, nil)
f.FLIGHT_INFORMATION_flight_uuid = ProtoField.new("flight_uuid (uint64_t)", "mavlink_proto.FLIGHT_INFORMATION_flight_uuid", ftypes.UINT64, nil)

f.MOUNT_ORIENTATION_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.MOUNT_ORIENTATION_time_boot_ms", ftypes.UINT32, nil)
f.MOUNT_ORIENTATION_roll = ProtoField.new("roll (float)", "mavlink_proto.MOUNT_ORIENTATION_roll", ftypes.FLOAT, nil)
f.MOUNT_ORIENTATION_pitch = ProtoField.new("pitch (float)", "mavlink_proto.MOUNT_ORIENTATION_pitch", ftypes.FLOAT, nil)
f.MOUNT_ORIENTATION_yaw = ProtoField.new("yaw (float)", "mavlink_proto.MOUNT_ORIENTATION_yaw", ftypes.FLOAT, nil)
f.MOUNT_ORIENTATION_yaw_absolute = ProtoField.new("yaw_absolute (float)", "mavlink_proto.MOUNT_ORIENTATION_yaw_absolute", ftypes.FLOAT, nil)

f.LOGGING_DATA_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.LOGGING_DATA_target_system", ftypes.UINT8, nil)
f.LOGGING_DATA_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.LOGGING_DATA_target_component", ftypes.UINT8, nil)
f.LOGGING_DATA_sequence = ProtoField.new("sequence (uint16_t)", "mavlink_proto.LOGGING_DATA_sequence", ftypes.UINT16, nil)
f.LOGGING_DATA_length = ProtoField.new("length (uint8_t)", "mavlink_proto.LOGGING_DATA_length", ftypes.UINT8, nil)
f.LOGGING_DATA_first_message_offset = ProtoField.new("first_message_offset (uint8_t)", "mavlink_proto.LOGGING_DATA_first_message_offset", ftypes.UINT8, nil)
f.LOGGING_DATA_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_0", ftypes.UINT8, nil)
f.LOGGING_DATA_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_1", ftypes.UINT8, nil)
f.LOGGING_DATA_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_2", ftypes.UINT8, nil)
f.LOGGING_DATA_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_3", ftypes.UINT8, nil)
f.LOGGING_DATA_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_4", ftypes.UINT8, nil)
f.LOGGING_DATA_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_5", ftypes.UINT8, nil)
f.LOGGING_DATA_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_6", ftypes.UINT8, nil)
f.LOGGING_DATA_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_7", ftypes.UINT8, nil)
f.LOGGING_DATA_data_8 = ProtoField.new("data[8] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_8", ftypes.UINT8, nil)
f.LOGGING_DATA_data_9 = ProtoField.new("data[9] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_9", ftypes.UINT8, nil)
f.LOGGING_DATA_data_10 = ProtoField.new("data[10] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_10", ftypes.UINT8, nil)
f.LOGGING_DATA_data_11 = ProtoField.new("data[11] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_11", ftypes.UINT8, nil)
f.LOGGING_DATA_data_12 = ProtoField.new("data[12] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_12", ftypes.UINT8, nil)
f.LOGGING_DATA_data_13 = ProtoField.new("data[13] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_13", ftypes.UINT8, nil)
f.LOGGING_DATA_data_14 = ProtoField.new("data[14] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_14", ftypes.UINT8, nil)
f.LOGGING_DATA_data_15 = ProtoField.new("data[15] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_15", ftypes.UINT8, nil)
f.LOGGING_DATA_data_16 = ProtoField.new("data[16] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_16", ftypes.UINT8, nil)
f.LOGGING_DATA_data_17 = ProtoField.new("data[17] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_17", ftypes.UINT8, nil)
f.LOGGING_DATA_data_18 = ProtoField.new("data[18] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_18", ftypes.UINT8, nil)
f.LOGGING_DATA_data_19 = ProtoField.new("data[19] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_19", ftypes.UINT8, nil)
f.LOGGING_DATA_data_20 = ProtoField.new("data[20] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_20", ftypes.UINT8, nil)
f.LOGGING_DATA_data_21 = ProtoField.new("data[21] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_21", ftypes.UINT8, nil)
f.LOGGING_DATA_data_22 = ProtoField.new("data[22] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_22", ftypes.UINT8, nil)
f.LOGGING_DATA_data_23 = ProtoField.new("data[23] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_23", ftypes.UINT8, nil)
f.LOGGING_DATA_data_24 = ProtoField.new("data[24] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_24", ftypes.UINT8, nil)
f.LOGGING_DATA_data_25 = ProtoField.new("data[25] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_25", ftypes.UINT8, nil)
f.LOGGING_DATA_data_26 = ProtoField.new("data[26] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_26", ftypes.UINT8, nil)
f.LOGGING_DATA_data_27 = ProtoField.new("data[27] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_27", ftypes.UINT8, nil)
f.LOGGING_DATA_data_28 = ProtoField.new("data[28] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_28", ftypes.UINT8, nil)
f.LOGGING_DATA_data_29 = ProtoField.new("data[29] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_29", ftypes.UINT8, nil)
f.LOGGING_DATA_data_30 = ProtoField.new("data[30] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_30", ftypes.UINT8, nil)
f.LOGGING_DATA_data_31 = ProtoField.new("data[31] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_31", ftypes.UINT8, nil)
f.LOGGING_DATA_data_32 = ProtoField.new("data[32] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_32", ftypes.UINT8, nil)
f.LOGGING_DATA_data_33 = ProtoField.new("data[33] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_33", ftypes.UINT8, nil)
f.LOGGING_DATA_data_34 = ProtoField.new("data[34] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_34", ftypes.UINT8, nil)
f.LOGGING_DATA_data_35 = ProtoField.new("data[35] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_35", ftypes.UINT8, nil)
f.LOGGING_DATA_data_36 = ProtoField.new("data[36] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_36", ftypes.UINT8, nil)
f.LOGGING_DATA_data_37 = ProtoField.new("data[37] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_37", ftypes.UINT8, nil)
f.LOGGING_DATA_data_38 = ProtoField.new("data[38] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_38", ftypes.UINT8, nil)
f.LOGGING_DATA_data_39 = ProtoField.new("data[39] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_39", ftypes.UINT8, nil)
f.LOGGING_DATA_data_40 = ProtoField.new("data[40] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_40", ftypes.UINT8, nil)
f.LOGGING_DATA_data_41 = ProtoField.new("data[41] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_41", ftypes.UINT8, nil)
f.LOGGING_DATA_data_42 = ProtoField.new("data[42] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_42", ftypes.UINT8, nil)
f.LOGGING_DATA_data_43 = ProtoField.new("data[43] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_43", ftypes.UINT8, nil)
f.LOGGING_DATA_data_44 = ProtoField.new("data[44] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_44", ftypes.UINT8, nil)
f.LOGGING_DATA_data_45 = ProtoField.new("data[45] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_45", ftypes.UINT8, nil)
f.LOGGING_DATA_data_46 = ProtoField.new("data[46] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_46", ftypes.UINT8, nil)
f.LOGGING_DATA_data_47 = ProtoField.new("data[47] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_47", ftypes.UINT8, nil)
f.LOGGING_DATA_data_48 = ProtoField.new("data[48] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_48", ftypes.UINT8, nil)
f.LOGGING_DATA_data_49 = ProtoField.new("data[49] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_49", ftypes.UINT8, nil)
f.LOGGING_DATA_data_50 = ProtoField.new("data[50] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_50", ftypes.UINT8, nil)
f.LOGGING_DATA_data_51 = ProtoField.new("data[51] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_51", ftypes.UINT8, nil)
f.LOGGING_DATA_data_52 = ProtoField.new("data[52] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_52", ftypes.UINT8, nil)
f.LOGGING_DATA_data_53 = ProtoField.new("data[53] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_53", ftypes.UINT8, nil)
f.LOGGING_DATA_data_54 = ProtoField.new("data[54] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_54", ftypes.UINT8, nil)
f.LOGGING_DATA_data_55 = ProtoField.new("data[55] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_55", ftypes.UINT8, nil)
f.LOGGING_DATA_data_56 = ProtoField.new("data[56] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_56", ftypes.UINT8, nil)
f.LOGGING_DATA_data_57 = ProtoField.new("data[57] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_57", ftypes.UINT8, nil)
f.LOGGING_DATA_data_58 = ProtoField.new("data[58] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_58", ftypes.UINT8, nil)
f.LOGGING_DATA_data_59 = ProtoField.new("data[59] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_59", ftypes.UINT8, nil)
f.LOGGING_DATA_data_60 = ProtoField.new("data[60] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_60", ftypes.UINT8, nil)
f.LOGGING_DATA_data_61 = ProtoField.new("data[61] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_61", ftypes.UINT8, nil)
f.LOGGING_DATA_data_62 = ProtoField.new("data[62] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_62", ftypes.UINT8, nil)
f.LOGGING_DATA_data_63 = ProtoField.new("data[63] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_63", ftypes.UINT8, nil)
f.LOGGING_DATA_data_64 = ProtoField.new("data[64] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_64", ftypes.UINT8, nil)
f.LOGGING_DATA_data_65 = ProtoField.new("data[65] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_65", ftypes.UINT8, nil)
f.LOGGING_DATA_data_66 = ProtoField.new("data[66] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_66", ftypes.UINT8, nil)
f.LOGGING_DATA_data_67 = ProtoField.new("data[67] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_67", ftypes.UINT8, nil)
f.LOGGING_DATA_data_68 = ProtoField.new("data[68] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_68", ftypes.UINT8, nil)
f.LOGGING_DATA_data_69 = ProtoField.new("data[69] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_69", ftypes.UINT8, nil)
f.LOGGING_DATA_data_70 = ProtoField.new("data[70] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_70", ftypes.UINT8, nil)
f.LOGGING_DATA_data_71 = ProtoField.new("data[71] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_71", ftypes.UINT8, nil)
f.LOGGING_DATA_data_72 = ProtoField.new("data[72] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_72", ftypes.UINT8, nil)
f.LOGGING_DATA_data_73 = ProtoField.new("data[73] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_73", ftypes.UINT8, nil)
f.LOGGING_DATA_data_74 = ProtoField.new("data[74] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_74", ftypes.UINT8, nil)
f.LOGGING_DATA_data_75 = ProtoField.new("data[75] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_75", ftypes.UINT8, nil)
f.LOGGING_DATA_data_76 = ProtoField.new("data[76] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_76", ftypes.UINT8, nil)
f.LOGGING_DATA_data_77 = ProtoField.new("data[77] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_77", ftypes.UINT8, nil)
f.LOGGING_DATA_data_78 = ProtoField.new("data[78] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_78", ftypes.UINT8, nil)
f.LOGGING_DATA_data_79 = ProtoField.new("data[79] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_79", ftypes.UINT8, nil)
f.LOGGING_DATA_data_80 = ProtoField.new("data[80] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_80", ftypes.UINT8, nil)
f.LOGGING_DATA_data_81 = ProtoField.new("data[81] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_81", ftypes.UINT8, nil)
f.LOGGING_DATA_data_82 = ProtoField.new("data[82] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_82", ftypes.UINT8, nil)
f.LOGGING_DATA_data_83 = ProtoField.new("data[83] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_83", ftypes.UINT8, nil)
f.LOGGING_DATA_data_84 = ProtoField.new("data[84] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_84", ftypes.UINT8, nil)
f.LOGGING_DATA_data_85 = ProtoField.new("data[85] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_85", ftypes.UINT8, nil)
f.LOGGING_DATA_data_86 = ProtoField.new("data[86] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_86", ftypes.UINT8, nil)
f.LOGGING_DATA_data_87 = ProtoField.new("data[87] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_87", ftypes.UINT8, nil)
f.LOGGING_DATA_data_88 = ProtoField.new("data[88] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_88", ftypes.UINT8, nil)
f.LOGGING_DATA_data_89 = ProtoField.new("data[89] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_89", ftypes.UINT8, nil)
f.LOGGING_DATA_data_90 = ProtoField.new("data[90] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_90", ftypes.UINT8, nil)
f.LOGGING_DATA_data_91 = ProtoField.new("data[91] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_91", ftypes.UINT8, nil)
f.LOGGING_DATA_data_92 = ProtoField.new("data[92] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_92", ftypes.UINT8, nil)
f.LOGGING_DATA_data_93 = ProtoField.new("data[93] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_93", ftypes.UINT8, nil)
f.LOGGING_DATA_data_94 = ProtoField.new("data[94] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_94", ftypes.UINT8, nil)
f.LOGGING_DATA_data_95 = ProtoField.new("data[95] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_95", ftypes.UINT8, nil)
f.LOGGING_DATA_data_96 = ProtoField.new("data[96] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_96", ftypes.UINT8, nil)
f.LOGGING_DATA_data_97 = ProtoField.new("data[97] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_97", ftypes.UINT8, nil)
f.LOGGING_DATA_data_98 = ProtoField.new("data[98] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_98", ftypes.UINT8, nil)
f.LOGGING_DATA_data_99 = ProtoField.new("data[99] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_99", ftypes.UINT8, nil)
f.LOGGING_DATA_data_100 = ProtoField.new("data[100] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_100", ftypes.UINT8, nil)
f.LOGGING_DATA_data_101 = ProtoField.new("data[101] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_101", ftypes.UINT8, nil)
f.LOGGING_DATA_data_102 = ProtoField.new("data[102] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_102", ftypes.UINT8, nil)
f.LOGGING_DATA_data_103 = ProtoField.new("data[103] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_103", ftypes.UINT8, nil)
f.LOGGING_DATA_data_104 = ProtoField.new("data[104] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_104", ftypes.UINT8, nil)
f.LOGGING_DATA_data_105 = ProtoField.new("data[105] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_105", ftypes.UINT8, nil)
f.LOGGING_DATA_data_106 = ProtoField.new("data[106] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_106", ftypes.UINT8, nil)
f.LOGGING_DATA_data_107 = ProtoField.new("data[107] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_107", ftypes.UINT8, nil)
f.LOGGING_DATA_data_108 = ProtoField.new("data[108] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_108", ftypes.UINT8, nil)
f.LOGGING_DATA_data_109 = ProtoField.new("data[109] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_109", ftypes.UINT8, nil)
f.LOGGING_DATA_data_110 = ProtoField.new("data[110] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_110", ftypes.UINT8, nil)
f.LOGGING_DATA_data_111 = ProtoField.new("data[111] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_111", ftypes.UINT8, nil)
f.LOGGING_DATA_data_112 = ProtoField.new("data[112] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_112", ftypes.UINT8, nil)
f.LOGGING_DATA_data_113 = ProtoField.new("data[113] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_113", ftypes.UINT8, nil)
f.LOGGING_DATA_data_114 = ProtoField.new("data[114] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_114", ftypes.UINT8, nil)
f.LOGGING_DATA_data_115 = ProtoField.new("data[115] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_115", ftypes.UINT8, nil)
f.LOGGING_DATA_data_116 = ProtoField.new("data[116] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_116", ftypes.UINT8, nil)
f.LOGGING_DATA_data_117 = ProtoField.new("data[117] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_117", ftypes.UINT8, nil)
f.LOGGING_DATA_data_118 = ProtoField.new("data[118] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_118", ftypes.UINT8, nil)
f.LOGGING_DATA_data_119 = ProtoField.new("data[119] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_119", ftypes.UINT8, nil)
f.LOGGING_DATA_data_120 = ProtoField.new("data[120] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_120", ftypes.UINT8, nil)
f.LOGGING_DATA_data_121 = ProtoField.new("data[121] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_121", ftypes.UINT8, nil)
f.LOGGING_DATA_data_122 = ProtoField.new("data[122] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_122", ftypes.UINT8, nil)
f.LOGGING_DATA_data_123 = ProtoField.new("data[123] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_123", ftypes.UINT8, nil)
f.LOGGING_DATA_data_124 = ProtoField.new("data[124] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_124", ftypes.UINT8, nil)
f.LOGGING_DATA_data_125 = ProtoField.new("data[125] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_125", ftypes.UINT8, nil)
f.LOGGING_DATA_data_126 = ProtoField.new("data[126] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_126", ftypes.UINT8, nil)
f.LOGGING_DATA_data_127 = ProtoField.new("data[127] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_127", ftypes.UINT8, nil)
f.LOGGING_DATA_data_128 = ProtoField.new("data[128] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_128", ftypes.UINT8, nil)
f.LOGGING_DATA_data_129 = ProtoField.new("data[129] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_129", ftypes.UINT8, nil)
f.LOGGING_DATA_data_130 = ProtoField.new("data[130] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_130", ftypes.UINT8, nil)
f.LOGGING_DATA_data_131 = ProtoField.new("data[131] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_131", ftypes.UINT8, nil)
f.LOGGING_DATA_data_132 = ProtoField.new("data[132] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_132", ftypes.UINT8, nil)
f.LOGGING_DATA_data_133 = ProtoField.new("data[133] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_133", ftypes.UINT8, nil)
f.LOGGING_DATA_data_134 = ProtoField.new("data[134] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_134", ftypes.UINT8, nil)
f.LOGGING_DATA_data_135 = ProtoField.new("data[135] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_135", ftypes.UINT8, nil)
f.LOGGING_DATA_data_136 = ProtoField.new("data[136] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_136", ftypes.UINT8, nil)
f.LOGGING_DATA_data_137 = ProtoField.new("data[137] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_137", ftypes.UINT8, nil)
f.LOGGING_DATA_data_138 = ProtoField.new("data[138] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_138", ftypes.UINT8, nil)
f.LOGGING_DATA_data_139 = ProtoField.new("data[139] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_139", ftypes.UINT8, nil)
f.LOGGING_DATA_data_140 = ProtoField.new("data[140] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_140", ftypes.UINT8, nil)
f.LOGGING_DATA_data_141 = ProtoField.new("data[141] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_141", ftypes.UINT8, nil)
f.LOGGING_DATA_data_142 = ProtoField.new("data[142] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_142", ftypes.UINT8, nil)
f.LOGGING_DATA_data_143 = ProtoField.new("data[143] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_143", ftypes.UINT8, nil)
f.LOGGING_DATA_data_144 = ProtoField.new("data[144] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_144", ftypes.UINT8, nil)
f.LOGGING_DATA_data_145 = ProtoField.new("data[145] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_145", ftypes.UINT8, nil)
f.LOGGING_DATA_data_146 = ProtoField.new("data[146] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_146", ftypes.UINT8, nil)
f.LOGGING_DATA_data_147 = ProtoField.new("data[147] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_147", ftypes.UINT8, nil)
f.LOGGING_DATA_data_148 = ProtoField.new("data[148] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_148", ftypes.UINT8, nil)
f.LOGGING_DATA_data_149 = ProtoField.new("data[149] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_149", ftypes.UINT8, nil)
f.LOGGING_DATA_data_150 = ProtoField.new("data[150] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_150", ftypes.UINT8, nil)
f.LOGGING_DATA_data_151 = ProtoField.new("data[151] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_151", ftypes.UINT8, nil)
f.LOGGING_DATA_data_152 = ProtoField.new("data[152] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_152", ftypes.UINT8, nil)
f.LOGGING_DATA_data_153 = ProtoField.new("data[153] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_153", ftypes.UINT8, nil)
f.LOGGING_DATA_data_154 = ProtoField.new("data[154] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_154", ftypes.UINT8, nil)
f.LOGGING_DATA_data_155 = ProtoField.new("data[155] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_155", ftypes.UINT8, nil)
f.LOGGING_DATA_data_156 = ProtoField.new("data[156] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_156", ftypes.UINT8, nil)
f.LOGGING_DATA_data_157 = ProtoField.new("data[157] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_157", ftypes.UINT8, nil)
f.LOGGING_DATA_data_158 = ProtoField.new("data[158] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_158", ftypes.UINT8, nil)
f.LOGGING_DATA_data_159 = ProtoField.new("data[159] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_159", ftypes.UINT8, nil)
f.LOGGING_DATA_data_160 = ProtoField.new("data[160] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_160", ftypes.UINT8, nil)
f.LOGGING_DATA_data_161 = ProtoField.new("data[161] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_161", ftypes.UINT8, nil)
f.LOGGING_DATA_data_162 = ProtoField.new("data[162] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_162", ftypes.UINT8, nil)
f.LOGGING_DATA_data_163 = ProtoField.new("data[163] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_163", ftypes.UINT8, nil)
f.LOGGING_DATA_data_164 = ProtoField.new("data[164] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_164", ftypes.UINT8, nil)
f.LOGGING_DATA_data_165 = ProtoField.new("data[165] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_165", ftypes.UINT8, nil)
f.LOGGING_DATA_data_166 = ProtoField.new("data[166] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_166", ftypes.UINT8, nil)
f.LOGGING_DATA_data_167 = ProtoField.new("data[167] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_167", ftypes.UINT8, nil)
f.LOGGING_DATA_data_168 = ProtoField.new("data[168] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_168", ftypes.UINT8, nil)
f.LOGGING_DATA_data_169 = ProtoField.new("data[169] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_169", ftypes.UINT8, nil)
f.LOGGING_DATA_data_170 = ProtoField.new("data[170] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_170", ftypes.UINT8, nil)
f.LOGGING_DATA_data_171 = ProtoField.new("data[171] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_171", ftypes.UINT8, nil)
f.LOGGING_DATA_data_172 = ProtoField.new("data[172] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_172", ftypes.UINT8, nil)
f.LOGGING_DATA_data_173 = ProtoField.new("data[173] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_173", ftypes.UINT8, nil)
f.LOGGING_DATA_data_174 = ProtoField.new("data[174] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_174", ftypes.UINT8, nil)
f.LOGGING_DATA_data_175 = ProtoField.new("data[175] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_175", ftypes.UINT8, nil)
f.LOGGING_DATA_data_176 = ProtoField.new("data[176] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_176", ftypes.UINT8, nil)
f.LOGGING_DATA_data_177 = ProtoField.new("data[177] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_177", ftypes.UINT8, nil)
f.LOGGING_DATA_data_178 = ProtoField.new("data[178] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_178", ftypes.UINT8, nil)
f.LOGGING_DATA_data_179 = ProtoField.new("data[179] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_179", ftypes.UINT8, nil)
f.LOGGING_DATA_data_180 = ProtoField.new("data[180] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_180", ftypes.UINT8, nil)
f.LOGGING_DATA_data_181 = ProtoField.new("data[181] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_181", ftypes.UINT8, nil)
f.LOGGING_DATA_data_182 = ProtoField.new("data[182] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_182", ftypes.UINT8, nil)
f.LOGGING_DATA_data_183 = ProtoField.new("data[183] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_183", ftypes.UINT8, nil)
f.LOGGING_DATA_data_184 = ProtoField.new("data[184] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_184", ftypes.UINT8, nil)
f.LOGGING_DATA_data_185 = ProtoField.new("data[185] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_185", ftypes.UINT8, nil)
f.LOGGING_DATA_data_186 = ProtoField.new("data[186] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_186", ftypes.UINT8, nil)
f.LOGGING_DATA_data_187 = ProtoField.new("data[187] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_187", ftypes.UINT8, nil)
f.LOGGING_DATA_data_188 = ProtoField.new("data[188] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_188", ftypes.UINT8, nil)
f.LOGGING_DATA_data_189 = ProtoField.new("data[189] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_189", ftypes.UINT8, nil)
f.LOGGING_DATA_data_190 = ProtoField.new("data[190] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_190", ftypes.UINT8, nil)
f.LOGGING_DATA_data_191 = ProtoField.new("data[191] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_191", ftypes.UINT8, nil)
f.LOGGING_DATA_data_192 = ProtoField.new("data[192] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_192", ftypes.UINT8, nil)
f.LOGGING_DATA_data_193 = ProtoField.new("data[193] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_193", ftypes.UINT8, nil)
f.LOGGING_DATA_data_194 = ProtoField.new("data[194] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_194", ftypes.UINT8, nil)
f.LOGGING_DATA_data_195 = ProtoField.new("data[195] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_195", ftypes.UINT8, nil)
f.LOGGING_DATA_data_196 = ProtoField.new("data[196] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_196", ftypes.UINT8, nil)
f.LOGGING_DATA_data_197 = ProtoField.new("data[197] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_197", ftypes.UINT8, nil)
f.LOGGING_DATA_data_198 = ProtoField.new("data[198] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_198", ftypes.UINT8, nil)
f.LOGGING_DATA_data_199 = ProtoField.new("data[199] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_199", ftypes.UINT8, nil)
f.LOGGING_DATA_data_200 = ProtoField.new("data[200] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_200", ftypes.UINT8, nil)
f.LOGGING_DATA_data_201 = ProtoField.new("data[201] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_201", ftypes.UINT8, nil)
f.LOGGING_DATA_data_202 = ProtoField.new("data[202] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_202", ftypes.UINT8, nil)
f.LOGGING_DATA_data_203 = ProtoField.new("data[203] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_203", ftypes.UINT8, nil)
f.LOGGING_DATA_data_204 = ProtoField.new("data[204] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_204", ftypes.UINT8, nil)
f.LOGGING_DATA_data_205 = ProtoField.new("data[205] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_205", ftypes.UINT8, nil)
f.LOGGING_DATA_data_206 = ProtoField.new("data[206] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_206", ftypes.UINT8, nil)
f.LOGGING_DATA_data_207 = ProtoField.new("data[207] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_207", ftypes.UINT8, nil)
f.LOGGING_DATA_data_208 = ProtoField.new("data[208] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_208", ftypes.UINT8, nil)
f.LOGGING_DATA_data_209 = ProtoField.new("data[209] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_209", ftypes.UINT8, nil)
f.LOGGING_DATA_data_210 = ProtoField.new("data[210] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_210", ftypes.UINT8, nil)
f.LOGGING_DATA_data_211 = ProtoField.new("data[211] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_211", ftypes.UINT8, nil)
f.LOGGING_DATA_data_212 = ProtoField.new("data[212] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_212", ftypes.UINT8, nil)
f.LOGGING_DATA_data_213 = ProtoField.new("data[213] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_213", ftypes.UINT8, nil)
f.LOGGING_DATA_data_214 = ProtoField.new("data[214] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_214", ftypes.UINT8, nil)
f.LOGGING_DATA_data_215 = ProtoField.new("data[215] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_215", ftypes.UINT8, nil)
f.LOGGING_DATA_data_216 = ProtoField.new("data[216] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_216", ftypes.UINT8, nil)
f.LOGGING_DATA_data_217 = ProtoField.new("data[217] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_217", ftypes.UINT8, nil)
f.LOGGING_DATA_data_218 = ProtoField.new("data[218] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_218", ftypes.UINT8, nil)
f.LOGGING_DATA_data_219 = ProtoField.new("data[219] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_219", ftypes.UINT8, nil)
f.LOGGING_DATA_data_220 = ProtoField.new("data[220] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_220", ftypes.UINT8, nil)
f.LOGGING_DATA_data_221 = ProtoField.new("data[221] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_221", ftypes.UINT8, nil)
f.LOGGING_DATA_data_222 = ProtoField.new("data[222] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_222", ftypes.UINT8, nil)
f.LOGGING_DATA_data_223 = ProtoField.new("data[223] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_223", ftypes.UINT8, nil)
f.LOGGING_DATA_data_224 = ProtoField.new("data[224] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_224", ftypes.UINT8, nil)
f.LOGGING_DATA_data_225 = ProtoField.new("data[225] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_225", ftypes.UINT8, nil)
f.LOGGING_DATA_data_226 = ProtoField.new("data[226] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_226", ftypes.UINT8, nil)
f.LOGGING_DATA_data_227 = ProtoField.new("data[227] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_227", ftypes.UINT8, nil)
f.LOGGING_DATA_data_228 = ProtoField.new("data[228] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_228", ftypes.UINT8, nil)
f.LOGGING_DATA_data_229 = ProtoField.new("data[229] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_229", ftypes.UINT8, nil)
f.LOGGING_DATA_data_230 = ProtoField.new("data[230] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_230", ftypes.UINT8, nil)
f.LOGGING_DATA_data_231 = ProtoField.new("data[231] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_231", ftypes.UINT8, nil)
f.LOGGING_DATA_data_232 = ProtoField.new("data[232] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_232", ftypes.UINT8, nil)
f.LOGGING_DATA_data_233 = ProtoField.new("data[233] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_233", ftypes.UINT8, nil)
f.LOGGING_DATA_data_234 = ProtoField.new("data[234] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_234", ftypes.UINT8, nil)
f.LOGGING_DATA_data_235 = ProtoField.new("data[235] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_235", ftypes.UINT8, nil)
f.LOGGING_DATA_data_236 = ProtoField.new("data[236] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_236", ftypes.UINT8, nil)
f.LOGGING_DATA_data_237 = ProtoField.new("data[237] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_237", ftypes.UINT8, nil)
f.LOGGING_DATA_data_238 = ProtoField.new("data[238] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_238", ftypes.UINT8, nil)
f.LOGGING_DATA_data_239 = ProtoField.new("data[239] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_239", ftypes.UINT8, nil)
f.LOGGING_DATA_data_240 = ProtoField.new("data[240] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_240", ftypes.UINT8, nil)
f.LOGGING_DATA_data_241 = ProtoField.new("data[241] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_241", ftypes.UINT8, nil)
f.LOGGING_DATA_data_242 = ProtoField.new("data[242] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_242", ftypes.UINT8, nil)
f.LOGGING_DATA_data_243 = ProtoField.new("data[243] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_243", ftypes.UINT8, nil)
f.LOGGING_DATA_data_244 = ProtoField.new("data[244] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_244", ftypes.UINT8, nil)
f.LOGGING_DATA_data_245 = ProtoField.new("data[245] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_245", ftypes.UINT8, nil)
f.LOGGING_DATA_data_246 = ProtoField.new("data[246] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_246", ftypes.UINT8, nil)
f.LOGGING_DATA_data_247 = ProtoField.new("data[247] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_247", ftypes.UINT8, nil)
f.LOGGING_DATA_data_248 = ProtoField.new("data[248] (uint8_t)", "mavlink_proto.LOGGING_DATA_data_248", ftypes.UINT8, nil)

f.LOGGING_DATA_ACKED_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_target_system", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_target_component", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_sequence = ProtoField.new("sequence (uint16_t)", "mavlink_proto.LOGGING_DATA_ACKED_sequence", ftypes.UINT16, nil)
f.LOGGING_DATA_ACKED_length = ProtoField.new("length (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_length", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_first_message_offset = ProtoField.new("first_message_offset (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_first_message_offset", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_0", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_1", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_2", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_3", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_4", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_5", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_6", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_7", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_8 = ProtoField.new("data[8] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_8", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_9 = ProtoField.new("data[9] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_9", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_10 = ProtoField.new("data[10] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_10", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_11 = ProtoField.new("data[11] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_11", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_12 = ProtoField.new("data[12] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_12", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_13 = ProtoField.new("data[13] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_13", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_14 = ProtoField.new("data[14] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_14", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_15 = ProtoField.new("data[15] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_15", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_16 = ProtoField.new("data[16] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_16", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_17 = ProtoField.new("data[17] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_17", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_18 = ProtoField.new("data[18] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_18", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_19 = ProtoField.new("data[19] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_19", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_20 = ProtoField.new("data[20] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_20", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_21 = ProtoField.new("data[21] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_21", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_22 = ProtoField.new("data[22] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_22", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_23 = ProtoField.new("data[23] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_23", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_24 = ProtoField.new("data[24] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_24", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_25 = ProtoField.new("data[25] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_25", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_26 = ProtoField.new("data[26] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_26", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_27 = ProtoField.new("data[27] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_27", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_28 = ProtoField.new("data[28] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_28", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_29 = ProtoField.new("data[29] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_29", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_30 = ProtoField.new("data[30] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_30", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_31 = ProtoField.new("data[31] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_31", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_32 = ProtoField.new("data[32] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_32", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_33 = ProtoField.new("data[33] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_33", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_34 = ProtoField.new("data[34] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_34", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_35 = ProtoField.new("data[35] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_35", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_36 = ProtoField.new("data[36] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_36", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_37 = ProtoField.new("data[37] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_37", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_38 = ProtoField.new("data[38] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_38", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_39 = ProtoField.new("data[39] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_39", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_40 = ProtoField.new("data[40] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_40", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_41 = ProtoField.new("data[41] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_41", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_42 = ProtoField.new("data[42] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_42", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_43 = ProtoField.new("data[43] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_43", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_44 = ProtoField.new("data[44] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_44", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_45 = ProtoField.new("data[45] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_45", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_46 = ProtoField.new("data[46] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_46", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_47 = ProtoField.new("data[47] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_47", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_48 = ProtoField.new("data[48] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_48", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_49 = ProtoField.new("data[49] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_49", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_50 = ProtoField.new("data[50] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_50", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_51 = ProtoField.new("data[51] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_51", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_52 = ProtoField.new("data[52] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_52", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_53 = ProtoField.new("data[53] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_53", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_54 = ProtoField.new("data[54] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_54", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_55 = ProtoField.new("data[55] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_55", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_56 = ProtoField.new("data[56] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_56", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_57 = ProtoField.new("data[57] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_57", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_58 = ProtoField.new("data[58] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_58", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_59 = ProtoField.new("data[59] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_59", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_60 = ProtoField.new("data[60] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_60", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_61 = ProtoField.new("data[61] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_61", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_62 = ProtoField.new("data[62] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_62", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_63 = ProtoField.new("data[63] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_63", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_64 = ProtoField.new("data[64] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_64", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_65 = ProtoField.new("data[65] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_65", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_66 = ProtoField.new("data[66] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_66", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_67 = ProtoField.new("data[67] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_67", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_68 = ProtoField.new("data[68] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_68", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_69 = ProtoField.new("data[69] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_69", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_70 = ProtoField.new("data[70] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_70", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_71 = ProtoField.new("data[71] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_71", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_72 = ProtoField.new("data[72] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_72", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_73 = ProtoField.new("data[73] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_73", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_74 = ProtoField.new("data[74] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_74", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_75 = ProtoField.new("data[75] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_75", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_76 = ProtoField.new("data[76] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_76", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_77 = ProtoField.new("data[77] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_77", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_78 = ProtoField.new("data[78] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_78", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_79 = ProtoField.new("data[79] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_79", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_80 = ProtoField.new("data[80] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_80", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_81 = ProtoField.new("data[81] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_81", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_82 = ProtoField.new("data[82] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_82", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_83 = ProtoField.new("data[83] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_83", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_84 = ProtoField.new("data[84] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_84", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_85 = ProtoField.new("data[85] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_85", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_86 = ProtoField.new("data[86] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_86", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_87 = ProtoField.new("data[87] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_87", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_88 = ProtoField.new("data[88] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_88", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_89 = ProtoField.new("data[89] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_89", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_90 = ProtoField.new("data[90] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_90", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_91 = ProtoField.new("data[91] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_91", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_92 = ProtoField.new("data[92] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_92", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_93 = ProtoField.new("data[93] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_93", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_94 = ProtoField.new("data[94] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_94", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_95 = ProtoField.new("data[95] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_95", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_96 = ProtoField.new("data[96] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_96", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_97 = ProtoField.new("data[97] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_97", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_98 = ProtoField.new("data[98] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_98", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_99 = ProtoField.new("data[99] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_99", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_100 = ProtoField.new("data[100] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_100", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_101 = ProtoField.new("data[101] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_101", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_102 = ProtoField.new("data[102] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_102", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_103 = ProtoField.new("data[103] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_103", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_104 = ProtoField.new("data[104] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_104", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_105 = ProtoField.new("data[105] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_105", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_106 = ProtoField.new("data[106] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_106", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_107 = ProtoField.new("data[107] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_107", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_108 = ProtoField.new("data[108] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_108", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_109 = ProtoField.new("data[109] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_109", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_110 = ProtoField.new("data[110] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_110", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_111 = ProtoField.new("data[111] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_111", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_112 = ProtoField.new("data[112] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_112", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_113 = ProtoField.new("data[113] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_113", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_114 = ProtoField.new("data[114] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_114", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_115 = ProtoField.new("data[115] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_115", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_116 = ProtoField.new("data[116] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_116", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_117 = ProtoField.new("data[117] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_117", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_118 = ProtoField.new("data[118] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_118", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_119 = ProtoField.new("data[119] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_119", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_120 = ProtoField.new("data[120] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_120", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_121 = ProtoField.new("data[121] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_121", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_122 = ProtoField.new("data[122] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_122", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_123 = ProtoField.new("data[123] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_123", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_124 = ProtoField.new("data[124] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_124", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_125 = ProtoField.new("data[125] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_125", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_126 = ProtoField.new("data[126] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_126", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_127 = ProtoField.new("data[127] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_127", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_128 = ProtoField.new("data[128] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_128", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_129 = ProtoField.new("data[129] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_129", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_130 = ProtoField.new("data[130] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_130", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_131 = ProtoField.new("data[131] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_131", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_132 = ProtoField.new("data[132] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_132", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_133 = ProtoField.new("data[133] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_133", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_134 = ProtoField.new("data[134] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_134", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_135 = ProtoField.new("data[135] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_135", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_136 = ProtoField.new("data[136] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_136", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_137 = ProtoField.new("data[137] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_137", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_138 = ProtoField.new("data[138] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_138", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_139 = ProtoField.new("data[139] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_139", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_140 = ProtoField.new("data[140] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_140", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_141 = ProtoField.new("data[141] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_141", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_142 = ProtoField.new("data[142] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_142", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_143 = ProtoField.new("data[143] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_143", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_144 = ProtoField.new("data[144] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_144", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_145 = ProtoField.new("data[145] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_145", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_146 = ProtoField.new("data[146] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_146", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_147 = ProtoField.new("data[147] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_147", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_148 = ProtoField.new("data[148] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_148", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_149 = ProtoField.new("data[149] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_149", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_150 = ProtoField.new("data[150] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_150", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_151 = ProtoField.new("data[151] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_151", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_152 = ProtoField.new("data[152] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_152", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_153 = ProtoField.new("data[153] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_153", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_154 = ProtoField.new("data[154] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_154", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_155 = ProtoField.new("data[155] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_155", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_156 = ProtoField.new("data[156] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_156", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_157 = ProtoField.new("data[157] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_157", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_158 = ProtoField.new("data[158] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_158", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_159 = ProtoField.new("data[159] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_159", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_160 = ProtoField.new("data[160] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_160", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_161 = ProtoField.new("data[161] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_161", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_162 = ProtoField.new("data[162] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_162", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_163 = ProtoField.new("data[163] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_163", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_164 = ProtoField.new("data[164] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_164", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_165 = ProtoField.new("data[165] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_165", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_166 = ProtoField.new("data[166] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_166", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_167 = ProtoField.new("data[167] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_167", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_168 = ProtoField.new("data[168] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_168", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_169 = ProtoField.new("data[169] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_169", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_170 = ProtoField.new("data[170] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_170", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_171 = ProtoField.new("data[171] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_171", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_172 = ProtoField.new("data[172] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_172", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_173 = ProtoField.new("data[173] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_173", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_174 = ProtoField.new("data[174] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_174", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_175 = ProtoField.new("data[175] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_175", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_176 = ProtoField.new("data[176] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_176", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_177 = ProtoField.new("data[177] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_177", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_178 = ProtoField.new("data[178] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_178", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_179 = ProtoField.new("data[179] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_179", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_180 = ProtoField.new("data[180] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_180", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_181 = ProtoField.new("data[181] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_181", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_182 = ProtoField.new("data[182] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_182", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_183 = ProtoField.new("data[183] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_183", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_184 = ProtoField.new("data[184] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_184", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_185 = ProtoField.new("data[185] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_185", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_186 = ProtoField.new("data[186] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_186", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_187 = ProtoField.new("data[187] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_187", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_188 = ProtoField.new("data[188] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_188", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_189 = ProtoField.new("data[189] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_189", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_190 = ProtoField.new("data[190] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_190", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_191 = ProtoField.new("data[191] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_191", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_192 = ProtoField.new("data[192] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_192", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_193 = ProtoField.new("data[193] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_193", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_194 = ProtoField.new("data[194] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_194", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_195 = ProtoField.new("data[195] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_195", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_196 = ProtoField.new("data[196] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_196", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_197 = ProtoField.new("data[197] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_197", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_198 = ProtoField.new("data[198] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_198", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_199 = ProtoField.new("data[199] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_199", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_200 = ProtoField.new("data[200] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_200", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_201 = ProtoField.new("data[201] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_201", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_202 = ProtoField.new("data[202] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_202", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_203 = ProtoField.new("data[203] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_203", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_204 = ProtoField.new("data[204] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_204", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_205 = ProtoField.new("data[205] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_205", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_206 = ProtoField.new("data[206] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_206", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_207 = ProtoField.new("data[207] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_207", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_208 = ProtoField.new("data[208] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_208", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_209 = ProtoField.new("data[209] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_209", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_210 = ProtoField.new("data[210] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_210", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_211 = ProtoField.new("data[211] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_211", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_212 = ProtoField.new("data[212] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_212", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_213 = ProtoField.new("data[213] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_213", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_214 = ProtoField.new("data[214] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_214", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_215 = ProtoField.new("data[215] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_215", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_216 = ProtoField.new("data[216] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_216", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_217 = ProtoField.new("data[217] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_217", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_218 = ProtoField.new("data[218] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_218", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_219 = ProtoField.new("data[219] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_219", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_220 = ProtoField.new("data[220] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_220", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_221 = ProtoField.new("data[221] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_221", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_222 = ProtoField.new("data[222] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_222", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_223 = ProtoField.new("data[223] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_223", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_224 = ProtoField.new("data[224] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_224", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_225 = ProtoField.new("data[225] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_225", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_226 = ProtoField.new("data[226] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_226", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_227 = ProtoField.new("data[227] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_227", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_228 = ProtoField.new("data[228] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_228", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_229 = ProtoField.new("data[229] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_229", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_230 = ProtoField.new("data[230] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_230", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_231 = ProtoField.new("data[231] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_231", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_232 = ProtoField.new("data[232] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_232", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_233 = ProtoField.new("data[233] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_233", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_234 = ProtoField.new("data[234] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_234", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_235 = ProtoField.new("data[235] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_235", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_236 = ProtoField.new("data[236] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_236", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_237 = ProtoField.new("data[237] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_237", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_238 = ProtoField.new("data[238] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_238", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_239 = ProtoField.new("data[239] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_239", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_240 = ProtoField.new("data[240] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_240", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_241 = ProtoField.new("data[241] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_241", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_242 = ProtoField.new("data[242] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_242", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_243 = ProtoField.new("data[243] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_243", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_244 = ProtoField.new("data[244] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_244", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_245 = ProtoField.new("data[245] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_245", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_246 = ProtoField.new("data[246] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_246", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_247 = ProtoField.new("data[247] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_247", ftypes.UINT8, nil)
f.LOGGING_DATA_ACKED_data_248 = ProtoField.new("data[248] (uint8_t)", "mavlink_proto.LOGGING_DATA_ACKED_data_248", ftypes.UINT8, nil)

f.LOGGING_ACK_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.LOGGING_ACK_target_system", ftypes.UINT8, nil)
f.LOGGING_ACK_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.LOGGING_ACK_target_component", ftypes.UINT8, nil)
f.LOGGING_ACK_sequence = ProtoField.new("sequence (uint16_t)", "mavlink_proto.LOGGING_ACK_sequence", ftypes.UINT16, nil)

f.VIDEO_STREAM_INFORMATION_stream_id = ProtoField.new("stream_id (uint8_t)", "mavlink_proto.VIDEO_STREAM_INFORMATION_stream_id", ftypes.UINT8, nil)
f.VIDEO_STREAM_INFORMATION_count = ProtoField.new("count (uint8_t)", "mavlink_proto.VIDEO_STREAM_INFORMATION_count", ftypes.UINT8, nil)
f.VIDEO_STREAM_INFORMATION_type = ProtoField.new("type (VIDEO_STREAM_TYPE)", "mavlink_proto.VIDEO_STREAM_INFORMATION_type", ftypes.UINT8, enumEntryName.VIDEO_STREAM_TYPE)
f.VIDEO_STREAM_INFORMATION_flags = ProtoField.new("flags (VIDEO_STREAM_STATUS_FLAGS)", "mavlink_proto.VIDEO_STREAM_INFORMATION_flags", ftypes.UINT16, nil)
f.VIDEO_STREAM_INFORMATION_flags_flagVIDEO_STREAM_STATUS_FLAGS_RUNNING = ProtoField.bool("mavlink_proto.VIDEO_STREAM_INFORMATION_flags.VIDEO_STREAM_STATUS_FLAGS_RUNNING", "VIDEO_STREAM_STATUS_FLAGS_RUNNING", 2, nil, 1)
f.VIDEO_STREAM_INFORMATION_flags_flagVIDEO_STREAM_STATUS_FLAGS_THERMAL = ProtoField.bool("mavlink_proto.VIDEO_STREAM_INFORMATION_flags.VIDEO_STREAM_STATUS_FLAGS_THERMAL", "VIDEO_STREAM_STATUS_FLAGS_THERMAL", 2, nil, 2)
f.VIDEO_STREAM_INFORMATION_framerate = ProtoField.new("framerate (float)", "mavlink_proto.VIDEO_STREAM_INFORMATION_framerate", ftypes.FLOAT, nil)
f.VIDEO_STREAM_INFORMATION_resolution_h = ProtoField.new("resolution_h (uint16_t)", "mavlink_proto.VIDEO_STREAM_INFORMATION_resolution_h", ftypes.UINT16, nil)
f.VIDEO_STREAM_INFORMATION_resolution_v = ProtoField.new("resolution_v (uint16_t)", "mavlink_proto.VIDEO_STREAM_INFORMATION_resolution_v", ftypes.UINT16, nil)
f.VIDEO_STREAM_INFORMATION_bitrate = ProtoField.new("bitrate (uint32_t)", "mavlink_proto.VIDEO_STREAM_INFORMATION_bitrate", ftypes.UINT32, nil)
f.VIDEO_STREAM_INFORMATION_rotation = ProtoField.new("rotation (uint16_t)", "mavlink_proto.VIDEO_STREAM_INFORMATION_rotation", ftypes.UINT16, nil)
f.VIDEO_STREAM_INFORMATION_hfov = ProtoField.new("hfov (uint16_t)", "mavlink_proto.VIDEO_STREAM_INFORMATION_hfov", ftypes.UINT16, nil)
f.VIDEO_STREAM_INFORMATION_name = ProtoField.new("name (char)", "mavlink_proto.VIDEO_STREAM_INFORMATION_name", ftypes.STRING, nil)
f.VIDEO_STREAM_INFORMATION_uri = ProtoField.new("uri (char)", "mavlink_proto.VIDEO_STREAM_INFORMATION_uri", ftypes.STRING, nil)

f.VIDEO_STREAM_STATUS_stream_id = ProtoField.new("stream_id (uint8_t)", "mavlink_proto.VIDEO_STREAM_STATUS_stream_id", ftypes.UINT8, nil)
f.VIDEO_STREAM_STATUS_flags = ProtoField.new("flags (VIDEO_STREAM_STATUS_FLAGS)", "mavlink_proto.VIDEO_STREAM_STATUS_flags", ftypes.UINT16, nil)
f.VIDEO_STREAM_STATUS_flags_flagVIDEO_STREAM_STATUS_FLAGS_RUNNING = ProtoField.bool("mavlink_proto.VIDEO_STREAM_STATUS_flags.VIDEO_STREAM_STATUS_FLAGS_RUNNING", "VIDEO_STREAM_STATUS_FLAGS_RUNNING", 2, nil, 1)
f.VIDEO_STREAM_STATUS_flags_flagVIDEO_STREAM_STATUS_FLAGS_THERMAL = ProtoField.bool("mavlink_proto.VIDEO_STREAM_STATUS_flags.VIDEO_STREAM_STATUS_FLAGS_THERMAL", "VIDEO_STREAM_STATUS_FLAGS_THERMAL", 2, nil, 2)
f.VIDEO_STREAM_STATUS_framerate = ProtoField.new("framerate (float)", "mavlink_proto.VIDEO_STREAM_STATUS_framerate", ftypes.FLOAT, nil)
f.VIDEO_STREAM_STATUS_resolution_h = ProtoField.new("resolution_h (uint16_t)", "mavlink_proto.VIDEO_STREAM_STATUS_resolution_h", ftypes.UINT16, nil)
f.VIDEO_STREAM_STATUS_resolution_v = ProtoField.new("resolution_v (uint16_t)", "mavlink_proto.VIDEO_STREAM_STATUS_resolution_v", ftypes.UINT16, nil)
f.VIDEO_STREAM_STATUS_bitrate = ProtoField.new("bitrate (uint32_t)", "mavlink_proto.VIDEO_STREAM_STATUS_bitrate", ftypes.UINT32, nil)
f.VIDEO_STREAM_STATUS_rotation = ProtoField.new("rotation (uint16_t)", "mavlink_proto.VIDEO_STREAM_STATUS_rotation", ftypes.UINT16, nil)
f.VIDEO_STREAM_STATUS_hfov = ProtoField.new("hfov (uint16_t)", "mavlink_proto.VIDEO_STREAM_STATUS_hfov", ftypes.UINT16, nil)

f.CAMERA_FOV_STATUS_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.CAMERA_FOV_STATUS_time_boot_ms", ftypes.UINT32, nil)
f.CAMERA_FOV_STATUS_lat_camera = ProtoField.new("lat_camera (int32_t)", "mavlink_proto.CAMERA_FOV_STATUS_lat_camera", ftypes.INT32, nil)
f.CAMERA_FOV_STATUS_lon_camera = ProtoField.new("lon_camera (int32_t)", "mavlink_proto.CAMERA_FOV_STATUS_lon_camera", ftypes.INT32, nil)
f.CAMERA_FOV_STATUS_alt_camera = ProtoField.new("alt_camera (int32_t)", "mavlink_proto.CAMERA_FOV_STATUS_alt_camera", ftypes.INT32, nil)
f.CAMERA_FOV_STATUS_lat_image = ProtoField.new("lat_image (int32_t)", "mavlink_proto.CAMERA_FOV_STATUS_lat_image", ftypes.INT32, nil)
f.CAMERA_FOV_STATUS_lon_image = ProtoField.new("lon_image (int32_t)", "mavlink_proto.CAMERA_FOV_STATUS_lon_image", ftypes.INT32, nil)
f.CAMERA_FOV_STATUS_alt_image = ProtoField.new("alt_image (int32_t)", "mavlink_proto.CAMERA_FOV_STATUS_alt_image", ftypes.INT32, nil)
f.CAMERA_FOV_STATUS_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.CAMERA_FOV_STATUS_q_0", ftypes.FLOAT, nil)
f.CAMERA_FOV_STATUS_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.CAMERA_FOV_STATUS_q_1", ftypes.FLOAT, nil)
f.CAMERA_FOV_STATUS_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.CAMERA_FOV_STATUS_q_2", ftypes.FLOAT, nil)
f.CAMERA_FOV_STATUS_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.CAMERA_FOV_STATUS_q_3", ftypes.FLOAT, nil)
f.CAMERA_FOV_STATUS_hfov = ProtoField.new("hfov (float)", "mavlink_proto.CAMERA_FOV_STATUS_hfov", ftypes.FLOAT, nil)
f.CAMERA_FOV_STATUS_vfov = ProtoField.new("vfov (float)", "mavlink_proto.CAMERA_FOV_STATUS_vfov", ftypes.FLOAT, nil)

f.CAMERA_TRACKING_IMAGE_STATUS_tracking_status = ProtoField.new("tracking_status (CAMERA_TRACKING_STATUS_FLAGS)", "mavlink_proto.CAMERA_TRACKING_IMAGE_STATUS_tracking_status", ftypes.UINT8, enumEntryName.CAMERA_TRACKING_STATUS_FLAGS)
f.CAMERA_TRACKING_IMAGE_STATUS_tracking_mode = ProtoField.new("tracking_mode (CAMERA_TRACKING_MODE)", "mavlink_proto.CAMERA_TRACKING_IMAGE_STATUS_tracking_mode", ftypes.UINT8, enumEntryName.CAMERA_TRACKING_MODE)
f.CAMERA_TRACKING_IMAGE_STATUS_target_data = ProtoField.new("target_data (CAMERA_TRACKING_TARGET_DATA)", "mavlink_proto.CAMERA_TRACKING_IMAGE_STATUS_target_data", ftypes.UINT8, nil)
f.CAMERA_TRACKING_IMAGE_STATUS_target_data_flagCAMERA_TRACKING_TARGET_DATA_EMBEDDED = ProtoField.bool("mavlink_proto.CAMERA_TRACKING_IMAGE_STATUS_target_data.CAMERA_TRACKING_TARGET_DATA_EMBEDDED", "CAMERA_TRACKING_TARGET_DATA_EMBEDDED", 3, nil, 1)
f.CAMERA_TRACKING_IMAGE_STATUS_target_data_flagCAMERA_TRACKING_TARGET_DATA_RENDERED = ProtoField.bool("mavlink_proto.CAMERA_TRACKING_IMAGE_STATUS_target_data.CAMERA_TRACKING_TARGET_DATA_RENDERED", "CAMERA_TRACKING_TARGET_DATA_RENDERED", 3, nil, 2)
f.CAMERA_TRACKING_IMAGE_STATUS_target_data_flagCAMERA_TRACKING_TARGET_DATA_IN_STATUS = ProtoField.bool("mavlink_proto.CAMERA_TRACKING_IMAGE_STATUS_target_data.CAMERA_TRACKING_TARGET_DATA_IN_STATUS", "CAMERA_TRACKING_TARGET_DATA_IN_STATUS", 3, nil, 4)
f.CAMERA_TRACKING_IMAGE_STATUS_point_x = ProtoField.new("point_x (float)", "mavlink_proto.CAMERA_TRACKING_IMAGE_STATUS_point_x", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_IMAGE_STATUS_point_y = ProtoField.new("point_y (float)", "mavlink_proto.CAMERA_TRACKING_IMAGE_STATUS_point_y", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_IMAGE_STATUS_radius = ProtoField.new("radius (float)", "mavlink_proto.CAMERA_TRACKING_IMAGE_STATUS_radius", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_IMAGE_STATUS_rec_top_x = ProtoField.new("rec_top_x (float)", "mavlink_proto.CAMERA_TRACKING_IMAGE_STATUS_rec_top_x", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_IMAGE_STATUS_rec_top_y = ProtoField.new("rec_top_y (float)", "mavlink_proto.CAMERA_TRACKING_IMAGE_STATUS_rec_top_y", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_IMAGE_STATUS_rec_bottom_x = ProtoField.new("rec_bottom_x (float)", "mavlink_proto.CAMERA_TRACKING_IMAGE_STATUS_rec_bottom_x", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_IMAGE_STATUS_rec_bottom_y = ProtoField.new("rec_bottom_y (float)", "mavlink_proto.CAMERA_TRACKING_IMAGE_STATUS_rec_bottom_y", ftypes.FLOAT, nil)

f.CAMERA_TRACKING_GEO_STATUS_tracking_status = ProtoField.new("tracking_status (CAMERA_TRACKING_STATUS_FLAGS)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_tracking_status", ftypes.UINT8, enumEntryName.CAMERA_TRACKING_STATUS_FLAGS)
f.CAMERA_TRACKING_GEO_STATUS_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_lat", ftypes.INT32, nil)
f.CAMERA_TRACKING_GEO_STATUS_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_lon", ftypes.INT32, nil)
f.CAMERA_TRACKING_GEO_STATUS_alt = ProtoField.new("alt (float)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_alt", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_GEO_STATUS_h_acc = ProtoField.new("h_acc (float)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_h_acc", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_GEO_STATUS_v_acc = ProtoField.new("v_acc (float)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_v_acc", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_GEO_STATUS_vel_n = ProtoField.new("vel_n (float)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_vel_n", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_GEO_STATUS_vel_e = ProtoField.new("vel_e (float)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_vel_e", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_GEO_STATUS_vel_d = ProtoField.new("vel_d (float)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_vel_d", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_GEO_STATUS_vel_acc = ProtoField.new("vel_acc (float)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_vel_acc", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_GEO_STATUS_dist = ProtoField.new("dist (float)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_dist", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_GEO_STATUS_hdg = ProtoField.new("hdg (float)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_hdg", ftypes.FLOAT, nil)
f.CAMERA_TRACKING_GEO_STATUS_hdg_acc = ProtoField.new("hdg_acc (float)", "mavlink_proto.CAMERA_TRACKING_GEO_STATUS_hdg_acc", ftypes.FLOAT, nil)

f.GIMBAL_MANAGER_INFORMATION_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.GIMBAL_MANAGER_INFORMATION_time_boot_ms", ftypes.UINT32, nil)
f.GIMBAL_MANAGER_INFORMATION_cap_flags = ProtoField.new("cap_flags (GIMBAL_MANAGER_CAP_FLAGS)", "mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags", ftypes.UINT32, nil)
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_RETRACT = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_HAS_RETRACT", "GIMBAL_MANAGER_CAP_FLAGS_HAS_RETRACT", 18, nil, 1)
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_NEUTRAL = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_HAS_NEUTRAL", "GIMBAL_MANAGER_CAP_FLAGS_HAS_NEUTRAL", 18, nil, 2)
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_AXIS = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_AXIS", "GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_AXIS", 18, nil, 4)
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_FOLLOW = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_FOLLOW", "GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_FOLLOW", 18, nil, 8)
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_LOCK", "GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_LOCK", 18, nil, 16)
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_AXIS = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_AXIS", "GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_AXIS", 18, nil, 32)
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_FOLLOW = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_FOLLOW", "GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_FOLLOW", 18, nil, 64)
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_LOCK", "GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_LOCK", 18, nil, 128)
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_AXIS = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_AXIS", "GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_AXIS", 18, nil, 256)
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_FOLLOW = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_FOLLOW", "GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_FOLLOW", 18, nil, 512)
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_LOCK", "GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_LOCK", 18, nil, 1024)
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_INFINITE_YAW = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_INFINITE_YAW", "GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_INFINITE_YAW", 18, nil, 2048)
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME", "GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME", 18, nil, 4096)
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_RC_INPUTS = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_HAS_RC_INPUTS", "GIMBAL_MANAGER_CAP_FLAGS_HAS_RC_INPUTS", 18, nil, 8192)
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_LOCAL = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_LOCAL", "GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_LOCAL", 18, nil, 65536)
f.GIMBAL_MANAGER_INFORMATION_cap_flags_flagGIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_INFORMATION_cap_flags.GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL", "GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL", 18, nil, 131072)
f.GIMBAL_MANAGER_INFORMATION_gimbal_device_id = ProtoField.new("gimbal_device_id (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_INFORMATION_gimbal_device_id", ftypes.UINT8, nil)
f.GIMBAL_MANAGER_INFORMATION_roll_min = ProtoField.new("roll_min (float)", "mavlink_proto.GIMBAL_MANAGER_INFORMATION_roll_min", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_INFORMATION_roll_max = ProtoField.new("roll_max (float)", "mavlink_proto.GIMBAL_MANAGER_INFORMATION_roll_max", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_INFORMATION_pitch_min = ProtoField.new("pitch_min (float)", "mavlink_proto.GIMBAL_MANAGER_INFORMATION_pitch_min", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_INFORMATION_pitch_max = ProtoField.new("pitch_max (float)", "mavlink_proto.GIMBAL_MANAGER_INFORMATION_pitch_max", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_INFORMATION_yaw_min = ProtoField.new("yaw_min (float)", "mavlink_proto.GIMBAL_MANAGER_INFORMATION_yaw_min", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_INFORMATION_yaw_max = ProtoField.new("yaw_max (float)", "mavlink_proto.GIMBAL_MANAGER_INFORMATION_yaw_max", ftypes.FLOAT, nil)

f.GIMBAL_MANAGER_STATUS_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.GIMBAL_MANAGER_STATUS_time_boot_ms", ftypes.UINT32, nil)
f.GIMBAL_MANAGER_STATUS_flags = ProtoField.new("flags (GIMBAL_MANAGER_FLAGS)", "mavlink_proto.GIMBAL_MANAGER_STATUS_flags", ftypes.UINT32, nil)
f.GIMBAL_MANAGER_STATUS_flags_flagGIMBAL_MANAGER_FLAGS_RETRACT = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_STATUS_flags.GIMBAL_MANAGER_FLAGS_RETRACT", "GIMBAL_MANAGER_FLAGS_RETRACT", 5, nil, 1)
f.GIMBAL_MANAGER_STATUS_flags_flagGIMBAL_MANAGER_FLAGS_NEUTRAL = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_STATUS_flags.GIMBAL_MANAGER_FLAGS_NEUTRAL", "GIMBAL_MANAGER_FLAGS_NEUTRAL", 5, nil, 2)
f.GIMBAL_MANAGER_STATUS_flags_flagGIMBAL_MANAGER_FLAGS_ROLL_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_STATUS_flags.GIMBAL_MANAGER_FLAGS_ROLL_LOCK", "GIMBAL_MANAGER_FLAGS_ROLL_LOCK", 5, nil, 4)
f.GIMBAL_MANAGER_STATUS_flags_flagGIMBAL_MANAGER_FLAGS_PITCH_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_STATUS_flags.GIMBAL_MANAGER_FLAGS_PITCH_LOCK", "GIMBAL_MANAGER_FLAGS_PITCH_LOCK", 5, nil, 8)
f.GIMBAL_MANAGER_STATUS_flags_flagGIMBAL_MANAGER_FLAGS_YAW_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_STATUS_flags.GIMBAL_MANAGER_FLAGS_YAW_LOCK", "GIMBAL_MANAGER_FLAGS_YAW_LOCK", 5, nil, 16)
f.GIMBAL_MANAGER_STATUS_gimbal_device_id = ProtoField.new("gimbal_device_id (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_STATUS_gimbal_device_id", ftypes.UINT8, nil)
f.GIMBAL_MANAGER_STATUS_primary_control_sysid = ProtoField.new("primary_control_sysid (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_STATUS_primary_control_sysid", ftypes.UINT8, nil)
f.GIMBAL_MANAGER_STATUS_primary_control_compid = ProtoField.new("primary_control_compid (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_STATUS_primary_control_compid", ftypes.UINT8, nil)
f.GIMBAL_MANAGER_STATUS_secondary_control_sysid = ProtoField.new("secondary_control_sysid (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_STATUS_secondary_control_sysid", ftypes.UINT8, nil)
f.GIMBAL_MANAGER_STATUS_secondary_control_compid = ProtoField.new("secondary_control_compid (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_STATUS_secondary_control_compid", ftypes.UINT8, nil)

f.GIMBAL_DEVICE_INFORMATION_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_time_boot_ms", ftypes.UINT32, nil)
f.GIMBAL_DEVICE_INFORMATION_vendor_name = ProtoField.new("vendor_name (char)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_vendor_name", ftypes.STRING, nil)
f.GIMBAL_DEVICE_INFORMATION_model_name = ProtoField.new("model_name (char)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_model_name", ftypes.STRING, nil)
f.GIMBAL_DEVICE_INFORMATION_custom_name = ProtoField.new("custom_name (char)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_custom_name", ftypes.STRING, nil)
f.GIMBAL_DEVICE_INFORMATION_firmware_version = ProtoField.new("firmware_version (uint32_t)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_firmware_version", ftypes.UINT32, nil)
f.GIMBAL_DEVICE_INFORMATION_hardware_version = ProtoField.new("hardware_version (uint32_t)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_hardware_version", ftypes.UINT32, nil)
f.GIMBAL_DEVICE_INFORMATION_uid = ProtoField.new("uid (uint64_t)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_uid", ftypes.UINT64, nil)
f.GIMBAL_DEVICE_INFORMATION_cap_flags = ProtoField.new("cap_flags (GIMBAL_DEVICE_CAP_FLAGS)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags", ftypes.UINT16, nil)
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT", "GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT", 12, nil, 1)
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL", "GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL", 12, nil, 2)
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS", "GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS", 12, nil, 4)
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW", "GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW", 12, nil, 8)
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK", "GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK", 12, nil, 16)
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS", "GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS", 12, nil, 32)
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW", "GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW", 12, nil, 64)
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK", "GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK", 12, nil, 128)
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS", "GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS", 12, nil, 256)
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW", "GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW", 12, nil, 512)
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK", "GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK", 12, nil, 1024)
f.GIMBAL_DEVICE_INFORMATION_cap_flags_flagGIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_INFORMATION_cap_flags.GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW", "GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW", 12, nil, 2048)
f.GIMBAL_DEVICE_INFORMATION_custom_cap_flags = ProtoField.new("custom_cap_flags (uint16_t)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_custom_cap_flags", ftypes.UINT16, nil)
f.GIMBAL_DEVICE_INFORMATION_roll_min = ProtoField.new("roll_min (float)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_roll_min", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_INFORMATION_roll_max = ProtoField.new("roll_max (float)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_roll_max", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_INFORMATION_pitch_min = ProtoField.new("pitch_min (float)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_pitch_min", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_INFORMATION_pitch_max = ProtoField.new("pitch_max (float)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_pitch_max", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_INFORMATION_yaw_min = ProtoField.new("yaw_min (float)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_yaw_min", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_INFORMATION_yaw_max = ProtoField.new("yaw_max (float)", "mavlink_proto.GIMBAL_DEVICE_INFORMATION_yaw_max", ftypes.FLOAT, nil)

f.GIMBAL_DEVICE_SET_ATTITUDE_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_target_system", ftypes.UINT8, nil)
f.GIMBAL_DEVICE_SET_ATTITUDE_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_target_component", ftypes.UINT8, nil)
f.GIMBAL_DEVICE_SET_ATTITUDE_flags = ProtoField.new("flags (GIMBAL_DEVICE_FLAGS)", "mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_flags", ftypes.UINT16, nil)
f.GIMBAL_DEVICE_SET_ATTITUDE_flags_flagGIMBAL_DEVICE_FLAGS_RETRACT = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_flags.GIMBAL_DEVICE_FLAGS_RETRACT", "GIMBAL_DEVICE_FLAGS_RETRACT", 5, nil, 1)
f.GIMBAL_DEVICE_SET_ATTITUDE_flags_flagGIMBAL_DEVICE_FLAGS_NEUTRAL = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_flags.GIMBAL_DEVICE_FLAGS_NEUTRAL", "GIMBAL_DEVICE_FLAGS_NEUTRAL", 5, nil, 2)
f.GIMBAL_DEVICE_SET_ATTITUDE_flags_flagGIMBAL_DEVICE_FLAGS_ROLL_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_flags.GIMBAL_DEVICE_FLAGS_ROLL_LOCK", "GIMBAL_DEVICE_FLAGS_ROLL_LOCK", 5, nil, 4)
f.GIMBAL_DEVICE_SET_ATTITUDE_flags_flagGIMBAL_DEVICE_FLAGS_PITCH_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_flags.GIMBAL_DEVICE_FLAGS_PITCH_LOCK", "GIMBAL_DEVICE_FLAGS_PITCH_LOCK", 5, nil, 8)
f.GIMBAL_DEVICE_SET_ATTITUDE_flags_flagGIMBAL_DEVICE_FLAGS_YAW_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_flags.GIMBAL_DEVICE_FLAGS_YAW_LOCK", "GIMBAL_DEVICE_FLAGS_YAW_LOCK", 5, nil, 16)
f.GIMBAL_DEVICE_SET_ATTITUDE_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_q_0", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_SET_ATTITUDE_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_q_1", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_SET_ATTITUDE_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_q_2", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_SET_ATTITUDE_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_q_3", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_SET_ATTITUDE_angular_velocity_x = ProtoField.new("angular_velocity_x (float)", "mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_angular_velocity_x", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_SET_ATTITUDE_angular_velocity_y = ProtoField.new("angular_velocity_y (float)", "mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_angular_velocity_y", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_SET_ATTITUDE_angular_velocity_z = ProtoField.new("angular_velocity_z (float)", "mavlink_proto.GIMBAL_DEVICE_SET_ATTITUDE_angular_velocity_z", ftypes.FLOAT, nil)

f.GIMBAL_DEVICE_ATTITUDE_STATUS_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_target_system", ftypes.UINT8, nil)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_target_component", ftypes.UINT8, nil)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_time_boot_ms = ProtoField.new("time_boot_ms (uint32_t)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_time_boot_ms", ftypes.UINT32, nil)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_flags = ProtoField.new("flags (GIMBAL_DEVICE_FLAGS)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_flags", ftypes.UINT16, nil)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_flags_flagGIMBAL_DEVICE_FLAGS_RETRACT = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_flags.GIMBAL_DEVICE_FLAGS_RETRACT", "GIMBAL_DEVICE_FLAGS_RETRACT", 5, nil, 1)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_flags_flagGIMBAL_DEVICE_FLAGS_NEUTRAL = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_flags.GIMBAL_DEVICE_FLAGS_NEUTRAL", "GIMBAL_DEVICE_FLAGS_NEUTRAL", 5, nil, 2)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_flags_flagGIMBAL_DEVICE_FLAGS_ROLL_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_flags.GIMBAL_DEVICE_FLAGS_ROLL_LOCK", "GIMBAL_DEVICE_FLAGS_ROLL_LOCK", 5, nil, 4)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_flags_flagGIMBAL_DEVICE_FLAGS_PITCH_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_flags.GIMBAL_DEVICE_FLAGS_PITCH_LOCK", "GIMBAL_DEVICE_FLAGS_PITCH_LOCK", 5, nil, 8)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_flags_flagGIMBAL_DEVICE_FLAGS_YAW_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_flags.GIMBAL_DEVICE_FLAGS_YAW_LOCK", "GIMBAL_DEVICE_FLAGS_YAW_LOCK", 5, nil, 16)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_q_0", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_q_1", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_q_2", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_q_3", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_angular_velocity_x = ProtoField.new("angular_velocity_x (float)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_angular_velocity_x", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_angular_velocity_y = ProtoField.new("angular_velocity_y (float)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_angular_velocity_y", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_angular_velocity_z = ProtoField.new("angular_velocity_z (float)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_angular_velocity_z", ftypes.FLOAT, nil)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags = ProtoField.new("failure_flags (GIMBAL_DEVICE_ERROR_FLAGS)", "mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags", ftypes.UINT32, nil)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags_flagGIMBAL_DEVICE_ERROR_FLAGS_AT_ROLL_LIMIT = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags.GIMBAL_DEVICE_ERROR_FLAGS_AT_ROLL_LIMIT", "GIMBAL_DEVICE_ERROR_FLAGS_AT_ROLL_LIMIT", 9, nil, 1)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags_flagGIMBAL_DEVICE_ERROR_FLAGS_AT_PITCH_LIMIT = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags.GIMBAL_DEVICE_ERROR_FLAGS_AT_PITCH_LIMIT", "GIMBAL_DEVICE_ERROR_FLAGS_AT_PITCH_LIMIT", 9, nil, 2)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags_flagGIMBAL_DEVICE_ERROR_FLAGS_AT_YAW_LIMIT = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags.GIMBAL_DEVICE_ERROR_FLAGS_AT_YAW_LIMIT", "GIMBAL_DEVICE_ERROR_FLAGS_AT_YAW_LIMIT", 9, nil, 4)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags_flagGIMBAL_DEVICE_ERROR_FLAGS_ENCODER_ERROR = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags.GIMBAL_DEVICE_ERROR_FLAGS_ENCODER_ERROR", "GIMBAL_DEVICE_ERROR_FLAGS_ENCODER_ERROR", 9, nil, 8)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags_flagGIMBAL_DEVICE_ERROR_FLAGS_POWER_ERROR = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags.GIMBAL_DEVICE_ERROR_FLAGS_POWER_ERROR", "GIMBAL_DEVICE_ERROR_FLAGS_POWER_ERROR", 9, nil, 16)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags_flagGIMBAL_DEVICE_ERROR_FLAGS_MOTOR_ERROR = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags.GIMBAL_DEVICE_ERROR_FLAGS_MOTOR_ERROR", "GIMBAL_DEVICE_ERROR_FLAGS_MOTOR_ERROR", 9, nil, 32)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags_flagGIMBAL_DEVICE_ERROR_FLAGS_SOFTWARE_ERROR = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags.GIMBAL_DEVICE_ERROR_FLAGS_SOFTWARE_ERROR", "GIMBAL_DEVICE_ERROR_FLAGS_SOFTWARE_ERROR", 9, nil, 64)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags_flagGIMBAL_DEVICE_ERROR_FLAGS_COMMS_ERROR = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags.GIMBAL_DEVICE_ERROR_FLAGS_COMMS_ERROR", "GIMBAL_DEVICE_ERROR_FLAGS_COMMS_ERROR", 9, nil, 128)
f.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags_flagGIMBAL_DEVICE_ERROR_FLAGS_CALIBRATION_RUNNING = ProtoField.bool("mavlink_proto.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags.GIMBAL_DEVICE_ERROR_FLAGS_CALIBRATION_RUNNING", "GIMBAL_DEVICE_ERROR_FLAGS_CALIBRATION_RUNNING", 9, nil, 256)

f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_target_system", ftypes.UINT8, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_target_component", ftypes.UINT8, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_time_boot_us = ProtoField.new("time_boot_us (uint64_t)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_time_boot_us", ftypes.UINT64, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_0", ftypes.FLOAT, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_1", ftypes.FLOAT, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_2", ftypes.FLOAT, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_3", ftypes.FLOAT, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_estimated_delay_us = ProtoField.new("q_estimated_delay_us (uint32_t)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_estimated_delay_us", ftypes.UINT32, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_vx = ProtoField.new("vx (float)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_vx", ftypes.FLOAT, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_vy = ProtoField.new("vy (float)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_vy", ftypes.FLOAT, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_vz = ProtoField.new("vz (float)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_vz", ftypes.FLOAT, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_v_estimated_delay_us = ProtoField.new("v_estimated_delay_us (uint32_t)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_v_estimated_delay_us", ftypes.UINT32, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_feed_forward_angular_velocity_z = ProtoField.new("feed_forward_angular_velocity_z (float)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_feed_forward_angular_velocity_z", ftypes.FLOAT, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status = ProtoField.new("estimator_status (ESTIMATOR_STATUS_FLAGS)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status", ftypes.UINT16, nil)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status_flagESTIMATOR_ATTITUDE = ProtoField.bool("mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status.ESTIMATOR_ATTITUDE", "ESTIMATOR_ATTITUDE", 12, nil, 1)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status_flagESTIMATOR_VELOCITY_HORIZ = ProtoField.bool("mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status.ESTIMATOR_VELOCITY_HORIZ", "ESTIMATOR_VELOCITY_HORIZ", 12, nil, 2)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status_flagESTIMATOR_VELOCITY_VERT = ProtoField.bool("mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status.ESTIMATOR_VELOCITY_VERT", "ESTIMATOR_VELOCITY_VERT", 12, nil, 4)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status_flagESTIMATOR_POS_HORIZ_REL = ProtoField.bool("mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status.ESTIMATOR_POS_HORIZ_REL", "ESTIMATOR_POS_HORIZ_REL", 12, nil, 8)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status_flagESTIMATOR_POS_HORIZ_ABS = ProtoField.bool("mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status.ESTIMATOR_POS_HORIZ_ABS", "ESTIMATOR_POS_HORIZ_ABS", 12, nil, 16)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status_flagESTIMATOR_POS_VERT_ABS = ProtoField.bool("mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status.ESTIMATOR_POS_VERT_ABS", "ESTIMATOR_POS_VERT_ABS", 12, nil, 32)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status_flagESTIMATOR_POS_VERT_AGL = ProtoField.bool("mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status.ESTIMATOR_POS_VERT_AGL", "ESTIMATOR_POS_VERT_AGL", 12, nil, 64)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status_flagESTIMATOR_CONST_POS_MODE = ProtoField.bool("mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status.ESTIMATOR_CONST_POS_MODE", "ESTIMATOR_CONST_POS_MODE", 12, nil, 128)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status_flagESTIMATOR_PRED_POS_HORIZ_REL = ProtoField.bool("mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status.ESTIMATOR_PRED_POS_HORIZ_REL", "ESTIMATOR_PRED_POS_HORIZ_REL", 12, nil, 256)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status_flagESTIMATOR_PRED_POS_HORIZ_ABS = ProtoField.bool("mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status.ESTIMATOR_PRED_POS_HORIZ_ABS", "ESTIMATOR_PRED_POS_HORIZ_ABS", 12, nil, 512)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status_flagESTIMATOR_GPS_GLITCH = ProtoField.bool("mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status.ESTIMATOR_GPS_GLITCH", "ESTIMATOR_GPS_GLITCH", 12, nil, 1024)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status_flagESTIMATOR_ACCEL_ERROR = ProtoField.bool("mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status.ESTIMATOR_ACCEL_ERROR", "ESTIMATOR_ACCEL_ERROR", 12, nil, 2048)
f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_landed_state = ProtoField.new("landed_state (MAV_LANDED_STATE)", "mavlink_proto.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_landed_state", ftypes.UINT8, enumEntryName.MAV_LANDED_STATE)

f.GIMBAL_MANAGER_SET_ATTITUDE_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_target_system", ftypes.UINT8, nil)
f.GIMBAL_MANAGER_SET_ATTITUDE_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_target_component", ftypes.UINT8, nil)
f.GIMBAL_MANAGER_SET_ATTITUDE_flags = ProtoField.new("flags (GIMBAL_MANAGER_FLAGS)", "mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_flags", ftypes.UINT32, nil)
f.GIMBAL_MANAGER_SET_ATTITUDE_flags_flagGIMBAL_MANAGER_FLAGS_RETRACT = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_flags.GIMBAL_MANAGER_FLAGS_RETRACT", "GIMBAL_MANAGER_FLAGS_RETRACT", 5, nil, 1)
f.GIMBAL_MANAGER_SET_ATTITUDE_flags_flagGIMBAL_MANAGER_FLAGS_NEUTRAL = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_flags.GIMBAL_MANAGER_FLAGS_NEUTRAL", "GIMBAL_MANAGER_FLAGS_NEUTRAL", 5, nil, 2)
f.GIMBAL_MANAGER_SET_ATTITUDE_flags_flagGIMBAL_MANAGER_FLAGS_ROLL_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_flags.GIMBAL_MANAGER_FLAGS_ROLL_LOCK", "GIMBAL_MANAGER_FLAGS_ROLL_LOCK", 5, nil, 4)
f.GIMBAL_MANAGER_SET_ATTITUDE_flags_flagGIMBAL_MANAGER_FLAGS_PITCH_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_flags.GIMBAL_MANAGER_FLAGS_PITCH_LOCK", "GIMBAL_MANAGER_FLAGS_PITCH_LOCK", 5, nil, 8)
f.GIMBAL_MANAGER_SET_ATTITUDE_flags_flagGIMBAL_MANAGER_FLAGS_YAW_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_flags.GIMBAL_MANAGER_FLAGS_YAW_LOCK", "GIMBAL_MANAGER_FLAGS_YAW_LOCK", 5, nil, 16)
f.GIMBAL_MANAGER_SET_ATTITUDE_gimbal_device_id = ProtoField.new("gimbal_device_id (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_gimbal_device_id", ftypes.UINT8, nil)
f.GIMBAL_MANAGER_SET_ATTITUDE_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_q_0", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_SET_ATTITUDE_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_q_1", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_SET_ATTITUDE_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_q_2", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_SET_ATTITUDE_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_q_3", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_SET_ATTITUDE_angular_velocity_x = ProtoField.new("angular_velocity_x (float)", "mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_angular_velocity_x", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_SET_ATTITUDE_angular_velocity_y = ProtoField.new("angular_velocity_y (float)", "mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_angular_velocity_y", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_SET_ATTITUDE_angular_velocity_z = ProtoField.new("angular_velocity_z (float)", "mavlink_proto.GIMBAL_MANAGER_SET_ATTITUDE_angular_velocity_z", ftypes.FLOAT, nil)

f.GIMBAL_MANAGER_SET_PITCHYAW_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_target_system", ftypes.UINT8, nil)
f.GIMBAL_MANAGER_SET_PITCHYAW_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_target_component", ftypes.UINT8, nil)
f.GIMBAL_MANAGER_SET_PITCHYAW_flags = ProtoField.new("flags (GIMBAL_MANAGER_FLAGS)", "mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_flags", ftypes.UINT32, nil)
f.GIMBAL_MANAGER_SET_PITCHYAW_flags_flagGIMBAL_MANAGER_FLAGS_RETRACT = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_flags.GIMBAL_MANAGER_FLAGS_RETRACT", "GIMBAL_MANAGER_FLAGS_RETRACT", 5, nil, 1)
f.GIMBAL_MANAGER_SET_PITCHYAW_flags_flagGIMBAL_MANAGER_FLAGS_NEUTRAL = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_flags.GIMBAL_MANAGER_FLAGS_NEUTRAL", "GIMBAL_MANAGER_FLAGS_NEUTRAL", 5, nil, 2)
f.GIMBAL_MANAGER_SET_PITCHYAW_flags_flagGIMBAL_MANAGER_FLAGS_ROLL_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_flags.GIMBAL_MANAGER_FLAGS_ROLL_LOCK", "GIMBAL_MANAGER_FLAGS_ROLL_LOCK", 5, nil, 4)
f.GIMBAL_MANAGER_SET_PITCHYAW_flags_flagGIMBAL_MANAGER_FLAGS_PITCH_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_flags.GIMBAL_MANAGER_FLAGS_PITCH_LOCK", "GIMBAL_MANAGER_FLAGS_PITCH_LOCK", 5, nil, 8)
f.GIMBAL_MANAGER_SET_PITCHYAW_flags_flagGIMBAL_MANAGER_FLAGS_YAW_LOCK = ProtoField.bool("mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_flags.GIMBAL_MANAGER_FLAGS_YAW_LOCK", "GIMBAL_MANAGER_FLAGS_YAW_LOCK", 5, nil, 16)
f.GIMBAL_MANAGER_SET_PITCHYAW_gimbal_device_id = ProtoField.new("gimbal_device_id (uint8_t)", "mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_gimbal_device_id", ftypes.UINT8, nil)
f.GIMBAL_MANAGER_SET_PITCHYAW_pitch = ProtoField.new("pitch (float)", "mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_pitch", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_SET_PITCHYAW_yaw = ProtoField.new("yaw (float)", "mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_yaw", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_SET_PITCHYAW_pitch_rate = ProtoField.new("pitch_rate (float)", "mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_pitch_rate", ftypes.FLOAT, nil)
f.GIMBAL_MANAGER_SET_PITCHYAW_yaw_rate = ProtoField.new("yaw_rate (float)", "mavlink_proto.GIMBAL_MANAGER_SET_PITCHYAW_yaw_rate", ftypes.FLOAT, nil)

f.WIFI_CONFIG_AP_ssid = ProtoField.new("ssid (char)", "mavlink_proto.WIFI_CONFIG_AP_ssid", ftypes.STRING, nil)
f.WIFI_CONFIG_AP_password = ProtoField.new("password (char)", "mavlink_proto.WIFI_CONFIG_AP_password", ftypes.STRING, nil)

f.AIS_VESSEL_MMSI = ProtoField.new("MMSI (uint32_t)", "mavlink_proto.AIS_VESSEL_MMSI", ftypes.UINT32, nil)
f.AIS_VESSEL_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.AIS_VESSEL_lat", ftypes.INT32, nil)
f.AIS_VESSEL_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.AIS_VESSEL_lon", ftypes.INT32, nil)
f.AIS_VESSEL_COG = ProtoField.new("COG (uint16_t)", "mavlink_proto.AIS_VESSEL_COG", ftypes.UINT16, nil)
f.AIS_VESSEL_heading = ProtoField.new("heading (uint16_t)", "mavlink_proto.AIS_VESSEL_heading", ftypes.UINT16, nil)
f.AIS_VESSEL_velocity = ProtoField.new("velocity (uint16_t)", "mavlink_proto.AIS_VESSEL_velocity", ftypes.UINT16, nil)
f.AIS_VESSEL_turn_rate = ProtoField.new("turn_rate (int8_t)", "mavlink_proto.AIS_VESSEL_turn_rate", ftypes.INT8, nil)
f.AIS_VESSEL_navigational_status = ProtoField.new("navigational_status (AIS_NAV_STATUS)", "mavlink_proto.AIS_VESSEL_navigational_status", ftypes.UINT8, enumEntryName.AIS_NAV_STATUS)
f.AIS_VESSEL_type = ProtoField.new("type (AIS_TYPE)", "mavlink_proto.AIS_VESSEL_type", ftypes.UINT8, enumEntryName.AIS_TYPE)
f.AIS_VESSEL_dimension_bow = ProtoField.new("dimension_bow (uint16_t)", "mavlink_proto.AIS_VESSEL_dimension_bow", ftypes.UINT16, nil)
f.AIS_VESSEL_dimension_stern = ProtoField.new("dimension_stern (uint16_t)", "mavlink_proto.AIS_VESSEL_dimension_stern", ftypes.UINT16, nil)
f.AIS_VESSEL_dimension_port = ProtoField.new("dimension_port (uint8_t)", "mavlink_proto.AIS_VESSEL_dimension_port", ftypes.UINT8, nil)
f.AIS_VESSEL_dimension_starboard = ProtoField.new("dimension_starboard (uint8_t)", "mavlink_proto.AIS_VESSEL_dimension_starboard", ftypes.UINT8, nil)
f.AIS_VESSEL_callsign = ProtoField.new("callsign (char)", "mavlink_proto.AIS_VESSEL_callsign", ftypes.STRING, nil)
f.AIS_VESSEL_name = ProtoField.new("name (char)", "mavlink_proto.AIS_VESSEL_name", ftypes.STRING, nil)
f.AIS_VESSEL_tslc = ProtoField.new("tslc (uint16_t)", "mavlink_proto.AIS_VESSEL_tslc", ftypes.UINT16, nil)
f.AIS_VESSEL_flags = ProtoField.new("flags (AIS_FLAGS)", "mavlink_proto.AIS_VESSEL_flags", ftypes.UINT16, nil)
f.AIS_VESSEL_flags_flagAIS_FLAGS_POSITION_ACCURACY = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_POSITION_ACCURACY", "AIS_FLAGS_POSITION_ACCURACY", 13, nil, 1)
f.AIS_VESSEL_flags_flagAIS_FLAGS_VALID_COG = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_VALID_COG", "AIS_FLAGS_VALID_COG", 13, nil, 2)
f.AIS_VESSEL_flags_flagAIS_FLAGS_VALID_VELOCITY = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_VALID_VELOCITY", "AIS_FLAGS_VALID_VELOCITY", 13, nil, 4)
f.AIS_VESSEL_flags_flagAIS_FLAGS_HIGH_VELOCITY = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_HIGH_VELOCITY", "AIS_FLAGS_HIGH_VELOCITY", 13, nil, 8)
f.AIS_VESSEL_flags_flagAIS_FLAGS_VALID_TURN_RATE = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_VALID_TURN_RATE", "AIS_FLAGS_VALID_TURN_RATE", 13, nil, 16)
f.AIS_VESSEL_flags_flagAIS_FLAGS_TURN_RATE_SIGN_ONLY = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_TURN_RATE_SIGN_ONLY", "AIS_FLAGS_TURN_RATE_SIGN_ONLY", 13, nil, 32)
f.AIS_VESSEL_flags_flagAIS_FLAGS_VALID_DIMENSIONS = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_VALID_DIMENSIONS", "AIS_FLAGS_VALID_DIMENSIONS", 13, nil, 64)
f.AIS_VESSEL_flags_flagAIS_FLAGS_LARGE_BOW_DIMENSION = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_LARGE_BOW_DIMENSION", "AIS_FLAGS_LARGE_BOW_DIMENSION", 13, nil, 128)
f.AIS_VESSEL_flags_flagAIS_FLAGS_LARGE_STERN_DIMENSION = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_LARGE_STERN_DIMENSION", "AIS_FLAGS_LARGE_STERN_DIMENSION", 13, nil, 256)
f.AIS_VESSEL_flags_flagAIS_FLAGS_LARGE_PORT_DIMENSION = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_LARGE_PORT_DIMENSION", "AIS_FLAGS_LARGE_PORT_DIMENSION", 13, nil, 512)
f.AIS_VESSEL_flags_flagAIS_FLAGS_LARGE_STARBOARD_DIMENSION = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_LARGE_STARBOARD_DIMENSION", "AIS_FLAGS_LARGE_STARBOARD_DIMENSION", 13, nil, 1024)
f.AIS_VESSEL_flags_flagAIS_FLAGS_VALID_CALLSIGN = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_VALID_CALLSIGN", "AIS_FLAGS_VALID_CALLSIGN", 13, nil, 2048)
f.AIS_VESSEL_flags_flagAIS_FLAGS_VALID_NAME = ProtoField.bool("mavlink_proto.AIS_VESSEL_flags.AIS_FLAGS_VALID_NAME", "AIS_FLAGS_VALID_NAME", 13, nil, 4096)

f.UAVCAN_NODE_STATUS_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.UAVCAN_NODE_STATUS_time_usec", ftypes.UINT64, nil)
f.UAVCAN_NODE_STATUS_uptime_sec = ProtoField.new("uptime_sec (uint32_t)", "mavlink_proto.UAVCAN_NODE_STATUS_uptime_sec", ftypes.UINT32, nil)
f.UAVCAN_NODE_STATUS_health = ProtoField.new("health (UAVCAN_NODE_HEALTH)", "mavlink_proto.UAVCAN_NODE_STATUS_health", ftypes.UINT8, enumEntryName.UAVCAN_NODE_HEALTH)
f.UAVCAN_NODE_STATUS_mode = ProtoField.new("mode (UAVCAN_NODE_MODE)", "mavlink_proto.UAVCAN_NODE_STATUS_mode", ftypes.UINT8, enumEntryName.UAVCAN_NODE_MODE)
f.UAVCAN_NODE_STATUS_sub_mode = ProtoField.new("sub_mode (uint8_t)", "mavlink_proto.UAVCAN_NODE_STATUS_sub_mode", ftypes.UINT8, nil)
f.UAVCAN_NODE_STATUS_vendor_specific_status_code = ProtoField.new("vendor_specific_status_code (uint16_t)", "mavlink_proto.UAVCAN_NODE_STATUS_vendor_specific_status_code", ftypes.UINT16, nil)

f.UAVCAN_NODE_INFO_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.UAVCAN_NODE_INFO_time_usec", ftypes.UINT64, nil)
f.UAVCAN_NODE_INFO_uptime_sec = ProtoField.new("uptime_sec (uint32_t)", "mavlink_proto.UAVCAN_NODE_INFO_uptime_sec", ftypes.UINT32, nil)
f.UAVCAN_NODE_INFO_name = ProtoField.new("name (char)", "mavlink_proto.UAVCAN_NODE_INFO_name", ftypes.STRING, nil)
f.UAVCAN_NODE_INFO_hw_version_major = ProtoField.new("hw_version_major (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_version_major", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_version_minor = ProtoField.new("hw_version_minor (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_version_minor", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_0 = ProtoField.new("hw_unique_id[0] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_0", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_1 = ProtoField.new("hw_unique_id[1] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_1", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_2 = ProtoField.new("hw_unique_id[2] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_2", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_3 = ProtoField.new("hw_unique_id[3] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_3", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_4 = ProtoField.new("hw_unique_id[4] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_4", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_5 = ProtoField.new("hw_unique_id[5] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_5", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_6 = ProtoField.new("hw_unique_id[6] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_6", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_7 = ProtoField.new("hw_unique_id[7] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_7", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_8 = ProtoField.new("hw_unique_id[8] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_8", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_9 = ProtoField.new("hw_unique_id[9] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_9", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_10 = ProtoField.new("hw_unique_id[10] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_10", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_11 = ProtoField.new("hw_unique_id[11] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_11", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_12 = ProtoField.new("hw_unique_id[12] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_12", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_13 = ProtoField.new("hw_unique_id[13] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_13", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_14 = ProtoField.new("hw_unique_id[14] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_14", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_hw_unique_id_15 = ProtoField.new("hw_unique_id[15] (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_hw_unique_id_15", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_sw_version_major = ProtoField.new("sw_version_major (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_sw_version_major", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_sw_version_minor = ProtoField.new("sw_version_minor (uint8_t)", "mavlink_proto.UAVCAN_NODE_INFO_sw_version_minor", ftypes.UINT8, nil)
f.UAVCAN_NODE_INFO_sw_vcs_commit = ProtoField.new("sw_vcs_commit (uint32_t)", "mavlink_proto.UAVCAN_NODE_INFO_sw_vcs_commit", ftypes.UINT32, nil)

f.PARAM_EXT_REQUEST_READ_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.PARAM_EXT_REQUEST_READ_target_system", ftypes.UINT8, nil)
f.PARAM_EXT_REQUEST_READ_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.PARAM_EXT_REQUEST_READ_target_component", ftypes.UINT8, nil)
f.PARAM_EXT_REQUEST_READ_param_id = ProtoField.new("param_id (char)", "mavlink_proto.PARAM_EXT_REQUEST_READ_param_id", ftypes.STRING, nil)
f.PARAM_EXT_REQUEST_READ_param_index = ProtoField.new("param_index (int16_t)", "mavlink_proto.PARAM_EXT_REQUEST_READ_param_index", ftypes.INT16, nil)

f.PARAM_EXT_REQUEST_LIST_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.PARAM_EXT_REQUEST_LIST_target_system", ftypes.UINT8, nil)
f.PARAM_EXT_REQUEST_LIST_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.PARAM_EXT_REQUEST_LIST_target_component", ftypes.UINT8, nil)

f.PARAM_EXT_VALUE_param_id = ProtoField.new("param_id (char)", "mavlink_proto.PARAM_EXT_VALUE_param_id", ftypes.STRING, nil)
f.PARAM_EXT_VALUE_param_value = ProtoField.new("param_value (char)", "mavlink_proto.PARAM_EXT_VALUE_param_value", ftypes.STRING, nil)
f.PARAM_EXT_VALUE_param_type = ProtoField.new("param_type (MAV_PARAM_EXT_TYPE)", "mavlink_proto.PARAM_EXT_VALUE_param_type", ftypes.UINT8, enumEntryName.MAV_PARAM_EXT_TYPE)
f.PARAM_EXT_VALUE_param_count = ProtoField.new("param_count (uint16_t)", "mavlink_proto.PARAM_EXT_VALUE_param_count", ftypes.UINT16, nil)
f.PARAM_EXT_VALUE_param_index = ProtoField.new("param_index (uint16_t)", "mavlink_proto.PARAM_EXT_VALUE_param_index", ftypes.UINT16, nil)

f.PARAM_EXT_SET_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.PARAM_EXT_SET_target_system", ftypes.UINT8, nil)
f.PARAM_EXT_SET_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.PARAM_EXT_SET_target_component", ftypes.UINT8, nil)
f.PARAM_EXT_SET_param_id = ProtoField.new("param_id (char)", "mavlink_proto.PARAM_EXT_SET_param_id", ftypes.STRING, nil)
f.PARAM_EXT_SET_param_value = ProtoField.new("param_value (char)", "mavlink_proto.PARAM_EXT_SET_param_value", ftypes.STRING, nil)
f.PARAM_EXT_SET_param_type = ProtoField.new("param_type (MAV_PARAM_EXT_TYPE)", "mavlink_proto.PARAM_EXT_SET_param_type", ftypes.UINT8, enumEntryName.MAV_PARAM_EXT_TYPE)

f.PARAM_EXT_ACK_param_id = ProtoField.new("param_id (char)", "mavlink_proto.PARAM_EXT_ACK_param_id", ftypes.STRING, nil)
f.PARAM_EXT_ACK_param_value = ProtoField.new("param_value (char)", "mavlink_proto.PARAM_EXT_ACK_param_value", ftypes.STRING, nil)
f.PARAM_EXT_ACK_param_type = ProtoField.new("param_type (MAV_PARAM_EXT_TYPE)", "mavlink_proto.PARAM_EXT_ACK_param_type", ftypes.UINT8, enumEntryName.MAV_PARAM_EXT_TYPE)
f.PARAM_EXT_ACK_param_result = ProtoField.new("param_result (PARAM_ACK)", "mavlink_proto.PARAM_EXT_ACK_param_result", ftypes.UINT8, enumEntryName.PARAM_ACK)

f.OBSTACLE_DISTANCE_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.OBSTACLE_DISTANCE_time_usec", ftypes.UINT64, nil)
f.OBSTACLE_DISTANCE_sensor_type = ProtoField.new("sensor_type (MAV_DISTANCE_SENSOR)", "mavlink_proto.OBSTACLE_DISTANCE_sensor_type", ftypes.UINT8, enumEntryName.MAV_DISTANCE_SENSOR)
f.OBSTACLE_DISTANCE_distances_0 = ProtoField.new("distances[0] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_0", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_1 = ProtoField.new("distances[1] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_1", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_2 = ProtoField.new("distances[2] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_2", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_3 = ProtoField.new("distances[3] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_3", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_4 = ProtoField.new("distances[4] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_4", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_5 = ProtoField.new("distances[5] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_5", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_6 = ProtoField.new("distances[6] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_6", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_7 = ProtoField.new("distances[7] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_7", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_8 = ProtoField.new("distances[8] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_8", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_9 = ProtoField.new("distances[9] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_9", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_10 = ProtoField.new("distances[10] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_10", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_11 = ProtoField.new("distances[11] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_11", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_12 = ProtoField.new("distances[12] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_12", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_13 = ProtoField.new("distances[13] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_13", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_14 = ProtoField.new("distances[14] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_14", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_15 = ProtoField.new("distances[15] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_15", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_16 = ProtoField.new("distances[16] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_16", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_17 = ProtoField.new("distances[17] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_17", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_18 = ProtoField.new("distances[18] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_18", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_19 = ProtoField.new("distances[19] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_19", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_20 = ProtoField.new("distances[20] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_20", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_21 = ProtoField.new("distances[21] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_21", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_22 = ProtoField.new("distances[22] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_22", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_23 = ProtoField.new("distances[23] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_23", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_24 = ProtoField.new("distances[24] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_24", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_25 = ProtoField.new("distances[25] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_25", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_26 = ProtoField.new("distances[26] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_26", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_27 = ProtoField.new("distances[27] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_27", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_28 = ProtoField.new("distances[28] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_28", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_29 = ProtoField.new("distances[29] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_29", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_30 = ProtoField.new("distances[30] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_30", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_31 = ProtoField.new("distances[31] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_31", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_32 = ProtoField.new("distances[32] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_32", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_33 = ProtoField.new("distances[33] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_33", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_34 = ProtoField.new("distances[34] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_34", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_35 = ProtoField.new("distances[35] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_35", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_36 = ProtoField.new("distances[36] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_36", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_37 = ProtoField.new("distances[37] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_37", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_38 = ProtoField.new("distances[38] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_38", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_39 = ProtoField.new("distances[39] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_39", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_40 = ProtoField.new("distances[40] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_40", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_41 = ProtoField.new("distances[41] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_41", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_42 = ProtoField.new("distances[42] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_42", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_43 = ProtoField.new("distances[43] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_43", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_44 = ProtoField.new("distances[44] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_44", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_45 = ProtoField.new("distances[45] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_45", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_46 = ProtoField.new("distances[46] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_46", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_47 = ProtoField.new("distances[47] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_47", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_48 = ProtoField.new("distances[48] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_48", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_49 = ProtoField.new("distances[49] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_49", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_50 = ProtoField.new("distances[50] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_50", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_51 = ProtoField.new("distances[51] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_51", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_52 = ProtoField.new("distances[52] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_52", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_53 = ProtoField.new("distances[53] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_53", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_54 = ProtoField.new("distances[54] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_54", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_55 = ProtoField.new("distances[55] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_55", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_56 = ProtoField.new("distances[56] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_56", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_57 = ProtoField.new("distances[57] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_57", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_58 = ProtoField.new("distances[58] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_58", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_59 = ProtoField.new("distances[59] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_59", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_60 = ProtoField.new("distances[60] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_60", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_61 = ProtoField.new("distances[61] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_61", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_62 = ProtoField.new("distances[62] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_62", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_63 = ProtoField.new("distances[63] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_63", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_64 = ProtoField.new("distances[64] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_64", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_65 = ProtoField.new("distances[65] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_65", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_66 = ProtoField.new("distances[66] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_66", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_67 = ProtoField.new("distances[67] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_67", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_68 = ProtoField.new("distances[68] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_68", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_69 = ProtoField.new("distances[69] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_69", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_70 = ProtoField.new("distances[70] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_70", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_distances_71 = ProtoField.new("distances[71] (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_distances_71", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_increment = ProtoField.new("increment (uint8_t)", "mavlink_proto.OBSTACLE_DISTANCE_increment", ftypes.UINT8, nil)
f.OBSTACLE_DISTANCE_min_distance = ProtoField.new("min_distance (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_min_distance", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_max_distance = ProtoField.new("max_distance (uint16_t)", "mavlink_proto.OBSTACLE_DISTANCE_max_distance", ftypes.UINT16, nil)
f.OBSTACLE_DISTANCE_increment_f = ProtoField.new("increment_f (float)", "mavlink_proto.OBSTACLE_DISTANCE_increment_f", ftypes.FLOAT, nil)
f.OBSTACLE_DISTANCE_angle_offset = ProtoField.new("angle_offset (float)", "mavlink_proto.OBSTACLE_DISTANCE_angle_offset", ftypes.FLOAT, nil)
f.OBSTACLE_DISTANCE_frame = ProtoField.new("frame (MAV_FRAME)", "mavlink_proto.OBSTACLE_DISTANCE_frame", ftypes.UINT8, enumEntryName.MAV_FRAME)

f.ODOMETRY_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.ODOMETRY_time_usec", ftypes.UINT64, nil)
f.ODOMETRY_frame_id = ProtoField.new("frame_id (MAV_FRAME)", "mavlink_proto.ODOMETRY_frame_id", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.ODOMETRY_child_frame_id = ProtoField.new("child_frame_id (MAV_FRAME)", "mavlink_proto.ODOMETRY_child_frame_id", ftypes.UINT8, enumEntryName.MAV_FRAME)
f.ODOMETRY_x = ProtoField.new("x (float)", "mavlink_proto.ODOMETRY_x", ftypes.FLOAT, nil)
f.ODOMETRY_y = ProtoField.new("y (float)", "mavlink_proto.ODOMETRY_y", ftypes.FLOAT, nil)
f.ODOMETRY_z = ProtoField.new("z (float)", "mavlink_proto.ODOMETRY_z", ftypes.FLOAT, nil)
f.ODOMETRY_q_0 = ProtoField.new("q[0] (float)", "mavlink_proto.ODOMETRY_q_0", ftypes.FLOAT, nil)
f.ODOMETRY_q_1 = ProtoField.new("q[1] (float)", "mavlink_proto.ODOMETRY_q_1", ftypes.FLOAT, nil)
f.ODOMETRY_q_2 = ProtoField.new("q[2] (float)", "mavlink_proto.ODOMETRY_q_2", ftypes.FLOAT, nil)
f.ODOMETRY_q_3 = ProtoField.new("q[3] (float)", "mavlink_proto.ODOMETRY_q_3", ftypes.FLOAT, nil)
f.ODOMETRY_vx = ProtoField.new("vx (float)", "mavlink_proto.ODOMETRY_vx", ftypes.FLOAT, nil)
f.ODOMETRY_vy = ProtoField.new("vy (float)", "mavlink_proto.ODOMETRY_vy", ftypes.FLOAT, nil)
f.ODOMETRY_vz = ProtoField.new("vz (float)", "mavlink_proto.ODOMETRY_vz", ftypes.FLOAT, nil)
f.ODOMETRY_rollspeed = ProtoField.new("rollspeed (float)", "mavlink_proto.ODOMETRY_rollspeed", ftypes.FLOAT, nil)
f.ODOMETRY_pitchspeed = ProtoField.new("pitchspeed (float)", "mavlink_proto.ODOMETRY_pitchspeed", ftypes.FLOAT, nil)
f.ODOMETRY_yawspeed = ProtoField.new("yawspeed (float)", "mavlink_proto.ODOMETRY_yawspeed", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_0 = ProtoField.new("pose_covariance[0] (float)", "mavlink_proto.ODOMETRY_pose_covariance_0", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_1 = ProtoField.new("pose_covariance[1] (float)", "mavlink_proto.ODOMETRY_pose_covariance_1", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_2 = ProtoField.new("pose_covariance[2] (float)", "mavlink_proto.ODOMETRY_pose_covariance_2", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_3 = ProtoField.new("pose_covariance[3] (float)", "mavlink_proto.ODOMETRY_pose_covariance_3", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_4 = ProtoField.new("pose_covariance[4] (float)", "mavlink_proto.ODOMETRY_pose_covariance_4", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_5 = ProtoField.new("pose_covariance[5] (float)", "mavlink_proto.ODOMETRY_pose_covariance_5", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_6 = ProtoField.new("pose_covariance[6] (float)", "mavlink_proto.ODOMETRY_pose_covariance_6", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_7 = ProtoField.new("pose_covariance[7] (float)", "mavlink_proto.ODOMETRY_pose_covariance_7", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_8 = ProtoField.new("pose_covariance[8] (float)", "mavlink_proto.ODOMETRY_pose_covariance_8", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_9 = ProtoField.new("pose_covariance[9] (float)", "mavlink_proto.ODOMETRY_pose_covariance_9", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_10 = ProtoField.new("pose_covariance[10] (float)", "mavlink_proto.ODOMETRY_pose_covariance_10", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_11 = ProtoField.new("pose_covariance[11] (float)", "mavlink_proto.ODOMETRY_pose_covariance_11", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_12 = ProtoField.new("pose_covariance[12] (float)", "mavlink_proto.ODOMETRY_pose_covariance_12", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_13 = ProtoField.new("pose_covariance[13] (float)", "mavlink_proto.ODOMETRY_pose_covariance_13", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_14 = ProtoField.new("pose_covariance[14] (float)", "mavlink_proto.ODOMETRY_pose_covariance_14", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_15 = ProtoField.new("pose_covariance[15] (float)", "mavlink_proto.ODOMETRY_pose_covariance_15", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_16 = ProtoField.new("pose_covariance[16] (float)", "mavlink_proto.ODOMETRY_pose_covariance_16", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_17 = ProtoField.new("pose_covariance[17] (float)", "mavlink_proto.ODOMETRY_pose_covariance_17", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_18 = ProtoField.new("pose_covariance[18] (float)", "mavlink_proto.ODOMETRY_pose_covariance_18", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_19 = ProtoField.new("pose_covariance[19] (float)", "mavlink_proto.ODOMETRY_pose_covariance_19", ftypes.FLOAT, nil)
f.ODOMETRY_pose_covariance_20 = ProtoField.new("pose_covariance[20] (float)", "mavlink_proto.ODOMETRY_pose_covariance_20", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_0 = ProtoField.new("velocity_covariance[0] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_0", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_1 = ProtoField.new("velocity_covariance[1] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_1", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_2 = ProtoField.new("velocity_covariance[2] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_2", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_3 = ProtoField.new("velocity_covariance[3] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_3", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_4 = ProtoField.new("velocity_covariance[4] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_4", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_5 = ProtoField.new("velocity_covariance[5] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_5", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_6 = ProtoField.new("velocity_covariance[6] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_6", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_7 = ProtoField.new("velocity_covariance[7] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_7", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_8 = ProtoField.new("velocity_covariance[8] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_8", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_9 = ProtoField.new("velocity_covariance[9] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_9", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_10 = ProtoField.new("velocity_covariance[10] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_10", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_11 = ProtoField.new("velocity_covariance[11] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_11", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_12 = ProtoField.new("velocity_covariance[12] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_12", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_13 = ProtoField.new("velocity_covariance[13] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_13", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_14 = ProtoField.new("velocity_covariance[14] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_14", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_15 = ProtoField.new("velocity_covariance[15] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_15", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_16 = ProtoField.new("velocity_covariance[16] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_16", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_17 = ProtoField.new("velocity_covariance[17] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_17", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_18 = ProtoField.new("velocity_covariance[18] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_18", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_19 = ProtoField.new("velocity_covariance[19] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_19", ftypes.FLOAT, nil)
f.ODOMETRY_velocity_covariance_20 = ProtoField.new("velocity_covariance[20] (float)", "mavlink_proto.ODOMETRY_velocity_covariance_20", ftypes.FLOAT, nil)
f.ODOMETRY_reset_counter = ProtoField.new("reset_counter (uint8_t)", "mavlink_proto.ODOMETRY_reset_counter", ftypes.UINT8, nil)
f.ODOMETRY_estimator_type = ProtoField.new("estimator_type (MAV_ESTIMATOR_TYPE)", "mavlink_proto.ODOMETRY_estimator_type", ftypes.UINT8, enumEntryName.MAV_ESTIMATOR_TYPE)
f.ODOMETRY_quality = ProtoField.new("quality (int8_t)", "mavlink_proto.ODOMETRY_quality", ftypes.INT8, nil)

f.ISBD_LINK_STATUS_timestamp = ProtoField.new("timestamp (uint64_t)", "mavlink_proto.ISBD_LINK_STATUS_timestamp", ftypes.UINT64, nil)
f.ISBD_LINK_STATUS_last_heartbeat = ProtoField.new("last_heartbeat (uint64_t)", "mavlink_proto.ISBD_LINK_STATUS_last_heartbeat", ftypes.UINT64, nil)
f.ISBD_LINK_STATUS_failed_sessions = ProtoField.new("failed_sessions (uint16_t)", "mavlink_proto.ISBD_LINK_STATUS_failed_sessions", ftypes.UINT16, nil)
f.ISBD_LINK_STATUS_successful_sessions = ProtoField.new("successful_sessions (uint16_t)", "mavlink_proto.ISBD_LINK_STATUS_successful_sessions", ftypes.UINT16, nil)
f.ISBD_LINK_STATUS_signal_quality = ProtoField.new("signal_quality (uint8_t)", "mavlink_proto.ISBD_LINK_STATUS_signal_quality", ftypes.UINT8, nil)
f.ISBD_LINK_STATUS_ring_pending = ProtoField.new("ring_pending (uint8_t)", "mavlink_proto.ISBD_LINK_STATUS_ring_pending", ftypes.UINT8, nil)
f.ISBD_LINK_STATUS_tx_session_pending = ProtoField.new("tx_session_pending (uint8_t)", "mavlink_proto.ISBD_LINK_STATUS_tx_session_pending", ftypes.UINT8, nil)
f.ISBD_LINK_STATUS_rx_session_pending = ProtoField.new("rx_session_pending (uint8_t)", "mavlink_proto.ISBD_LINK_STATUS_rx_session_pending", ftypes.UINT8, nil)

f.RAW_RPM_index = ProtoField.new("index (uint8_t)", "mavlink_proto.RAW_RPM_index", ftypes.UINT8, nil)
f.RAW_RPM_frequency = ProtoField.new("frequency (float)", "mavlink_proto.RAW_RPM_frequency", ftypes.FLOAT, nil)

f.UTM_GLOBAL_POSITION_time = ProtoField.new("time (uint64_t)", "mavlink_proto.UTM_GLOBAL_POSITION_time", ftypes.UINT64, nil)
f.UTM_GLOBAL_POSITION_uas_id_0 = ProtoField.new("uas_id[0] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_0", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_1 = ProtoField.new("uas_id[1] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_1", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_2 = ProtoField.new("uas_id[2] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_2", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_3 = ProtoField.new("uas_id[3] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_3", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_4 = ProtoField.new("uas_id[4] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_4", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_5 = ProtoField.new("uas_id[5] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_5", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_6 = ProtoField.new("uas_id[6] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_6", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_7 = ProtoField.new("uas_id[7] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_7", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_8 = ProtoField.new("uas_id[8] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_8", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_9 = ProtoField.new("uas_id[9] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_9", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_10 = ProtoField.new("uas_id[10] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_10", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_11 = ProtoField.new("uas_id[11] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_11", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_12 = ProtoField.new("uas_id[12] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_12", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_13 = ProtoField.new("uas_id[13] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_13", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_14 = ProtoField.new("uas_id[14] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_14", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_15 = ProtoField.new("uas_id[15] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_15", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_16 = ProtoField.new("uas_id[16] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_16", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_uas_id_17 = ProtoField.new("uas_id[17] (uint8_t)", "mavlink_proto.UTM_GLOBAL_POSITION_uas_id_17", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_lat = ProtoField.new("lat (int32_t)", "mavlink_proto.UTM_GLOBAL_POSITION_lat", ftypes.INT32, nil)
f.UTM_GLOBAL_POSITION_lon = ProtoField.new("lon (int32_t)", "mavlink_proto.UTM_GLOBAL_POSITION_lon", ftypes.INT32, nil)
f.UTM_GLOBAL_POSITION_alt = ProtoField.new("alt (int32_t)", "mavlink_proto.UTM_GLOBAL_POSITION_alt", ftypes.INT32, nil)
f.UTM_GLOBAL_POSITION_relative_alt = ProtoField.new("relative_alt (int32_t)", "mavlink_proto.UTM_GLOBAL_POSITION_relative_alt", ftypes.INT32, nil)
f.UTM_GLOBAL_POSITION_vx = ProtoField.new("vx (int16_t)", "mavlink_proto.UTM_GLOBAL_POSITION_vx", ftypes.INT16, nil)
f.UTM_GLOBAL_POSITION_vy = ProtoField.new("vy (int16_t)", "mavlink_proto.UTM_GLOBAL_POSITION_vy", ftypes.INT16, nil)
f.UTM_GLOBAL_POSITION_vz = ProtoField.new("vz (int16_t)", "mavlink_proto.UTM_GLOBAL_POSITION_vz", ftypes.INT16, nil)
f.UTM_GLOBAL_POSITION_h_acc = ProtoField.new("h_acc (uint16_t)", "mavlink_proto.UTM_GLOBAL_POSITION_h_acc", ftypes.UINT16, nil)
f.UTM_GLOBAL_POSITION_v_acc = ProtoField.new("v_acc (uint16_t)", "mavlink_proto.UTM_GLOBAL_POSITION_v_acc", ftypes.UINT16, nil)
f.UTM_GLOBAL_POSITION_vel_acc = ProtoField.new("vel_acc (uint16_t)", "mavlink_proto.UTM_GLOBAL_POSITION_vel_acc", ftypes.UINT16, nil)
f.UTM_GLOBAL_POSITION_next_lat = ProtoField.new("next_lat (int32_t)", "mavlink_proto.UTM_GLOBAL_POSITION_next_lat", ftypes.INT32, nil)
f.UTM_GLOBAL_POSITION_next_lon = ProtoField.new("next_lon (int32_t)", "mavlink_proto.UTM_GLOBAL_POSITION_next_lon", ftypes.INT32, nil)
f.UTM_GLOBAL_POSITION_next_alt = ProtoField.new("next_alt (int32_t)", "mavlink_proto.UTM_GLOBAL_POSITION_next_alt", ftypes.INT32, nil)
f.UTM_GLOBAL_POSITION_update_rate = ProtoField.new("update_rate (uint16_t)", "mavlink_proto.UTM_GLOBAL_POSITION_update_rate", ftypes.UINT16, nil)
f.UTM_GLOBAL_POSITION_flight_state = ProtoField.new("flight_state (UTM_FLIGHT_STATE)", "mavlink_proto.UTM_GLOBAL_POSITION_flight_state", ftypes.UINT8, enumEntryName.UTM_FLIGHT_STATE)
f.UTM_GLOBAL_POSITION_flags = ProtoField.new("flags (UTM_DATA_AVAIL_FLAGS)", "mavlink_proto.UTM_GLOBAL_POSITION_flags", ftypes.UINT8, nil)
f.UTM_GLOBAL_POSITION_flags_flagUTM_DATA_AVAIL_FLAGS_TIME_VALID = ProtoField.bool("mavlink_proto.UTM_GLOBAL_POSITION_flags.UTM_DATA_AVAIL_FLAGS_TIME_VALID", "UTM_DATA_AVAIL_FLAGS_TIME_VALID", 8, nil, 1)
f.UTM_GLOBAL_POSITION_flags_flagUTM_DATA_AVAIL_FLAGS_UAS_ID_AVAILABLE = ProtoField.bool("mavlink_proto.UTM_GLOBAL_POSITION_flags.UTM_DATA_AVAIL_FLAGS_UAS_ID_AVAILABLE", "UTM_DATA_AVAIL_FLAGS_UAS_ID_AVAILABLE", 8, nil, 2)
f.UTM_GLOBAL_POSITION_flags_flagUTM_DATA_AVAIL_FLAGS_POSITION_AVAILABLE = ProtoField.bool("mavlink_proto.UTM_GLOBAL_POSITION_flags.UTM_DATA_AVAIL_FLAGS_POSITION_AVAILABLE", "UTM_DATA_AVAIL_FLAGS_POSITION_AVAILABLE", 8, nil, 4)
f.UTM_GLOBAL_POSITION_flags_flagUTM_DATA_AVAIL_FLAGS_ALTITUDE_AVAILABLE = ProtoField.bool("mavlink_proto.UTM_GLOBAL_POSITION_flags.UTM_DATA_AVAIL_FLAGS_ALTITUDE_AVAILABLE", "UTM_DATA_AVAIL_FLAGS_ALTITUDE_AVAILABLE", 8, nil, 8)
f.UTM_GLOBAL_POSITION_flags_flagUTM_DATA_AVAIL_FLAGS_RELATIVE_ALTITUDE_AVAILABLE = ProtoField.bool("mavlink_proto.UTM_GLOBAL_POSITION_flags.UTM_DATA_AVAIL_FLAGS_RELATIVE_ALTITUDE_AVAILABLE", "UTM_DATA_AVAIL_FLAGS_RELATIVE_ALTITUDE_AVAILABLE", 8, nil, 16)
f.UTM_GLOBAL_POSITION_flags_flagUTM_DATA_AVAIL_FLAGS_HORIZONTAL_VELO_AVAILABLE = ProtoField.bool("mavlink_proto.UTM_GLOBAL_POSITION_flags.UTM_DATA_AVAIL_FLAGS_HORIZONTAL_VELO_AVAILABLE", "UTM_DATA_AVAIL_FLAGS_HORIZONTAL_VELO_AVAILABLE", 8, nil, 32)
f.UTM_GLOBAL_POSITION_flags_flagUTM_DATA_AVAIL_FLAGS_VERTICAL_VELO_AVAILABLE = ProtoField.bool("mavlink_proto.UTM_GLOBAL_POSITION_flags.UTM_DATA_AVAIL_FLAGS_VERTICAL_VELO_AVAILABLE", "UTM_DATA_AVAIL_FLAGS_VERTICAL_VELO_AVAILABLE", 8, nil, 64)
f.UTM_GLOBAL_POSITION_flags_flagUTM_DATA_AVAIL_FLAGS_NEXT_WAYPOINT_AVAILABLE = ProtoField.bool("mavlink_proto.UTM_GLOBAL_POSITION_flags.UTM_DATA_AVAIL_FLAGS_NEXT_WAYPOINT_AVAILABLE", "UTM_DATA_AVAIL_FLAGS_NEXT_WAYPOINT_AVAILABLE", 8, nil, 128)

f.DEBUG_FLOAT_ARRAY_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.DEBUG_FLOAT_ARRAY_time_usec", ftypes.UINT64, nil)
f.DEBUG_FLOAT_ARRAY_name = ProtoField.new("name (char)", "mavlink_proto.DEBUG_FLOAT_ARRAY_name", ftypes.STRING, nil)
f.DEBUG_FLOAT_ARRAY_array_id = ProtoField.new("array_id (uint16_t)", "mavlink_proto.DEBUG_FLOAT_ARRAY_array_id", ftypes.UINT16, nil)
f.DEBUG_FLOAT_ARRAY_data_0 = ProtoField.new("data[0] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_0", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_1 = ProtoField.new("data[1] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_1", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_2 = ProtoField.new("data[2] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_2", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_3 = ProtoField.new("data[3] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_3", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_4 = ProtoField.new("data[4] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_4", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_5 = ProtoField.new("data[5] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_5", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_6 = ProtoField.new("data[6] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_6", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_7 = ProtoField.new("data[7] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_7", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_8 = ProtoField.new("data[8] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_8", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_9 = ProtoField.new("data[9] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_9", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_10 = ProtoField.new("data[10] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_10", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_11 = ProtoField.new("data[11] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_11", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_12 = ProtoField.new("data[12] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_12", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_13 = ProtoField.new("data[13] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_13", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_14 = ProtoField.new("data[14] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_14", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_15 = ProtoField.new("data[15] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_15", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_16 = ProtoField.new("data[16] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_16", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_17 = ProtoField.new("data[17] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_17", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_18 = ProtoField.new("data[18] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_18", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_19 = ProtoField.new("data[19] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_19", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_20 = ProtoField.new("data[20] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_20", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_21 = ProtoField.new("data[21] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_21", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_22 = ProtoField.new("data[22] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_22", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_23 = ProtoField.new("data[23] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_23", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_24 = ProtoField.new("data[24] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_24", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_25 = ProtoField.new("data[25] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_25", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_26 = ProtoField.new("data[26] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_26", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_27 = ProtoField.new("data[27] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_27", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_28 = ProtoField.new("data[28] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_28", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_29 = ProtoField.new("data[29] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_29", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_30 = ProtoField.new("data[30] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_30", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_31 = ProtoField.new("data[31] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_31", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_32 = ProtoField.new("data[32] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_32", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_33 = ProtoField.new("data[33] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_33", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_34 = ProtoField.new("data[34] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_34", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_35 = ProtoField.new("data[35] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_35", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_36 = ProtoField.new("data[36] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_36", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_37 = ProtoField.new("data[37] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_37", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_38 = ProtoField.new("data[38] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_38", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_39 = ProtoField.new("data[39] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_39", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_40 = ProtoField.new("data[40] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_40", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_41 = ProtoField.new("data[41] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_41", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_42 = ProtoField.new("data[42] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_42", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_43 = ProtoField.new("data[43] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_43", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_44 = ProtoField.new("data[44] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_44", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_45 = ProtoField.new("data[45] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_45", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_46 = ProtoField.new("data[46] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_46", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_47 = ProtoField.new("data[47] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_47", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_48 = ProtoField.new("data[48] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_48", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_49 = ProtoField.new("data[49] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_49", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_50 = ProtoField.new("data[50] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_50", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_51 = ProtoField.new("data[51] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_51", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_52 = ProtoField.new("data[52] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_52", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_53 = ProtoField.new("data[53] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_53", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_54 = ProtoField.new("data[54] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_54", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_55 = ProtoField.new("data[55] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_55", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_56 = ProtoField.new("data[56] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_56", ftypes.FLOAT, nil)
f.DEBUG_FLOAT_ARRAY_data_57 = ProtoField.new("data[57] (float)", "mavlink_proto.DEBUG_FLOAT_ARRAY_data_57", ftypes.FLOAT, nil)

f.SMART_BATTERY_INFO_id = ProtoField.new("id (uint8_t)", "mavlink_proto.SMART_BATTERY_INFO_id", ftypes.UINT8, nil)
f.SMART_BATTERY_INFO_battery_function = ProtoField.new("battery_function (MAV_BATTERY_FUNCTION)", "mavlink_proto.SMART_BATTERY_INFO_battery_function", ftypes.UINT8, enumEntryName.MAV_BATTERY_FUNCTION)
f.SMART_BATTERY_INFO_type = ProtoField.new("type (MAV_BATTERY_TYPE)", "mavlink_proto.SMART_BATTERY_INFO_type", ftypes.UINT8, enumEntryName.MAV_BATTERY_TYPE)
f.SMART_BATTERY_INFO_capacity_full_specification = ProtoField.new("capacity_full_specification (int32_t)", "mavlink_proto.SMART_BATTERY_INFO_capacity_full_specification", ftypes.INT32, nil)
f.SMART_BATTERY_INFO_capacity_full = ProtoField.new("capacity_full (int32_t)", "mavlink_proto.SMART_BATTERY_INFO_capacity_full", ftypes.INT32, nil)
f.SMART_BATTERY_INFO_cycle_count = ProtoField.new("cycle_count (uint16_t)", "mavlink_proto.SMART_BATTERY_INFO_cycle_count", ftypes.UINT16, nil)
f.SMART_BATTERY_INFO_serial_number = ProtoField.new("serial_number (char)", "mavlink_proto.SMART_BATTERY_INFO_serial_number", ftypes.STRING, nil)
f.SMART_BATTERY_INFO_device_name = ProtoField.new("device_name (char)", "mavlink_proto.SMART_BATTERY_INFO_device_name", ftypes.STRING, nil)
f.SMART_BATTERY_INFO_weight = ProtoField.new("weight (uint16_t)", "mavlink_proto.SMART_BATTERY_INFO_weight", ftypes.UINT16, nil)
f.SMART_BATTERY_INFO_discharge_minimum_voltage = ProtoField.new("discharge_minimum_voltage (uint16_t)", "mavlink_proto.SMART_BATTERY_INFO_discharge_minimum_voltage", ftypes.UINT16, nil)
f.SMART_BATTERY_INFO_charging_minimum_voltage = ProtoField.new("charging_minimum_voltage (uint16_t)", "mavlink_proto.SMART_BATTERY_INFO_charging_minimum_voltage", ftypes.UINT16, nil)
f.SMART_BATTERY_INFO_resting_minimum_voltage = ProtoField.new("resting_minimum_voltage (uint16_t)", "mavlink_proto.SMART_BATTERY_INFO_resting_minimum_voltage", ftypes.UINT16, nil)
f.SMART_BATTERY_INFO_charging_maximum_voltage = ProtoField.new("charging_maximum_voltage (uint16_t)", "mavlink_proto.SMART_BATTERY_INFO_charging_maximum_voltage", ftypes.UINT16, nil)
f.SMART_BATTERY_INFO_cells_in_series = ProtoField.new("cells_in_series (uint8_t)", "mavlink_proto.SMART_BATTERY_INFO_cells_in_series", ftypes.UINT8, nil)
f.SMART_BATTERY_INFO_discharge_maximum_current = ProtoField.new("discharge_maximum_current (uint32_t)", "mavlink_proto.SMART_BATTERY_INFO_discharge_maximum_current", ftypes.UINT32, nil)
f.SMART_BATTERY_INFO_discharge_maximum_burst_current = ProtoField.new("discharge_maximum_burst_current (uint32_t)", "mavlink_proto.SMART_BATTERY_INFO_discharge_maximum_burst_current", ftypes.UINT32, nil)
f.SMART_BATTERY_INFO_manufacture_date = ProtoField.new("manufacture_date (char)", "mavlink_proto.SMART_BATTERY_INFO_manufacture_date", ftypes.STRING, nil)

f.GENERATOR_STATUS_status = ProtoField.new("status (MAV_GENERATOR_STATUS_FLAG)", "mavlink_proto.GENERATOR_STATUS_status", ftypes.UINT64, nil)
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_OFF = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_OFF", "MAV_GENERATOR_STATUS_FLAG_OFF", 23, nil, 1)
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_READY = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_READY", "MAV_GENERATOR_STATUS_FLAG_READY", 23, nil, 2)
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_GENERATING = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_GENERATING", "MAV_GENERATOR_STATUS_FLAG_GENERATING", 23, nil, 4)
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_CHARGING = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_CHARGING", "MAV_GENERATOR_STATUS_FLAG_CHARGING", 23, nil, 8)
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_REDUCED_POWER = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_REDUCED_POWER", "MAV_GENERATOR_STATUS_FLAG_REDUCED_POWER", 23, nil, 16)
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_MAXPOWER = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_MAXPOWER", "MAV_GENERATOR_STATUS_FLAG_MAXPOWER", 23, nil, 32)
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_OVERTEMP_WARNING = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_OVERTEMP_WARNING", "MAV_GENERATOR_STATUS_FLAG_OVERTEMP_WARNING", 23, nil, 64)
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_OVERTEMP_FAULT = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_OVERTEMP_FAULT", "MAV_GENERATOR_STATUS_FLAG_OVERTEMP_FAULT", 23, nil, 128)
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_WARNING = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_WARNING", "MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_WARNING", 23, nil, 256)
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_FAULT = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_FAULT", "MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_FAULT", 23, nil, 512)
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_ELECTRONICS_FAULT = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_FAULT", "MAV_GENERATOR_STATUS_FLAG_ELECTRONICS_FAULT", 23, nil, 1024)
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_POWERSOURCE_FAULT = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_POWERSOURCE_FAULT", "MAV_GENERATOR_STATUS_FLAG_POWERSOURCE_FAULT", 23, nil, 2048)
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_COMMUNICATION_WARNING = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_COMMUNICATION_WARNING", "MAV_GENERATOR_STATUS_FLAG_COMMUNICATION_WARNING", 23, nil, 4096)
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_COOLING_WARNING = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_COOLING_WARNING", "MAV_GENERATOR_STATUS_FLAG_COOLING_WARNING", 23, nil, 8192)
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_POWER_RAIL_FAULT = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_POWER_RAIL_FAULT", "MAV_GENERATOR_STATUS_FLAG_POWER_RAIL_FAULT", 23, nil, 16384)
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_OVERCURRENT_FAULT = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_OVERCURRENT_FAULT", "MAV_GENERATOR_STATUS_FLAG_OVERCURRENT_FAULT", 23, nil, 32768)
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_BATTERY_OVERCHARGE_CURRENT_FAULT = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_BATTERY_OVERCHARGE_CURRENT_FAULT", "MAV_GENERATOR_STATUS_FLAG_BATTERY_OVERCHARGE_CURRENT_FAULT", 23, nil, 65536)
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_OVERVOLTAGE_FAULT = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_OVERVOLTAGE_FAULT", "MAV_GENERATOR_STATUS_FLAG_OVERVOLTAGE_FAULT", 23, nil, 131072)
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_BATTERY_UNDERVOLT_FAULT = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_BATTERY_UNDERVOLT_FAULT", "MAV_GENERATOR_STATUS_FLAG_BATTERY_UNDERVOLT_FAULT", 23, nil, 262144)
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_START_INHIBITED = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_START_INHIBITED", "MAV_GENERATOR_STATUS_FLAG_START_INHIBITED", 23, nil, 524288)
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_MAINTENANCE_REQUIRED = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_MAINTENANCE_REQUIRED", "MAV_GENERATOR_STATUS_FLAG_MAINTENANCE_REQUIRED", 23, nil, 1048576)
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_WARMING_UP = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_WARMING_UP", "MAV_GENERATOR_STATUS_FLAG_WARMING_UP", 23, nil, 2097152)
f.GENERATOR_STATUS_status_flagMAV_GENERATOR_STATUS_FLAG_IDLE = ProtoField.bool("mavlink_proto.GENERATOR_STATUS_status.MAV_GENERATOR_STATUS_FLAG_IDLE", "MAV_GENERATOR_STATUS_FLAG_IDLE", 23, nil, 4194304)
f.GENERATOR_STATUS_generator_speed = ProtoField.new("generator_speed (uint16_t)", "mavlink_proto.GENERATOR_STATUS_generator_speed", ftypes.UINT16, nil)
f.GENERATOR_STATUS_battery_current = ProtoField.new("battery_current (float)", "mavlink_proto.GENERATOR_STATUS_battery_current", ftypes.FLOAT, nil)
f.GENERATOR_STATUS_load_current = ProtoField.new("load_current (float)", "mavlink_proto.GENERATOR_STATUS_load_current", ftypes.FLOAT, nil)
f.GENERATOR_STATUS_power_generated = ProtoField.new("power_generated (float)", "mavlink_proto.GENERATOR_STATUS_power_generated", ftypes.FLOAT, nil)
f.GENERATOR_STATUS_bus_voltage = ProtoField.new("bus_voltage (float)", "mavlink_proto.GENERATOR_STATUS_bus_voltage", ftypes.FLOAT, nil)
f.GENERATOR_STATUS_rectifier_temperature = ProtoField.new("rectifier_temperature (int16_t)", "mavlink_proto.GENERATOR_STATUS_rectifier_temperature", ftypes.INT16, nil)
f.GENERATOR_STATUS_bat_current_setpoint = ProtoField.new("bat_current_setpoint (float)", "mavlink_proto.GENERATOR_STATUS_bat_current_setpoint", ftypes.FLOAT, nil)
f.GENERATOR_STATUS_generator_temperature = ProtoField.new("generator_temperature (int16_t)", "mavlink_proto.GENERATOR_STATUS_generator_temperature", ftypes.INT16, nil)
f.GENERATOR_STATUS_runtime = ProtoField.new("runtime (uint32_t)", "mavlink_proto.GENERATOR_STATUS_runtime", ftypes.UINT32, nil)
f.GENERATOR_STATUS_time_until_maintenance = ProtoField.new("time_until_maintenance (int32_t)", "mavlink_proto.GENERATOR_STATUS_time_until_maintenance", ftypes.INT32, nil)

f.ACTUATOR_OUTPUT_STATUS_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_time_usec", ftypes.UINT64, nil)
f.ACTUATOR_OUTPUT_STATUS_active = ProtoField.new("active (uint32_t)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_active", ftypes.UINT32, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_0 = ProtoField.new("actuator[0] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_0", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_1 = ProtoField.new("actuator[1] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_1", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_2 = ProtoField.new("actuator[2] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_2", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_3 = ProtoField.new("actuator[3] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_3", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_4 = ProtoField.new("actuator[4] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_4", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_5 = ProtoField.new("actuator[5] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_5", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_6 = ProtoField.new("actuator[6] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_6", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_7 = ProtoField.new("actuator[7] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_7", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_8 = ProtoField.new("actuator[8] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_8", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_9 = ProtoField.new("actuator[9] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_9", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_10 = ProtoField.new("actuator[10] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_10", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_11 = ProtoField.new("actuator[11] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_11", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_12 = ProtoField.new("actuator[12] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_12", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_13 = ProtoField.new("actuator[13] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_13", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_14 = ProtoField.new("actuator[14] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_14", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_15 = ProtoField.new("actuator[15] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_15", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_16 = ProtoField.new("actuator[16] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_16", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_17 = ProtoField.new("actuator[17] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_17", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_18 = ProtoField.new("actuator[18] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_18", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_19 = ProtoField.new("actuator[19] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_19", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_20 = ProtoField.new("actuator[20] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_20", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_21 = ProtoField.new("actuator[21] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_21", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_22 = ProtoField.new("actuator[22] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_22", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_23 = ProtoField.new("actuator[23] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_23", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_24 = ProtoField.new("actuator[24] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_24", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_25 = ProtoField.new("actuator[25] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_25", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_26 = ProtoField.new("actuator[26] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_26", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_27 = ProtoField.new("actuator[27] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_27", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_28 = ProtoField.new("actuator[28] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_28", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_29 = ProtoField.new("actuator[29] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_29", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_30 = ProtoField.new("actuator[30] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_30", ftypes.FLOAT, nil)
f.ACTUATOR_OUTPUT_STATUS_actuator_31 = ProtoField.new("actuator[31] (float)", "mavlink_proto.ACTUATOR_OUTPUT_STATUS_actuator_31", ftypes.FLOAT, nil)

f.TUNNEL_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.TUNNEL_target_system", ftypes.UINT8, nil)
f.TUNNEL_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.TUNNEL_target_component", ftypes.UINT8, nil)
f.TUNNEL_payload_type = ProtoField.new("payload_type (MAV_TUNNEL_PAYLOAD_TYPE)", "mavlink_proto.TUNNEL_payload_type", ftypes.UINT16, enumEntryName.MAV_TUNNEL_PAYLOAD_TYPE)
f.TUNNEL_payload_length = ProtoField.new("payload_length (uint8_t)", "mavlink_proto.TUNNEL_payload_length", ftypes.UINT8, nil)
f.TUNNEL_payload_0 = ProtoField.new("payload[0] (uint8_t)", "mavlink_proto.TUNNEL_payload_0", ftypes.UINT8, nil)
f.TUNNEL_payload_1 = ProtoField.new("payload[1] (uint8_t)", "mavlink_proto.TUNNEL_payload_1", ftypes.UINT8, nil)
f.TUNNEL_payload_2 = ProtoField.new("payload[2] (uint8_t)", "mavlink_proto.TUNNEL_payload_2", ftypes.UINT8, nil)
f.TUNNEL_payload_3 = ProtoField.new("payload[3] (uint8_t)", "mavlink_proto.TUNNEL_payload_3", ftypes.UINT8, nil)
f.TUNNEL_payload_4 = ProtoField.new("payload[4] (uint8_t)", "mavlink_proto.TUNNEL_payload_4", ftypes.UINT8, nil)
f.TUNNEL_payload_5 = ProtoField.new("payload[5] (uint8_t)", "mavlink_proto.TUNNEL_payload_5", ftypes.UINT8, nil)
f.TUNNEL_payload_6 = ProtoField.new("payload[6] (uint8_t)", "mavlink_proto.TUNNEL_payload_6", ftypes.UINT8, nil)
f.TUNNEL_payload_7 = ProtoField.new("payload[7] (uint8_t)", "mavlink_proto.TUNNEL_payload_7", ftypes.UINT8, nil)
f.TUNNEL_payload_8 = ProtoField.new("payload[8] (uint8_t)", "mavlink_proto.TUNNEL_payload_8", ftypes.UINT8, nil)
f.TUNNEL_payload_9 = ProtoField.new("payload[9] (uint8_t)", "mavlink_proto.TUNNEL_payload_9", ftypes.UINT8, nil)
f.TUNNEL_payload_10 = ProtoField.new("payload[10] (uint8_t)", "mavlink_proto.TUNNEL_payload_10", ftypes.UINT8, nil)
f.TUNNEL_payload_11 = ProtoField.new("payload[11] (uint8_t)", "mavlink_proto.TUNNEL_payload_11", ftypes.UINT8, nil)
f.TUNNEL_payload_12 = ProtoField.new("payload[12] (uint8_t)", "mavlink_proto.TUNNEL_payload_12", ftypes.UINT8, nil)
f.TUNNEL_payload_13 = ProtoField.new("payload[13] (uint8_t)", "mavlink_proto.TUNNEL_payload_13", ftypes.UINT8, nil)
f.TUNNEL_payload_14 = ProtoField.new("payload[14] (uint8_t)", "mavlink_proto.TUNNEL_payload_14", ftypes.UINT8, nil)
f.TUNNEL_payload_15 = ProtoField.new("payload[15] (uint8_t)", "mavlink_proto.TUNNEL_payload_15", ftypes.UINT8, nil)
f.TUNNEL_payload_16 = ProtoField.new("payload[16] (uint8_t)", "mavlink_proto.TUNNEL_payload_16", ftypes.UINT8, nil)
f.TUNNEL_payload_17 = ProtoField.new("payload[17] (uint8_t)", "mavlink_proto.TUNNEL_payload_17", ftypes.UINT8, nil)
f.TUNNEL_payload_18 = ProtoField.new("payload[18] (uint8_t)", "mavlink_proto.TUNNEL_payload_18", ftypes.UINT8, nil)
f.TUNNEL_payload_19 = ProtoField.new("payload[19] (uint8_t)", "mavlink_proto.TUNNEL_payload_19", ftypes.UINT8, nil)
f.TUNNEL_payload_20 = ProtoField.new("payload[20] (uint8_t)", "mavlink_proto.TUNNEL_payload_20", ftypes.UINT8, nil)
f.TUNNEL_payload_21 = ProtoField.new("payload[21] (uint8_t)", "mavlink_proto.TUNNEL_payload_21", ftypes.UINT8, nil)
f.TUNNEL_payload_22 = ProtoField.new("payload[22] (uint8_t)", "mavlink_proto.TUNNEL_payload_22", ftypes.UINT8, nil)
f.TUNNEL_payload_23 = ProtoField.new("payload[23] (uint8_t)", "mavlink_proto.TUNNEL_payload_23", ftypes.UINT8, nil)
f.TUNNEL_payload_24 = ProtoField.new("payload[24] (uint8_t)", "mavlink_proto.TUNNEL_payload_24", ftypes.UINT8, nil)
f.TUNNEL_payload_25 = ProtoField.new("payload[25] (uint8_t)", "mavlink_proto.TUNNEL_payload_25", ftypes.UINT8, nil)
f.TUNNEL_payload_26 = ProtoField.new("payload[26] (uint8_t)", "mavlink_proto.TUNNEL_payload_26", ftypes.UINT8, nil)
f.TUNNEL_payload_27 = ProtoField.new("payload[27] (uint8_t)", "mavlink_proto.TUNNEL_payload_27", ftypes.UINT8, nil)
f.TUNNEL_payload_28 = ProtoField.new("payload[28] (uint8_t)", "mavlink_proto.TUNNEL_payload_28", ftypes.UINT8, nil)
f.TUNNEL_payload_29 = ProtoField.new("payload[29] (uint8_t)", "mavlink_proto.TUNNEL_payload_29", ftypes.UINT8, nil)
f.TUNNEL_payload_30 = ProtoField.new("payload[30] (uint8_t)", "mavlink_proto.TUNNEL_payload_30", ftypes.UINT8, nil)
f.TUNNEL_payload_31 = ProtoField.new("payload[31] (uint8_t)", "mavlink_proto.TUNNEL_payload_31", ftypes.UINT8, nil)
f.TUNNEL_payload_32 = ProtoField.new("payload[32] (uint8_t)", "mavlink_proto.TUNNEL_payload_32", ftypes.UINT8, nil)
f.TUNNEL_payload_33 = ProtoField.new("payload[33] (uint8_t)", "mavlink_proto.TUNNEL_payload_33", ftypes.UINT8, nil)
f.TUNNEL_payload_34 = ProtoField.new("payload[34] (uint8_t)", "mavlink_proto.TUNNEL_payload_34", ftypes.UINT8, nil)
f.TUNNEL_payload_35 = ProtoField.new("payload[35] (uint8_t)", "mavlink_proto.TUNNEL_payload_35", ftypes.UINT8, nil)
f.TUNNEL_payload_36 = ProtoField.new("payload[36] (uint8_t)", "mavlink_proto.TUNNEL_payload_36", ftypes.UINT8, nil)
f.TUNNEL_payload_37 = ProtoField.new("payload[37] (uint8_t)", "mavlink_proto.TUNNEL_payload_37", ftypes.UINT8, nil)
f.TUNNEL_payload_38 = ProtoField.new("payload[38] (uint8_t)", "mavlink_proto.TUNNEL_payload_38", ftypes.UINT8, nil)
f.TUNNEL_payload_39 = ProtoField.new("payload[39] (uint8_t)", "mavlink_proto.TUNNEL_payload_39", ftypes.UINT8, nil)
f.TUNNEL_payload_40 = ProtoField.new("payload[40] (uint8_t)", "mavlink_proto.TUNNEL_payload_40", ftypes.UINT8, nil)
f.TUNNEL_payload_41 = ProtoField.new("payload[41] (uint8_t)", "mavlink_proto.TUNNEL_payload_41", ftypes.UINT8, nil)
f.TUNNEL_payload_42 = ProtoField.new("payload[42] (uint8_t)", "mavlink_proto.TUNNEL_payload_42", ftypes.UINT8, nil)
f.TUNNEL_payload_43 = ProtoField.new("payload[43] (uint8_t)", "mavlink_proto.TUNNEL_payload_43", ftypes.UINT8, nil)
f.TUNNEL_payload_44 = ProtoField.new("payload[44] (uint8_t)", "mavlink_proto.TUNNEL_payload_44", ftypes.UINT8, nil)
f.TUNNEL_payload_45 = ProtoField.new("payload[45] (uint8_t)", "mavlink_proto.TUNNEL_payload_45", ftypes.UINT8, nil)
f.TUNNEL_payload_46 = ProtoField.new("payload[46] (uint8_t)", "mavlink_proto.TUNNEL_payload_46", ftypes.UINT8, nil)
f.TUNNEL_payload_47 = ProtoField.new("payload[47] (uint8_t)", "mavlink_proto.TUNNEL_payload_47", ftypes.UINT8, nil)
f.TUNNEL_payload_48 = ProtoField.new("payload[48] (uint8_t)", "mavlink_proto.TUNNEL_payload_48", ftypes.UINT8, nil)
f.TUNNEL_payload_49 = ProtoField.new("payload[49] (uint8_t)", "mavlink_proto.TUNNEL_payload_49", ftypes.UINT8, nil)
f.TUNNEL_payload_50 = ProtoField.new("payload[50] (uint8_t)", "mavlink_proto.TUNNEL_payload_50", ftypes.UINT8, nil)
f.TUNNEL_payload_51 = ProtoField.new("payload[51] (uint8_t)", "mavlink_proto.TUNNEL_payload_51", ftypes.UINT8, nil)
f.TUNNEL_payload_52 = ProtoField.new("payload[52] (uint8_t)", "mavlink_proto.TUNNEL_payload_52", ftypes.UINT8, nil)
f.TUNNEL_payload_53 = ProtoField.new("payload[53] (uint8_t)", "mavlink_proto.TUNNEL_payload_53", ftypes.UINT8, nil)
f.TUNNEL_payload_54 = ProtoField.new("payload[54] (uint8_t)", "mavlink_proto.TUNNEL_payload_54", ftypes.UINT8, nil)
f.TUNNEL_payload_55 = ProtoField.new("payload[55] (uint8_t)", "mavlink_proto.TUNNEL_payload_55", ftypes.UINT8, nil)
f.TUNNEL_payload_56 = ProtoField.new("payload[56] (uint8_t)", "mavlink_proto.TUNNEL_payload_56", ftypes.UINT8, nil)
f.TUNNEL_payload_57 = ProtoField.new("payload[57] (uint8_t)", "mavlink_proto.TUNNEL_payload_57", ftypes.UINT8, nil)
f.TUNNEL_payload_58 = ProtoField.new("payload[58] (uint8_t)", "mavlink_proto.TUNNEL_payload_58", ftypes.UINT8, nil)
f.TUNNEL_payload_59 = ProtoField.new("payload[59] (uint8_t)", "mavlink_proto.TUNNEL_payload_59", ftypes.UINT8, nil)
f.TUNNEL_payload_60 = ProtoField.new("payload[60] (uint8_t)", "mavlink_proto.TUNNEL_payload_60", ftypes.UINT8, nil)
f.TUNNEL_payload_61 = ProtoField.new("payload[61] (uint8_t)", "mavlink_proto.TUNNEL_payload_61", ftypes.UINT8, nil)
f.TUNNEL_payload_62 = ProtoField.new("payload[62] (uint8_t)", "mavlink_proto.TUNNEL_payload_62", ftypes.UINT8, nil)
f.TUNNEL_payload_63 = ProtoField.new("payload[63] (uint8_t)", "mavlink_proto.TUNNEL_payload_63", ftypes.UINT8, nil)
f.TUNNEL_payload_64 = ProtoField.new("payload[64] (uint8_t)", "mavlink_proto.TUNNEL_payload_64", ftypes.UINT8, nil)
f.TUNNEL_payload_65 = ProtoField.new("payload[65] (uint8_t)", "mavlink_proto.TUNNEL_payload_65", ftypes.UINT8, nil)
f.TUNNEL_payload_66 = ProtoField.new("payload[66] (uint8_t)", "mavlink_proto.TUNNEL_payload_66", ftypes.UINT8, nil)
f.TUNNEL_payload_67 = ProtoField.new("payload[67] (uint8_t)", "mavlink_proto.TUNNEL_payload_67", ftypes.UINT8, nil)
f.TUNNEL_payload_68 = ProtoField.new("payload[68] (uint8_t)", "mavlink_proto.TUNNEL_payload_68", ftypes.UINT8, nil)
f.TUNNEL_payload_69 = ProtoField.new("payload[69] (uint8_t)", "mavlink_proto.TUNNEL_payload_69", ftypes.UINT8, nil)
f.TUNNEL_payload_70 = ProtoField.new("payload[70] (uint8_t)", "mavlink_proto.TUNNEL_payload_70", ftypes.UINT8, nil)
f.TUNNEL_payload_71 = ProtoField.new("payload[71] (uint8_t)", "mavlink_proto.TUNNEL_payload_71", ftypes.UINT8, nil)
f.TUNNEL_payload_72 = ProtoField.new("payload[72] (uint8_t)", "mavlink_proto.TUNNEL_payload_72", ftypes.UINT8, nil)
f.TUNNEL_payload_73 = ProtoField.new("payload[73] (uint8_t)", "mavlink_proto.TUNNEL_payload_73", ftypes.UINT8, nil)
f.TUNNEL_payload_74 = ProtoField.new("payload[74] (uint8_t)", "mavlink_proto.TUNNEL_payload_74", ftypes.UINT8, nil)
f.TUNNEL_payload_75 = ProtoField.new("payload[75] (uint8_t)", "mavlink_proto.TUNNEL_payload_75", ftypes.UINT8, nil)
f.TUNNEL_payload_76 = ProtoField.new("payload[76] (uint8_t)", "mavlink_proto.TUNNEL_payload_76", ftypes.UINT8, nil)
f.TUNNEL_payload_77 = ProtoField.new("payload[77] (uint8_t)", "mavlink_proto.TUNNEL_payload_77", ftypes.UINT8, nil)
f.TUNNEL_payload_78 = ProtoField.new("payload[78] (uint8_t)", "mavlink_proto.TUNNEL_payload_78", ftypes.UINT8, nil)
f.TUNNEL_payload_79 = ProtoField.new("payload[79] (uint8_t)", "mavlink_proto.TUNNEL_payload_79", ftypes.UINT8, nil)
f.TUNNEL_payload_80 = ProtoField.new("payload[80] (uint8_t)", "mavlink_proto.TUNNEL_payload_80", ftypes.UINT8, nil)
f.TUNNEL_payload_81 = ProtoField.new("payload[81] (uint8_t)", "mavlink_proto.TUNNEL_payload_81", ftypes.UINT8, nil)
f.TUNNEL_payload_82 = ProtoField.new("payload[82] (uint8_t)", "mavlink_proto.TUNNEL_payload_82", ftypes.UINT8, nil)
f.TUNNEL_payload_83 = ProtoField.new("payload[83] (uint8_t)", "mavlink_proto.TUNNEL_payload_83", ftypes.UINT8, nil)
f.TUNNEL_payload_84 = ProtoField.new("payload[84] (uint8_t)", "mavlink_proto.TUNNEL_payload_84", ftypes.UINT8, nil)
f.TUNNEL_payload_85 = ProtoField.new("payload[85] (uint8_t)", "mavlink_proto.TUNNEL_payload_85", ftypes.UINT8, nil)
f.TUNNEL_payload_86 = ProtoField.new("payload[86] (uint8_t)", "mavlink_proto.TUNNEL_payload_86", ftypes.UINT8, nil)
f.TUNNEL_payload_87 = ProtoField.new("payload[87] (uint8_t)", "mavlink_proto.TUNNEL_payload_87", ftypes.UINT8, nil)
f.TUNNEL_payload_88 = ProtoField.new("payload[88] (uint8_t)", "mavlink_proto.TUNNEL_payload_88", ftypes.UINT8, nil)
f.TUNNEL_payload_89 = ProtoField.new("payload[89] (uint8_t)", "mavlink_proto.TUNNEL_payload_89", ftypes.UINT8, nil)
f.TUNNEL_payload_90 = ProtoField.new("payload[90] (uint8_t)", "mavlink_proto.TUNNEL_payload_90", ftypes.UINT8, nil)
f.TUNNEL_payload_91 = ProtoField.new("payload[91] (uint8_t)", "mavlink_proto.TUNNEL_payload_91", ftypes.UINT8, nil)
f.TUNNEL_payload_92 = ProtoField.new("payload[92] (uint8_t)", "mavlink_proto.TUNNEL_payload_92", ftypes.UINT8, nil)
f.TUNNEL_payload_93 = ProtoField.new("payload[93] (uint8_t)", "mavlink_proto.TUNNEL_payload_93", ftypes.UINT8, nil)
f.TUNNEL_payload_94 = ProtoField.new("payload[94] (uint8_t)", "mavlink_proto.TUNNEL_payload_94", ftypes.UINT8, nil)
f.TUNNEL_payload_95 = ProtoField.new("payload[95] (uint8_t)", "mavlink_proto.TUNNEL_payload_95", ftypes.UINT8, nil)
f.TUNNEL_payload_96 = ProtoField.new("payload[96] (uint8_t)", "mavlink_proto.TUNNEL_payload_96", ftypes.UINT8, nil)
f.TUNNEL_payload_97 = ProtoField.new("payload[97] (uint8_t)", "mavlink_proto.TUNNEL_payload_97", ftypes.UINT8, nil)
f.TUNNEL_payload_98 = ProtoField.new("payload[98] (uint8_t)", "mavlink_proto.TUNNEL_payload_98", ftypes.UINT8, nil)
f.TUNNEL_payload_99 = ProtoField.new("payload[99] (uint8_t)", "mavlink_proto.TUNNEL_payload_99", ftypes.UINT8, nil)
f.TUNNEL_payload_100 = ProtoField.new("payload[100] (uint8_t)", "mavlink_proto.TUNNEL_payload_100", ftypes.UINT8, nil)
f.TUNNEL_payload_101 = ProtoField.new("payload[101] (uint8_t)", "mavlink_proto.TUNNEL_payload_101", ftypes.UINT8, nil)
f.TUNNEL_payload_102 = ProtoField.new("payload[102] (uint8_t)", "mavlink_proto.TUNNEL_payload_102", ftypes.UINT8, nil)
f.TUNNEL_payload_103 = ProtoField.new("payload[103] (uint8_t)", "mavlink_proto.TUNNEL_payload_103", ftypes.UINT8, nil)
f.TUNNEL_payload_104 = ProtoField.new("payload[104] (uint8_t)", "mavlink_proto.TUNNEL_payload_104", ftypes.UINT8, nil)
f.TUNNEL_payload_105 = ProtoField.new("payload[105] (uint8_t)", "mavlink_proto.TUNNEL_payload_105", ftypes.UINT8, nil)
f.TUNNEL_payload_106 = ProtoField.new("payload[106] (uint8_t)", "mavlink_proto.TUNNEL_payload_106", ftypes.UINT8, nil)
f.TUNNEL_payload_107 = ProtoField.new("payload[107] (uint8_t)", "mavlink_proto.TUNNEL_payload_107", ftypes.UINT8, nil)
f.TUNNEL_payload_108 = ProtoField.new("payload[108] (uint8_t)", "mavlink_proto.TUNNEL_payload_108", ftypes.UINT8, nil)
f.TUNNEL_payload_109 = ProtoField.new("payload[109] (uint8_t)", "mavlink_proto.TUNNEL_payload_109", ftypes.UINT8, nil)
f.TUNNEL_payload_110 = ProtoField.new("payload[110] (uint8_t)", "mavlink_proto.TUNNEL_payload_110", ftypes.UINT8, nil)
f.TUNNEL_payload_111 = ProtoField.new("payload[111] (uint8_t)", "mavlink_proto.TUNNEL_payload_111", ftypes.UINT8, nil)
f.TUNNEL_payload_112 = ProtoField.new("payload[112] (uint8_t)", "mavlink_proto.TUNNEL_payload_112", ftypes.UINT8, nil)
f.TUNNEL_payload_113 = ProtoField.new("payload[113] (uint8_t)", "mavlink_proto.TUNNEL_payload_113", ftypes.UINT8, nil)
f.TUNNEL_payload_114 = ProtoField.new("payload[114] (uint8_t)", "mavlink_proto.TUNNEL_payload_114", ftypes.UINT8, nil)
f.TUNNEL_payload_115 = ProtoField.new("payload[115] (uint8_t)", "mavlink_proto.TUNNEL_payload_115", ftypes.UINT8, nil)
f.TUNNEL_payload_116 = ProtoField.new("payload[116] (uint8_t)", "mavlink_proto.TUNNEL_payload_116", ftypes.UINT8, nil)
f.TUNNEL_payload_117 = ProtoField.new("payload[117] (uint8_t)", "mavlink_proto.TUNNEL_payload_117", ftypes.UINT8, nil)
f.TUNNEL_payload_118 = ProtoField.new("payload[118] (uint8_t)", "mavlink_proto.TUNNEL_payload_118", ftypes.UINT8, nil)
f.TUNNEL_payload_119 = ProtoField.new("payload[119] (uint8_t)", "mavlink_proto.TUNNEL_payload_119", ftypes.UINT8, nil)
f.TUNNEL_payload_120 = ProtoField.new("payload[120] (uint8_t)", "mavlink_proto.TUNNEL_payload_120", ftypes.UINT8, nil)
f.TUNNEL_payload_121 = ProtoField.new("payload[121] (uint8_t)", "mavlink_proto.TUNNEL_payload_121", ftypes.UINT8, nil)
f.TUNNEL_payload_122 = ProtoField.new("payload[122] (uint8_t)", "mavlink_proto.TUNNEL_payload_122", ftypes.UINT8, nil)
f.TUNNEL_payload_123 = ProtoField.new("payload[123] (uint8_t)", "mavlink_proto.TUNNEL_payload_123", ftypes.UINT8, nil)
f.TUNNEL_payload_124 = ProtoField.new("payload[124] (uint8_t)", "mavlink_proto.TUNNEL_payload_124", ftypes.UINT8, nil)
f.TUNNEL_payload_125 = ProtoField.new("payload[125] (uint8_t)", "mavlink_proto.TUNNEL_payload_125", ftypes.UINT8, nil)
f.TUNNEL_payload_126 = ProtoField.new("payload[126] (uint8_t)", "mavlink_proto.TUNNEL_payload_126", ftypes.UINT8, nil)
f.TUNNEL_payload_127 = ProtoField.new("payload[127] (uint8_t)", "mavlink_proto.TUNNEL_payload_127", ftypes.UINT8, nil)

f.CAN_FRAME_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.CAN_FRAME_target_system", ftypes.UINT8, nil)
f.CAN_FRAME_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.CAN_FRAME_target_component", ftypes.UINT8, nil)
f.CAN_FRAME_bus = ProtoField.new("bus (uint8_t)", "mavlink_proto.CAN_FRAME_bus", ftypes.UINT8, nil)
f.CAN_FRAME_len = ProtoField.new("len (uint8_t)", "mavlink_proto.CAN_FRAME_len", ftypes.UINT8, nil)
f.CAN_FRAME_id = ProtoField.new("id (uint32_t)", "mavlink_proto.CAN_FRAME_id", ftypes.UINT32, nil)
f.CAN_FRAME_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.CAN_FRAME_data_0", ftypes.UINT8, nil)
f.CAN_FRAME_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.CAN_FRAME_data_1", ftypes.UINT8, nil)
f.CAN_FRAME_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.CAN_FRAME_data_2", ftypes.UINT8, nil)
f.CAN_FRAME_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.CAN_FRAME_data_3", ftypes.UINT8, nil)
f.CAN_FRAME_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.CAN_FRAME_data_4", ftypes.UINT8, nil)
f.CAN_FRAME_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.CAN_FRAME_data_5", ftypes.UINT8, nil)
f.CAN_FRAME_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.CAN_FRAME_data_6", ftypes.UINT8, nil)
f.CAN_FRAME_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.CAN_FRAME_data_7", ftypes.UINT8, nil)

f.CANFD_FRAME_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.CANFD_FRAME_target_system", ftypes.UINT8, nil)
f.CANFD_FRAME_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.CANFD_FRAME_target_component", ftypes.UINT8, nil)
f.CANFD_FRAME_bus = ProtoField.new("bus (uint8_t)", "mavlink_proto.CANFD_FRAME_bus", ftypes.UINT8, nil)
f.CANFD_FRAME_len = ProtoField.new("len (uint8_t)", "mavlink_proto.CANFD_FRAME_len", ftypes.UINT8, nil)
f.CANFD_FRAME_id = ProtoField.new("id (uint32_t)", "mavlink_proto.CANFD_FRAME_id", ftypes.UINT32, nil)
f.CANFD_FRAME_data_0 = ProtoField.new("data[0] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_0", ftypes.UINT8, nil)
f.CANFD_FRAME_data_1 = ProtoField.new("data[1] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_1", ftypes.UINT8, nil)
f.CANFD_FRAME_data_2 = ProtoField.new("data[2] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_2", ftypes.UINT8, nil)
f.CANFD_FRAME_data_3 = ProtoField.new("data[3] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_3", ftypes.UINT8, nil)
f.CANFD_FRAME_data_4 = ProtoField.new("data[4] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_4", ftypes.UINT8, nil)
f.CANFD_FRAME_data_5 = ProtoField.new("data[5] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_5", ftypes.UINT8, nil)
f.CANFD_FRAME_data_6 = ProtoField.new("data[6] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_6", ftypes.UINT8, nil)
f.CANFD_FRAME_data_7 = ProtoField.new("data[7] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_7", ftypes.UINT8, nil)
f.CANFD_FRAME_data_8 = ProtoField.new("data[8] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_8", ftypes.UINT8, nil)
f.CANFD_FRAME_data_9 = ProtoField.new("data[9] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_9", ftypes.UINT8, nil)
f.CANFD_FRAME_data_10 = ProtoField.new("data[10] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_10", ftypes.UINT8, nil)
f.CANFD_FRAME_data_11 = ProtoField.new("data[11] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_11", ftypes.UINT8, nil)
f.CANFD_FRAME_data_12 = ProtoField.new("data[12] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_12", ftypes.UINT8, nil)
f.CANFD_FRAME_data_13 = ProtoField.new("data[13] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_13", ftypes.UINT8, nil)
f.CANFD_FRAME_data_14 = ProtoField.new("data[14] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_14", ftypes.UINT8, nil)
f.CANFD_FRAME_data_15 = ProtoField.new("data[15] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_15", ftypes.UINT8, nil)
f.CANFD_FRAME_data_16 = ProtoField.new("data[16] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_16", ftypes.UINT8, nil)
f.CANFD_FRAME_data_17 = ProtoField.new("data[17] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_17", ftypes.UINT8, nil)
f.CANFD_FRAME_data_18 = ProtoField.new("data[18] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_18", ftypes.UINT8, nil)
f.CANFD_FRAME_data_19 = ProtoField.new("data[19] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_19", ftypes.UINT8, nil)
f.CANFD_FRAME_data_20 = ProtoField.new("data[20] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_20", ftypes.UINT8, nil)
f.CANFD_FRAME_data_21 = ProtoField.new("data[21] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_21", ftypes.UINT8, nil)
f.CANFD_FRAME_data_22 = ProtoField.new("data[22] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_22", ftypes.UINT8, nil)
f.CANFD_FRAME_data_23 = ProtoField.new("data[23] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_23", ftypes.UINT8, nil)
f.CANFD_FRAME_data_24 = ProtoField.new("data[24] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_24", ftypes.UINT8, nil)
f.CANFD_FRAME_data_25 = ProtoField.new("data[25] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_25", ftypes.UINT8, nil)
f.CANFD_FRAME_data_26 = ProtoField.new("data[26] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_26", ftypes.UINT8, nil)
f.CANFD_FRAME_data_27 = ProtoField.new("data[27] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_27", ftypes.UINT8, nil)
f.CANFD_FRAME_data_28 = ProtoField.new("data[28] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_28", ftypes.UINT8, nil)
f.CANFD_FRAME_data_29 = ProtoField.new("data[29] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_29", ftypes.UINT8, nil)
f.CANFD_FRAME_data_30 = ProtoField.new("data[30] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_30", ftypes.UINT8, nil)
f.CANFD_FRAME_data_31 = ProtoField.new("data[31] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_31", ftypes.UINT8, nil)
f.CANFD_FRAME_data_32 = ProtoField.new("data[32] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_32", ftypes.UINT8, nil)
f.CANFD_FRAME_data_33 = ProtoField.new("data[33] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_33", ftypes.UINT8, nil)
f.CANFD_FRAME_data_34 = ProtoField.new("data[34] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_34", ftypes.UINT8, nil)
f.CANFD_FRAME_data_35 = ProtoField.new("data[35] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_35", ftypes.UINT8, nil)
f.CANFD_FRAME_data_36 = ProtoField.new("data[36] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_36", ftypes.UINT8, nil)
f.CANFD_FRAME_data_37 = ProtoField.new("data[37] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_37", ftypes.UINT8, nil)
f.CANFD_FRAME_data_38 = ProtoField.new("data[38] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_38", ftypes.UINT8, nil)
f.CANFD_FRAME_data_39 = ProtoField.new("data[39] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_39", ftypes.UINT8, nil)
f.CANFD_FRAME_data_40 = ProtoField.new("data[40] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_40", ftypes.UINT8, nil)
f.CANFD_FRAME_data_41 = ProtoField.new("data[41] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_41", ftypes.UINT8, nil)
f.CANFD_FRAME_data_42 = ProtoField.new("data[42] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_42", ftypes.UINT8, nil)
f.CANFD_FRAME_data_43 = ProtoField.new("data[43] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_43", ftypes.UINT8, nil)
f.CANFD_FRAME_data_44 = ProtoField.new("data[44] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_44", ftypes.UINT8, nil)
f.CANFD_FRAME_data_45 = ProtoField.new("data[45] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_45", ftypes.UINT8, nil)
f.CANFD_FRAME_data_46 = ProtoField.new("data[46] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_46", ftypes.UINT8, nil)
f.CANFD_FRAME_data_47 = ProtoField.new("data[47] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_47", ftypes.UINT8, nil)
f.CANFD_FRAME_data_48 = ProtoField.new("data[48] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_48", ftypes.UINT8, nil)
f.CANFD_FRAME_data_49 = ProtoField.new("data[49] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_49", ftypes.UINT8, nil)
f.CANFD_FRAME_data_50 = ProtoField.new("data[50] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_50", ftypes.UINT8, nil)
f.CANFD_FRAME_data_51 = ProtoField.new("data[51] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_51", ftypes.UINT8, nil)
f.CANFD_FRAME_data_52 = ProtoField.new("data[52] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_52", ftypes.UINT8, nil)
f.CANFD_FRAME_data_53 = ProtoField.new("data[53] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_53", ftypes.UINT8, nil)
f.CANFD_FRAME_data_54 = ProtoField.new("data[54] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_54", ftypes.UINT8, nil)
f.CANFD_FRAME_data_55 = ProtoField.new("data[55] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_55", ftypes.UINT8, nil)
f.CANFD_FRAME_data_56 = ProtoField.new("data[56] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_56", ftypes.UINT8, nil)
f.CANFD_FRAME_data_57 = ProtoField.new("data[57] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_57", ftypes.UINT8, nil)
f.CANFD_FRAME_data_58 = ProtoField.new("data[58] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_58", ftypes.UINT8, nil)
f.CANFD_FRAME_data_59 = ProtoField.new("data[59] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_59", ftypes.UINT8, nil)
f.CANFD_FRAME_data_60 = ProtoField.new("data[60] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_60", ftypes.UINT8, nil)
f.CANFD_FRAME_data_61 = ProtoField.new("data[61] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_61", ftypes.UINT8, nil)
f.CANFD_FRAME_data_62 = ProtoField.new("data[62] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_62", ftypes.UINT8, nil)
f.CANFD_FRAME_data_63 = ProtoField.new("data[63] (uint8_t)", "mavlink_proto.CANFD_FRAME_data_63", ftypes.UINT8, nil)

f.CAN_FILTER_MODIFY_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.CAN_FILTER_MODIFY_target_system", ftypes.UINT8, nil)
f.CAN_FILTER_MODIFY_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.CAN_FILTER_MODIFY_target_component", ftypes.UINT8, nil)
f.CAN_FILTER_MODIFY_bus = ProtoField.new("bus (uint8_t)", "mavlink_proto.CAN_FILTER_MODIFY_bus", ftypes.UINT8, nil)
f.CAN_FILTER_MODIFY_operation = ProtoField.new("operation (CAN_FILTER_OP)", "mavlink_proto.CAN_FILTER_MODIFY_operation", ftypes.UINT8, enumEntryName.CAN_FILTER_OP)
f.CAN_FILTER_MODIFY_num_ids = ProtoField.new("num_ids (uint8_t)", "mavlink_proto.CAN_FILTER_MODIFY_num_ids", ftypes.UINT8, nil)
f.CAN_FILTER_MODIFY_ids_0 = ProtoField.new("ids[0] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_0", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_1 = ProtoField.new("ids[1] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_1", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_2 = ProtoField.new("ids[2] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_2", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_3 = ProtoField.new("ids[3] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_3", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_4 = ProtoField.new("ids[4] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_4", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_5 = ProtoField.new("ids[5] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_5", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_6 = ProtoField.new("ids[6] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_6", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_7 = ProtoField.new("ids[7] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_7", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_8 = ProtoField.new("ids[8] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_8", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_9 = ProtoField.new("ids[9] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_9", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_10 = ProtoField.new("ids[10] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_10", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_11 = ProtoField.new("ids[11] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_11", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_12 = ProtoField.new("ids[12] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_12", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_13 = ProtoField.new("ids[13] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_13", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_14 = ProtoField.new("ids[14] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_14", ftypes.UINT16, nil)
f.CAN_FILTER_MODIFY_ids_15 = ProtoField.new("ids[15] (uint16_t)", "mavlink_proto.CAN_FILTER_MODIFY_ids_15", ftypes.UINT16, nil)

f.WHEEL_DISTANCE_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.WHEEL_DISTANCE_time_usec", ftypes.UINT64, nil)
f.WHEEL_DISTANCE_count = ProtoField.new("count (uint8_t)", "mavlink_proto.WHEEL_DISTANCE_count", ftypes.UINT8, nil)
f.WHEEL_DISTANCE_distance_0 = ProtoField.new("distance[0] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_0", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_1 = ProtoField.new("distance[1] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_1", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_2 = ProtoField.new("distance[2] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_2", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_3 = ProtoField.new("distance[3] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_3", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_4 = ProtoField.new("distance[4] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_4", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_5 = ProtoField.new("distance[5] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_5", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_6 = ProtoField.new("distance[6] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_6", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_7 = ProtoField.new("distance[7] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_7", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_8 = ProtoField.new("distance[8] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_8", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_9 = ProtoField.new("distance[9] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_9", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_10 = ProtoField.new("distance[10] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_10", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_11 = ProtoField.new("distance[11] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_11", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_12 = ProtoField.new("distance[12] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_12", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_13 = ProtoField.new("distance[13] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_13", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_14 = ProtoField.new("distance[14] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_14", ftypes.DOUBLE, nil)
f.WHEEL_DISTANCE_distance_15 = ProtoField.new("distance[15] (double)", "mavlink_proto.WHEEL_DISTANCE_distance_15", ftypes.DOUBLE, nil)

f.WINCH_STATUS_time_usec = ProtoField.new("time_usec (uint64_t)", "mavlink_proto.WINCH_STATUS_time_usec", ftypes.UINT64, nil)
f.WINCH_STATUS_line_length = ProtoField.new("line_length (float)", "mavlink_proto.WINCH_STATUS_line_length", ftypes.FLOAT, nil)
f.WINCH_STATUS_speed = ProtoField.new("speed (float)", "mavlink_proto.WINCH_STATUS_speed", ftypes.FLOAT, nil)
f.WINCH_STATUS_tension = ProtoField.new("tension (float)", "mavlink_proto.WINCH_STATUS_tension", ftypes.FLOAT, nil)
f.WINCH_STATUS_voltage = ProtoField.new("voltage (float)", "mavlink_proto.WINCH_STATUS_voltage", ftypes.FLOAT, nil)
f.WINCH_STATUS_current = ProtoField.new("current (float)", "mavlink_proto.WINCH_STATUS_current", ftypes.FLOAT, nil)
f.WINCH_STATUS_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.WINCH_STATUS_temperature", ftypes.INT16, nil)
f.WINCH_STATUS_status = ProtoField.new("status (MAV_WINCH_STATUS_FLAG)", "mavlink_proto.WINCH_STATUS_status", ftypes.UINT32, nil)
f.WINCH_STATUS_status_flagMAV_WINCH_STATUS_HEALTHY = ProtoField.bool("mavlink_proto.WINCH_STATUS_status.MAV_WINCH_STATUS_HEALTHY", "MAV_WINCH_STATUS_HEALTHY", 4, nil, 1)
f.WINCH_STATUS_status_flagMAV_WINCH_STATUS_FULLY_RETRACTED = ProtoField.bool("mavlink_proto.WINCH_STATUS_status.MAV_WINCH_STATUS_FULLY_RETRACTED", "MAV_WINCH_STATUS_FULLY_RETRACTED", 4, nil, 2)
f.WINCH_STATUS_status_flagMAV_WINCH_STATUS_MOVING = ProtoField.bool("mavlink_proto.WINCH_STATUS_status.MAV_WINCH_STATUS_MOVING", "MAV_WINCH_STATUS_MOVING", 4, nil, 4)
f.WINCH_STATUS_status_flagMAV_WINCH_STATUS_CLUTCH_ENGAGED = ProtoField.bool("mavlink_proto.WINCH_STATUS_status.MAV_WINCH_STATUS_CLUTCH_ENGAGED", "MAV_WINCH_STATUS_CLUTCH_ENGAGED", 4, nil, 8)

f.OPEN_DRONE_ID_BASIC_ID_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_target_system", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_target_component", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_0 = ProtoField.new("id_or_mac[0] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_0", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_1 = ProtoField.new("id_or_mac[1] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_1", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_2 = ProtoField.new("id_or_mac[2] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_2", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_3 = ProtoField.new("id_or_mac[3] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_3", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_4 = ProtoField.new("id_or_mac[4] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_4", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_5 = ProtoField.new("id_or_mac[5] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_5", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_6 = ProtoField.new("id_or_mac[6] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_6", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_7 = ProtoField.new("id_or_mac[7] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_7", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_8 = ProtoField.new("id_or_mac[8] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_8", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_9 = ProtoField.new("id_or_mac[9] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_9", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_10 = ProtoField.new("id_or_mac[10] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_10", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_11 = ProtoField.new("id_or_mac[11] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_11", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_12 = ProtoField.new("id_or_mac[12] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_12", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_13 = ProtoField.new("id_or_mac[13] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_13", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_14 = ProtoField.new("id_or_mac[14] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_14", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_15 = ProtoField.new("id_or_mac[15] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_15", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_16 = ProtoField.new("id_or_mac[16] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_16", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_17 = ProtoField.new("id_or_mac[17] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_17", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_18 = ProtoField.new("id_or_mac[18] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_18", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_19 = ProtoField.new("id_or_mac[19] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_or_mac_19", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_id_type = ProtoField.new("id_type (MAV_ODID_ID_TYPE)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_id_type", ftypes.UINT8, enumEntryName.MAV_ODID_ID_TYPE)
f.OPEN_DRONE_ID_BASIC_ID_ua_type = ProtoField.new("ua_type (MAV_ODID_UA_TYPE)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_ua_type", ftypes.UINT8, enumEntryName.MAV_ODID_UA_TYPE)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_0 = ProtoField.new("uas_id[0] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_0", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_1 = ProtoField.new("uas_id[1] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_1", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_2 = ProtoField.new("uas_id[2] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_2", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_3 = ProtoField.new("uas_id[3] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_3", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_4 = ProtoField.new("uas_id[4] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_4", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_5 = ProtoField.new("uas_id[5] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_5", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_6 = ProtoField.new("uas_id[6] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_6", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_7 = ProtoField.new("uas_id[7] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_7", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_8 = ProtoField.new("uas_id[8] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_8", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_9 = ProtoField.new("uas_id[9] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_9", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_10 = ProtoField.new("uas_id[10] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_10", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_11 = ProtoField.new("uas_id[11] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_11", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_12 = ProtoField.new("uas_id[12] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_12", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_13 = ProtoField.new("uas_id[13] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_13", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_14 = ProtoField.new("uas_id[14] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_14", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_15 = ProtoField.new("uas_id[15] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_15", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_16 = ProtoField.new("uas_id[16] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_16", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_17 = ProtoField.new("uas_id[17] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_17", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_18 = ProtoField.new("uas_id[18] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_18", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_BASIC_ID_uas_id_19 = ProtoField.new("uas_id[19] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_BASIC_ID_uas_id_19", ftypes.UINT8, nil)

f.OPEN_DRONE_ID_LOCATION_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_target_system", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_target_component", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_0 = ProtoField.new("id_or_mac[0] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_0", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_1 = ProtoField.new("id_or_mac[1] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_1", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_2 = ProtoField.new("id_or_mac[2] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_2", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_3 = ProtoField.new("id_or_mac[3] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_3", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_4 = ProtoField.new("id_or_mac[4] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_4", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_5 = ProtoField.new("id_or_mac[5] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_5", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_6 = ProtoField.new("id_or_mac[6] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_6", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_7 = ProtoField.new("id_or_mac[7] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_7", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_8 = ProtoField.new("id_or_mac[8] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_8", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_9 = ProtoField.new("id_or_mac[9] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_9", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_10 = ProtoField.new("id_or_mac[10] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_10", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_11 = ProtoField.new("id_or_mac[11] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_11", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_12 = ProtoField.new("id_or_mac[12] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_12", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_13 = ProtoField.new("id_or_mac[13] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_13", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_14 = ProtoField.new("id_or_mac[14] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_14", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_15 = ProtoField.new("id_or_mac[15] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_15", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_16 = ProtoField.new("id_or_mac[16] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_16", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_17 = ProtoField.new("id_or_mac[17] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_17", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_18 = ProtoField.new("id_or_mac[18] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_18", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_id_or_mac_19 = ProtoField.new("id_or_mac[19] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_id_or_mac_19", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_LOCATION_status = ProtoField.new("status (MAV_ODID_STATUS)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_status", ftypes.UINT8, enumEntryName.MAV_ODID_STATUS)
f.OPEN_DRONE_ID_LOCATION_direction = ProtoField.new("direction (uint16_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_direction", ftypes.UINT16, nil)
f.OPEN_DRONE_ID_LOCATION_speed_horizontal = ProtoField.new("speed_horizontal (uint16_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_speed_horizontal", ftypes.UINT16, nil)
f.OPEN_DRONE_ID_LOCATION_speed_vertical = ProtoField.new("speed_vertical (int16_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_speed_vertical", ftypes.INT16, nil)
f.OPEN_DRONE_ID_LOCATION_latitude = ProtoField.new("latitude (int32_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_latitude", ftypes.INT32, nil)
f.OPEN_DRONE_ID_LOCATION_longitude = ProtoField.new("longitude (int32_t)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_longitude", ftypes.INT32, nil)
f.OPEN_DRONE_ID_LOCATION_altitude_barometric = ProtoField.new("altitude_barometric (float)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_altitude_barometric", ftypes.FLOAT, nil)
f.OPEN_DRONE_ID_LOCATION_altitude_geodetic = ProtoField.new("altitude_geodetic (float)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_altitude_geodetic", ftypes.FLOAT, nil)
f.OPEN_DRONE_ID_LOCATION_height_reference = ProtoField.new("height_reference (MAV_ODID_HEIGHT_REF)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_height_reference", ftypes.UINT8, enumEntryName.MAV_ODID_HEIGHT_REF)
f.OPEN_DRONE_ID_LOCATION_height = ProtoField.new("height (float)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_height", ftypes.FLOAT, nil)
f.OPEN_DRONE_ID_LOCATION_horizontal_accuracy = ProtoField.new("horizontal_accuracy (MAV_ODID_HOR_ACC)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_horizontal_accuracy", ftypes.UINT8, enumEntryName.MAV_ODID_HOR_ACC)
f.OPEN_DRONE_ID_LOCATION_vertical_accuracy = ProtoField.new("vertical_accuracy (MAV_ODID_VER_ACC)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_vertical_accuracy", ftypes.UINT8, enumEntryName.MAV_ODID_VER_ACC)
f.OPEN_DRONE_ID_LOCATION_barometer_accuracy = ProtoField.new("barometer_accuracy (MAV_ODID_VER_ACC)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_barometer_accuracy", ftypes.UINT8, enumEntryName.MAV_ODID_VER_ACC)
f.OPEN_DRONE_ID_LOCATION_speed_accuracy = ProtoField.new("speed_accuracy (MAV_ODID_SPEED_ACC)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_speed_accuracy", ftypes.UINT8, enumEntryName.MAV_ODID_SPEED_ACC)
f.OPEN_DRONE_ID_LOCATION_timestamp = ProtoField.new("timestamp (float)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_timestamp", ftypes.FLOAT, nil)
f.OPEN_DRONE_ID_LOCATION_timestamp_accuracy = ProtoField.new("timestamp_accuracy (MAV_ODID_TIME_ACC)", "mavlink_proto.OPEN_DRONE_ID_LOCATION_timestamp_accuracy", ftypes.UINT8, enumEntryName.MAV_ODID_TIME_ACC)

f.OPEN_DRONE_ID_AUTHENTICATION_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_target_system", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_target_component", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_0 = ProtoField.new("id_or_mac[0] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_0", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_1 = ProtoField.new("id_or_mac[1] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_1", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_2 = ProtoField.new("id_or_mac[2] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_2", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_3 = ProtoField.new("id_or_mac[3] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_3", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_4 = ProtoField.new("id_or_mac[4] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_4", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_5 = ProtoField.new("id_or_mac[5] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_5", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_6 = ProtoField.new("id_or_mac[6] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_6", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_7 = ProtoField.new("id_or_mac[7] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_7", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_8 = ProtoField.new("id_or_mac[8] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_8", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_9 = ProtoField.new("id_or_mac[9] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_9", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_10 = ProtoField.new("id_or_mac[10] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_10", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_11 = ProtoField.new("id_or_mac[11] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_11", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_12 = ProtoField.new("id_or_mac[12] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_12", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_13 = ProtoField.new("id_or_mac[13] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_13", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_14 = ProtoField.new("id_or_mac[14] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_14", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_15 = ProtoField.new("id_or_mac[15] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_15", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_16 = ProtoField.new("id_or_mac[16] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_16", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_17 = ProtoField.new("id_or_mac[17] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_17", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_18 = ProtoField.new("id_or_mac[18] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_18", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_19 = ProtoField.new("id_or_mac[19] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_19", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_type = ProtoField.new("authentication_type (MAV_ODID_AUTH_TYPE)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_type", ftypes.UINT8, enumEntryName.MAV_ODID_AUTH_TYPE)
f.OPEN_DRONE_ID_AUTHENTICATION_data_page = ProtoField.new("data_page (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_data_page", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_last_page_index = ProtoField.new("last_page_index (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_last_page_index", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_length = ProtoField.new("length (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_length", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_timestamp = ProtoField.new("timestamp (uint32_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_timestamp", ftypes.UINT32, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_0 = ProtoField.new("authentication_data[0] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_0", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_1 = ProtoField.new("authentication_data[1] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_1", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_2 = ProtoField.new("authentication_data[2] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_2", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_3 = ProtoField.new("authentication_data[3] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_3", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_4 = ProtoField.new("authentication_data[4] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_4", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_5 = ProtoField.new("authentication_data[5] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_5", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_6 = ProtoField.new("authentication_data[6] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_6", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_7 = ProtoField.new("authentication_data[7] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_7", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_8 = ProtoField.new("authentication_data[8] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_8", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_9 = ProtoField.new("authentication_data[9] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_9", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_10 = ProtoField.new("authentication_data[10] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_10", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_11 = ProtoField.new("authentication_data[11] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_11", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_12 = ProtoField.new("authentication_data[12] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_12", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_13 = ProtoField.new("authentication_data[13] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_13", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_14 = ProtoField.new("authentication_data[14] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_14", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_15 = ProtoField.new("authentication_data[15] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_15", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_16 = ProtoField.new("authentication_data[16] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_16", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_17 = ProtoField.new("authentication_data[17] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_17", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_18 = ProtoField.new("authentication_data[18] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_18", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_19 = ProtoField.new("authentication_data[19] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_19", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_20 = ProtoField.new("authentication_data[20] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_20", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_21 = ProtoField.new("authentication_data[21] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_21", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_22 = ProtoField.new("authentication_data[22] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_22", ftypes.UINT8, nil)

f.OPEN_DRONE_ID_SELF_ID_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_target_system", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_target_component", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_0 = ProtoField.new("id_or_mac[0] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_0", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_1 = ProtoField.new("id_or_mac[1] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_1", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_2 = ProtoField.new("id_or_mac[2] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_2", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_3 = ProtoField.new("id_or_mac[3] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_3", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_4 = ProtoField.new("id_or_mac[4] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_4", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_5 = ProtoField.new("id_or_mac[5] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_5", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_6 = ProtoField.new("id_or_mac[6] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_6", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_7 = ProtoField.new("id_or_mac[7] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_7", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_8 = ProtoField.new("id_or_mac[8] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_8", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_9 = ProtoField.new("id_or_mac[9] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_9", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_10 = ProtoField.new("id_or_mac[10] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_10", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_11 = ProtoField.new("id_or_mac[11] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_11", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_12 = ProtoField.new("id_or_mac[12] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_12", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_13 = ProtoField.new("id_or_mac[13] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_13", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_14 = ProtoField.new("id_or_mac[14] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_14", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_15 = ProtoField.new("id_or_mac[15] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_15", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_16 = ProtoField.new("id_or_mac[16] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_16", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_17 = ProtoField.new("id_or_mac[17] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_17", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_18 = ProtoField.new("id_or_mac[18] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_18", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_id_or_mac_19 = ProtoField.new("id_or_mac[19] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_id_or_mac_19", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SELF_ID_description_type = ProtoField.new("description_type (MAV_ODID_DESC_TYPE)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_description_type", ftypes.UINT8, enumEntryName.MAV_ODID_DESC_TYPE)
f.OPEN_DRONE_ID_SELF_ID_description = ProtoField.new("description (char)", "mavlink_proto.OPEN_DRONE_ID_SELF_ID_description", ftypes.STRING, nil)

f.OPEN_DRONE_ID_SYSTEM_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_target_system", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_target_component", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_0 = ProtoField.new("id_or_mac[0] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_0", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_1 = ProtoField.new("id_or_mac[1] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_1", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_2 = ProtoField.new("id_or_mac[2] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_2", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_3 = ProtoField.new("id_or_mac[3] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_3", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_4 = ProtoField.new("id_or_mac[4] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_4", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_5 = ProtoField.new("id_or_mac[5] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_5", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_6 = ProtoField.new("id_or_mac[6] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_6", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_7 = ProtoField.new("id_or_mac[7] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_7", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_8 = ProtoField.new("id_or_mac[8] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_8", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_9 = ProtoField.new("id_or_mac[9] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_9", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_10 = ProtoField.new("id_or_mac[10] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_10", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_11 = ProtoField.new("id_or_mac[11] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_11", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_12 = ProtoField.new("id_or_mac[12] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_12", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_13 = ProtoField.new("id_or_mac[13] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_13", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_14 = ProtoField.new("id_or_mac[14] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_14", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_15 = ProtoField.new("id_or_mac[15] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_15", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_16 = ProtoField.new("id_or_mac[16] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_16", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_17 = ProtoField.new("id_or_mac[17] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_17", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_18 = ProtoField.new("id_or_mac[18] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_18", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_id_or_mac_19 = ProtoField.new("id_or_mac[19] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_id_or_mac_19", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_operator_location_type = ProtoField.new("operator_location_type (MAV_ODID_OPERATOR_LOCATION_TYPE)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_operator_location_type", ftypes.UINT8, enumEntryName.MAV_ODID_OPERATOR_LOCATION_TYPE)
f.OPEN_DRONE_ID_SYSTEM_classification_type = ProtoField.new("classification_type (MAV_ODID_CLASSIFICATION_TYPE)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_classification_type", ftypes.UINT8, enumEntryName.MAV_ODID_CLASSIFICATION_TYPE)
f.OPEN_DRONE_ID_SYSTEM_operator_latitude = ProtoField.new("operator_latitude (int32_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_operator_latitude", ftypes.INT32, nil)
f.OPEN_DRONE_ID_SYSTEM_operator_longitude = ProtoField.new("operator_longitude (int32_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_operator_longitude", ftypes.INT32, nil)
f.OPEN_DRONE_ID_SYSTEM_area_count = ProtoField.new("area_count (uint16_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_area_count", ftypes.UINT16, nil)
f.OPEN_DRONE_ID_SYSTEM_area_radius = ProtoField.new("area_radius (uint16_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_area_radius", ftypes.UINT16, nil)
f.OPEN_DRONE_ID_SYSTEM_area_ceiling = ProtoField.new("area_ceiling (float)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_area_ceiling", ftypes.FLOAT, nil)
f.OPEN_DRONE_ID_SYSTEM_area_floor = ProtoField.new("area_floor (float)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_area_floor", ftypes.FLOAT, nil)
f.OPEN_DRONE_ID_SYSTEM_category_eu = ProtoField.new("category_eu (MAV_ODID_CATEGORY_EU)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_category_eu", ftypes.UINT8, enumEntryName.MAV_ODID_CATEGORY_EU)
f.OPEN_DRONE_ID_SYSTEM_class_eu = ProtoField.new("class_eu (MAV_ODID_CLASS_EU)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_class_eu", ftypes.UINT8, enumEntryName.MAV_ODID_CLASS_EU)
f.OPEN_DRONE_ID_SYSTEM_operator_altitude_geo = ProtoField.new("operator_altitude_geo (float)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_operator_altitude_geo", ftypes.FLOAT, nil)
f.OPEN_DRONE_ID_SYSTEM_timestamp = ProtoField.new("timestamp (uint32_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_timestamp", ftypes.UINT32, nil)

f.OPEN_DRONE_ID_OPERATOR_ID_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_target_system", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_target_component", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_0 = ProtoField.new("id_or_mac[0] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_0", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_1 = ProtoField.new("id_or_mac[1] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_1", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_2 = ProtoField.new("id_or_mac[2] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_2", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_3 = ProtoField.new("id_or_mac[3] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_3", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_4 = ProtoField.new("id_or_mac[4] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_4", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_5 = ProtoField.new("id_or_mac[5] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_5", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_6 = ProtoField.new("id_or_mac[6] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_6", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_7 = ProtoField.new("id_or_mac[7] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_7", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_8 = ProtoField.new("id_or_mac[8] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_8", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_9 = ProtoField.new("id_or_mac[9] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_9", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_10 = ProtoField.new("id_or_mac[10] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_10", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_11 = ProtoField.new("id_or_mac[11] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_11", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_12 = ProtoField.new("id_or_mac[12] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_12", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_13 = ProtoField.new("id_or_mac[13] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_13", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_14 = ProtoField.new("id_or_mac[14] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_14", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_15 = ProtoField.new("id_or_mac[15] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_15", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_16 = ProtoField.new("id_or_mac[16] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_16", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_17 = ProtoField.new("id_or_mac[17] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_17", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_18 = ProtoField.new("id_or_mac[18] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_18", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_19 = ProtoField.new("id_or_mac[19] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_19", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_OPERATOR_ID_operator_id_type = ProtoField.new("operator_id_type (MAV_ODID_OPERATOR_ID_TYPE)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_operator_id_type", ftypes.UINT8, enumEntryName.MAV_ODID_OPERATOR_ID_TYPE)
f.OPEN_DRONE_ID_OPERATOR_ID_operator_id = ProtoField.new("operator_id (char)", "mavlink_proto.OPEN_DRONE_ID_OPERATOR_ID_operator_id", ftypes.STRING, nil)

f.OPEN_DRONE_ID_ARM_STATUS_status = ProtoField.new("status (MAV_ODID_ARM_STATUS)", "mavlink_proto.OPEN_DRONE_ID_ARM_STATUS_status", ftypes.UINT8, enumEntryName.MAV_ODID_ARM_STATUS)
f.OPEN_DRONE_ID_ARM_STATUS_error = ProtoField.new("error (char)", "mavlink_proto.OPEN_DRONE_ID_ARM_STATUS_error", ftypes.STRING, nil)

f.OPEN_DRONE_ID_MESSAGE_PACK_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_target_system", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_target_component", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_0 = ProtoField.new("id_or_mac[0] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_0", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_1 = ProtoField.new("id_or_mac[1] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_1", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_2 = ProtoField.new("id_or_mac[2] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_2", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_3 = ProtoField.new("id_or_mac[3] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_3", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_4 = ProtoField.new("id_or_mac[4] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_4", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_5 = ProtoField.new("id_or_mac[5] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_5", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_6 = ProtoField.new("id_or_mac[6] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_6", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_7 = ProtoField.new("id_or_mac[7] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_7", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_8 = ProtoField.new("id_or_mac[8] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_8", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_9 = ProtoField.new("id_or_mac[9] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_9", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_10 = ProtoField.new("id_or_mac[10] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_10", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_11 = ProtoField.new("id_or_mac[11] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_11", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_12 = ProtoField.new("id_or_mac[12] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_12", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_13 = ProtoField.new("id_or_mac[13] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_13", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_14 = ProtoField.new("id_or_mac[14] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_14", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_15 = ProtoField.new("id_or_mac[15] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_15", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_16 = ProtoField.new("id_or_mac[16] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_16", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_17 = ProtoField.new("id_or_mac[17] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_17", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_18 = ProtoField.new("id_or_mac[18] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_18", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_19 = ProtoField.new("id_or_mac[19] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_19", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_single_message_size = ProtoField.new("single_message_size (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_single_message_size", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_msg_pack_size = ProtoField.new("msg_pack_size (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_msg_pack_size", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_0 = ProtoField.new("messages[0] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_0", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_1 = ProtoField.new("messages[1] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_1", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_2 = ProtoField.new("messages[2] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_2", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_3 = ProtoField.new("messages[3] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_3", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_4 = ProtoField.new("messages[4] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_4", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_5 = ProtoField.new("messages[5] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_5", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_6 = ProtoField.new("messages[6] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_6", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_7 = ProtoField.new("messages[7] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_7", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_8 = ProtoField.new("messages[8] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_8", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_9 = ProtoField.new("messages[9] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_9", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_10 = ProtoField.new("messages[10] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_10", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_11 = ProtoField.new("messages[11] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_11", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_12 = ProtoField.new("messages[12] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_12", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_13 = ProtoField.new("messages[13] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_13", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_14 = ProtoField.new("messages[14] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_14", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_15 = ProtoField.new("messages[15] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_15", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_16 = ProtoField.new("messages[16] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_16", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_17 = ProtoField.new("messages[17] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_17", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_18 = ProtoField.new("messages[18] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_18", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_19 = ProtoField.new("messages[19] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_19", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_20 = ProtoField.new("messages[20] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_20", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_21 = ProtoField.new("messages[21] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_21", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_22 = ProtoField.new("messages[22] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_22", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_23 = ProtoField.new("messages[23] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_23", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_24 = ProtoField.new("messages[24] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_24", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_25 = ProtoField.new("messages[25] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_25", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_26 = ProtoField.new("messages[26] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_26", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_27 = ProtoField.new("messages[27] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_27", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_28 = ProtoField.new("messages[28] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_28", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_29 = ProtoField.new("messages[29] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_29", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_30 = ProtoField.new("messages[30] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_30", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_31 = ProtoField.new("messages[31] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_31", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_32 = ProtoField.new("messages[32] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_32", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_33 = ProtoField.new("messages[33] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_33", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_34 = ProtoField.new("messages[34] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_34", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_35 = ProtoField.new("messages[35] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_35", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_36 = ProtoField.new("messages[36] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_36", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_37 = ProtoField.new("messages[37] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_37", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_38 = ProtoField.new("messages[38] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_38", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_39 = ProtoField.new("messages[39] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_39", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_40 = ProtoField.new("messages[40] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_40", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_41 = ProtoField.new("messages[41] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_41", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_42 = ProtoField.new("messages[42] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_42", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_43 = ProtoField.new("messages[43] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_43", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_44 = ProtoField.new("messages[44] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_44", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_45 = ProtoField.new("messages[45] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_45", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_46 = ProtoField.new("messages[46] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_46", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_47 = ProtoField.new("messages[47] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_47", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_48 = ProtoField.new("messages[48] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_48", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_49 = ProtoField.new("messages[49] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_49", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_50 = ProtoField.new("messages[50] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_50", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_51 = ProtoField.new("messages[51] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_51", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_52 = ProtoField.new("messages[52] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_52", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_53 = ProtoField.new("messages[53] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_53", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_54 = ProtoField.new("messages[54] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_54", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_55 = ProtoField.new("messages[55] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_55", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_56 = ProtoField.new("messages[56] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_56", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_57 = ProtoField.new("messages[57] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_57", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_58 = ProtoField.new("messages[58] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_58", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_59 = ProtoField.new("messages[59] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_59", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_60 = ProtoField.new("messages[60] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_60", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_61 = ProtoField.new("messages[61] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_61", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_62 = ProtoField.new("messages[62] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_62", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_63 = ProtoField.new("messages[63] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_63", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_64 = ProtoField.new("messages[64] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_64", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_65 = ProtoField.new("messages[65] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_65", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_66 = ProtoField.new("messages[66] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_66", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_67 = ProtoField.new("messages[67] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_67", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_68 = ProtoField.new("messages[68] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_68", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_69 = ProtoField.new("messages[69] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_69", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_70 = ProtoField.new("messages[70] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_70", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_71 = ProtoField.new("messages[71] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_71", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_72 = ProtoField.new("messages[72] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_72", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_73 = ProtoField.new("messages[73] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_73", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_74 = ProtoField.new("messages[74] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_74", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_75 = ProtoField.new("messages[75] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_75", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_76 = ProtoField.new("messages[76] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_76", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_77 = ProtoField.new("messages[77] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_77", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_78 = ProtoField.new("messages[78] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_78", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_79 = ProtoField.new("messages[79] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_79", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_80 = ProtoField.new("messages[80] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_80", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_81 = ProtoField.new("messages[81] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_81", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_82 = ProtoField.new("messages[82] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_82", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_83 = ProtoField.new("messages[83] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_83", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_84 = ProtoField.new("messages[84] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_84", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_85 = ProtoField.new("messages[85] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_85", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_86 = ProtoField.new("messages[86] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_86", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_87 = ProtoField.new("messages[87] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_87", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_88 = ProtoField.new("messages[88] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_88", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_89 = ProtoField.new("messages[89] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_89", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_90 = ProtoField.new("messages[90] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_90", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_91 = ProtoField.new("messages[91] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_91", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_92 = ProtoField.new("messages[92] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_92", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_93 = ProtoField.new("messages[93] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_93", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_94 = ProtoField.new("messages[94] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_94", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_95 = ProtoField.new("messages[95] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_95", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_96 = ProtoField.new("messages[96] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_96", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_97 = ProtoField.new("messages[97] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_97", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_98 = ProtoField.new("messages[98] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_98", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_99 = ProtoField.new("messages[99] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_99", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_100 = ProtoField.new("messages[100] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_100", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_101 = ProtoField.new("messages[101] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_101", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_102 = ProtoField.new("messages[102] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_102", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_103 = ProtoField.new("messages[103] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_103", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_104 = ProtoField.new("messages[104] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_104", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_105 = ProtoField.new("messages[105] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_105", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_106 = ProtoField.new("messages[106] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_106", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_107 = ProtoField.new("messages[107] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_107", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_108 = ProtoField.new("messages[108] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_108", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_109 = ProtoField.new("messages[109] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_109", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_110 = ProtoField.new("messages[110] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_110", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_111 = ProtoField.new("messages[111] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_111", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_112 = ProtoField.new("messages[112] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_112", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_113 = ProtoField.new("messages[113] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_113", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_114 = ProtoField.new("messages[114] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_114", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_115 = ProtoField.new("messages[115] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_115", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_116 = ProtoField.new("messages[116] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_116", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_117 = ProtoField.new("messages[117] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_117", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_118 = ProtoField.new("messages[118] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_118", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_119 = ProtoField.new("messages[119] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_119", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_120 = ProtoField.new("messages[120] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_120", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_121 = ProtoField.new("messages[121] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_121", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_122 = ProtoField.new("messages[122] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_122", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_123 = ProtoField.new("messages[123] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_123", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_124 = ProtoField.new("messages[124] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_124", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_125 = ProtoField.new("messages[125] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_125", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_126 = ProtoField.new("messages[126] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_126", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_127 = ProtoField.new("messages[127] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_127", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_128 = ProtoField.new("messages[128] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_128", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_129 = ProtoField.new("messages[129] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_129", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_130 = ProtoField.new("messages[130] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_130", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_131 = ProtoField.new("messages[131] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_131", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_132 = ProtoField.new("messages[132] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_132", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_133 = ProtoField.new("messages[133] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_133", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_134 = ProtoField.new("messages[134] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_134", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_135 = ProtoField.new("messages[135] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_135", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_136 = ProtoField.new("messages[136] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_136", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_137 = ProtoField.new("messages[137] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_137", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_138 = ProtoField.new("messages[138] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_138", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_139 = ProtoField.new("messages[139] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_139", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_140 = ProtoField.new("messages[140] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_140", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_141 = ProtoField.new("messages[141] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_141", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_142 = ProtoField.new("messages[142] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_142", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_143 = ProtoField.new("messages[143] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_143", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_144 = ProtoField.new("messages[144] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_144", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_145 = ProtoField.new("messages[145] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_145", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_146 = ProtoField.new("messages[146] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_146", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_147 = ProtoField.new("messages[147] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_147", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_148 = ProtoField.new("messages[148] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_148", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_149 = ProtoField.new("messages[149] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_149", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_150 = ProtoField.new("messages[150] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_150", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_151 = ProtoField.new("messages[151] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_151", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_152 = ProtoField.new("messages[152] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_152", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_153 = ProtoField.new("messages[153] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_153", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_154 = ProtoField.new("messages[154] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_154", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_155 = ProtoField.new("messages[155] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_155", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_156 = ProtoField.new("messages[156] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_156", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_157 = ProtoField.new("messages[157] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_157", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_158 = ProtoField.new("messages[158] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_158", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_159 = ProtoField.new("messages[159] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_159", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_160 = ProtoField.new("messages[160] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_160", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_161 = ProtoField.new("messages[161] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_161", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_162 = ProtoField.new("messages[162] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_162", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_163 = ProtoField.new("messages[163] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_163", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_164 = ProtoField.new("messages[164] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_164", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_165 = ProtoField.new("messages[165] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_165", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_166 = ProtoField.new("messages[166] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_166", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_167 = ProtoField.new("messages[167] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_167", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_168 = ProtoField.new("messages[168] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_168", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_169 = ProtoField.new("messages[169] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_169", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_170 = ProtoField.new("messages[170] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_170", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_171 = ProtoField.new("messages[171] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_171", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_172 = ProtoField.new("messages[172] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_172", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_173 = ProtoField.new("messages[173] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_173", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_174 = ProtoField.new("messages[174] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_174", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_175 = ProtoField.new("messages[175] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_175", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_176 = ProtoField.new("messages[176] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_176", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_177 = ProtoField.new("messages[177] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_177", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_178 = ProtoField.new("messages[178] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_178", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_179 = ProtoField.new("messages[179] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_179", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_180 = ProtoField.new("messages[180] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_180", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_181 = ProtoField.new("messages[181] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_181", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_182 = ProtoField.new("messages[182] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_182", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_183 = ProtoField.new("messages[183] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_183", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_184 = ProtoField.new("messages[184] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_184", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_185 = ProtoField.new("messages[185] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_185", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_186 = ProtoField.new("messages[186] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_186", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_187 = ProtoField.new("messages[187] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_187", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_188 = ProtoField.new("messages[188] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_188", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_189 = ProtoField.new("messages[189] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_189", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_190 = ProtoField.new("messages[190] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_190", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_191 = ProtoField.new("messages[191] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_191", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_192 = ProtoField.new("messages[192] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_192", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_193 = ProtoField.new("messages[193] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_193", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_194 = ProtoField.new("messages[194] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_194", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_195 = ProtoField.new("messages[195] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_195", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_196 = ProtoField.new("messages[196] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_196", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_197 = ProtoField.new("messages[197] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_197", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_198 = ProtoField.new("messages[198] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_198", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_199 = ProtoField.new("messages[199] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_199", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_200 = ProtoField.new("messages[200] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_200", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_201 = ProtoField.new("messages[201] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_201", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_202 = ProtoField.new("messages[202] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_202", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_203 = ProtoField.new("messages[203] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_203", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_204 = ProtoField.new("messages[204] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_204", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_205 = ProtoField.new("messages[205] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_205", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_206 = ProtoField.new("messages[206] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_206", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_207 = ProtoField.new("messages[207] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_207", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_208 = ProtoField.new("messages[208] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_208", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_209 = ProtoField.new("messages[209] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_209", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_210 = ProtoField.new("messages[210] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_210", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_211 = ProtoField.new("messages[211] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_211", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_212 = ProtoField.new("messages[212] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_212", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_213 = ProtoField.new("messages[213] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_213", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_214 = ProtoField.new("messages[214] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_214", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_215 = ProtoField.new("messages[215] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_215", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_216 = ProtoField.new("messages[216] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_216", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_217 = ProtoField.new("messages[217] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_217", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_218 = ProtoField.new("messages[218] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_218", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_219 = ProtoField.new("messages[219] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_219", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_220 = ProtoField.new("messages[220] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_220", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_221 = ProtoField.new("messages[221] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_221", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_222 = ProtoField.new("messages[222] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_222", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_223 = ProtoField.new("messages[223] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_223", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_MESSAGE_PACK_messages_224 = ProtoField.new("messages[224] (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_MESSAGE_PACK_messages_224", ftypes.UINT8, nil)

f.OPEN_DRONE_ID_SYSTEM_UPDATE_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_UPDATE_target_system", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_UPDATE_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_UPDATE_target_component", ftypes.UINT8, nil)
f.OPEN_DRONE_ID_SYSTEM_UPDATE_operator_latitude = ProtoField.new("operator_latitude (int32_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_UPDATE_operator_latitude", ftypes.INT32, nil)
f.OPEN_DRONE_ID_SYSTEM_UPDATE_operator_longitude = ProtoField.new("operator_longitude (int32_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_UPDATE_operator_longitude", ftypes.INT32, nil)
f.OPEN_DRONE_ID_SYSTEM_UPDATE_operator_altitude_geo = ProtoField.new("operator_altitude_geo (float)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_UPDATE_operator_altitude_geo", ftypes.FLOAT, nil)
f.OPEN_DRONE_ID_SYSTEM_UPDATE_timestamp = ProtoField.new("timestamp (uint32_t)", "mavlink_proto.OPEN_DRONE_ID_SYSTEM_UPDATE_timestamp", ftypes.UINT32, nil)

f.HYGROMETER_SENSOR_id = ProtoField.new("id (uint8_t)", "mavlink_proto.HYGROMETER_SENSOR_id", ftypes.UINT8, nil)
f.HYGROMETER_SENSOR_temperature = ProtoField.new("temperature (int16_t)", "mavlink_proto.HYGROMETER_SENSOR_temperature", ftypes.INT16, nil)
f.HYGROMETER_SENSOR_humidity = ProtoField.new("humidity (uint16_t)", "mavlink_proto.HYGROMETER_SENSOR_humidity", ftypes.UINT16, nil)

f.UAVIONIX_ADSB_OUT_CFG_ICAO = ProtoField.new("ICAO (uint32_t)", "mavlink_proto.UAVIONIX_ADSB_OUT_CFG_ICAO", ftypes.UINT32, nil)
f.UAVIONIX_ADSB_OUT_CFG_callsign = ProtoField.new("callsign (char)", "mavlink_proto.UAVIONIX_ADSB_OUT_CFG_callsign", ftypes.STRING, nil)
f.UAVIONIX_ADSB_OUT_CFG_emitterType = ProtoField.new("emitterType (ADSB_EMITTER_TYPE)", "mavlink_proto.UAVIONIX_ADSB_OUT_CFG_emitterType", ftypes.UINT8, enumEntryName.ADSB_EMITTER_TYPE)
f.UAVIONIX_ADSB_OUT_CFG_aircraftSize = ProtoField.new("aircraftSize (UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE)", "mavlink_proto.UAVIONIX_ADSB_OUT_CFG_aircraftSize", ftypes.UINT8, enumEntryName.UAVIONIX_ADSB_OUT_CFG_AIRCRAFT_SIZE)
f.UAVIONIX_ADSB_OUT_CFG_gpsOffsetLat = ProtoField.new("gpsOffsetLat (UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT)", "mavlink_proto.UAVIONIX_ADSB_OUT_CFG_gpsOffsetLat", ftypes.UINT8, enumEntryName.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT)
f.UAVIONIX_ADSB_OUT_CFG_gpsOffsetLon = ProtoField.new("gpsOffsetLon (UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON)", "mavlink_proto.UAVIONIX_ADSB_OUT_CFG_gpsOffsetLon", ftypes.UINT8, enumEntryName.UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LON)
f.UAVIONIX_ADSB_OUT_CFG_stallSpeed = ProtoField.new("stallSpeed (uint16_t)", "mavlink_proto.UAVIONIX_ADSB_OUT_CFG_stallSpeed", ftypes.UINT16, nil)
f.UAVIONIX_ADSB_OUT_CFG_rfSelect = ProtoField.new("rfSelect (UAVIONIX_ADSB_OUT_RF_SELECT)", "mavlink_proto.UAVIONIX_ADSB_OUT_CFG_rfSelect", ftypes.UINT8, nil)
f.UAVIONIX_ADSB_OUT_CFG_rfSelect_flagUAVIONIX_ADSB_OUT_RF_SELECT_RX_ENABLED = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_CFG_rfSelect.UAVIONIX_ADSB_OUT_RF_SELECT_RX_ENABLED", "UAVIONIX_ADSB_OUT_RF_SELECT_RX_ENABLED", 2, nil, 1)
f.UAVIONIX_ADSB_OUT_CFG_rfSelect_flagUAVIONIX_ADSB_OUT_RF_SELECT_TX_ENABLED = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_CFG_rfSelect.UAVIONIX_ADSB_OUT_RF_SELECT_TX_ENABLED", "UAVIONIX_ADSB_OUT_RF_SELECT_TX_ENABLED", 2, nil, 2)

f.UAVIONIX_ADSB_OUT_DYNAMIC_utcTime = ProtoField.new("utcTime (uint32_t)", "mavlink_proto.UAVIONIX_ADSB_OUT_DYNAMIC_utcTime", ftypes.UINT32, nil)
f.UAVIONIX_ADSB_OUT_DYNAMIC_gpsLat = ProtoField.new("gpsLat (int32_t)", "mavlink_proto.UAVIONIX_ADSB_OUT_DYNAMIC_gpsLat", ftypes.INT32, nil)
f.UAVIONIX_ADSB_OUT_DYNAMIC_gpsLon = ProtoField.new("gpsLon (int32_t)", "mavlink_proto.UAVIONIX_ADSB_OUT_DYNAMIC_gpsLon", ftypes.INT32, nil)
f.UAVIONIX_ADSB_OUT_DYNAMIC_gpsAlt = ProtoField.new("gpsAlt (int32_t)", "mavlink_proto.UAVIONIX_ADSB_OUT_DYNAMIC_gpsAlt", ftypes.INT32, nil)
f.UAVIONIX_ADSB_OUT_DYNAMIC_gpsFix = ProtoField.new("gpsFix (UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX)", "mavlink_proto.UAVIONIX_ADSB_OUT_DYNAMIC_gpsFix", ftypes.UINT8, enumEntryName.UAVIONIX_ADSB_OUT_DYNAMIC_GPS_FIX)
f.UAVIONIX_ADSB_OUT_DYNAMIC_numSats = ProtoField.new("numSats (uint8_t)", "mavlink_proto.UAVIONIX_ADSB_OUT_DYNAMIC_numSats", ftypes.UINT8, nil)
f.UAVIONIX_ADSB_OUT_DYNAMIC_baroAltMSL = ProtoField.new("baroAltMSL (int32_t)", "mavlink_proto.UAVIONIX_ADSB_OUT_DYNAMIC_baroAltMSL", ftypes.INT32, nil)
f.UAVIONIX_ADSB_OUT_DYNAMIC_accuracyHor = ProtoField.new("accuracyHor (uint32_t)", "mavlink_proto.UAVIONIX_ADSB_OUT_DYNAMIC_accuracyHor", ftypes.UINT32, nil)
f.UAVIONIX_ADSB_OUT_DYNAMIC_accuracyVert = ProtoField.new("accuracyVert (uint16_t)", "mavlink_proto.UAVIONIX_ADSB_OUT_DYNAMIC_accuracyVert", ftypes.UINT16, nil)
f.UAVIONIX_ADSB_OUT_DYNAMIC_accuracyVel = ProtoField.new("accuracyVel (uint16_t)", "mavlink_proto.UAVIONIX_ADSB_OUT_DYNAMIC_accuracyVel", ftypes.UINT16, nil)
f.UAVIONIX_ADSB_OUT_DYNAMIC_velVert = ProtoField.new("velVert (int16_t)", "mavlink_proto.UAVIONIX_ADSB_OUT_DYNAMIC_velVert", ftypes.INT16, nil)
f.UAVIONIX_ADSB_OUT_DYNAMIC_velNS = ProtoField.new("velNS (int16_t)", "mavlink_proto.UAVIONIX_ADSB_OUT_DYNAMIC_velNS", ftypes.INT16, nil)
f.UAVIONIX_ADSB_OUT_DYNAMIC_VelEW = ProtoField.new("VelEW (int16_t)", "mavlink_proto.UAVIONIX_ADSB_OUT_DYNAMIC_VelEW", ftypes.INT16, nil)
f.UAVIONIX_ADSB_OUT_DYNAMIC_emergencyStatus = ProtoField.new("emergencyStatus (UAVIONIX_ADSB_EMERGENCY_STATUS)", "mavlink_proto.UAVIONIX_ADSB_OUT_DYNAMIC_emergencyStatus", ftypes.UINT8, enumEntryName.UAVIONIX_ADSB_EMERGENCY_STATUS)
f.UAVIONIX_ADSB_OUT_DYNAMIC_state = ProtoField.new("state (UAVIONIX_ADSB_OUT_DYNAMIC_STATE)", "mavlink_proto.UAVIONIX_ADSB_OUT_DYNAMIC_state", ftypes.UINT16, nil)
f.UAVIONIX_ADSB_OUT_DYNAMIC_state_flagUAVIONIX_ADSB_OUT_DYNAMIC_STATE_INTENT_CHANGE = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_DYNAMIC_state.UAVIONIX_ADSB_OUT_DYNAMIC_STATE_INTENT_CHANGE", "UAVIONIX_ADSB_OUT_DYNAMIC_STATE_INTENT_CHANGE", 5, nil, 1)
f.UAVIONIX_ADSB_OUT_DYNAMIC_state_flagUAVIONIX_ADSB_OUT_DYNAMIC_STATE_AUTOPILOT_ENABLED = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_DYNAMIC_state.UAVIONIX_ADSB_OUT_DYNAMIC_STATE_AUTOPILOT_ENABLED", "UAVIONIX_ADSB_OUT_DYNAMIC_STATE_AUTOPILOT_ENABLED", 5, nil, 2)
f.UAVIONIX_ADSB_OUT_DYNAMIC_state_flagUAVIONIX_ADSB_OUT_DYNAMIC_STATE_NICBARO_CROSSCHECKED = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_DYNAMIC_state.UAVIONIX_ADSB_OUT_DYNAMIC_STATE_NICBARO_CROSSCHECKED", "UAVIONIX_ADSB_OUT_DYNAMIC_STATE_NICBARO_CROSSCHECKED", 5, nil, 4)
f.UAVIONIX_ADSB_OUT_DYNAMIC_state_flagUAVIONIX_ADSB_OUT_DYNAMIC_STATE_ON_GROUND = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_DYNAMIC_state.UAVIONIX_ADSB_OUT_DYNAMIC_STATE_ON_GROUND", "UAVIONIX_ADSB_OUT_DYNAMIC_STATE_ON_GROUND", 5, nil, 8)
f.UAVIONIX_ADSB_OUT_DYNAMIC_state_flagUAVIONIX_ADSB_OUT_DYNAMIC_STATE_IDENT = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_DYNAMIC_state.UAVIONIX_ADSB_OUT_DYNAMIC_STATE_IDENT", "UAVIONIX_ADSB_OUT_DYNAMIC_STATE_IDENT", 5, nil, 16)
f.UAVIONIX_ADSB_OUT_DYNAMIC_squawk = ProtoField.new("squawk (uint16_t)", "mavlink_proto.UAVIONIX_ADSB_OUT_DYNAMIC_squawk", ftypes.UINT16, nil)

f.UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT_rfHealth = ProtoField.new("rfHealth (UAVIONIX_ADSB_RF_HEALTH)", "mavlink_proto.UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT_rfHealth", ftypes.UINT8, nil)
f.UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT_rfHealth_flagUAVIONIX_ADSB_RF_HEALTH_OK = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT_rfHealth.UAVIONIX_ADSB_RF_HEALTH_OK", "UAVIONIX_ADSB_RF_HEALTH_OK", 5, nil, 1)
f.UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT_rfHealth_flagUAVIONIX_ADSB_RF_HEALTH_FAIL_TX = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT_rfHealth.UAVIONIX_ADSB_RF_HEALTH_FAIL_TX", "UAVIONIX_ADSB_RF_HEALTH_FAIL_TX", 5, nil, 2)
f.UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT_rfHealth_flagUAVIONIX_ADSB_RF_HEALTH_FAIL_RX = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT_rfHealth.UAVIONIX_ADSB_RF_HEALTH_FAIL_RX", "UAVIONIX_ADSB_RF_HEALTH_FAIL_RX", 5, nil, 16)

f.UAVIONIX_ADSB_OUT_CFG_REGISTRATION_registration = ProtoField.new("registration (char)", "mavlink_proto.UAVIONIX_ADSB_OUT_CFG_REGISTRATION_registration", ftypes.STRING, nil)

f.UAVIONIX_ADSB_OUT_CFG_FLIGHTID_flight_id = ProtoField.new("flight_id (char)", "mavlink_proto.UAVIONIX_ADSB_OUT_CFG_FLIGHTID_flight_id", ftypes.STRING, nil)

f.UAVIONIX_ADSB_GET_ReqMessageId = ProtoField.new("ReqMessageId (uint32_t)", "mavlink_proto.UAVIONIX_ADSB_GET_ReqMessageId", ftypes.UINT32, nil)

f.UAVIONIX_ADSB_OUT_CONTROL_state = ProtoField.new("state (UAVIONIX_ADSB_OUT_CONTROL_STATE)", "mavlink_proto.UAVIONIX_ADSB_OUT_CONTROL_state", ftypes.UINT8, nil)
f.UAVIONIX_ADSB_OUT_CONTROL_state_flagUAVIONIX_ADSB_OUT_CONTROL_STATE_EXTERNAL_BARO_CROSSCHECKED = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_CONTROL_state.UAVIONIX_ADSB_OUT_CONTROL_STATE_EXTERNAL_BARO_CROSSCHECKED", "UAVIONIX_ADSB_OUT_CONTROL_STATE_EXTERNAL_BARO_CROSSCHECKED", 8, nil, 1)
f.UAVIONIX_ADSB_OUT_CONTROL_state_flagUAVIONIX_ADSB_OUT_CONTROL_STATE_ON_GROUND = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_CONTROL_state.UAVIONIX_ADSB_OUT_CONTROL_STATE_ON_GROUND", "UAVIONIX_ADSB_OUT_CONTROL_STATE_ON_GROUND", 8, nil, 4)
f.UAVIONIX_ADSB_OUT_CONTROL_state_flagUAVIONIX_ADSB_OUT_CONTROL_STATE_IDENT_BUTTON_ACTIVE = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_CONTROL_state.UAVIONIX_ADSB_OUT_CONTROL_STATE_IDENT_BUTTON_ACTIVE", "UAVIONIX_ADSB_OUT_CONTROL_STATE_IDENT_BUTTON_ACTIVE", 8, nil, 8)
f.UAVIONIX_ADSB_OUT_CONTROL_state_flagUAVIONIX_ADSB_OUT_CONTROL_STATE_MODE_A_ENABLED = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_CONTROL_state.UAVIONIX_ADSB_OUT_CONTROL_STATE_MODE_A_ENABLED", "UAVIONIX_ADSB_OUT_CONTROL_STATE_MODE_A_ENABLED", 8, nil, 16)
f.UAVIONIX_ADSB_OUT_CONTROL_state_flagUAVIONIX_ADSB_OUT_CONTROL_STATE_MODE_C_ENABLED = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_CONTROL_state.UAVIONIX_ADSB_OUT_CONTROL_STATE_MODE_C_ENABLED", "UAVIONIX_ADSB_OUT_CONTROL_STATE_MODE_C_ENABLED", 8, nil, 32)
f.UAVIONIX_ADSB_OUT_CONTROL_state_flagUAVIONIX_ADSB_OUT_CONTROL_STATE_MODE_S_ENABLED = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_CONTROL_state.UAVIONIX_ADSB_OUT_CONTROL_STATE_MODE_S_ENABLED", "UAVIONIX_ADSB_OUT_CONTROL_STATE_MODE_S_ENABLED", 8, nil, 64)
f.UAVIONIX_ADSB_OUT_CONTROL_state_flagUAVIONIX_ADSB_OUT_CONTROL_STATE_1090ES_TX_ENABLED = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_CONTROL_state.UAVIONIX_ADSB_OUT_CONTROL_STATE_1090ES_TX_ENABLED", "UAVIONIX_ADSB_OUT_CONTROL_STATE_1090ES_TX_ENABLED", 8, nil, 128)
f.UAVIONIX_ADSB_OUT_CONTROL_baroAltMSL = ProtoField.new("baroAltMSL (int32_t)", "mavlink_proto.UAVIONIX_ADSB_OUT_CONTROL_baroAltMSL", ftypes.INT32, nil)
f.UAVIONIX_ADSB_OUT_CONTROL_squawk = ProtoField.new("squawk (uint16_t)", "mavlink_proto.UAVIONIX_ADSB_OUT_CONTROL_squawk", ftypes.UINT16, nil)
f.UAVIONIX_ADSB_OUT_CONTROL_emergencyStatus = ProtoField.new("emergencyStatus (UAVIONIX_ADSB_EMERGENCY_STATUS)", "mavlink_proto.UAVIONIX_ADSB_OUT_CONTROL_emergencyStatus", ftypes.UINT8, enumEntryName.UAVIONIX_ADSB_EMERGENCY_STATUS)
f.UAVIONIX_ADSB_OUT_CONTROL_flight_id = ProtoField.new("flight_id (char)", "mavlink_proto.UAVIONIX_ADSB_OUT_CONTROL_flight_id", ftypes.STRING, nil)
f.UAVIONIX_ADSB_OUT_CONTROL_x_bit = ProtoField.new("x_bit (UAVIONIX_ADSB_XBIT)", "mavlink_proto.UAVIONIX_ADSB_OUT_CONTROL_x_bit", ftypes.UINT8, nil)
f.UAVIONIX_ADSB_OUT_CONTROL_x_bit_flagUAVIONIX_ADSB_XBIT_ENABLED = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_CONTROL_x_bit.UAVIONIX_ADSB_XBIT_ENABLED", "UAVIONIX_ADSB_XBIT_ENABLED", 8, nil, 128)

f.UAVIONIX_ADSB_OUT_STATUS_state = ProtoField.new("state (UAVIONIX_ADSB_OUT_STATUS_STATE)", "mavlink_proto.UAVIONIX_ADSB_OUT_STATUS_state", ftypes.UINT8, nil)
f.UAVIONIX_ADSB_OUT_STATUS_state_flagUAVIONIX_ADSB_OUT_STATUS_STATE_ON_GROUND = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_STATUS_state.UAVIONIX_ADSB_OUT_STATUS_STATE_ON_GROUND", "UAVIONIX_ADSB_OUT_STATUS_STATE_ON_GROUND", 8, nil, 1)
f.UAVIONIX_ADSB_OUT_STATUS_state_flagUAVIONIX_ADSB_OUT_STATUS_STATE_INTERROGATED_SINCE_LAST = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_STATUS_state.UAVIONIX_ADSB_OUT_STATUS_STATE_INTERROGATED_SINCE_LAST", "UAVIONIX_ADSB_OUT_STATUS_STATE_INTERROGATED_SINCE_LAST", 8, nil, 2)
f.UAVIONIX_ADSB_OUT_STATUS_state_flagUAVIONIX_ADSB_OUT_STATUS_STATE_XBIT_ENABLED = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_STATUS_state.UAVIONIX_ADSB_OUT_STATUS_STATE_XBIT_ENABLED", "UAVIONIX_ADSB_OUT_STATUS_STATE_XBIT_ENABLED", 8, nil, 4)
f.UAVIONIX_ADSB_OUT_STATUS_state_flagUAVIONIX_ADSB_OUT_STATUS_STATE_IDENT_ACTIVE = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_STATUS_state.UAVIONIX_ADSB_OUT_STATUS_STATE_IDENT_ACTIVE", "UAVIONIX_ADSB_OUT_STATUS_STATE_IDENT_ACTIVE", 8, nil, 8)
f.UAVIONIX_ADSB_OUT_STATUS_state_flagUAVIONIX_ADSB_OUT_STATUS_STATE_MODE_A_ENABLED = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_STATUS_state.UAVIONIX_ADSB_OUT_STATUS_STATE_MODE_A_ENABLED", "UAVIONIX_ADSB_OUT_STATUS_STATE_MODE_A_ENABLED", 8, nil, 16)
f.UAVIONIX_ADSB_OUT_STATUS_state_flagUAVIONIX_ADSB_OUT_STATUS_STATE_MODE_C_ENABLED = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_STATUS_state.UAVIONIX_ADSB_OUT_STATUS_STATE_MODE_C_ENABLED", "UAVIONIX_ADSB_OUT_STATUS_STATE_MODE_C_ENABLED", 8, nil, 32)
f.UAVIONIX_ADSB_OUT_STATUS_state_flagUAVIONIX_ADSB_OUT_STATUS_STATE_MODE_S_ENABLED = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_STATUS_state.UAVIONIX_ADSB_OUT_STATUS_STATE_MODE_S_ENABLED", "UAVIONIX_ADSB_OUT_STATUS_STATE_MODE_S_ENABLED", 8, nil, 64)
f.UAVIONIX_ADSB_OUT_STATUS_state_flagUAVIONIX_ADSB_OUT_STATUS_STATE_1090ES_TX_ENABLED = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_STATUS_state.UAVIONIX_ADSB_OUT_STATUS_STATE_1090ES_TX_ENABLED", "UAVIONIX_ADSB_OUT_STATUS_STATE_1090ES_TX_ENABLED", 8, nil, 128)
f.UAVIONIX_ADSB_OUT_STATUS_squawk = ProtoField.new("squawk (uint16_t)", "mavlink_proto.UAVIONIX_ADSB_OUT_STATUS_squawk", ftypes.UINT16, nil)
f.UAVIONIX_ADSB_OUT_STATUS_NIC_NACp = ProtoField.new("NIC_NACp (UAVIONIX_ADSB_OUT_STATUS_NIC_NACP)", "mavlink_proto.UAVIONIX_ADSB_OUT_STATUS_NIC_NACp", ftypes.UINT8, enumEntryName.UAVIONIX_ADSB_OUT_STATUS_NIC_NACP)
f.UAVIONIX_ADSB_OUT_STATUS_boardTemp = ProtoField.new("boardTemp (uint8_t)", "mavlink_proto.UAVIONIX_ADSB_OUT_STATUS_boardTemp", ftypes.UINT8, nil)
f.UAVIONIX_ADSB_OUT_STATUS_fault = ProtoField.new("fault (UAVIONIX_ADSB_OUT_STATUS_FAULT)", "mavlink_proto.UAVIONIX_ADSB_OUT_STATUS_fault", ftypes.UINT8, nil)
f.UAVIONIX_ADSB_OUT_STATUS_fault_flagUAVIONIX_ADSB_OUT_STATUS_FAULT_STATUS_MESSAGE_UNAVAIL = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_STATUS_fault.UAVIONIX_ADSB_OUT_STATUS_FAULT_STATUS_MESSAGE_UNAVAIL", "UAVIONIX_ADSB_OUT_STATUS_FAULT_STATUS_MESSAGE_UNAVAIL", 8, nil, 8)
f.UAVIONIX_ADSB_OUT_STATUS_fault_flagUAVIONIX_ADSB_OUT_STATUS_FAULT_GPS_NO_POS = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_STATUS_fault.UAVIONIX_ADSB_OUT_STATUS_FAULT_GPS_NO_POS", "UAVIONIX_ADSB_OUT_STATUS_FAULT_GPS_NO_POS", 8, nil, 16)
f.UAVIONIX_ADSB_OUT_STATUS_fault_flagUAVIONIX_ADSB_OUT_STATUS_FAULT_GPS_UNAVAIL = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_STATUS_fault.UAVIONIX_ADSB_OUT_STATUS_FAULT_GPS_UNAVAIL", "UAVIONIX_ADSB_OUT_STATUS_FAULT_GPS_UNAVAIL", 8, nil, 32)
f.UAVIONIX_ADSB_OUT_STATUS_fault_flagUAVIONIX_ADSB_OUT_STATUS_FAULT_TX_SYSTEM_FAIL = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_STATUS_fault.UAVIONIX_ADSB_OUT_STATUS_FAULT_TX_SYSTEM_FAIL", "UAVIONIX_ADSB_OUT_STATUS_FAULT_TX_SYSTEM_FAIL", 8, nil, 64)
f.UAVIONIX_ADSB_OUT_STATUS_fault_flagUAVIONIX_ADSB_OUT_STATUS_FAULT_MAINT_REQ = ProtoField.bool("mavlink_proto.UAVIONIX_ADSB_OUT_STATUS_fault.UAVIONIX_ADSB_OUT_STATUS_FAULT_MAINT_REQ", "UAVIONIX_ADSB_OUT_STATUS_FAULT_MAINT_REQ", 8, nil, 128)
f.UAVIONIX_ADSB_OUT_STATUS_flight_id = ProtoField.new("flight_id (char)", "mavlink_proto.UAVIONIX_ADSB_OUT_STATUS_flight_id", ftypes.STRING, nil)

f.ICAROUS_HEARTBEAT_status = ProtoField.new("status (ICAROUS_FMS_STATE)", "mavlink_proto.ICAROUS_HEARTBEAT_status", ftypes.UINT8, enumEntryName.ICAROUS_FMS_STATE)

f.ICAROUS_KINEMATIC_BANDS_numBands = ProtoField.new("numBands (int8_t)", "mavlink_proto.ICAROUS_KINEMATIC_BANDS_numBands", ftypes.INT8, nil)
f.ICAROUS_KINEMATIC_BANDS_type1 = ProtoField.new("type1 (ICAROUS_TRACK_BAND_TYPES)", "mavlink_proto.ICAROUS_KINEMATIC_BANDS_type1", ftypes.UINT8, enumEntryName.ICAROUS_TRACK_BAND_TYPES)
f.ICAROUS_KINEMATIC_BANDS_min1 = ProtoField.new("min1 (float)", "mavlink_proto.ICAROUS_KINEMATIC_BANDS_min1", ftypes.FLOAT, nil)
f.ICAROUS_KINEMATIC_BANDS_max1 = ProtoField.new("max1 (float)", "mavlink_proto.ICAROUS_KINEMATIC_BANDS_max1", ftypes.FLOAT, nil)
f.ICAROUS_KINEMATIC_BANDS_type2 = ProtoField.new("type2 (ICAROUS_TRACK_BAND_TYPES)", "mavlink_proto.ICAROUS_KINEMATIC_BANDS_type2", ftypes.UINT8, enumEntryName.ICAROUS_TRACK_BAND_TYPES)
f.ICAROUS_KINEMATIC_BANDS_min2 = ProtoField.new("min2 (float)", "mavlink_proto.ICAROUS_KINEMATIC_BANDS_min2", ftypes.FLOAT, nil)
f.ICAROUS_KINEMATIC_BANDS_max2 = ProtoField.new("max2 (float)", "mavlink_proto.ICAROUS_KINEMATIC_BANDS_max2", ftypes.FLOAT, nil)
f.ICAROUS_KINEMATIC_BANDS_type3 = ProtoField.new("type3 (ICAROUS_TRACK_BAND_TYPES)", "mavlink_proto.ICAROUS_KINEMATIC_BANDS_type3", ftypes.UINT8, enumEntryName.ICAROUS_TRACK_BAND_TYPES)
f.ICAROUS_KINEMATIC_BANDS_min3 = ProtoField.new("min3 (float)", "mavlink_proto.ICAROUS_KINEMATIC_BANDS_min3", ftypes.FLOAT, nil)
f.ICAROUS_KINEMATIC_BANDS_max3 = ProtoField.new("max3 (float)", "mavlink_proto.ICAROUS_KINEMATIC_BANDS_max3", ftypes.FLOAT, nil)
f.ICAROUS_KINEMATIC_BANDS_type4 = ProtoField.new("type4 (ICAROUS_TRACK_BAND_TYPES)", "mavlink_proto.ICAROUS_KINEMATIC_BANDS_type4", ftypes.UINT8, enumEntryName.ICAROUS_TRACK_BAND_TYPES)
f.ICAROUS_KINEMATIC_BANDS_min4 = ProtoField.new("min4 (float)", "mavlink_proto.ICAROUS_KINEMATIC_BANDS_min4", ftypes.FLOAT, nil)
f.ICAROUS_KINEMATIC_BANDS_max4 = ProtoField.new("max4 (float)", "mavlink_proto.ICAROUS_KINEMATIC_BANDS_max4", ftypes.FLOAT, nil)
f.ICAROUS_KINEMATIC_BANDS_type5 = ProtoField.new("type5 (ICAROUS_TRACK_BAND_TYPES)", "mavlink_proto.ICAROUS_KINEMATIC_BANDS_type5", ftypes.UINT8, enumEntryName.ICAROUS_TRACK_BAND_TYPES)
f.ICAROUS_KINEMATIC_BANDS_min5 = ProtoField.new("min5 (float)", "mavlink_proto.ICAROUS_KINEMATIC_BANDS_min5", ftypes.FLOAT, nil)
f.ICAROUS_KINEMATIC_BANDS_max5 = ProtoField.new("max5 (float)", "mavlink_proto.ICAROUS_KINEMATIC_BANDS_max5", ftypes.FLOAT, nil)

f.LOWEHEISER_GOV_EFI_volt_batt = ProtoField.new("volt_batt (float)", "mavlink_proto.LOWEHEISER_GOV_EFI_volt_batt", ftypes.FLOAT, nil)
f.LOWEHEISER_GOV_EFI_curr_batt = ProtoField.new("curr_batt (float)", "mavlink_proto.LOWEHEISER_GOV_EFI_curr_batt", ftypes.FLOAT, nil)
f.LOWEHEISER_GOV_EFI_curr_gen = ProtoField.new("curr_gen (float)", "mavlink_proto.LOWEHEISER_GOV_EFI_curr_gen", ftypes.FLOAT, nil)
f.LOWEHEISER_GOV_EFI_curr_rot = ProtoField.new("curr_rot (float)", "mavlink_proto.LOWEHEISER_GOV_EFI_curr_rot", ftypes.FLOAT, nil)
f.LOWEHEISER_GOV_EFI_fuel_level = ProtoField.new("fuel_level (float)", "mavlink_proto.LOWEHEISER_GOV_EFI_fuel_level", ftypes.FLOAT, nil)
f.LOWEHEISER_GOV_EFI_throttle = ProtoField.new("throttle (float)", "mavlink_proto.LOWEHEISER_GOV_EFI_throttle", ftypes.FLOAT, nil)
f.LOWEHEISER_GOV_EFI_runtime = ProtoField.new("runtime (uint32_t)", "mavlink_proto.LOWEHEISER_GOV_EFI_runtime", ftypes.UINT32, nil)
f.LOWEHEISER_GOV_EFI_until_maintenance = ProtoField.new("until_maintenance (int32_t)", "mavlink_proto.LOWEHEISER_GOV_EFI_until_maintenance", ftypes.INT32, nil)
f.LOWEHEISER_GOV_EFI_rectifier_temp = ProtoField.new("rectifier_temp (float)", "mavlink_proto.LOWEHEISER_GOV_EFI_rectifier_temp", ftypes.FLOAT, nil)
f.LOWEHEISER_GOV_EFI_generator_temp = ProtoField.new("generator_temp (float)", "mavlink_proto.LOWEHEISER_GOV_EFI_generator_temp", ftypes.FLOAT, nil)
f.LOWEHEISER_GOV_EFI_efi_batt = ProtoField.new("efi_batt (float)", "mavlink_proto.LOWEHEISER_GOV_EFI_efi_batt", ftypes.FLOAT, nil)
f.LOWEHEISER_GOV_EFI_efi_rpm = ProtoField.new("efi_rpm (float)", "mavlink_proto.LOWEHEISER_GOV_EFI_efi_rpm", ftypes.FLOAT, nil)
f.LOWEHEISER_GOV_EFI_efi_pw = ProtoField.new("efi_pw (float)", "mavlink_proto.LOWEHEISER_GOV_EFI_efi_pw", ftypes.FLOAT, nil)
f.LOWEHEISER_GOV_EFI_efi_fuel_flow = ProtoField.new("efi_fuel_flow (float)", "mavlink_proto.LOWEHEISER_GOV_EFI_efi_fuel_flow", ftypes.FLOAT, nil)
f.LOWEHEISER_GOV_EFI_efi_fuel_consumed = ProtoField.new("efi_fuel_consumed (float)", "mavlink_proto.LOWEHEISER_GOV_EFI_efi_fuel_consumed", ftypes.FLOAT, nil)
f.LOWEHEISER_GOV_EFI_efi_baro = ProtoField.new("efi_baro (float)", "mavlink_proto.LOWEHEISER_GOV_EFI_efi_baro", ftypes.FLOAT, nil)
f.LOWEHEISER_GOV_EFI_efi_mat = ProtoField.new("efi_mat (float)", "mavlink_proto.LOWEHEISER_GOV_EFI_efi_mat", ftypes.FLOAT, nil)
f.LOWEHEISER_GOV_EFI_efi_clt = ProtoField.new("efi_clt (float)", "mavlink_proto.LOWEHEISER_GOV_EFI_efi_clt", ftypes.FLOAT, nil)
f.LOWEHEISER_GOV_EFI_efi_tps = ProtoField.new("efi_tps (float)", "mavlink_proto.LOWEHEISER_GOV_EFI_efi_tps", ftypes.FLOAT, nil)
f.LOWEHEISER_GOV_EFI_efi_exhaust_gas_temperature = ProtoField.new("efi_exhaust_gas_temperature (float)", "mavlink_proto.LOWEHEISER_GOV_EFI_efi_exhaust_gas_temperature", ftypes.FLOAT, nil)
f.LOWEHEISER_GOV_EFI_efi_index = ProtoField.new("efi_index (uint8_t)", "mavlink_proto.LOWEHEISER_GOV_EFI_efi_index", ftypes.UINT8, nil)
f.LOWEHEISER_GOV_EFI_generator_status = ProtoField.new("generator_status (uint16_t)", "mavlink_proto.LOWEHEISER_GOV_EFI_generator_status", ftypes.UINT16, nil)
f.LOWEHEISER_GOV_EFI_efi_status = ProtoField.new("efi_status (uint16_t)", "mavlink_proto.LOWEHEISER_GOV_EFI_efi_status", ftypes.UINT16, nil)

f.CUBEPILOT_RAW_RC_rc_raw_0 = ProtoField.new("rc_raw[0] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_0", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_1 = ProtoField.new("rc_raw[1] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_1", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_2 = ProtoField.new("rc_raw[2] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_2", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_3 = ProtoField.new("rc_raw[3] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_3", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_4 = ProtoField.new("rc_raw[4] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_4", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_5 = ProtoField.new("rc_raw[5] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_5", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_6 = ProtoField.new("rc_raw[6] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_6", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_7 = ProtoField.new("rc_raw[7] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_7", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_8 = ProtoField.new("rc_raw[8] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_8", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_9 = ProtoField.new("rc_raw[9] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_9", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_10 = ProtoField.new("rc_raw[10] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_10", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_11 = ProtoField.new("rc_raw[11] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_11", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_12 = ProtoField.new("rc_raw[12] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_12", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_13 = ProtoField.new("rc_raw[13] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_13", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_14 = ProtoField.new("rc_raw[14] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_14", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_15 = ProtoField.new("rc_raw[15] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_15", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_16 = ProtoField.new("rc_raw[16] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_16", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_17 = ProtoField.new("rc_raw[17] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_17", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_18 = ProtoField.new("rc_raw[18] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_18", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_19 = ProtoField.new("rc_raw[19] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_19", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_20 = ProtoField.new("rc_raw[20] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_20", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_21 = ProtoField.new("rc_raw[21] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_21", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_22 = ProtoField.new("rc_raw[22] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_22", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_23 = ProtoField.new("rc_raw[23] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_23", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_24 = ProtoField.new("rc_raw[24] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_24", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_25 = ProtoField.new("rc_raw[25] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_25", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_26 = ProtoField.new("rc_raw[26] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_26", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_27 = ProtoField.new("rc_raw[27] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_27", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_28 = ProtoField.new("rc_raw[28] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_28", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_29 = ProtoField.new("rc_raw[29] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_29", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_30 = ProtoField.new("rc_raw[30] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_30", ftypes.UINT8, nil)
f.CUBEPILOT_RAW_RC_rc_raw_31 = ProtoField.new("rc_raw[31] (uint8_t)", "mavlink_proto.CUBEPILOT_RAW_RC_rc_raw_31", ftypes.UINT8, nil)

f.HERELINK_VIDEO_STREAM_INFORMATION_camera_id = ProtoField.new("camera_id (uint8_t)", "mavlink_proto.HERELINK_VIDEO_STREAM_INFORMATION_camera_id", ftypes.UINT8, nil)
f.HERELINK_VIDEO_STREAM_INFORMATION_status = ProtoField.new("status (uint8_t)", "mavlink_proto.HERELINK_VIDEO_STREAM_INFORMATION_status", ftypes.UINT8, nil)
f.HERELINK_VIDEO_STREAM_INFORMATION_framerate = ProtoField.new("framerate (float)", "mavlink_proto.HERELINK_VIDEO_STREAM_INFORMATION_framerate", ftypes.FLOAT, nil)
f.HERELINK_VIDEO_STREAM_INFORMATION_resolution_h = ProtoField.new("resolution_h (uint16_t)", "mavlink_proto.HERELINK_VIDEO_STREAM_INFORMATION_resolution_h", ftypes.UINT16, nil)
f.HERELINK_VIDEO_STREAM_INFORMATION_resolution_v = ProtoField.new("resolution_v (uint16_t)", "mavlink_proto.HERELINK_VIDEO_STREAM_INFORMATION_resolution_v", ftypes.UINT16, nil)
f.HERELINK_VIDEO_STREAM_INFORMATION_bitrate = ProtoField.new("bitrate (uint32_t)", "mavlink_proto.HERELINK_VIDEO_STREAM_INFORMATION_bitrate", ftypes.UINT32, nil)
f.HERELINK_VIDEO_STREAM_INFORMATION_rotation = ProtoField.new("rotation (uint16_t)", "mavlink_proto.HERELINK_VIDEO_STREAM_INFORMATION_rotation", ftypes.UINT16, nil)
f.HERELINK_VIDEO_STREAM_INFORMATION_uri = ProtoField.new("uri (char)", "mavlink_proto.HERELINK_VIDEO_STREAM_INFORMATION_uri", ftypes.STRING, nil)

f.HERELINK_TELEM_rssi = ProtoField.new("rssi (uint8_t)", "mavlink_proto.HERELINK_TELEM_rssi", ftypes.UINT8, nil)
f.HERELINK_TELEM_snr = ProtoField.new("snr (int16_t)", "mavlink_proto.HERELINK_TELEM_snr", ftypes.INT16, nil)
f.HERELINK_TELEM_rf_freq = ProtoField.new("rf_freq (uint32_t)", "mavlink_proto.HERELINK_TELEM_rf_freq", ftypes.UINT32, nil)
f.HERELINK_TELEM_link_bw = ProtoField.new("link_bw (uint32_t)", "mavlink_proto.HERELINK_TELEM_link_bw", ftypes.UINT32, nil)
f.HERELINK_TELEM_link_rate = ProtoField.new("link_rate (uint32_t)", "mavlink_proto.HERELINK_TELEM_link_rate", ftypes.UINT32, nil)
f.HERELINK_TELEM_cpu_temp = ProtoField.new("cpu_temp (int16_t)", "mavlink_proto.HERELINK_TELEM_cpu_temp", ftypes.INT16, nil)
f.HERELINK_TELEM_board_temp = ProtoField.new("board_temp (int16_t)", "mavlink_proto.HERELINK_TELEM_board_temp", ftypes.INT16, nil)

f.CUBEPILOT_FIRMWARE_UPDATE_START_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.CUBEPILOT_FIRMWARE_UPDATE_START_target_system", ftypes.UINT8, nil)
f.CUBEPILOT_FIRMWARE_UPDATE_START_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.CUBEPILOT_FIRMWARE_UPDATE_START_target_component", ftypes.UINT8, nil)
f.CUBEPILOT_FIRMWARE_UPDATE_START_size = ProtoField.new("size (uint32_t)", "mavlink_proto.CUBEPILOT_FIRMWARE_UPDATE_START_size", ftypes.UINT32, nil)
f.CUBEPILOT_FIRMWARE_UPDATE_START_crc = ProtoField.new("crc (uint32_t)", "mavlink_proto.CUBEPILOT_FIRMWARE_UPDATE_START_crc", ftypes.UINT32, nil)

f.CUBEPILOT_FIRMWARE_UPDATE_RESP_target_system = ProtoField.new("target_system (uint8_t)", "mavlink_proto.CUBEPILOT_FIRMWARE_UPDATE_RESP_target_system", ftypes.UINT8, nil)
f.CUBEPILOT_FIRMWARE_UPDATE_RESP_target_component = ProtoField.new("target_component (uint8_t)", "mavlink_proto.CUBEPILOT_FIRMWARE_UPDATE_RESP_target_component", ftypes.UINT8, nil)
f.CUBEPILOT_FIRMWARE_UPDATE_RESP_offset = ProtoField.new("offset (uint32_t)", "mavlink_proto.CUBEPILOT_FIRMWARE_UPDATE_RESP_offset", ftypes.UINT32, nil)

f.HEARTBEAT_type = ProtoField.new("type (MAV_TYPE)", "mavlink_proto.HEARTBEAT_type", ftypes.UINT8, enumEntryName.MAV_TYPE)
f.HEARTBEAT_autopilot = ProtoField.new("autopilot (MAV_AUTOPILOT)", "mavlink_proto.HEARTBEAT_autopilot", ftypes.UINT8, enumEntryName.MAV_AUTOPILOT)
f.HEARTBEAT_base_mode = ProtoField.new("base_mode (MAV_MODE_FLAG)", "mavlink_proto.HEARTBEAT_base_mode", ftypes.UINT8, nil)
f.HEARTBEAT_base_mode_flagMAV_MODE_FLAG_CUSTOM_MODE_ENABLED = ProtoField.bool("mavlink_proto.HEARTBEAT_base_mode.MAV_MODE_FLAG_CUSTOM_MODE_ENABLED", "MAV_MODE_FLAG_CUSTOM_MODE_ENABLED", 8, nil, 1)
f.HEARTBEAT_base_mode_flagMAV_MODE_FLAG_TEST_ENABLED = ProtoField.bool("mavlink_proto.HEARTBEAT_base_mode.MAV_MODE_FLAG_TEST_ENABLED", "MAV_MODE_FLAG_TEST_ENABLED", 8, nil, 2)
f.HEARTBEAT_base_mode_flagMAV_MODE_FLAG_AUTO_ENABLED = ProtoField.bool("mavlink_proto.HEARTBEAT_base_mode.MAV_MODE_FLAG_AUTO_ENABLED", "MAV_MODE_FLAG_AUTO_ENABLED", 8, nil, 4)
f.HEARTBEAT_base_mode_flagMAV_MODE_FLAG_GUIDED_ENABLED = ProtoField.bool("mavlink_proto.HEARTBEAT_base_mode.MAV_MODE_FLAG_GUIDED_ENABLED", "MAV_MODE_FLAG_GUIDED_ENABLED", 8, nil, 8)
f.HEARTBEAT_base_mode_flagMAV_MODE_FLAG_STABILIZE_ENABLED = ProtoField.bool("mavlink_proto.HEARTBEAT_base_mode.MAV_MODE_FLAG_STABILIZE_ENABLED", "MAV_MODE_FLAG_STABILIZE_ENABLED", 8, nil, 16)
f.HEARTBEAT_base_mode_flagMAV_MODE_FLAG_HIL_ENABLED = ProtoField.bool("mavlink_proto.HEARTBEAT_base_mode.MAV_MODE_FLAG_HIL_ENABLED", "MAV_MODE_FLAG_HIL_ENABLED", 8, nil, 32)
f.HEARTBEAT_base_mode_flagMAV_MODE_FLAG_MANUAL_INPUT_ENABLED = ProtoField.bool("mavlink_proto.HEARTBEAT_base_mode.MAV_MODE_FLAG_MANUAL_INPUT_ENABLED", "MAV_MODE_FLAG_MANUAL_INPUT_ENABLED", 8, nil, 64)
f.HEARTBEAT_base_mode_flagMAV_MODE_FLAG_SAFETY_ARMED = ProtoField.bool("mavlink_proto.HEARTBEAT_base_mode.MAV_MODE_FLAG_SAFETY_ARMED", "MAV_MODE_FLAG_SAFETY_ARMED", 8, nil, 128)
f.HEARTBEAT_custom_mode = ProtoField.new("custom_mode (uint32_t)", "mavlink_proto.HEARTBEAT_custom_mode", ftypes.UINT32, nil)
f.HEARTBEAT_system_status = ProtoField.new("system_status (MAV_STATE)", "mavlink_proto.HEARTBEAT_system_status", ftypes.UINT8, enumEntryName.MAV_STATE)
f.HEARTBEAT_mavlink_version = ProtoField.new("mavlink_version (uint8_t)", "mavlink_proto.HEARTBEAT_mavlink_version", ftypes.UINT8, nil)

-- dissect flag field
function dissect_flags_LIMIT_MODULE(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagLIMIT_GPSLOCK"], tvbrange, value)
    tree:add_le(f[name .. "_flagLIMIT_GEOFENCE"], tvbrange, value)
    tree:add_le(f[name .. "_flagLIMIT_ALTITUDE"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_RALLY_FLAGS(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagFAVORABLE_WIND"], tvbrange, value)
    tree:add_le(f[name .. "_flagLAND_IMMEDIATELY"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_GOPRO_HEARTBEAT_FLAGS(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagGOPRO_FLAG_RECORDING"], tvbrange, value)
    tree:add_le(f[name .. "_flagGOPRO_HEARTBEAT_FLAGS_ENUM_END"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_GOPRO_VIDEO_SETTINGS_FLAGS(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagGOPRO_VIDEO_SETTINGS_TV_MODE"], tvbrange, value)
    tree:add_le(f[name .. "_flagGOPRO_VIDEO_SETTINGS_FLAGS_ENUM_END"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_EKF_STATUS_FLAGS(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagEKF_ATTITUDE"], tvbrange, value)
    tree:add_le(f[name .. "_flagEKF_VELOCITY_HORIZ"], tvbrange, value)
    tree:add_le(f[name .. "_flagEKF_VELOCITY_VERT"], tvbrange, value)
    tree:add_le(f[name .. "_flagEKF_POS_HORIZ_REL"], tvbrange, value)
    tree:add_le(f[name .. "_flagEKF_POS_HORIZ_ABS"], tvbrange, value)
    tree:add_le(f[name .. "_flagEKF_POS_VERT_ABS"], tvbrange, value)
    tree:add_le(f[name .. "_flagEKF_POS_VERT_AGL"], tvbrange, value)
    tree:add_le(f[name .. "_flagEKF_CONST_POS_MODE"], tvbrange, value)
    tree:add_le(f[name .. "_flagEKF_PRED_POS_HORIZ_REL"], tvbrange, value)
    tree:add_le(f[name .. "_flagEKF_PRED_POS_HORIZ_ABS"], tvbrange, value)
    tree:add_le(f[name .. "_flagEKF_UNINITIALIZED"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_HL_FAILURE_FLAG(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagHL_FAILURE_FLAG_GPS"], tvbrange, value)
    tree:add_le(f[name .. "_flagHL_FAILURE_FLAG_DIFFERENTIAL_PRESSURE"], tvbrange, value)
    tree:add_le(f[name .. "_flagHL_FAILURE_FLAG_ABSOLUTE_PRESSURE"], tvbrange, value)
    tree:add_le(f[name .. "_flagHL_FAILURE_FLAG_3D_ACCEL"], tvbrange, value)
    tree:add_le(f[name .. "_flagHL_FAILURE_FLAG_3D_GYRO"], tvbrange, value)
    tree:add_le(f[name .. "_flagHL_FAILURE_FLAG_3D_MAG"], tvbrange, value)
    tree:add_le(f[name .. "_flagHL_FAILURE_FLAG_TERRAIN"], tvbrange, value)
    tree:add_le(f[name .. "_flagHL_FAILURE_FLAG_BATTERY"], tvbrange, value)
    tree:add_le(f[name .. "_flagHL_FAILURE_FLAG_RC_RECEIVER"], tvbrange, value)
    tree:add_le(f[name .. "_flagHL_FAILURE_FLAG_OFFBOARD_LINK"], tvbrange, value)
    tree:add_le(f[name .. "_flagHL_FAILURE_FLAG_ENGINE"], tvbrange, value)
    tree:add_le(f[name .. "_flagHL_FAILURE_FLAG_GEOFENCE"], tvbrange, value)
    tree:add_le(f[name .. "_flagHL_FAILURE_FLAG_ESTIMATOR"], tvbrange, value)
    tree:add_le(f[name .. "_flagHL_FAILURE_FLAG_MISSION"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_MAV_SYS_STATUS_SENSOR(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_SENSOR_3D_GYRO"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_SENSOR_3D_ACCEL"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_SENSOR_3D_MAG"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_SENSOR_GPS"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_SENSOR_OPTICAL_FLOW"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_SENSOR_VISION_POSITION"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_SENSOR_LASER_POSITION"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_SENSOR_YAW_POSITION"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_SENSOR_RC_RECEIVER"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_SENSOR_3D_GYRO2"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_SENSOR_3D_ACCEL2"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_SENSOR_3D_MAG2"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_GEOFENCE"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_AHRS"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_TERRAIN"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_REVERSE_MOTOR"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_LOGGING"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_SENSOR_BATTERY"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_SENSOR_PROXIMITY"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_SENSOR_SATCOM"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_PREARM_CHECK"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_OBSTACLE_AVOIDANCE"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_SYS_STATUS_SENSOR_PROPULSION"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_GIMBAL_DEVICE_CAP_FLAGS(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_GIMBAL_MANAGER_CAP_FLAGS(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_RETRACT"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_NEUTRAL"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_AXIS"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_FOLLOW"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_LOCK"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_AXIS"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_FOLLOW"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_LOCK"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_AXIS"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_FOLLOW"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_LOCK"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_INFINITE_YAW"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_YAW_IN_EARTH_FRAME"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_HAS_RC_INPUTS"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_LOCAL"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_GIMBAL_DEVICE_FLAGS(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_FLAGS_RETRACT"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_FLAGS_NEUTRAL"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_FLAGS_ROLL_LOCK"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_FLAGS_PITCH_LOCK"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_FLAGS_YAW_LOCK"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_GIMBAL_MANAGER_FLAGS(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_MANAGER_FLAGS_RETRACT"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_MANAGER_FLAGS_NEUTRAL"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_MANAGER_FLAGS_ROLL_LOCK"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_MANAGER_FLAGS_PITCH_LOCK"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_MANAGER_FLAGS_YAW_LOCK"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_GIMBAL_DEVICE_ERROR_FLAGS(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_ERROR_FLAGS_AT_ROLL_LIMIT"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_ERROR_FLAGS_AT_PITCH_LIMIT"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_ERROR_FLAGS_AT_YAW_LIMIT"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_ERROR_FLAGS_ENCODER_ERROR"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_ERROR_FLAGS_POWER_ERROR"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_ERROR_FLAGS_MOTOR_ERROR"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_ERROR_FLAGS_SOFTWARE_ERROR"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_ERROR_FLAGS_COMMS_ERROR"], tvbrange, value)
    tree:add_le(f[name .. "_flagGIMBAL_DEVICE_ERROR_FLAGS_CALIBRATION_RUNNING"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_AUTOTUNE_AXIS(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagAUTOTUNE_AXIS_ROLL"], tvbrange, value)
    tree:add_le(f[name .. "_flagAUTOTUNE_AXIS_PITCH"], tvbrange, value)
    tree:add_le(f[name .. "_flagAUTOTUNE_AXIS_YAW"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_MAV_POWER_STATUS(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_POWER_STATUS_BRICK_VALID"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_POWER_STATUS_SERVO_VALID"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_POWER_STATUS_USB_CONNECTED"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_POWER_STATUS_PERIPH_OVERCURRENT"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_POWER_STATUS_CHANGED"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_SERIAL_CONTROL_FLAG(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagSERIAL_CONTROL_FLAG_REPLY"], tvbrange, value)
    tree:add_le(f[name .. "_flagSERIAL_CONTROL_FLAG_RESPOND"], tvbrange, value)
    tree:add_le(f[name .. "_flagSERIAL_CONTROL_FLAG_EXCLUSIVE"], tvbrange, value)
    tree:add_le(f[name .. "_flagSERIAL_CONTROL_FLAG_BLOCKING"], tvbrange, value)
    tree:add_le(f[name .. "_flagSERIAL_CONTROL_FLAG_MULTI"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_MAV_PROTOCOL_CAPABILITY(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_MISSION_FLOAT"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_PARAM_FLOAT"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_MISSION_INT"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_COMMAND_INT"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_PARAM_UNION"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_FTP"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_TERRAIN"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_MAVLINK2"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_MISSION_FENCE"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_MISSION_RALLY"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_PROTOCOL_CAPABILITY_FLIGHT_INFORMATION"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_MAV_BATTERY_FAULT(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_BATTERY_FAULT_DEEP_DISCHARGE"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_BATTERY_FAULT_SPIKES"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_BATTERY_FAULT_CELL_FAIL"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_BATTERY_FAULT_OVER_CURRENT"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_BATTERY_FAULT_OVER_TEMPERATURE"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_BATTERY_FAULT_UNDER_TEMPERATURE"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_BATTERY_FAULT_INCOMPATIBLE_VOLTAGE"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_BATTERY_FAULT_INCOMPATIBLE_FIRMWARE"], tvbrange, value)
    tree:add_le(f[name .. "_flagBATTERY_FAULT_INCOMPATIBLE_CELLS_CONFIGURATION"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_MAV_GENERATOR_STATUS_FLAG(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_OFF"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_READY"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_GENERATING"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_CHARGING"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_REDUCED_POWER"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_MAXPOWER"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_OVERTEMP_WARNING"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_OVERTEMP_FAULT"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_WARNING"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_ELECTRONICS_OVERTEMP_FAULT"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_ELECTRONICS_FAULT"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_POWERSOURCE_FAULT"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_COMMUNICATION_WARNING"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_COOLING_WARNING"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_POWER_RAIL_FAULT"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_OVERCURRENT_FAULT"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_BATTERY_OVERCHARGE_CURRENT_FAULT"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_OVERVOLTAGE_FAULT"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_BATTERY_UNDERVOLT_FAULT"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_START_INHIBITED"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_MAINTENANCE_REQUIRED"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_WARMING_UP"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_GENERATOR_STATUS_FLAG_IDLE"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_ADSB_FLAGS(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagADSB_FLAGS_VALID_COORDS"], tvbrange, value)
    tree:add_le(f[name .. "_flagADSB_FLAGS_VALID_ALTITUDE"], tvbrange, value)
    tree:add_le(f[name .. "_flagADSB_FLAGS_VALID_HEADING"], tvbrange, value)
    tree:add_le(f[name .. "_flagADSB_FLAGS_VALID_VELOCITY"], tvbrange, value)
    tree:add_le(f[name .. "_flagADSB_FLAGS_VALID_CALLSIGN"], tvbrange, value)
    tree:add_le(f[name .. "_flagADSB_FLAGS_VALID_SQUAWK"], tvbrange, value)
    tree:add_le(f[name .. "_flagADSB_FLAGS_SIMULATED"], tvbrange, value)
    tree:add_le(f[name .. "_flagADSB_FLAGS_VERTICAL_VELOCITY_VALID"], tvbrange, value)
    tree:add_le(f[name .. "_flagADSB_FLAGS_BARO_VALID"], tvbrange, value)
    tree:add_le(f[name .. "_flagADSB_FLAGS_SOURCE_UAT"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_MAV_DO_REPOSITION_FLAGS(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_DO_REPOSITION_FLAGS_CHANGE_MODE"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_DO_REPOSITION_FLAGS_ENUM_END"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_ESTIMATOR_STATUS_FLAGS(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagESTIMATOR_ATTITUDE"], tvbrange, value)
    tree:add_le(f[name .. "_flagESTIMATOR_VELOCITY_HORIZ"], tvbrange, value)
    tree:add_le(f[name .. "_flagESTIMATOR_VELOCITY_VERT"], tvbrange, value)
    tree:add_le(f[name .. "_flagESTIMATOR_POS_HORIZ_REL"], tvbrange, value)
    tree:add_le(f[name .. "_flagESTIMATOR_POS_HORIZ_ABS"], tvbrange, value)
    tree:add_le(f[name .. "_flagESTIMATOR_POS_VERT_ABS"], tvbrange, value)
    tree:add_le(f[name .. "_flagESTIMATOR_POS_VERT_AGL"], tvbrange, value)
    tree:add_le(f[name .. "_flagESTIMATOR_CONST_POS_MODE"], tvbrange, value)
    tree:add_le(f[name .. "_flagESTIMATOR_PRED_POS_HORIZ_REL"], tvbrange, value)
    tree:add_le(f[name .. "_flagESTIMATOR_PRED_POS_HORIZ_ABS"], tvbrange, value)
    tree:add_le(f[name .. "_flagESTIMATOR_GPS_GLITCH"], tvbrange, value)
    tree:add_le(f[name .. "_flagESTIMATOR_ACCEL_ERROR"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_GPS_INPUT_IGNORE_FLAGS(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagGPS_INPUT_IGNORE_FLAG_ALT"], tvbrange, value)
    tree:add_le(f[name .. "_flagGPS_INPUT_IGNORE_FLAG_HDOP"], tvbrange, value)
    tree:add_le(f[name .. "_flagGPS_INPUT_IGNORE_FLAG_VDOP"], tvbrange, value)
    tree:add_le(f[name .. "_flagGPS_INPUT_IGNORE_FLAG_VEL_HORIZ"], tvbrange, value)
    tree:add_le(f[name .. "_flagGPS_INPUT_IGNORE_FLAG_VEL_VERT"], tvbrange, value)
    tree:add_le(f[name .. "_flagGPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY"], tvbrange, value)
    tree:add_le(f[name .. "_flagGPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY"], tvbrange, value)
    tree:add_le(f[name .. "_flagGPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_CAMERA_CAP_FLAGS(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagCAMERA_CAP_FLAGS_CAPTURE_VIDEO"], tvbrange, value)
    tree:add_le(f[name .. "_flagCAMERA_CAP_FLAGS_CAPTURE_IMAGE"], tvbrange, value)
    tree:add_le(f[name .. "_flagCAMERA_CAP_FLAGS_HAS_MODES"], tvbrange, value)
    tree:add_le(f[name .. "_flagCAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE"], tvbrange, value)
    tree:add_le(f[name .. "_flagCAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE"], tvbrange, value)
    tree:add_le(f[name .. "_flagCAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE"], tvbrange, value)
    tree:add_le(f[name .. "_flagCAMERA_CAP_FLAGS_HAS_BASIC_ZOOM"], tvbrange, value)
    tree:add_le(f[name .. "_flagCAMERA_CAP_FLAGS_HAS_BASIC_FOCUS"], tvbrange, value)
    tree:add_le(f[name .. "_flagCAMERA_CAP_FLAGS_HAS_VIDEO_STREAM"], tvbrange, value)
    tree:add_le(f[name .. "_flagCAMERA_CAP_FLAGS_HAS_TRACKING_POINT"], tvbrange, value)
    tree:add_le(f[name .. "_flagCAMERA_CAP_FLAGS_HAS_TRACKING_RECTANGLE"], tvbrange, value)
    tree:add_le(f[name .. "_flagCAMERA_CAP_FLAGS_HAS_TRACKING_GEO_STATUS"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_VIDEO_STREAM_STATUS_FLAGS(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagVIDEO_STREAM_STATUS_FLAGS_RUNNING"], tvbrange, value)
    tree:add_le(f[name .. "_flagVIDEO_STREAM_STATUS_FLAGS_THERMAL"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_CAMERA_TRACKING_TARGET_DATA(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagCAMERA_TRACKING_TARGET_DATA_EMBEDDED"], tvbrange, value)
    tree:add_le(f[name .. "_flagCAMERA_TRACKING_TARGET_DATA_RENDERED"], tvbrange, value)
    tree:add_le(f[name .. "_flagCAMERA_TRACKING_TARGET_DATA_IN_STATUS"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_POSITION_TARGET_TYPEMASK(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagPOSITION_TARGET_TYPEMASK_X_IGNORE"], tvbrange, value)
    tree:add_le(f[name .. "_flagPOSITION_TARGET_TYPEMASK_Y_IGNORE"], tvbrange, value)
    tree:add_le(f[name .. "_flagPOSITION_TARGET_TYPEMASK_Z_IGNORE"], tvbrange, value)
    tree:add_le(f[name .. "_flagPOSITION_TARGET_TYPEMASK_VX_IGNORE"], tvbrange, value)
    tree:add_le(f[name .. "_flagPOSITION_TARGET_TYPEMASK_VY_IGNORE"], tvbrange, value)
    tree:add_le(f[name .. "_flagPOSITION_TARGET_TYPEMASK_VZ_IGNORE"], tvbrange, value)
    tree:add_le(f[name .. "_flagPOSITION_TARGET_TYPEMASK_AX_IGNORE"], tvbrange, value)
    tree:add_le(f[name .. "_flagPOSITION_TARGET_TYPEMASK_AY_IGNORE"], tvbrange, value)
    tree:add_le(f[name .. "_flagPOSITION_TARGET_TYPEMASK_AZ_IGNORE"], tvbrange, value)
    tree:add_le(f[name .. "_flagPOSITION_TARGET_TYPEMASK_FORCE_SET"], tvbrange, value)
    tree:add_le(f[name .. "_flagPOSITION_TARGET_TYPEMASK_YAW_IGNORE"], tvbrange, value)
    tree:add_le(f[name .. "_flagPOSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_ATTITUDE_TARGET_TYPEMASK(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagATTITUDE_TARGET_TYPEMASK_BODY_ROLL_RATE_IGNORE"], tvbrange, value)
    tree:add_le(f[name .. "_flagATTITUDE_TARGET_TYPEMASK_BODY_PITCH_RATE_IGNORE"], tvbrange, value)
    tree:add_le(f[name .. "_flagATTITUDE_TARGET_TYPEMASK_BODY_YAW_RATE_IGNORE"], tvbrange, value)
    tree:add_le(f[name .. "_flagATTITUDE_TARGET_TYPEMASK_THROTTLE_IGNORE"], tvbrange, value)
    tree:add_le(f[name .. "_flagATTITUDE_TARGET_TYPEMASK_ATTITUDE_IGNORE"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_UTM_DATA_AVAIL_FLAGS(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagUTM_DATA_AVAIL_FLAGS_TIME_VALID"], tvbrange, value)
    tree:add_le(f[name .. "_flagUTM_DATA_AVAIL_FLAGS_UAS_ID_AVAILABLE"], tvbrange, value)
    tree:add_le(f[name .. "_flagUTM_DATA_AVAIL_FLAGS_POSITION_AVAILABLE"], tvbrange, value)
    tree:add_le(f[name .. "_flagUTM_DATA_AVAIL_FLAGS_ALTITUDE_AVAILABLE"], tvbrange, value)
    tree:add_le(f[name .. "_flagUTM_DATA_AVAIL_FLAGS_RELATIVE_ALTITUDE_AVAILABLE"], tvbrange, value)
    tree:add_le(f[name .. "_flagUTM_DATA_AVAIL_FLAGS_HORIZONTAL_VELO_AVAILABLE"], tvbrange, value)
    tree:add_le(f[name .. "_flagUTM_DATA_AVAIL_FLAGS_VERTICAL_VELO_AVAILABLE"], tvbrange, value)
    tree:add_le(f[name .. "_flagUTM_DATA_AVAIL_FLAGS_NEXT_WAYPOINT_AVAILABLE"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_AIS_FLAGS(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagAIS_FLAGS_POSITION_ACCURACY"], tvbrange, value)
    tree:add_le(f[name .. "_flagAIS_FLAGS_VALID_COG"], tvbrange, value)
    tree:add_le(f[name .. "_flagAIS_FLAGS_VALID_VELOCITY"], tvbrange, value)
    tree:add_le(f[name .. "_flagAIS_FLAGS_HIGH_VELOCITY"], tvbrange, value)
    tree:add_le(f[name .. "_flagAIS_FLAGS_VALID_TURN_RATE"], tvbrange, value)
    tree:add_le(f[name .. "_flagAIS_FLAGS_TURN_RATE_SIGN_ONLY"], tvbrange, value)
    tree:add_le(f[name .. "_flagAIS_FLAGS_VALID_DIMENSIONS"], tvbrange, value)
    tree:add_le(f[name .. "_flagAIS_FLAGS_LARGE_BOW_DIMENSION"], tvbrange, value)
    tree:add_le(f[name .. "_flagAIS_FLAGS_LARGE_STERN_DIMENSION"], tvbrange, value)
    tree:add_le(f[name .. "_flagAIS_FLAGS_LARGE_PORT_DIMENSION"], tvbrange, value)
    tree:add_le(f[name .. "_flagAIS_FLAGS_LARGE_STARBOARD_DIMENSION"], tvbrange, value)
    tree:add_le(f[name .. "_flagAIS_FLAGS_VALID_CALLSIGN"], tvbrange, value)
    tree:add_le(f[name .. "_flagAIS_FLAGS_VALID_NAME"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_MAV_WINCH_STATUS_FLAG(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_WINCH_STATUS_HEALTHY"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_WINCH_STATUS_FULLY_RETRACTED"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_WINCH_STATUS_MOVING"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_WINCH_STATUS_CLUTCH_ENGAGED"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_UAVIONIX_ADSB_OUT_DYNAMIC_STATE(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_DYNAMIC_STATE_INTENT_CHANGE"], tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_DYNAMIC_STATE_AUTOPILOT_ENABLED"], tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_DYNAMIC_STATE_NICBARO_CROSSCHECKED"], tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_DYNAMIC_STATE_ON_GROUND"], tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_DYNAMIC_STATE_IDENT"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_UAVIONIX_ADSB_OUT_RF_SELECT(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_RF_SELECT_RX_ENABLED"], tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_RF_SELECT_TX_ENABLED"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_UAVIONIX_ADSB_RF_HEALTH(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_RF_HEALTH_OK"], tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_RF_HEALTH_FAIL_TX"], tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_RF_HEALTH_FAIL_RX"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_UAVIONIX_ADSB_OUT_CONTROL_STATE(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_CONTROL_STATE_EXTERNAL_BARO_CROSSCHECKED"], tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_CONTROL_STATE_ON_GROUND"], tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_CONTROL_STATE_IDENT_BUTTON_ACTIVE"], tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_CONTROL_STATE_MODE_A_ENABLED"], tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_CONTROL_STATE_MODE_C_ENABLED"], tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_CONTROL_STATE_MODE_S_ENABLED"], tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_CONTROL_STATE_1090ES_TX_ENABLED"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_UAVIONIX_ADSB_XBIT(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_XBIT_ENABLED"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_UAVIONIX_ADSB_OUT_STATUS_STATE(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_STATUS_STATE_ON_GROUND"], tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_STATUS_STATE_INTERROGATED_SINCE_LAST"], tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_STATUS_STATE_XBIT_ENABLED"], tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_STATUS_STATE_IDENT_ACTIVE"], tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_STATUS_STATE_MODE_A_ENABLED"], tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_STATUS_STATE_MODE_C_ENABLED"], tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_STATUS_STATE_MODE_S_ENABLED"], tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_STATUS_STATE_1090ES_TX_ENABLED"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_UAVIONIX_ADSB_OUT_STATUS_FAULT(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_STATUS_FAULT_STATUS_MESSAGE_UNAVAIL"], tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_STATUS_FAULT_GPS_NO_POS"], tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_STATUS_FAULT_GPS_UNAVAIL"], tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_STATUS_FAULT_TX_SYSTEM_FAIL"], tvbrange, value)
    tree:add_le(f[name .. "_flagUAVIONIX_ADSB_OUT_STATUS_FAULT_MAINT_REQ"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_MAV_MODE_FLAG(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_MODE_FLAG_CUSTOM_MODE_ENABLED"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_MODE_FLAG_TEST_ENABLED"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_MODE_FLAG_AUTO_ENABLED"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_MODE_FLAG_GUIDED_ENABLED"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_MODE_FLAG_STABILIZE_ENABLED"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_MODE_FLAG_HIL_ENABLED"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_MODE_FLAG_MANUAL_INPUT_ENABLED"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_MODE_FLAG_SAFETY_ARMED"], tvbrange, value)
end
-- dissect flag field
function dissect_flags_MAV_MODE_FLAG_DECODE_POSITION(tree, name, tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_MODE_FLAG_DECODE_POSITION_CUSTOM_MODE"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_MODE_FLAG_DECODE_POSITION_TEST"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_MODE_FLAG_DECODE_POSITION_AUTO"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_MODE_FLAG_DECODE_POSITION_GUIDED"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_MODE_FLAG_DECODE_POSITION_STABILIZE"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_MODE_FLAG_DECODE_POSITION_HIL"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_MODE_FLAG_DECODE_POSITION_MANUAL"], tvbrange, value)
    tree:add_le(f[name .. "_flagMAV_MODE_FLAG_DECODE_POSITION_SAFETY"], tvbrange, value)
end
-- dissect payload of message type SENSOR_OFFSETS
function payload_fns.payload_150(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 42 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 42)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 36, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SENSOR_OFFSETS_mag_ofs_x, tvbrange, value)
    tvbrange = padded(offset + 38, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SENSOR_OFFSETS_mag_ofs_y, tvbrange, value)
    tvbrange = padded(offset + 40, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SENSOR_OFFSETS_mag_ofs_z, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SENSOR_OFFSETS_mag_declination, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SENSOR_OFFSETS_raw_press, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SENSOR_OFFSETS_raw_temp, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SENSOR_OFFSETS_gyro_cal_x, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SENSOR_OFFSETS_gyro_cal_y, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SENSOR_OFFSETS_gyro_cal_z, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SENSOR_OFFSETS_accel_cal_x, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SENSOR_OFFSETS_accel_cal_y, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SENSOR_OFFSETS_accel_cal_z, tvbrange, value)
end
-- dissect payload of message type SET_MAG_OFFSETS
function payload_fns.payload_151(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 8 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 8)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SET_MAG_OFFSETS_target_system, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SET_MAG_OFFSETS_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SET_MAG_OFFSETS_mag_ofs_x, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SET_MAG_OFFSETS_mag_ofs_y, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SET_MAG_OFFSETS_mag_ofs_z, tvbrange, value)
end
-- dissect payload of message type MEMINFO
function payload_fns.payload_152(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 8 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 8)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MEMINFO_brkval, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MEMINFO_freemem, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MEMINFO_freemem32, tvbrange, value)
end
-- dissect payload of message type AP_ADC
function payload_fns.payload_153(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 12 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 12)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AP_ADC_adc1, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AP_ADC_adc2, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AP_ADC_adc3, tvbrange, value)
    tvbrange = padded(offset + 6, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AP_ADC_adc4, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AP_ADC_adc5, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AP_ADC_adc6, tvbrange, value)
end
-- dissect payload of message type DIGICAM_CONFIGURE
function payload_fns.payload_154(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 15 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 15)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DIGICAM_CONFIGURE_target_system, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DIGICAM_CONFIGURE_target_component, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DIGICAM_CONFIGURE_mode, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DIGICAM_CONFIGURE_shutter_speed, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DIGICAM_CONFIGURE_aperture, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DIGICAM_CONFIGURE_iso, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DIGICAM_CONFIGURE_exposure_type, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DIGICAM_CONFIGURE_command_id, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DIGICAM_CONFIGURE_engine_cut_off, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DIGICAM_CONFIGURE_extra_param, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DIGICAM_CONFIGURE_extra_value, tvbrange, value)
end
-- dissect payload of message type DIGICAM_CONTROL
function payload_fns.payload_155(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 13 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 13)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DIGICAM_CONTROL_target_system, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DIGICAM_CONTROL_target_component, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DIGICAM_CONTROL_session, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DIGICAM_CONTROL_zoom_pos, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.DIGICAM_CONTROL_zoom_step, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DIGICAM_CONTROL_focus_lock, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DIGICAM_CONTROL_shot, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DIGICAM_CONTROL_command_id, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DIGICAM_CONTROL_extra_param, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DIGICAM_CONTROL_extra_value, tvbrange, value)
end
-- dissect payload of message type MOUNT_CONFIGURE
function payload_fns.payload_156(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 6 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 6)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MOUNT_CONFIGURE_target_system, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MOUNT_CONFIGURE_target_component, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MOUNT_CONFIGURE_mount_mode, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MOUNT_CONFIGURE_stab_roll, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MOUNT_CONFIGURE_stab_pitch, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MOUNT_CONFIGURE_stab_yaw, tvbrange, value)
end
-- dissect payload of message type MOUNT_CONTROL
function payload_fns.payload_157(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 15 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 15)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MOUNT_CONTROL_target_system, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MOUNT_CONTROL_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MOUNT_CONTROL_input_a, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MOUNT_CONTROL_input_b, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MOUNT_CONTROL_input_c, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MOUNT_CONTROL_save_position, tvbrange, value)
end
-- dissect payload of message type MOUNT_STATUS
function payload_fns.payload_158(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 15 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 15)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MOUNT_STATUS_target_system, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MOUNT_STATUS_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MOUNT_STATUS_pointing_a, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MOUNT_STATUS_pointing_b, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MOUNT_STATUS_pointing_c, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MOUNT_STATUS_mount_mode, tvbrange, value)
end
-- dissect payload of message type FENCE_POINT
function payload_fns.payload_160(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 12 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 12)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FENCE_POINT_target_system, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FENCE_POINT_target_component, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FENCE_POINT_idx, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FENCE_POINT_count, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.FENCE_POINT_lat, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.FENCE_POINT_lng, tvbrange, value)
end
-- dissect payload of message type FENCE_FETCH_POINT
function payload_fns.payload_161(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 3 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 3)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FENCE_FETCH_POINT_target_system, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FENCE_FETCH_POINT_target_component, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FENCE_FETCH_POINT_idx, tvbrange, value)
end
-- dissect payload of message type AHRS
function payload_fns.payload_163(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 28 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 28)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AHRS_omegaIx, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AHRS_omegaIy, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AHRS_omegaIz, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AHRS_accel_weight, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AHRS_renorm_val, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AHRS_error_rp, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AHRS_error_yaw, tvbrange, value)
end
-- dissect payload of message type SIMSTATE
function payload_fns.payload_164(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 44 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 44)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIMSTATE_roll, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIMSTATE_pitch, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIMSTATE_yaw, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIMSTATE_xacc, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIMSTATE_yacc, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIMSTATE_zacc, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIMSTATE_xgyro, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIMSTATE_ygyro, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIMSTATE_zgyro, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SIMSTATE_lat, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SIMSTATE_lng, tvbrange, value)
end
-- dissect payload of message type HWSTATUS
function payload_fns.payload_165(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 3 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 3)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HWSTATUS_Vcc, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HWSTATUS_I2Cerr, tvbrange, value)
end
-- dissect payload of message type RADIO
function payload_fns.payload_166(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 9 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 9)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RADIO_rssi, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RADIO_remrssi, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RADIO_txbuf, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RADIO_noise, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RADIO_remnoise, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RADIO_rxerrors, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RADIO_fixed, tvbrange, value)
end
-- dissect payload of message type LIMITS_STATUS
function payload_fns.payload_167(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 22 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 22)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LIMITS_STATUS_limits_state, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LIMITS_STATUS_last_trigger, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LIMITS_STATUS_last_action, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LIMITS_STATUS_last_recovery, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LIMITS_STATUS_last_clear, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LIMITS_STATUS_breach_count, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LIMITS_STATUS_mods_enabled, tvbrange, value)
    dissect_flags_LIMIT_MODULE(subtree, "LIMITS_STATUS_mods_enabled", tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LIMITS_STATUS_mods_required, tvbrange, value)
    dissect_flags_LIMIT_MODULE(subtree, "LIMITS_STATUS_mods_required", tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LIMITS_STATUS_mods_triggered, tvbrange, value)
    dissect_flags_LIMIT_MODULE(subtree, "LIMITS_STATUS_mods_triggered", tvbrange, value)
end
-- dissect payload of message type WIND
function payload_fns.payload_168(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 12 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 12)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.WIND_direction, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.WIND_speed, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.WIND_speed_z, tvbrange, value)
end
-- dissect payload of message type DATA16
function payload_fns.payload_169(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 18 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 18)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA16_type, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA16_len, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA16_data_0, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA16_data_1, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA16_data_2, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA16_data_3, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA16_data_4, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA16_data_5, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA16_data_6, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA16_data_7, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA16_data_8, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA16_data_9, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA16_data_10, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA16_data_11, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA16_data_12, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA16_data_13, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA16_data_14, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA16_data_15, tvbrange, value)
end
-- dissect payload of message type DATA32
function payload_fns.payload_170(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 34 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 34)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_type, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_len, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_0, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_1, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_2, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_3, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_4, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_5, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_6, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_7, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_8, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_9, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_10, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_11, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_12, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_13, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_14, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_15, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_16, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_17, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_18, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_19, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_20, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_21, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_22, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_23, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_24, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_25, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_26, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_27, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_28, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_29, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_30, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA32_data_31, tvbrange, value)
end
-- dissect payload of message type DATA64
function payload_fns.payload_171(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 66 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 66)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_type, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_len, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_0, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_1, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_2, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_3, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_4, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_5, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_6, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_7, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_8, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_9, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_10, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_11, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_12, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_13, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_14, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_15, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_16, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_17, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_18, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_19, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_20, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_21, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_22, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_23, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_24, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_25, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_26, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_27, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_28, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_29, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_30, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_31, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_32, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_33, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_34, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_35, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_36, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_37, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_38, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_39, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_40, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_41, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_42, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_43, tvbrange, value)
    tvbrange = padded(offset + 46, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_44, tvbrange, value)
    tvbrange = padded(offset + 47, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_45, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_46, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_47, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_48, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_49, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_50, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_51, tvbrange, value)
    tvbrange = padded(offset + 54, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_52, tvbrange, value)
    tvbrange = padded(offset + 55, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_53, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_54, tvbrange, value)
    tvbrange = padded(offset + 57, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_55, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_56, tvbrange, value)
    tvbrange = padded(offset + 59, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_57, tvbrange, value)
    tvbrange = padded(offset + 60, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_58, tvbrange, value)
    tvbrange = padded(offset + 61, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_59, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_60, tvbrange, value)
    tvbrange = padded(offset + 63, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_61, tvbrange, value)
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_62, tvbrange, value)
    tvbrange = padded(offset + 65, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA64_data_63, tvbrange, value)
end
-- dissect payload of message type DATA96
function payload_fns.payload_172(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 98 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 98)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_type, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_len, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_0, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_1, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_2, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_3, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_4, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_5, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_6, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_7, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_8, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_9, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_10, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_11, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_12, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_13, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_14, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_15, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_16, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_17, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_18, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_19, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_20, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_21, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_22, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_23, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_24, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_25, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_26, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_27, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_28, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_29, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_30, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_31, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_32, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_33, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_34, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_35, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_36, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_37, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_38, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_39, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_40, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_41, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_42, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_43, tvbrange, value)
    tvbrange = padded(offset + 46, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_44, tvbrange, value)
    tvbrange = padded(offset + 47, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_45, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_46, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_47, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_48, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_49, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_50, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_51, tvbrange, value)
    tvbrange = padded(offset + 54, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_52, tvbrange, value)
    tvbrange = padded(offset + 55, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_53, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_54, tvbrange, value)
    tvbrange = padded(offset + 57, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_55, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_56, tvbrange, value)
    tvbrange = padded(offset + 59, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_57, tvbrange, value)
    tvbrange = padded(offset + 60, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_58, tvbrange, value)
    tvbrange = padded(offset + 61, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_59, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_60, tvbrange, value)
    tvbrange = padded(offset + 63, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_61, tvbrange, value)
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_62, tvbrange, value)
    tvbrange = padded(offset + 65, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_63, tvbrange, value)
    tvbrange = padded(offset + 66, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_64, tvbrange, value)
    tvbrange = padded(offset + 67, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_65, tvbrange, value)
    tvbrange = padded(offset + 68, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_66, tvbrange, value)
    tvbrange = padded(offset + 69, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_67, tvbrange, value)
    tvbrange = padded(offset + 70, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_68, tvbrange, value)
    tvbrange = padded(offset + 71, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_69, tvbrange, value)
    tvbrange = padded(offset + 72, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_70, tvbrange, value)
    tvbrange = padded(offset + 73, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_71, tvbrange, value)
    tvbrange = padded(offset + 74, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_72, tvbrange, value)
    tvbrange = padded(offset + 75, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_73, tvbrange, value)
    tvbrange = padded(offset + 76, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_74, tvbrange, value)
    tvbrange = padded(offset + 77, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_75, tvbrange, value)
    tvbrange = padded(offset + 78, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_76, tvbrange, value)
    tvbrange = padded(offset + 79, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_77, tvbrange, value)
    tvbrange = padded(offset + 80, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_78, tvbrange, value)
    tvbrange = padded(offset + 81, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_79, tvbrange, value)
    tvbrange = padded(offset + 82, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_80, tvbrange, value)
    tvbrange = padded(offset + 83, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_81, tvbrange, value)
    tvbrange = padded(offset + 84, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_82, tvbrange, value)
    tvbrange = padded(offset + 85, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_83, tvbrange, value)
    tvbrange = padded(offset + 86, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_84, tvbrange, value)
    tvbrange = padded(offset + 87, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_85, tvbrange, value)
    tvbrange = padded(offset + 88, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_86, tvbrange, value)
    tvbrange = padded(offset + 89, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_87, tvbrange, value)
    tvbrange = padded(offset + 90, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_88, tvbrange, value)
    tvbrange = padded(offset + 91, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_89, tvbrange, value)
    tvbrange = padded(offset + 92, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_90, tvbrange, value)
    tvbrange = padded(offset + 93, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_91, tvbrange, value)
    tvbrange = padded(offset + 94, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_92, tvbrange, value)
    tvbrange = padded(offset + 95, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_93, tvbrange, value)
    tvbrange = padded(offset + 96, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_94, tvbrange, value)
    tvbrange = padded(offset + 97, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA96_data_95, tvbrange, value)
end
-- dissect payload of message type RANGEFINDER
function payload_fns.payload_173(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 8 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 8)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.RANGEFINDER_distance, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.RANGEFINDER_voltage, tvbrange, value)
end
-- dissect payload of message type AIRSPEED_AUTOCAL
function payload_fns.payload_174(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 48 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 48)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AIRSPEED_AUTOCAL_vx, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AIRSPEED_AUTOCAL_vy, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AIRSPEED_AUTOCAL_vz, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AIRSPEED_AUTOCAL_diff_pressure, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AIRSPEED_AUTOCAL_EAS2TAS, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AIRSPEED_AUTOCAL_ratio, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AIRSPEED_AUTOCAL_state_x, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AIRSPEED_AUTOCAL_state_y, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AIRSPEED_AUTOCAL_state_z, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AIRSPEED_AUTOCAL_Pax, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AIRSPEED_AUTOCAL_Pby, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AIRSPEED_AUTOCAL_Pcz, tvbrange, value)
end
-- dissect payload of message type RALLY_POINT
function payload_fns.payload_175(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 19 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 19)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RALLY_POINT_target_system, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RALLY_POINT_target_component, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RALLY_POINT_idx, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RALLY_POINT_count, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RALLY_POINT_lat, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RALLY_POINT_lng, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RALLY_POINT_alt, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RALLY_POINT_break_alt, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RALLY_POINT_land_dir, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RALLY_POINT_flags, tvbrange, value)
    dissect_flags_RALLY_FLAGS(subtree, "RALLY_POINT_flags", tvbrange, value)
end
-- dissect payload of message type RALLY_FETCH_POINT
function payload_fns.payload_176(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 3 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 3)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RALLY_FETCH_POINT_target_system, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RALLY_FETCH_POINT_target_component, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RALLY_FETCH_POINT_idx, tvbrange, value)
end
-- dissect payload of message type COMPASSMOT_STATUS
function payload_fns.payload_177(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 20 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 20)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMPASSMOT_STATUS_throttle, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMPASSMOT_STATUS_current, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMPASSMOT_STATUS_interference, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMPASSMOT_STATUS_CompensationX, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMPASSMOT_STATUS_CompensationY, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMPASSMOT_STATUS_CompensationZ, tvbrange, value)
end
-- dissect payload of message type AHRS2
function payload_fns.payload_178(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 24 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 24)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AHRS2_roll, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AHRS2_pitch, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AHRS2_yaw, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AHRS2_altitude, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.AHRS2_lat, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.AHRS2_lng, tvbrange, value)
end
-- dissect payload of message type CAMERA_STATUS
function payload_fns.payload_179(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 29 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 29)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.CAMERA_STATUS_time_usec, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_STATUS_target_system, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_STATUS_cam_idx, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_STATUS_img_idx, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_STATUS_event_id, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_STATUS_p1, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_STATUS_p2, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_STATUS_p3, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_STATUS_p4, tvbrange, value)
end
-- dissect payload of message type CAMERA_FEEDBACK
function payload_fns.payload_180(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 47 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 47)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.CAMERA_FEEDBACK_time_usec, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_FEEDBACK_target_system, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_FEEDBACK_cam_idx, tvbrange, value)
    tvbrange = padded(offset + 40, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_FEEDBACK_img_idx, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.CAMERA_FEEDBACK_lat, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.CAMERA_FEEDBACK_lng, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_FEEDBACK_alt_msl, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_FEEDBACK_alt_rel, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_FEEDBACK_roll, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_FEEDBACK_pitch, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_FEEDBACK_yaw, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_FEEDBACK_foc_len, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_FEEDBACK_flags, tvbrange, value)
    tvbrange = padded(offset + 45, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_FEEDBACK_completed_captures, tvbrange, value)
end
-- dissect payload of message type BATTERY2
function payload_fns.payload_181(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 4 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 4)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.BATTERY2_voltage, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.BATTERY2_current_battery, tvbrange, value)
end
-- dissect payload of message type AHRS3
function payload_fns.payload_182(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 40 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 40)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AHRS3_roll, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AHRS3_pitch, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AHRS3_yaw, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AHRS3_altitude, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.AHRS3_lat, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.AHRS3_lng, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AHRS3_v1, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AHRS3_v2, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AHRS3_v3, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AHRS3_v4, tvbrange, value)
end
-- dissect payload of message type AUTOPILOT_VERSION_REQUEST
function payload_fns.payload_183(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 2 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 2)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_REQUEST_target_system, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_REQUEST_target_component, tvbrange, value)
end
-- dissect payload of message type REMOTE_LOG_DATA_BLOCK
function payload_fns.payload_184(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 206 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 206)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_target_system, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_seqno, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_0, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_1, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_2, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_3, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_4, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_5, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_6, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_7, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_8, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_9, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_10, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_11, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_12, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_13, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_14, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_15, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_16, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_17, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_18, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_19, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_20, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_21, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_22, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_23, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_24, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_25, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_26, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_27, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_28, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_29, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_30, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_31, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_32, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_33, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_34, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_35, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_36, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_37, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_38, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_39, tvbrange, value)
    tvbrange = padded(offset + 46, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_40, tvbrange, value)
    tvbrange = padded(offset + 47, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_41, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_42, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_43, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_44, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_45, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_46, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_47, tvbrange, value)
    tvbrange = padded(offset + 54, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_48, tvbrange, value)
    tvbrange = padded(offset + 55, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_49, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_50, tvbrange, value)
    tvbrange = padded(offset + 57, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_51, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_52, tvbrange, value)
    tvbrange = padded(offset + 59, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_53, tvbrange, value)
    tvbrange = padded(offset + 60, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_54, tvbrange, value)
    tvbrange = padded(offset + 61, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_55, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_56, tvbrange, value)
    tvbrange = padded(offset + 63, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_57, tvbrange, value)
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_58, tvbrange, value)
    tvbrange = padded(offset + 65, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_59, tvbrange, value)
    tvbrange = padded(offset + 66, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_60, tvbrange, value)
    tvbrange = padded(offset + 67, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_61, tvbrange, value)
    tvbrange = padded(offset + 68, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_62, tvbrange, value)
    tvbrange = padded(offset + 69, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_63, tvbrange, value)
    tvbrange = padded(offset + 70, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_64, tvbrange, value)
    tvbrange = padded(offset + 71, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_65, tvbrange, value)
    tvbrange = padded(offset + 72, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_66, tvbrange, value)
    tvbrange = padded(offset + 73, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_67, tvbrange, value)
    tvbrange = padded(offset + 74, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_68, tvbrange, value)
    tvbrange = padded(offset + 75, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_69, tvbrange, value)
    tvbrange = padded(offset + 76, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_70, tvbrange, value)
    tvbrange = padded(offset + 77, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_71, tvbrange, value)
    tvbrange = padded(offset + 78, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_72, tvbrange, value)
    tvbrange = padded(offset + 79, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_73, tvbrange, value)
    tvbrange = padded(offset + 80, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_74, tvbrange, value)
    tvbrange = padded(offset + 81, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_75, tvbrange, value)
    tvbrange = padded(offset + 82, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_76, tvbrange, value)
    tvbrange = padded(offset + 83, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_77, tvbrange, value)
    tvbrange = padded(offset + 84, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_78, tvbrange, value)
    tvbrange = padded(offset + 85, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_79, tvbrange, value)
    tvbrange = padded(offset + 86, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_80, tvbrange, value)
    tvbrange = padded(offset + 87, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_81, tvbrange, value)
    tvbrange = padded(offset + 88, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_82, tvbrange, value)
    tvbrange = padded(offset + 89, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_83, tvbrange, value)
    tvbrange = padded(offset + 90, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_84, tvbrange, value)
    tvbrange = padded(offset + 91, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_85, tvbrange, value)
    tvbrange = padded(offset + 92, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_86, tvbrange, value)
    tvbrange = padded(offset + 93, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_87, tvbrange, value)
    tvbrange = padded(offset + 94, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_88, tvbrange, value)
    tvbrange = padded(offset + 95, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_89, tvbrange, value)
    tvbrange = padded(offset + 96, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_90, tvbrange, value)
    tvbrange = padded(offset + 97, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_91, tvbrange, value)
    tvbrange = padded(offset + 98, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_92, tvbrange, value)
    tvbrange = padded(offset + 99, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_93, tvbrange, value)
    tvbrange = padded(offset + 100, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_94, tvbrange, value)
    tvbrange = padded(offset + 101, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_95, tvbrange, value)
    tvbrange = padded(offset + 102, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_96, tvbrange, value)
    tvbrange = padded(offset + 103, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_97, tvbrange, value)
    tvbrange = padded(offset + 104, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_98, tvbrange, value)
    tvbrange = padded(offset + 105, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_99, tvbrange, value)
    tvbrange = padded(offset + 106, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_100, tvbrange, value)
    tvbrange = padded(offset + 107, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_101, tvbrange, value)
    tvbrange = padded(offset + 108, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_102, tvbrange, value)
    tvbrange = padded(offset + 109, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_103, tvbrange, value)
    tvbrange = padded(offset + 110, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_104, tvbrange, value)
    tvbrange = padded(offset + 111, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_105, tvbrange, value)
    tvbrange = padded(offset + 112, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_106, tvbrange, value)
    tvbrange = padded(offset + 113, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_107, tvbrange, value)
    tvbrange = padded(offset + 114, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_108, tvbrange, value)
    tvbrange = padded(offset + 115, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_109, tvbrange, value)
    tvbrange = padded(offset + 116, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_110, tvbrange, value)
    tvbrange = padded(offset + 117, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_111, tvbrange, value)
    tvbrange = padded(offset + 118, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_112, tvbrange, value)
    tvbrange = padded(offset + 119, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_113, tvbrange, value)
    tvbrange = padded(offset + 120, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_114, tvbrange, value)
    tvbrange = padded(offset + 121, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_115, tvbrange, value)
    tvbrange = padded(offset + 122, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_116, tvbrange, value)
    tvbrange = padded(offset + 123, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_117, tvbrange, value)
    tvbrange = padded(offset + 124, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_118, tvbrange, value)
    tvbrange = padded(offset + 125, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_119, tvbrange, value)
    tvbrange = padded(offset + 126, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_120, tvbrange, value)
    tvbrange = padded(offset + 127, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_121, tvbrange, value)
    tvbrange = padded(offset + 128, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_122, tvbrange, value)
    tvbrange = padded(offset + 129, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_123, tvbrange, value)
    tvbrange = padded(offset + 130, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_124, tvbrange, value)
    tvbrange = padded(offset + 131, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_125, tvbrange, value)
    tvbrange = padded(offset + 132, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_126, tvbrange, value)
    tvbrange = padded(offset + 133, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_127, tvbrange, value)
    tvbrange = padded(offset + 134, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_128, tvbrange, value)
    tvbrange = padded(offset + 135, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_129, tvbrange, value)
    tvbrange = padded(offset + 136, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_130, tvbrange, value)
    tvbrange = padded(offset + 137, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_131, tvbrange, value)
    tvbrange = padded(offset + 138, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_132, tvbrange, value)
    tvbrange = padded(offset + 139, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_133, tvbrange, value)
    tvbrange = padded(offset + 140, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_134, tvbrange, value)
    tvbrange = padded(offset + 141, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_135, tvbrange, value)
    tvbrange = padded(offset + 142, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_136, tvbrange, value)
    tvbrange = padded(offset + 143, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_137, tvbrange, value)
    tvbrange = padded(offset + 144, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_138, tvbrange, value)
    tvbrange = padded(offset + 145, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_139, tvbrange, value)
    tvbrange = padded(offset + 146, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_140, tvbrange, value)
    tvbrange = padded(offset + 147, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_141, tvbrange, value)
    tvbrange = padded(offset + 148, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_142, tvbrange, value)
    tvbrange = padded(offset + 149, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_143, tvbrange, value)
    tvbrange = padded(offset + 150, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_144, tvbrange, value)
    tvbrange = padded(offset + 151, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_145, tvbrange, value)
    tvbrange = padded(offset + 152, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_146, tvbrange, value)
    tvbrange = padded(offset + 153, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_147, tvbrange, value)
    tvbrange = padded(offset + 154, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_148, tvbrange, value)
    tvbrange = padded(offset + 155, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_149, tvbrange, value)
    tvbrange = padded(offset + 156, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_150, tvbrange, value)
    tvbrange = padded(offset + 157, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_151, tvbrange, value)
    tvbrange = padded(offset + 158, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_152, tvbrange, value)
    tvbrange = padded(offset + 159, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_153, tvbrange, value)
    tvbrange = padded(offset + 160, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_154, tvbrange, value)
    tvbrange = padded(offset + 161, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_155, tvbrange, value)
    tvbrange = padded(offset + 162, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_156, tvbrange, value)
    tvbrange = padded(offset + 163, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_157, tvbrange, value)
    tvbrange = padded(offset + 164, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_158, tvbrange, value)
    tvbrange = padded(offset + 165, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_159, tvbrange, value)
    tvbrange = padded(offset + 166, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_160, tvbrange, value)
    tvbrange = padded(offset + 167, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_161, tvbrange, value)
    tvbrange = padded(offset + 168, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_162, tvbrange, value)
    tvbrange = padded(offset + 169, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_163, tvbrange, value)
    tvbrange = padded(offset + 170, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_164, tvbrange, value)
    tvbrange = padded(offset + 171, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_165, tvbrange, value)
    tvbrange = padded(offset + 172, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_166, tvbrange, value)
    tvbrange = padded(offset + 173, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_167, tvbrange, value)
    tvbrange = padded(offset + 174, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_168, tvbrange, value)
    tvbrange = padded(offset + 175, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_169, tvbrange, value)
    tvbrange = padded(offset + 176, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_170, tvbrange, value)
    tvbrange = padded(offset + 177, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_171, tvbrange, value)
    tvbrange = padded(offset + 178, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_172, tvbrange, value)
    tvbrange = padded(offset + 179, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_173, tvbrange, value)
    tvbrange = padded(offset + 180, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_174, tvbrange, value)
    tvbrange = padded(offset + 181, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_175, tvbrange, value)
    tvbrange = padded(offset + 182, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_176, tvbrange, value)
    tvbrange = padded(offset + 183, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_177, tvbrange, value)
    tvbrange = padded(offset + 184, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_178, tvbrange, value)
    tvbrange = padded(offset + 185, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_179, tvbrange, value)
    tvbrange = padded(offset + 186, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_180, tvbrange, value)
    tvbrange = padded(offset + 187, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_181, tvbrange, value)
    tvbrange = padded(offset + 188, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_182, tvbrange, value)
    tvbrange = padded(offset + 189, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_183, tvbrange, value)
    tvbrange = padded(offset + 190, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_184, tvbrange, value)
    tvbrange = padded(offset + 191, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_185, tvbrange, value)
    tvbrange = padded(offset + 192, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_186, tvbrange, value)
    tvbrange = padded(offset + 193, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_187, tvbrange, value)
    tvbrange = padded(offset + 194, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_188, tvbrange, value)
    tvbrange = padded(offset + 195, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_189, tvbrange, value)
    tvbrange = padded(offset + 196, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_190, tvbrange, value)
    tvbrange = padded(offset + 197, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_191, tvbrange, value)
    tvbrange = padded(offset + 198, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_192, tvbrange, value)
    tvbrange = padded(offset + 199, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_193, tvbrange, value)
    tvbrange = padded(offset + 200, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_194, tvbrange, value)
    tvbrange = padded(offset + 201, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_195, tvbrange, value)
    tvbrange = padded(offset + 202, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_196, tvbrange, value)
    tvbrange = padded(offset + 203, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_197, tvbrange, value)
    tvbrange = padded(offset + 204, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_198, tvbrange, value)
    tvbrange = padded(offset + 205, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_DATA_BLOCK_data_199, tvbrange, value)
end
-- dissect payload of message type REMOTE_LOG_BLOCK_STATUS
function payload_fns.payload_185(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 7 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 7)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_BLOCK_STATUS_target_system, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_BLOCK_STATUS_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_BLOCK_STATUS_seqno, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REMOTE_LOG_BLOCK_STATUS_status, tvbrange, value)
end
-- dissect payload of message type LED_CONTROL
function payload_fns.payload_186(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 29 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 29)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_target_system, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_target_component, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_instance, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_pattern, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_custom_len, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_custom_bytes_0, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_custom_bytes_1, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_custom_bytes_2, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_custom_bytes_3, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_custom_bytes_4, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_custom_bytes_5, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_custom_bytes_6, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_custom_bytes_7, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_custom_bytes_8, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_custom_bytes_9, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_custom_bytes_10, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_custom_bytes_11, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_custom_bytes_12, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_custom_bytes_13, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_custom_bytes_14, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_custom_bytes_15, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_custom_bytes_16, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_custom_bytes_17, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_custom_bytes_18, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_custom_bytes_19, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_custom_bytes_20, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_custom_bytes_21, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_custom_bytes_22, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LED_CONTROL_custom_bytes_23, tvbrange, value)
end
-- dissect payload of message type MAG_CAL_PROGRESS
function payload_fns.payload_191(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 27 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 27)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MAG_CAL_PROGRESS_compass_id, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MAG_CAL_PROGRESS_cal_mask, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MAG_CAL_PROGRESS_cal_status, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MAG_CAL_PROGRESS_attempt, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MAG_CAL_PROGRESS_completion_pct, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MAG_CAL_PROGRESS_completion_mask_0, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MAG_CAL_PROGRESS_completion_mask_1, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MAG_CAL_PROGRESS_completion_mask_2, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MAG_CAL_PROGRESS_completion_mask_3, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MAG_CAL_PROGRESS_completion_mask_4, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MAG_CAL_PROGRESS_completion_mask_5, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MAG_CAL_PROGRESS_completion_mask_6, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MAG_CAL_PROGRESS_completion_mask_7, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MAG_CAL_PROGRESS_completion_mask_8, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MAG_CAL_PROGRESS_completion_mask_9, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MAG_CAL_PROGRESS_direction_x, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MAG_CAL_PROGRESS_direction_y, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MAG_CAL_PROGRESS_direction_z, tvbrange, value)
end
-- dissect payload of message type EKF_STATUS_REPORT
function payload_fns.payload_193(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 26 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 26)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.EKF_STATUS_REPORT_flags, tvbrange, value)
    dissect_flags_EKF_STATUS_FLAGS(subtree, "EKF_STATUS_REPORT_flags", tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.EKF_STATUS_REPORT_velocity_variance, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.EKF_STATUS_REPORT_pos_horiz_variance, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.EKF_STATUS_REPORT_pos_vert_variance, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.EKF_STATUS_REPORT_compass_variance, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.EKF_STATUS_REPORT_terrain_alt_variance, tvbrange, value)
    tvbrange = padded(offset + 22, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.EKF_STATUS_REPORT_airspeed_variance, tvbrange, value)
end
-- dissect payload of message type PID_TUNING
function payload_fns.payload_194(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PID_TUNING_axis, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.PID_TUNING_desired, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.PID_TUNING_achieved, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.PID_TUNING_FF, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.PID_TUNING_P, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.PID_TUNING_I, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.PID_TUNING_D, tvbrange, value)
    tvbrange = padded(offset + 25, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.PID_TUNING_SRate, tvbrange, value)
    tvbrange = padded(offset + 29, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.PID_TUNING_PDmod, tvbrange, value)
end
-- dissect payload of message type DEEPSTALL
function payload_fns.payload_195(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 37 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 37)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.DEEPSTALL_landing_lat, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.DEEPSTALL_landing_lon, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.DEEPSTALL_path_lat, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.DEEPSTALL_path_lon, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.DEEPSTALL_arc_entry_lat, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.DEEPSTALL_arc_entry_lon, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEEPSTALL_altitude, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEEPSTALL_expected_travel_distance, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEEPSTALL_cross_track_error, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEEPSTALL_stage, tvbrange, value)
end
-- dissect payload of message type GIMBAL_REPORT
function payload_fns.payload_200(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 42 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 42)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_REPORT_target_system, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_REPORT_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_REPORT_delta_time, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_REPORT_delta_angle_x, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_REPORT_delta_angle_y, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_REPORT_delta_angle_z, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_REPORT_delta_velocity_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_REPORT_delta_velocity_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_REPORT_delta_velocity_z, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_REPORT_joint_roll, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_REPORT_joint_el, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_REPORT_joint_az, tvbrange, value)
end
-- dissect payload of message type GIMBAL_CONTROL
function payload_fns.payload_201(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 14 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 14)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_CONTROL_target_system, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_CONTROL_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_CONTROL_demanded_rate_x, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_CONTROL_demanded_rate_y, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_CONTROL_demanded_rate_z, tvbrange, value)
end
-- dissect payload of message type GIMBAL_TORQUE_CMD_REPORT
function payload_fns.payload_214(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 8 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 8)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_TORQUE_CMD_REPORT_target_system, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_TORQUE_CMD_REPORT_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GIMBAL_TORQUE_CMD_REPORT_rl_torque_cmd, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GIMBAL_TORQUE_CMD_REPORT_el_torque_cmd, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GIMBAL_TORQUE_CMD_REPORT_az_torque_cmd, tvbrange, value)
end
-- dissect payload of message type GOPRO_HEARTBEAT
function payload_fns.payload_215(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 3 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 3)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GOPRO_HEARTBEAT_status, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GOPRO_HEARTBEAT_capture_mode, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GOPRO_HEARTBEAT_flags, tvbrange, value)
    dissect_flags_GOPRO_HEARTBEAT_FLAGS(subtree, "GOPRO_HEARTBEAT_flags", tvbrange, value)
end
-- dissect payload of message type GOPRO_GET_REQUEST
function payload_fns.payload_216(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 3 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 3)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GOPRO_GET_REQUEST_target_system, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GOPRO_GET_REQUEST_target_component, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GOPRO_GET_REQUEST_cmd_id, tvbrange, value)
end
-- dissect payload of message type GOPRO_GET_RESPONSE
function payload_fns.payload_217(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 6 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 6)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GOPRO_GET_RESPONSE_cmd_id, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GOPRO_GET_RESPONSE_status, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GOPRO_GET_RESPONSE_value_0, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GOPRO_GET_RESPONSE_value_1, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GOPRO_GET_RESPONSE_value_2, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GOPRO_GET_RESPONSE_value_3, tvbrange, value)
end
-- dissect payload of message type GOPRO_SET_REQUEST
function payload_fns.payload_218(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 7 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 7)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GOPRO_SET_REQUEST_target_system, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GOPRO_SET_REQUEST_target_component, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GOPRO_SET_REQUEST_cmd_id, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GOPRO_SET_REQUEST_value_0, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GOPRO_SET_REQUEST_value_1, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GOPRO_SET_REQUEST_value_2, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GOPRO_SET_REQUEST_value_3, tvbrange, value)
end
-- dissect payload of message type GOPRO_SET_RESPONSE
function payload_fns.payload_219(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 2 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 2)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GOPRO_SET_RESPONSE_cmd_id, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GOPRO_SET_RESPONSE_status, tvbrange, value)
end
-- dissect payload of message type RPM
function payload_fns.payload_226(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 8 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 8)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.RPM_rpm1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.RPM_rpm2, tvbrange, value)
end
-- dissect payload of message type DEVICE_OP_READ
function payload_fns.payload_11000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 52 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 52)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_target_system, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_request_id, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_bustype, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_bus, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_address, tvbrange, value)
    tvbrange = padded(offset + 9, 40)
    value = tvbrange:string()
    subtree = tree:add_le(f.DEVICE_OP_READ_busname, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_regstart, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_count, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_bank, tvbrange, value)
end
-- dissect payload of message type DEVICE_OP_READ_REPLY
function payload_fns.payload_11001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 136 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 136)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_request_id, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_result, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_regstart, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_count, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_0, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_1, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_2, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_3, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_4, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_5, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_6, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_7, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_8, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_9, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_10, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_11, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_12, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_13, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_14, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_15, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_16, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_17, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_18, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_19, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_20, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_21, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_22, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_23, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_24, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_25, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_26, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_27, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_28, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_29, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_30, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_31, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_32, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_33, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_34, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_35, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_36, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_37, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_38, tvbrange, value)
    tvbrange = padded(offset + 46, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_39, tvbrange, value)
    tvbrange = padded(offset + 47, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_40, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_41, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_42, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_43, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_44, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_45, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_46, tvbrange, value)
    tvbrange = padded(offset + 54, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_47, tvbrange, value)
    tvbrange = padded(offset + 55, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_48, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_49, tvbrange, value)
    tvbrange = padded(offset + 57, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_50, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_51, tvbrange, value)
    tvbrange = padded(offset + 59, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_52, tvbrange, value)
    tvbrange = padded(offset + 60, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_53, tvbrange, value)
    tvbrange = padded(offset + 61, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_54, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_55, tvbrange, value)
    tvbrange = padded(offset + 63, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_56, tvbrange, value)
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_57, tvbrange, value)
    tvbrange = padded(offset + 65, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_58, tvbrange, value)
    tvbrange = padded(offset + 66, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_59, tvbrange, value)
    tvbrange = padded(offset + 67, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_60, tvbrange, value)
    tvbrange = padded(offset + 68, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_61, tvbrange, value)
    tvbrange = padded(offset + 69, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_62, tvbrange, value)
    tvbrange = padded(offset + 70, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_63, tvbrange, value)
    tvbrange = padded(offset + 71, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_64, tvbrange, value)
    tvbrange = padded(offset + 72, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_65, tvbrange, value)
    tvbrange = padded(offset + 73, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_66, tvbrange, value)
    tvbrange = padded(offset + 74, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_67, tvbrange, value)
    tvbrange = padded(offset + 75, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_68, tvbrange, value)
    tvbrange = padded(offset + 76, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_69, tvbrange, value)
    tvbrange = padded(offset + 77, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_70, tvbrange, value)
    tvbrange = padded(offset + 78, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_71, tvbrange, value)
    tvbrange = padded(offset + 79, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_72, tvbrange, value)
    tvbrange = padded(offset + 80, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_73, tvbrange, value)
    tvbrange = padded(offset + 81, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_74, tvbrange, value)
    tvbrange = padded(offset + 82, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_75, tvbrange, value)
    tvbrange = padded(offset + 83, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_76, tvbrange, value)
    tvbrange = padded(offset + 84, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_77, tvbrange, value)
    tvbrange = padded(offset + 85, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_78, tvbrange, value)
    tvbrange = padded(offset + 86, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_79, tvbrange, value)
    tvbrange = padded(offset + 87, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_80, tvbrange, value)
    tvbrange = padded(offset + 88, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_81, tvbrange, value)
    tvbrange = padded(offset + 89, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_82, tvbrange, value)
    tvbrange = padded(offset + 90, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_83, tvbrange, value)
    tvbrange = padded(offset + 91, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_84, tvbrange, value)
    tvbrange = padded(offset + 92, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_85, tvbrange, value)
    tvbrange = padded(offset + 93, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_86, tvbrange, value)
    tvbrange = padded(offset + 94, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_87, tvbrange, value)
    tvbrange = padded(offset + 95, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_88, tvbrange, value)
    tvbrange = padded(offset + 96, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_89, tvbrange, value)
    tvbrange = padded(offset + 97, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_90, tvbrange, value)
    tvbrange = padded(offset + 98, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_91, tvbrange, value)
    tvbrange = padded(offset + 99, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_92, tvbrange, value)
    tvbrange = padded(offset + 100, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_93, tvbrange, value)
    tvbrange = padded(offset + 101, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_94, tvbrange, value)
    tvbrange = padded(offset + 102, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_95, tvbrange, value)
    tvbrange = padded(offset + 103, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_96, tvbrange, value)
    tvbrange = padded(offset + 104, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_97, tvbrange, value)
    tvbrange = padded(offset + 105, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_98, tvbrange, value)
    tvbrange = padded(offset + 106, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_99, tvbrange, value)
    tvbrange = padded(offset + 107, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_100, tvbrange, value)
    tvbrange = padded(offset + 108, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_101, tvbrange, value)
    tvbrange = padded(offset + 109, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_102, tvbrange, value)
    tvbrange = padded(offset + 110, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_103, tvbrange, value)
    tvbrange = padded(offset + 111, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_104, tvbrange, value)
    tvbrange = padded(offset + 112, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_105, tvbrange, value)
    tvbrange = padded(offset + 113, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_106, tvbrange, value)
    tvbrange = padded(offset + 114, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_107, tvbrange, value)
    tvbrange = padded(offset + 115, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_108, tvbrange, value)
    tvbrange = padded(offset + 116, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_109, tvbrange, value)
    tvbrange = padded(offset + 117, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_110, tvbrange, value)
    tvbrange = padded(offset + 118, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_111, tvbrange, value)
    tvbrange = padded(offset + 119, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_112, tvbrange, value)
    tvbrange = padded(offset + 120, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_113, tvbrange, value)
    tvbrange = padded(offset + 121, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_114, tvbrange, value)
    tvbrange = padded(offset + 122, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_115, tvbrange, value)
    tvbrange = padded(offset + 123, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_116, tvbrange, value)
    tvbrange = padded(offset + 124, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_117, tvbrange, value)
    tvbrange = padded(offset + 125, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_118, tvbrange, value)
    tvbrange = padded(offset + 126, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_119, tvbrange, value)
    tvbrange = padded(offset + 127, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_120, tvbrange, value)
    tvbrange = padded(offset + 128, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_121, tvbrange, value)
    tvbrange = padded(offset + 129, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_122, tvbrange, value)
    tvbrange = padded(offset + 130, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_123, tvbrange, value)
    tvbrange = padded(offset + 131, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_124, tvbrange, value)
    tvbrange = padded(offset + 132, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_125, tvbrange, value)
    tvbrange = padded(offset + 133, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_126, tvbrange, value)
    tvbrange = padded(offset + 134, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_data_127, tvbrange, value)
    tvbrange = padded(offset + 135, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_READ_REPLY_bank, tvbrange, value)
end
-- dissect payload of message type DEVICE_OP_WRITE
function payload_fns.payload_11002(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 180 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 180)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_target_system, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_request_id, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_bustype, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_bus, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_address, tvbrange, value)
    tvbrange = padded(offset + 9, 40)
    value = tvbrange:string()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_busname, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_regstart, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_count, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_0, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_1, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_2, tvbrange, value)
    tvbrange = padded(offset + 54, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_3, tvbrange, value)
    tvbrange = padded(offset + 55, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_4, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_5, tvbrange, value)
    tvbrange = padded(offset + 57, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_6, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_7, tvbrange, value)
    tvbrange = padded(offset + 59, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_8, tvbrange, value)
    tvbrange = padded(offset + 60, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_9, tvbrange, value)
    tvbrange = padded(offset + 61, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_10, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_11, tvbrange, value)
    tvbrange = padded(offset + 63, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_12, tvbrange, value)
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_13, tvbrange, value)
    tvbrange = padded(offset + 65, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_14, tvbrange, value)
    tvbrange = padded(offset + 66, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_15, tvbrange, value)
    tvbrange = padded(offset + 67, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_16, tvbrange, value)
    tvbrange = padded(offset + 68, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_17, tvbrange, value)
    tvbrange = padded(offset + 69, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_18, tvbrange, value)
    tvbrange = padded(offset + 70, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_19, tvbrange, value)
    tvbrange = padded(offset + 71, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_20, tvbrange, value)
    tvbrange = padded(offset + 72, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_21, tvbrange, value)
    tvbrange = padded(offset + 73, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_22, tvbrange, value)
    tvbrange = padded(offset + 74, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_23, tvbrange, value)
    tvbrange = padded(offset + 75, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_24, tvbrange, value)
    tvbrange = padded(offset + 76, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_25, tvbrange, value)
    tvbrange = padded(offset + 77, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_26, tvbrange, value)
    tvbrange = padded(offset + 78, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_27, tvbrange, value)
    tvbrange = padded(offset + 79, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_28, tvbrange, value)
    tvbrange = padded(offset + 80, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_29, tvbrange, value)
    tvbrange = padded(offset + 81, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_30, tvbrange, value)
    tvbrange = padded(offset + 82, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_31, tvbrange, value)
    tvbrange = padded(offset + 83, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_32, tvbrange, value)
    tvbrange = padded(offset + 84, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_33, tvbrange, value)
    tvbrange = padded(offset + 85, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_34, tvbrange, value)
    tvbrange = padded(offset + 86, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_35, tvbrange, value)
    tvbrange = padded(offset + 87, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_36, tvbrange, value)
    tvbrange = padded(offset + 88, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_37, tvbrange, value)
    tvbrange = padded(offset + 89, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_38, tvbrange, value)
    tvbrange = padded(offset + 90, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_39, tvbrange, value)
    tvbrange = padded(offset + 91, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_40, tvbrange, value)
    tvbrange = padded(offset + 92, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_41, tvbrange, value)
    tvbrange = padded(offset + 93, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_42, tvbrange, value)
    tvbrange = padded(offset + 94, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_43, tvbrange, value)
    tvbrange = padded(offset + 95, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_44, tvbrange, value)
    tvbrange = padded(offset + 96, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_45, tvbrange, value)
    tvbrange = padded(offset + 97, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_46, tvbrange, value)
    tvbrange = padded(offset + 98, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_47, tvbrange, value)
    tvbrange = padded(offset + 99, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_48, tvbrange, value)
    tvbrange = padded(offset + 100, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_49, tvbrange, value)
    tvbrange = padded(offset + 101, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_50, tvbrange, value)
    tvbrange = padded(offset + 102, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_51, tvbrange, value)
    tvbrange = padded(offset + 103, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_52, tvbrange, value)
    tvbrange = padded(offset + 104, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_53, tvbrange, value)
    tvbrange = padded(offset + 105, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_54, tvbrange, value)
    tvbrange = padded(offset + 106, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_55, tvbrange, value)
    tvbrange = padded(offset + 107, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_56, tvbrange, value)
    tvbrange = padded(offset + 108, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_57, tvbrange, value)
    tvbrange = padded(offset + 109, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_58, tvbrange, value)
    tvbrange = padded(offset + 110, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_59, tvbrange, value)
    tvbrange = padded(offset + 111, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_60, tvbrange, value)
    tvbrange = padded(offset + 112, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_61, tvbrange, value)
    tvbrange = padded(offset + 113, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_62, tvbrange, value)
    tvbrange = padded(offset + 114, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_63, tvbrange, value)
    tvbrange = padded(offset + 115, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_64, tvbrange, value)
    tvbrange = padded(offset + 116, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_65, tvbrange, value)
    tvbrange = padded(offset + 117, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_66, tvbrange, value)
    tvbrange = padded(offset + 118, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_67, tvbrange, value)
    tvbrange = padded(offset + 119, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_68, tvbrange, value)
    tvbrange = padded(offset + 120, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_69, tvbrange, value)
    tvbrange = padded(offset + 121, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_70, tvbrange, value)
    tvbrange = padded(offset + 122, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_71, tvbrange, value)
    tvbrange = padded(offset + 123, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_72, tvbrange, value)
    tvbrange = padded(offset + 124, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_73, tvbrange, value)
    tvbrange = padded(offset + 125, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_74, tvbrange, value)
    tvbrange = padded(offset + 126, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_75, tvbrange, value)
    tvbrange = padded(offset + 127, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_76, tvbrange, value)
    tvbrange = padded(offset + 128, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_77, tvbrange, value)
    tvbrange = padded(offset + 129, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_78, tvbrange, value)
    tvbrange = padded(offset + 130, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_79, tvbrange, value)
    tvbrange = padded(offset + 131, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_80, tvbrange, value)
    tvbrange = padded(offset + 132, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_81, tvbrange, value)
    tvbrange = padded(offset + 133, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_82, tvbrange, value)
    tvbrange = padded(offset + 134, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_83, tvbrange, value)
    tvbrange = padded(offset + 135, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_84, tvbrange, value)
    tvbrange = padded(offset + 136, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_85, tvbrange, value)
    tvbrange = padded(offset + 137, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_86, tvbrange, value)
    tvbrange = padded(offset + 138, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_87, tvbrange, value)
    tvbrange = padded(offset + 139, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_88, tvbrange, value)
    tvbrange = padded(offset + 140, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_89, tvbrange, value)
    tvbrange = padded(offset + 141, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_90, tvbrange, value)
    tvbrange = padded(offset + 142, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_91, tvbrange, value)
    tvbrange = padded(offset + 143, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_92, tvbrange, value)
    tvbrange = padded(offset + 144, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_93, tvbrange, value)
    tvbrange = padded(offset + 145, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_94, tvbrange, value)
    tvbrange = padded(offset + 146, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_95, tvbrange, value)
    tvbrange = padded(offset + 147, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_96, tvbrange, value)
    tvbrange = padded(offset + 148, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_97, tvbrange, value)
    tvbrange = padded(offset + 149, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_98, tvbrange, value)
    tvbrange = padded(offset + 150, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_99, tvbrange, value)
    tvbrange = padded(offset + 151, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_100, tvbrange, value)
    tvbrange = padded(offset + 152, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_101, tvbrange, value)
    tvbrange = padded(offset + 153, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_102, tvbrange, value)
    tvbrange = padded(offset + 154, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_103, tvbrange, value)
    tvbrange = padded(offset + 155, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_104, tvbrange, value)
    tvbrange = padded(offset + 156, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_105, tvbrange, value)
    tvbrange = padded(offset + 157, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_106, tvbrange, value)
    tvbrange = padded(offset + 158, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_107, tvbrange, value)
    tvbrange = padded(offset + 159, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_108, tvbrange, value)
    tvbrange = padded(offset + 160, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_109, tvbrange, value)
    tvbrange = padded(offset + 161, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_110, tvbrange, value)
    tvbrange = padded(offset + 162, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_111, tvbrange, value)
    tvbrange = padded(offset + 163, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_112, tvbrange, value)
    tvbrange = padded(offset + 164, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_113, tvbrange, value)
    tvbrange = padded(offset + 165, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_114, tvbrange, value)
    tvbrange = padded(offset + 166, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_115, tvbrange, value)
    tvbrange = padded(offset + 167, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_116, tvbrange, value)
    tvbrange = padded(offset + 168, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_117, tvbrange, value)
    tvbrange = padded(offset + 169, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_118, tvbrange, value)
    tvbrange = padded(offset + 170, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_119, tvbrange, value)
    tvbrange = padded(offset + 171, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_120, tvbrange, value)
    tvbrange = padded(offset + 172, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_121, tvbrange, value)
    tvbrange = padded(offset + 173, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_122, tvbrange, value)
    tvbrange = padded(offset + 174, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_123, tvbrange, value)
    tvbrange = padded(offset + 175, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_124, tvbrange, value)
    tvbrange = padded(offset + 176, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_125, tvbrange, value)
    tvbrange = padded(offset + 177, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_126, tvbrange, value)
    tvbrange = padded(offset + 178, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_data_127, tvbrange, value)
    tvbrange = padded(offset + 179, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_bank, tvbrange, value)
end
-- dissect payload of message type DEVICE_OP_WRITE_REPLY
function payload_fns.payload_11003(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 5 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 5)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_REPLY_request_id, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEVICE_OP_WRITE_REPLY_result, tvbrange, value)
end
-- dissect payload of message type SECURE_COMMAND
function payload_fns.payload_11004(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 232 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 232)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_target_system, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_sequence, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_operation, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_length, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_sig_length, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_0, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_1, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_2, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_3, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_4, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_5, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_6, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_7, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_8, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_9, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_10, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_11, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_12, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_13, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_14, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_15, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_16, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_17, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_18, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_19, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_20, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_21, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_22, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_23, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_24, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_25, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_26, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_27, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_28, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_29, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_30, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_31, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_32, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_33, tvbrange, value)
    tvbrange = padded(offset + 46, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_34, tvbrange, value)
    tvbrange = padded(offset + 47, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_35, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_36, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_37, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_38, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_39, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_40, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_41, tvbrange, value)
    tvbrange = padded(offset + 54, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_42, tvbrange, value)
    tvbrange = padded(offset + 55, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_43, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_44, tvbrange, value)
    tvbrange = padded(offset + 57, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_45, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_46, tvbrange, value)
    tvbrange = padded(offset + 59, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_47, tvbrange, value)
    tvbrange = padded(offset + 60, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_48, tvbrange, value)
    tvbrange = padded(offset + 61, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_49, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_50, tvbrange, value)
    tvbrange = padded(offset + 63, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_51, tvbrange, value)
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_52, tvbrange, value)
    tvbrange = padded(offset + 65, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_53, tvbrange, value)
    tvbrange = padded(offset + 66, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_54, tvbrange, value)
    tvbrange = padded(offset + 67, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_55, tvbrange, value)
    tvbrange = padded(offset + 68, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_56, tvbrange, value)
    tvbrange = padded(offset + 69, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_57, tvbrange, value)
    tvbrange = padded(offset + 70, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_58, tvbrange, value)
    tvbrange = padded(offset + 71, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_59, tvbrange, value)
    tvbrange = padded(offset + 72, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_60, tvbrange, value)
    tvbrange = padded(offset + 73, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_61, tvbrange, value)
    tvbrange = padded(offset + 74, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_62, tvbrange, value)
    tvbrange = padded(offset + 75, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_63, tvbrange, value)
    tvbrange = padded(offset + 76, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_64, tvbrange, value)
    tvbrange = padded(offset + 77, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_65, tvbrange, value)
    tvbrange = padded(offset + 78, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_66, tvbrange, value)
    tvbrange = padded(offset + 79, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_67, tvbrange, value)
    tvbrange = padded(offset + 80, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_68, tvbrange, value)
    tvbrange = padded(offset + 81, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_69, tvbrange, value)
    tvbrange = padded(offset + 82, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_70, tvbrange, value)
    tvbrange = padded(offset + 83, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_71, tvbrange, value)
    tvbrange = padded(offset + 84, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_72, tvbrange, value)
    tvbrange = padded(offset + 85, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_73, tvbrange, value)
    tvbrange = padded(offset + 86, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_74, tvbrange, value)
    tvbrange = padded(offset + 87, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_75, tvbrange, value)
    tvbrange = padded(offset + 88, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_76, tvbrange, value)
    tvbrange = padded(offset + 89, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_77, tvbrange, value)
    tvbrange = padded(offset + 90, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_78, tvbrange, value)
    tvbrange = padded(offset + 91, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_79, tvbrange, value)
    tvbrange = padded(offset + 92, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_80, tvbrange, value)
    tvbrange = padded(offset + 93, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_81, tvbrange, value)
    tvbrange = padded(offset + 94, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_82, tvbrange, value)
    tvbrange = padded(offset + 95, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_83, tvbrange, value)
    tvbrange = padded(offset + 96, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_84, tvbrange, value)
    tvbrange = padded(offset + 97, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_85, tvbrange, value)
    tvbrange = padded(offset + 98, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_86, tvbrange, value)
    tvbrange = padded(offset + 99, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_87, tvbrange, value)
    tvbrange = padded(offset + 100, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_88, tvbrange, value)
    tvbrange = padded(offset + 101, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_89, tvbrange, value)
    tvbrange = padded(offset + 102, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_90, tvbrange, value)
    tvbrange = padded(offset + 103, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_91, tvbrange, value)
    tvbrange = padded(offset + 104, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_92, tvbrange, value)
    tvbrange = padded(offset + 105, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_93, tvbrange, value)
    tvbrange = padded(offset + 106, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_94, tvbrange, value)
    tvbrange = padded(offset + 107, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_95, tvbrange, value)
    tvbrange = padded(offset + 108, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_96, tvbrange, value)
    tvbrange = padded(offset + 109, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_97, tvbrange, value)
    tvbrange = padded(offset + 110, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_98, tvbrange, value)
    tvbrange = padded(offset + 111, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_99, tvbrange, value)
    tvbrange = padded(offset + 112, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_100, tvbrange, value)
    tvbrange = padded(offset + 113, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_101, tvbrange, value)
    tvbrange = padded(offset + 114, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_102, tvbrange, value)
    tvbrange = padded(offset + 115, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_103, tvbrange, value)
    tvbrange = padded(offset + 116, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_104, tvbrange, value)
    tvbrange = padded(offset + 117, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_105, tvbrange, value)
    tvbrange = padded(offset + 118, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_106, tvbrange, value)
    tvbrange = padded(offset + 119, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_107, tvbrange, value)
    tvbrange = padded(offset + 120, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_108, tvbrange, value)
    tvbrange = padded(offset + 121, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_109, tvbrange, value)
    tvbrange = padded(offset + 122, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_110, tvbrange, value)
    tvbrange = padded(offset + 123, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_111, tvbrange, value)
    tvbrange = padded(offset + 124, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_112, tvbrange, value)
    tvbrange = padded(offset + 125, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_113, tvbrange, value)
    tvbrange = padded(offset + 126, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_114, tvbrange, value)
    tvbrange = padded(offset + 127, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_115, tvbrange, value)
    tvbrange = padded(offset + 128, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_116, tvbrange, value)
    tvbrange = padded(offset + 129, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_117, tvbrange, value)
    tvbrange = padded(offset + 130, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_118, tvbrange, value)
    tvbrange = padded(offset + 131, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_119, tvbrange, value)
    tvbrange = padded(offset + 132, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_120, tvbrange, value)
    tvbrange = padded(offset + 133, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_121, tvbrange, value)
    tvbrange = padded(offset + 134, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_122, tvbrange, value)
    tvbrange = padded(offset + 135, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_123, tvbrange, value)
    tvbrange = padded(offset + 136, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_124, tvbrange, value)
    tvbrange = padded(offset + 137, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_125, tvbrange, value)
    tvbrange = padded(offset + 138, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_126, tvbrange, value)
    tvbrange = padded(offset + 139, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_127, tvbrange, value)
    tvbrange = padded(offset + 140, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_128, tvbrange, value)
    tvbrange = padded(offset + 141, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_129, tvbrange, value)
    tvbrange = padded(offset + 142, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_130, tvbrange, value)
    tvbrange = padded(offset + 143, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_131, tvbrange, value)
    tvbrange = padded(offset + 144, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_132, tvbrange, value)
    tvbrange = padded(offset + 145, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_133, tvbrange, value)
    tvbrange = padded(offset + 146, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_134, tvbrange, value)
    tvbrange = padded(offset + 147, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_135, tvbrange, value)
    tvbrange = padded(offset + 148, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_136, tvbrange, value)
    tvbrange = padded(offset + 149, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_137, tvbrange, value)
    tvbrange = padded(offset + 150, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_138, tvbrange, value)
    tvbrange = padded(offset + 151, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_139, tvbrange, value)
    tvbrange = padded(offset + 152, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_140, tvbrange, value)
    tvbrange = padded(offset + 153, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_141, tvbrange, value)
    tvbrange = padded(offset + 154, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_142, tvbrange, value)
    tvbrange = padded(offset + 155, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_143, tvbrange, value)
    tvbrange = padded(offset + 156, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_144, tvbrange, value)
    tvbrange = padded(offset + 157, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_145, tvbrange, value)
    tvbrange = padded(offset + 158, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_146, tvbrange, value)
    tvbrange = padded(offset + 159, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_147, tvbrange, value)
    tvbrange = padded(offset + 160, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_148, tvbrange, value)
    tvbrange = padded(offset + 161, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_149, tvbrange, value)
    tvbrange = padded(offset + 162, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_150, tvbrange, value)
    tvbrange = padded(offset + 163, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_151, tvbrange, value)
    tvbrange = padded(offset + 164, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_152, tvbrange, value)
    tvbrange = padded(offset + 165, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_153, tvbrange, value)
    tvbrange = padded(offset + 166, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_154, tvbrange, value)
    tvbrange = padded(offset + 167, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_155, tvbrange, value)
    tvbrange = padded(offset + 168, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_156, tvbrange, value)
    tvbrange = padded(offset + 169, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_157, tvbrange, value)
    tvbrange = padded(offset + 170, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_158, tvbrange, value)
    tvbrange = padded(offset + 171, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_159, tvbrange, value)
    tvbrange = padded(offset + 172, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_160, tvbrange, value)
    tvbrange = padded(offset + 173, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_161, tvbrange, value)
    tvbrange = padded(offset + 174, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_162, tvbrange, value)
    tvbrange = padded(offset + 175, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_163, tvbrange, value)
    tvbrange = padded(offset + 176, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_164, tvbrange, value)
    tvbrange = padded(offset + 177, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_165, tvbrange, value)
    tvbrange = padded(offset + 178, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_166, tvbrange, value)
    tvbrange = padded(offset + 179, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_167, tvbrange, value)
    tvbrange = padded(offset + 180, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_168, tvbrange, value)
    tvbrange = padded(offset + 181, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_169, tvbrange, value)
    tvbrange = padded(offset + 182, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_170, tvbrange, value)
    tvbrange = padded(offset + 183, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_171, tvbrange, value)
    tvbrange = padded(offset + 184, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_172, tvbrange, value)
    tvbrange = padded(offset + 185, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_173, tvbrange, value)
    tvbrange = padded(offset + 186, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_174, tvbrange, value)
    tvbrange = padded(offset + 187, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_175, tvbrange, value)
    tvbrange = padded(offset + 188, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_176, tvbrange, value)
    tvbrange = padded(offset + 189, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_177, tvbrange, value)
    tvbrange = padded(offset + 190, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_178, tvbrange, value)
    tvbrange = padded(offset + 191, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_179, tvbrange, value)
    tvbrange = padded(offset + 192, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_180, tvbrange, value)
    tvbrange = padded(offset + 193, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_181, tvbrange, value)
    tvbrange = padded(offset + 194, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_182, tvbrange, value)
    tvbrange = padded(offset + 195, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_183, tvbrange, value)
    tvbrange = padded(offset + 196, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_184, tvbrange, value)
    tvbrange = padded(offset + 197, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_185, tvbrange, value)
    tvbrange = padded(offset + 198, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_186, tvbrange, value)
    tvbrange = padded(offset + 199, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_187, tvbrange, value)
    tvbrange = padded(offset + 200, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_188, tvbrange, value)
    tvbrange = padded(offset + 201, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_189, tvbrange, value)
    tvbrange = padded(offset + 202, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_190, tvbrange, value)
    tvbrange = padded(offset + 203, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_191, tvbrange, value)
    tvbrange = padded(offset + 204, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_192, tvbrange, value)
    tvbrange = padded(offset + 205, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_193, tvbrange, value)
    tvbrange = padded(offset + 206, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_194, tvbrange, value)
    tvbrange = padded(offset + 207, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_195, tvbrange, value)
    tvbrange = padded(offset + 208, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_196, tvbrange, value)
    tvbrange = padded(offset + 209, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_197, tvbrange, value)
    tvbrange = padded(offset + 210, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_198, tvbrange, value)
    tvbrange = padded(offset + 211, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_199, tvbrange, value)
    tvbrange = padded(offset + 212, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_200, tvbrange, value)
    tvbrange = padded(offset + 213, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_201, tvbrange, value)
    tvbrange = padded(offset + 214, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_202, tvbrange, value)
    tvbrange = padded(offset + 215, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_203, tvbrange, value)
    tvbrange = padded(offset + 216, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_204, tvbrange, value)
    tvbrange = padded(offset + 217, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_205, tvbrange, value)
    tvbrange = padded(offset + 218, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_206, tvbrange, value)
    tvbrange = padded(offset + 219, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_207, tvbrange, value)
    tvbrange = padded(offset + 220, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_208, tvbrange, value)
    tvbrange = padded(offset + 221, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_209, tvbrange, value)
    tvbrange = padded(offset + 222, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_210, tvbrange, value)
    tvbrange = padded(offset + 223, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_211, tvbrange, value)
    tvbrange = padded(offset + 224, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_212, tvbrange, value)
    tvbrange = padded(offset + 225, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_213, tvbrange, value)
    tvbrange = padded(offset + 226, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_214, tvbrange, value)
    tvbrange = padded(offset + 227, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_215, tvbrange, value)
    tvbrange = padded(offset + 228, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_216, tvbrange, value)
    tvbrange = padded(offset + 229, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_217, tvbrange, value)
    tvbrange = padded(offset + 230, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_218, tvbrange, value)
    tvbrange = padded(offset + 231, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_data_219, tvbrange, value)
end
-- dissect payload of message type SECURE_COMMAND_REPLY
function payload_fns.payload_11005(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 230 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 230)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_sequence, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_operation, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_result, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_length, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_0, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_1, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_2, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_3, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_4, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_5, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_6, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_7, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_8, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_9, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_10, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_11, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_12, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_13, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_14, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_15, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_16, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_17, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_18, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_19, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_20, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_21, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_22, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_23, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_24, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_25, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_26, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_27, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_28, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_29, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_30, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_31, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_32, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_33, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_34, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_35, tvbrange, value)
    tvbrange = padded(offset + 46, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_36, tvbrange, value)
    tvbrange = padded(offset + 47, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_37, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_38, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_39, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_40, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_41, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_42, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_43, tvbrange, value)
    tvbrange = padded(offset + 54, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_44, tvbrange, value)
    tvbrange = padded(offset + 55, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_45, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_46, tvbrange, value)
    tvbrange = padded(offset + 57, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_47, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_48, tvbrange, value)
    tvbrange = padded(offset + 59, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_49, tvbrange, value)
    tvbrange = padded(offset + 60, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_50, tvbrange, value)
    tvbrange = padded(offset + 61, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_51, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_52, tvbrange, value)
    tvbrange = padded(offset + 63, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_53, tvbrange, value)
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_54, tvbrange, value)
    tvbrange = padded(offset + 65, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_55, tvbrange, value)
    tvbrange = padded(offset + 66, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_56, tvbrange, value)
    tvbrange = padded(offset + 67, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_57, tvbrange, value)
    tvbrange = padded(offset + 68, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_58, tvbrange, value)
    tvbrange = padded(offset + 69, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_59, tvbrange, value)
    tvbrange = padded(offset + 70, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_60, tvbrange, value)
    tvbrange = padded(offset + 71, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_61, tvbrange, value)
    tvbrange = padded(offset + 72, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_62, tvbrange, value)
    tvbrange = padded(offset + 73, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_63, tvbrange, value)
    tvbrange = padded(offset + 74, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_64, tvbrange, value)
    tvbrange = padded(offset + 75, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_65, tvbrange, value)
    tvbrange = padded(offset + 76, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_66, tvbrange, value)
    tvbrange = padded(offset + 77, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_67, tvbrange, value)
    tvbrange = padded(offset + 78, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_68, tvbrange, value)
    tvbrange = padded(offset + 79, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_69, tvbrange, value)
    tvbrange = padded(offset + 80, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_70, tvbrange, value)
    tvbrange = padded(offset + 81, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_71, tvbrange, value)
    tvbrange = padded(offset + 82, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_72, tvbrange, value)
    tvbrange = padded(offset + 83, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_73, tvbrange, value)
    tvbrange = padded(offset + 84, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_74, tvbrange, value)
    tvbrange = padded(offset + 85, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_75, tvbrange, value)
    tvbrange = padded(offset + 86, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_76, tvbrange, value)
    tvbrange = padded(offset + 87, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_77, tvbrange, value)
    tvbrange = padded(offset + 88, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_78, tvbrange, value)
    tvbrange = padded(offset + 89, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_79, tvbrange, value)
    tvbrange = padded(offset + 90, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_80, tvbrange, value)
    tvbrange = padded(offset + 91, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_81, tvbrange, value)
    tvbrange = padded(offset + 92, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_82, tvbrange, value)
    tvbrange = padded(offset + 93, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_83, tvbrange, value)
    tvbrange = padded(offset + 94, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_84, tvbrange, value)
    tvbrange = padded(offset + 95, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_85, tvbrange, value)
    tvbrange = padded(offset + 96, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_86, tvbrange, value)
    tvbrange = padded(offset + 97, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_87, tvbrange, value)
    tvbrange = padded(offset + 98, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_88, tvbrange, value)
    tvbrange = padded(offset + 99, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_89, tvbrange, value)
    tvbrange = padded(offset + 100, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_90, tvbrange, value)
    tvbrange = padded(offset + 101, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_91, tvbrange, value)
    tvbrange = padded(offset + 102, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_92, tvbrange, value)
    tvbrange = padded(offset + 103, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_93, tvbrange, value)
    tvbrange = padded(offset + 104, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_94, tvbrange, value)
    tvbrange = padded(offset + 105, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_95, tvbrange, value)
    tvbrange = padded(offset + 106, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_96, tvbrange, value)
    tvbrange = padded(offset + 107, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_97, tvbrange, value)
    tvbrange = padded(offset + 108, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_98, tvbrange, value)
    tvbrange = padded(offset + 109, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_99, tvbrange, value)
    tvbrange = padded(offset + 110, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_100, tvbrange, value)
    tvbrange = padded(offset + 111, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_101, tvbrange, value)
    tvbrange = padded(offset + 112, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_102, tvbrange, value)
    tvbrange = padded(offset + 113, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_103, tvbrange, value)
    tvbrange = padded(offset + 114, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_104, tvbrange, value)
    tvbrange = padded(offset + 115, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_105, tvbrange, value)
    tvbrange = padded(offset + 116, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_106, tvbrange, value)
    tvbrange = padded(offset + 117, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_107, tvbrange, value)
    tvbrange = padded(offset + 118, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_108, tvbrange, value)
    tvbrange = padded(offset + 119, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_109, tvbrange, value)
    tvbrange = padded(offset + 120, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_110, tvbrange, value)
    tvbrange = padded(offset + 121, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_111, tvbrange, value)
    tvbrange = padded(offset + 122, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_112, tvbrange, value)
    tvbrange = padded(offset + 123, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_113, tvbrange, value)
    tvbrange = padded(offset + 124, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_114, tvbrange, value)
    tvbrange = padded(offset + 125, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_115, tvbrange, value)
    tvbrange = padded(offset + 126, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_116, tvbrange, value)
    tvbrange = padded(offset + 127, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_117, tvbrange, value)
    tvbrange = padded(offset + 128, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_118, tvbrange, value)
    tvbrange = padded(offset + 129, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_119, tvbrange, value)
    tvbrange = padded(offset + 130, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_120, tvbrange, value)
    tvbrange = padded(offset + 131, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_121, tvbrange, value)
    tvbrange = padded(offset + 132, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_122, tvbrange, value)
    tvbrange = padded(offset + 133, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_123, tvbrange, value)
    tvbrange = padded(offset + 134, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_124, tvbrange, value)
    tvbrange = padded(offset + 135, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_125, tvbrange, value)
    tvbrange = padded(offset + 136, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_126, tvbrange, value)
    tvbrange = padded(offset + 137, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_127, tvbrange, value)
    tvbrange = padded(offset + 138, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_128, tvbrange, value)
    tvbrange = padded(offset + 139, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_129, tvbrange, value)
    tvbrange = padded(offset + 140, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_130, tvbrange, value)
    tvbrange = padded(offset + 141, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_131, tvbrange, value)
    tvbrange = padded(offset + 142, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_132, tvbrange, value)
    tvbrange = padded(offset + 143, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_133, tvbrange, value)
    tvbrange = padded(offset + 144, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_134, tvbrange, value)
    tvbrange = padded(offset + 145, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_135, tvbrange, value)
    tvbrange = padded(offset + 146, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_136, tvbrange, value)
    tvbrange = padded(offset + 147, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_137, tvbrange, value)
    tvbrange = padded(offset + 148, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_138, tvbrange, value)
    tvbrange = padded(offset + 149, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_139, tvbrange, value)
    tvbrange = padded(offset + 150, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_140, tvbrange, value)
    tvbrange = padded(offset + 151, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_141, tvbrange, value)
    tvbrange = padded(offset + 152, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_142, tvbrange, value)
    tvbrange = padded(offset + 153, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_143, tvbrange, value)
    tvbrange = padded(offset + 154, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_144, tvbrange, value)
    tvbrange = padded(offset + 155, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_145, tvbrange, value)
    tvbrange = padded(offset + 156, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_146, tvbrange, value)
    tvbrange = padded(offset + 157, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_147, tvbrange, value)
    tvbrange = padded(offset + 158, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_148, tvbrange, value)
    tvbrange = padded(offset + 159, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_149, tvbrange, value)
    tvbrange = padded(offset + 160, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_150, tvbrange, value)
    tvbrange = padded(offset + 161, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_151, tvbrange, value)
    tvbrange = padded(offset + 162, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_152, tvbrange, value)
    tvbrange = padded(offset + 163, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_153, tvbrange, value)
    tvbrange = padded(offset + 164, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_154, tvbrange, value)
    tvbrange = padded(offset + 165, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_155, tvbrange, value)
    tvbrange = padded(offset + 166, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_156, tvbrange, value)
    tvbrange = padded(offset + 167, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_157, tvbrange, value)
    tvbrange = padded(offset + 168, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_158, tvbrange, value)
    tvbrange = padded(offset + 169, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_159, tvbrange, value)
    tvbrange = padded(offset + 170, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_160, tvbrange, value)
    tvbrange = padded(offset + 171, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_161, tvbrange, value)
    tvbrange = padded(offset + 172, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_162, tvbrange, value)
    tvbrange = padded(offset + 173, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_163, tvbrange, value)
    tvbrange = padded(offset + 174, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_164, tvbrange, value)
    tvbrange = padded(offset + 175, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_165, tvbrange, value)
    tvbrange = padded(offset + 176, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_166, tvbrange, value)
    tvbrange = padded(offset + 177, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_167, tvbrange, value)
    tvbrange = padded(offset + 178, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_168, tvbrange, value)
    tvbrange = padded(offset + 179, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_169, tvbrange, value)
    tvbrange = padded(offset + 180, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_170, tvbrange, value)
    tvbrange = padded(offset + 181, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_171, tvbrange, value)
    tvbrange = padded(offset + 182, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_172, tvbrange, value)
    tvbrange = padded(offset + 183, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_173, tvbrange, value)
    tvbrange = padded(offset + 184, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_174, tvbrange, value)
    tvbrange = padded(offset + 185, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_175, tvbrange, value)
    tvbrange = padded(offset + 186, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_176, tvbrange, value)
    tvbrange = padded(offset + 187, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_177, tvbrange, value)
    tvbrange = padded(offset + 188, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_178, tvbrange, value)
    tvbrange = padded(offset + 189, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_179, tvbrange, value)
    tvbrange = padded(offset + 190, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_180, tvbrange, value)
    tvbrange = padded(offset + 191, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_181, tvbrange, value)
    tvbrange = padded(offset + 192, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_182, tvbrange, value)
    tvbrange = padded(offset + 193, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_183, tvbrange, value)
    tvbrange = padded(offset + 194, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_184, tvbrange, value)
    tvbrange = padded(offset + 195, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_185, tvbrange, value)
    tvbrange = padded(offset + 196, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_186, tvbrange, value)
    tvbrange = padded(offset + 197, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_187, tvbrange, value)
    tvbrange = padded(offset + 198, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_188, tvbrange, value)
    tvbrange = padded(offset + 199, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_189, tvbrange, value)
    tvbrange = padded(offset + 200, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_190, tvbrange, value)
    tvbrange = padded(offset + 201, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_191, tvbrange, value)
    tvbrange = padded(offset + 202, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_192, tvbrange, value)
    tvbrange = padded(offset + 203, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_193, tvbrange, value)
    tvbrange = padded(offset + 204, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_194, tvbrange, value)
    tvbrange = padded(offset + 205, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_195, tvbrange, value)
    tvbrange = padded(offset + 206, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_196, tvbrange, value)
    tvbrange = padded(offset + 207, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_197, tvbrange, value)
    tvbrange = padded(offset + 208, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_198, tvbrange, value)
    tvbrange = padded(offset + 209, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_199, tvbrange, value)
    tvbrange = padded(offset + 210, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_200, tvbrange, value)
    tvbrange = padded(offset + 211, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_201, tvbrange, value)
    tvbrange = padded(offset + 212, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_202, tvbrange, value)
    tvbrange = padded(offset + 213, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_203, tvbrange, value)
    tvbrange = padded(offset + 214, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_204, tvbrange, value)
    tvbrange = padded(offset + 215, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_205, tvbrange, value)
    tvbrange = padded(offset + 216, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_206, tvbrange, value)
    tvbrange = padded(offset + 217, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_207, tvbrange, value)
    tvbrange = padded(offset + 218, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_208, tvbrange, value)
    tvbrange = padded(offset + 219, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_209, tvbrange, value)
    tvbrange = padded(offset + 220, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_210, tvbrange, value)
    tvbrange = padded(offset + 221, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_211, tvbrange, value)
    tvbrange = padded(offset + 222, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_212, tvbrange, value)
    tvbrange = padded(offset + 223, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_213, tvbrange, value)
    tvbrange = padded(offset + 224, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_214, tvbrange, value)
    tvbrange = padded(offset + 225, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_215, tvbrange, value)
    tvbrange = padded(offset + 226, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_216, tvbrange, value)
    tvbrange = padded(offset + 227, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_217, tvbrange, value)
    tvbrange = padded(offset + 228, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_218, tvbrange, value)
    tvbrange = padded(offset + 229, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SECURE_COMMAND_REPLY_data_219, tvbrange, value)
end
-- dissect payload of message type ADAP_TUNING
function payload_fns.payload_11010(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 49 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 49)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ADAP_TUNING_axis, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ADAP_TUNING_desired, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ADAP_TUNING_achieved, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ADAP_TUNING_error, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ADAP_TUNING_theta, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ADAP_TUNING_omega, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ADAP_TUNING_sigma, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ADAP_TUNING_theta_dot, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ADAP_TUNING_omega_dot, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ADAP_TUNING_sigma_dot, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ADAP_TUNING_f, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ADAP_TUNING_f_dot, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ADAP_TUNING_u, tvbrange, value)
end
-- dissect payload of message type VISION_POSITION_DELTA
function payload_fns.payload_11011(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 44 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 44)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.VISION_POSITION_DELTA_time_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.VISION_POSITION_DELTA_time_delta_usec, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_DELTA_angle_delta_0, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_DELTA_angle_delta_1, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_DELTA_angle_delta_2, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_DELTA_position_delta_0, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_DELTA_position_delta_1, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_DELTA_position_delta_2, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_DELTA_confidence, tvbrange, value)
end
-- dissect payload of message type AOA_SSA
function payload_fns.payload_11020(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 16 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 16)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.AOA_SSA_time_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AOA_SSA_AOA, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AOA_SSA_SSA, tvbrange, value)
end
-- dissect payload of message type ESC_TELEMETRY_1_TO_4
function payload_fns.payload_11030(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 44 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 44)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_1_TO_4_temperature_0, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_1_TO_4_temperature_1, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_1_TO_4_temperature_2, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_1_TO_4_temperature_3, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_1_TO_4_voltage_0, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_1_TO_4_voltage_1, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_1_TO_4_voltage_2, tvbrange, value)
    tvbrange = padded(offset + 6, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_1_TO_4_voltage_3, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_1_TO_4_current_0, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_1_TO_4_current_1, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_1_TO_4_current_2, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_1_TO_4_current_3, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_1_TO_4_totalcurrent_0, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_1_TO_4_totalcurrent_1, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_1_TO_4_totalcurrent_2, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_1_TO_4_totalcurrent_3, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_1_TO_4_rpm_0, tvbrange, value)
    tvbrange = padded(offset + 26, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_1_TO_4_rpm_1, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_1_TO_4_rpm_2, tvbrange, value)
    tvbrange = padded(offset + 30, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_1_TO_4_rpm_3, tvbrange, value)
    tvbrange = padded(offset + 32, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_1_TO_4_count_0, tvbrange, value)
    tvbrange = padded(offset + 34, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_1_TO_4_count_1, tvbrange, value)
    tvbrange = padded(offset + 36, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_1_TO_4_count_2, tvbrange, value)
    tvbrange = padded(offset + 38, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_1_TO_4_count_3, tvbrange, value)
end
-- dissect payload of message type ESC_TELEMETRY_5_TO_8
function payload_fns.payload_11031(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 44 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 44)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_5_TO_8_temperature_0, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_5_TO_8_temperature_1, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_5_TO_8_temperature_2, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_5_TO_8_temperature_3, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_5_TO_8_voltage_0, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_5_TO_8_voltage_1, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_5_TO_8_voltage_2, tvbrange, value)
    tvbrange = padded(offset + 6, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_5_TO_8_voltage_3, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_5_TO_8_current_0, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_5_TO_8_current_1, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_5_TO_8_current_2, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_5_TO_8_current_3, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_5_TO_8_totalcurrent_0, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_5_TO_8_totalcurrent_1, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_5_TO_8_totalcurrent_2, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_5_TO_8_totalcurrent_3, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_5_TO_8_rpm_0, tvbrange, value)
    tvbrange = padded(offset + 26, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_5_TO_8_rpm_1, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_5_TO_8_rpm_2, tvbrange, value)
    tvbrange = padded(offset + 30, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_5_TO_8_rpm_3, tvbrange, value)
    tvbrange = padded(offset + 32, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_5_TO_8_count_0, tvbrange, value)
    tvbrange = padded(offset + 34, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_5_TO_8_count_1, tvbrange, value)
    tvbrange = padded(offset + 36, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_5_TO_8_count_2, tvbrange, value)
    tvbrange = padded(offset + 38, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_5_TO_8_count_3, tvbrange, value)
end
-- dissect payload of message type ESC_TELEMETRY_9_TO_12
function payload_fns.payload_11032(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 44 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 44)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_9_TO_12_temperature_0, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_9_TO_12_temperature_1, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_9_TO_12_temperature_2, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_9_TO_12_temperature_3, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_9_TO_12_voltage_0, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_9_TO_12_voltage_1, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_9_TO_12_voltage_2, tvbrange, value)
    tvbrange = padded(offset + 6, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_9_TO_12_voltage_3, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_9_TO_12_current_0, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_9_TO_12_current_1, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_9_TO_12_current_2, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_9_TO_12_current_3, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_9_TO_12_totalcurrent_0, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_9_TO_12_totalcurrent_1, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_9_TO_12_totalcurrent_2, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_9_TO_12_totalcurrent_3, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_9_TO_12_rpm_0, tvbrange, value)
    tvbrange = padded(offset + 26, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_9_TO_12_rpm_1, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_9_TO_12_rpm_2, tvbrange, value)
    tvbrange = padded(offset + 30, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_9_TO_12_rpm_3, tvbrange, value)
    tvbrange = padded(offset + 32, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_9_TO_12_count_0, tvbrange, value)
    tvbrange = padded(offset + 34, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_9_TO_12_count_1, tvbrange, value)
    tvbrange = padded(offset + 36, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_9_TO_12_count_2, tvbrange, value)
    tvbrange = padded(offset + 38, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_9_TO_12_count_3, tvbrange, value)
end
-- dissect payload of message type OSD_PARAM_CONFIG
function payload_fns.payload_11033(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 37 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 37)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OSD_PARAM_CONFIG_target_system, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OSD_PARAM_CONFIG_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OSD_PARAM_CONFIG_request_id, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OSD_PARAM_CONFIG_osd_screen, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OSD_PARAM_CONFIG_osd_index, tvbrange, value)
    tvbrange = padded(offset + 20, 16)
    value = tvbrange:string()
    subtree = tree:add_le(f.OSD_PARAM_CONFIG_param_id, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OSD_PARAM_CONFIG_config_type, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OSD_PARAM_CONFIG_min_value, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OSD_PARAM_CONFIG_max_value, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OSD_PARAM_CONFIG_increment, tvbrange, value)
end
-- dissect payload of message type OSD_PARAM_CONFIG_REPLY
function payload_fns.payload_11034(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 5 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 5)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OSD_PARAM_CONFIG_REPLY_request_id, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OSD_PARAM_CONFIG_REPLY_result, tvbrange, value)
end
-- dissect payload of message type OSD_PARAM_SHOW_CONFIG
function payload_fns.payload_11035(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 8 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 8)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OSD_PARAM_SHOW_CONFIG_target_system, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OSD_PARAM_SHOW_CONFIG_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OSD_PARAM_SHOW_CONFIG_request_id, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OSD_PARAM_SHOW_CONFIG_osd_screen, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OSD_PARAM_SHOW_CONFIG_osd_index, tvbrange, value)
end
-- dissect payload of message type OSD_PARAM_SHOW_CONFIG_REPLY
function payload_fns.payload_11036(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 34 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 34)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OSD_PARAM_SHOW_CONFIG_REPLY_request_id, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OSD_PARAM_SHOW_CONFIG_REPLY_result, tvbrange, value)
    tvbrange = padded(offset + 17, 16)
    value = tvbrange:string()
    subtree = tree:add_le(f.OSD_PARAM_SHOW_CONFIG_REPLY_param_id, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OSD_PARAM_SHOW_CONFIG_REPLY_config_type, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OSD_PARAM_SHOW_CONFIG_REPLY_min_value, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OSD_PARAM_SHOW_CONFIG_REPLY_max_value, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OSD_PARAM_SHOW_CONFIG_REPLY_increment, tvbrange, value)
end
-- dissect payload of message type OBSTACLE_DISTANCE_3D
function payload_fns.payload_11037(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 28 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 28)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_3D_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_3D_sensor_type, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_3D_frame, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_3D_obstacle_id, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_3D_x, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_3D_y, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_3D_z, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_3D_min_distance, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_3D_max_distance, tvbrange, value)
end
-- dissect payload of message type WATER_DEPTH
function payload_fns.payload_11038(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 38 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 38)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.WATER_DEPTH_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.WATER_DEPTH_id, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.WATER_DEPTH_healthy, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.WATER_DEPTH_lat, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.WATER_DEPTH_lng, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.WATER_DEPTH_alt, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.WATER_DEPTH_roll, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.WATER_DEPTH_pitch, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.WATER_DEPTH_yaw, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.WATER_DEPTH_distance, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.WATER_DEPTH_temperature, tvbrange, value)
end
-- dissect payload of message type MCU_STATUS
function payload_fns.payload_11039(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 9 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 9)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MCU_STATUS_id, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MCU_STATUS_MCU_temperature, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MCU_STATUS_MCU_voltage, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MCU_STATUS_MCU_voltage_min, tvbrange, value)
    tvbrange = padded(offset + 6, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MCU_STATUS_MCU_voltage_max, tvbrange, value)
end
-- dissect payload of message type ESC_TELEMETRY_13_TO_16
function payload_fns.payload_11040(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 44 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 44)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_13_TO_16_temperature_0, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_13_TO_16_temperature_1, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_13_TO_16_temperature_2, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_13_TO_16_temperature_3, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_13_TO_16_voltage_0, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_13_TO_16_voltage_1, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_13_TO_16_voltage_2, tvbrange, value)
    tvbrange = padded(offset + 6, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_13_TO_16_voltage_3, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_13_TO_16_current_0, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_13_TO_16_current_1, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_13_TO_16_current_2, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_13_TO_16_current_3, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_13_TO_16_totalcurrent_0, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_13_TO_16_totalcurrent_1, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_13_TO_16_totalcurrent_2, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_13_TO_16_totalcurrent_3, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_13_TO_16_rpm_0, tvbrange, value)
    tvbrange = padded(offset + 26, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_13_TO_16_rpm_1, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_13_TO_16_rpm_2, tvbrange, value)
    tvbrange = padded(offset + 30, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_13_TO_16_rpm_3, tvbrange, value)
    tvbrange = padded(offset + 32, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_13_TO_16_count_0, tvbrange, value)
    tvbrange = padded(offset + 34, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_13_TO_16_count_1, tvbrange, value)
    tvbrange = padded(offset + 36, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_13_TO_16_count_2, tvbrange, value)
    tvbrange = padded(offset + 38, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_13_TO_16_count_3, tvbrange, value)
end
-- dissect payload of message type ESC_TELEMETRY_17_TO_20
function payload_fns.payload_11041(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 44 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 44)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_17_TO_20_temperature_0, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_17_TO_20_temperature_1, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_17_TO_20_temperature_2, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_17_TO_20_temperature_3, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_17_TO_20_voltage_0, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_17_TO_20_voltage_1, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_17_TO_20_voltage_2, tvbrange, value)
    tvbrange = padded(offset + 6, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_17_TO_20_voltage_3, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_17_TO_20_current_0, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_17_TO_20_current_1, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_17_TO_20_current_2, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_17_TO_20_current_3, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_17_TO_20_totalcurrent_0, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_17_TO_20_totalcurrent_1, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_17_TO_20_totalcurrent_2, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_17_TO_20_totalcurrent_3, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_17_TO_20_rpm_0, tvbrange, value)
    tvbrange = padded(offset + 26, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_17_TO_20_rpm_1, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_17_TO_20_rpm_2, tvbrange, value)
    tvbrange = padded(offset + 30, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_17_TO_20_rpm_3, tvbrange, value)
    tvbrange = padded(offset + 32, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_17_TO_20_count_0, tvbrange, value)
    tvbrange = padded(offset + 34, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_17_TO_20_count_1, tvbrange, value)
    tvbrange = padded(offset + 36, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_17_TO_20_count_2, tvbrange, value)
    tvbrange = padded(offset + 38, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_17_TO_20_count_3, tvbrange, value)
end
-- dissect payload of message type ESC_TELEMETRY_21_TO_24
function payload_fns.payload_11042(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 44 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 44)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_21_TO_24_temperature_0, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_21_TO_24_temperature_1, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_21_TO_24_temperature_2, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_21_TO_24_temperature_3, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_21_TO_24_voltage_0, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_21_TO_24_voltage_1, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_21_TO_24_voltage_2, tvbrange, value)
    tvbrange = padded(offset + 6, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_21_TO_24_voltage_3, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_21_TO_24_current_0, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_21_TO_24_current_1, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_21_TO_24_current_2, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_21_TO_24_current_3, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_21_TO_24_totalcurrent_0, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_21_TO_24_totalcurrent_1, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_21_TO_24_totalcurrent_2, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_21_TO_24_totalcurrent_3, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_21_TO_24_rpm_0, tvbrange, value)
    tvbrange = padded(offset + 26, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_21_TO_24_rpm_1, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_21_TO_24_rpm_2, tvbrange, value)
    tvbrange = padded(offset + 30, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_21_TO_24_rpm_3, tvbrange, value)
    tvbrange = padded(offset + 32, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_21_TO_24_count_0, tvbrange, value)
    tvbrange = padded(offset + 34, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_21_TO_24_count_1, tvbrange, value)
    tvbrange = padded(offset + 36, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_21_TO_24_count_2, tvbrange, value)
    tvbrange = padded(offset + 38, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_21_TO_24_count_3, tvbrange, value)
end
-- dissect payload of message type ESC_TELEMETRY_25_TO_28
function payload_fns.payload_11043(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 44 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 44)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_25_TO_28_temperature_0, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_25_TO_28_temperature_1, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_25_TO_28_temperature_2, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_25_TO_28_temperature_3, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_25_TO_28_voltage_0, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_25_TO_28_voltage_1, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_25_TO_28_voltage_2, tvbrange, value)
    tvbrange = padded(offset + 6, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_25_TO_28_voltage_3, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_25_TO_28_current_0, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_25_TO_28_current_1, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_25_TO_28_current_2, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_25_TO_28_current_3, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_25_TO_28_totalcurrent_0, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_25_TO_28_totalcurrent_1, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_25_TO_28_totalcurrent_2, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_25_TO_28_totalcurrent_3, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_25_TO_28_rpm_0, tvbrange, value)
    tvbrange = padded(offset + 26, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_25_TO_28_rpm_1, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_25_TO_28_rpm_2, tvbrange, value)
    tvbrange = padded(offset + 30, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_25_TO_28_rpm_3, tvbrange, value)
    tvbrange = padded(offset + 32, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_25_TO_28_count_0, tvbrange, value)
    tvbrange = padded(offset + 34, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_25_TO_28_count_1, tvbrange, value)
    tvbrange = padded(offset + 36, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_25_TO_28_count_2, tvbrange, value)
    tvbrange = padded(offset + 38, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_25_TO_28_count_3, tvbrange, value)
end
-- dissect payload of message type ESC_TELEMETRY_29_TO_32
function payload_fns.payload_11044(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 44 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 44)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_29_TO_32_temperature_0, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_29_TO_32_temperature_1, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_29_TO_32_temperature_2, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_29_TO_32_temperature_3, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_29_TO_32_voltage_0, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_29_TO_32_voltage_1, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_29_TO_32_voltage_2, tvbrange, value)
    tvbrange = padded(offset + 6, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_29_TO_32_voltage_3, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_29_TO_32_current_0, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_29_TO_32_current_1, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_29_TO_32_current_2, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_29_TO_32_current_3, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_29_TO_32_totalcurrent_0, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_29_TO_32_totalcurrent_1, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_29_TO_32_totalcurrent_2, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_29_TO_32_totalcurrent_3, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_29_TO_32_rpm_0, tvbrange, value)
    tvbrange = padded(offset + 26, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_29_TO_32_rpm_1, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_29_TO_32_rpm_2, tvbrange, value)
    tvbrange = padded(offset + 30, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_29_TO_32_rpm_3, tvbrange, value)
    tvbrange = padded(offset + 32, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_29_TO_32_count_0, tvbrange, value)
    tvbrange = padded(offset + 34, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_29_TO_32_count_1, tvbrange, value)
    tvbrange = padded(offset + 36, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_29_TO_32_count_2, tvbrange, value)
    tvbrange = padded(offset + 38, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESC_TELEMETRY_29_TO_32_count_3, tvbrange, value)
end
-- dissect payload of message type VIDEO_STREAM_INFORMATION99
function payload_fns.payload_26900(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 246 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 246)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VIDEO_STREAM_INFORMATION99_camera_id, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VIDEO_STREAM_INFORMATION99_status, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VIDEO_STREAM_INFORMATION99_framerate, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VIDEO_STREAM_INFORMATION99_resolution_h, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VIDEO_STREAM_INFORMATION99_resolution_v, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VIDEO_STREAM_INFORMATION99_bitrate, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VIDEO_STREAM_INFORMATION99_rotation, tvbrange, value)
    tvbrange = padded(offset + 16, 230)
    value = tvbrange:string()
    subtree = tree:add_le(f.VIDEO_STREAM_INFORMATION99_uri, tvbrange, value)
end
-- dissect payload of message type SYS_STATUS
function payload_fns.payload_1(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 31 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 31)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SYS_STATUS_onboard_control_sensors_present, tvbrange, value)
    dissect_flags_MAV_SYS_STATUS_SENSOR(subtree, "SYS_STATUS_onboard_control_sensors_present", tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SYS_STATUS_onboard_control_sensors_enabled, tvbrange, value)
    dissect_flags_MAV_SYS_STATUS_SENSOR(subtree, "SYS_STATUS_onboard_control_sensors_enabled", tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SYS_STATUS_onboard_control_sensors_health, tvbrange, value)
    dissect_flags_MAV_SYS_STATUS_SENSOR(subtree, "SYS_STATUS_onboard_control_sensors_health", tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SYS_STATUS_load, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SYS_STATUS_voltage_battery, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SYS_STATUS_current_battery, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SYS_STATUS_battery_remaining, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SYS_STATUS_drop_rate_comm, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SYS_STATUS_errors_comm, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SYS_STATUS_errors_count1, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SYS_STATUS_errors_count2, tvbrange, value)
    tvbrange = padded(offset + 26, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SYS_STATUS_errors_count3, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SYS_STATUS_errors_count4, tvbrange, value)
end
-- dissect payload of message type SYSTEM_TIME
function payload_fns.payload_2(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 12 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 12)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.SYSTEM_TIME_time_unix_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SYSTEM_TIME_time_boot_ms, tvbrange, value)
end
-- dissect payload of message type PING
function payload_fns.payload_4(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 14 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 14)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.PING_time_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PING_seq, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PING_target_system, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PING_target_component, tvbrange, value)
end
-- dissect payload of message type CHANGE_OPERATOR_CONTROL
function payload_fns.payload_5(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 28 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 28)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CHANGE_OPERATOR_CONTROL_target_system, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CHANGE_OPERATOR_CONTROL_control_request, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CHANGE_OPERATOR_CONTROL_version, tvbrange, value)
    tvbrange = padded(offset + 3, 25)
    value = tvbrange:string()
    subtree = tree:add_le(f.CHANGE_OPERATOR_CONTROL_passkey, tvbrange, value)
end
-- dissect payload of message type CHANGE_OPERATOR_CONTROL_ACK
function payload_fns.payload_6(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 3 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 3)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CHANGE_OPERATOR_CONTROL_ACK_gcs_system_id, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CHANGE_OPERATOR_CONTROL_ACK_control_request, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CHANGE_OPERATOR_CONTROL_ACK_ack, tvbrange, value)
end
-- dissect payload of message type AUTH_KEY
function payload_fns.payload_7(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 32 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 32)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 32)
    value = tvbrange:string()
    subtree = tree:add_le(f.AUTH_KEY_key, tvbrange, value)
end
-- dissect payload of message type SET_MODE
function payload_fns.payload_11(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 6 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 6)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SET_MODE_target_system, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SET_MODE_base_mode, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SET_MODE_custom_mode, tvbrange, value)
end
-- dissect payload of message type PARAM_REQUEST_READ
function payload_fns.payload_20(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 20 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 20)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PARAM_REQUEST_READ_target_system, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PARAM_REQUEST_READ_target_component, tvbrange, value)
    tvbrange = padded(offset + 4, 16)
    value = tvbrange:string()
    subtree = tree:add_le(f.PARAM_REQUEST_READ_param_id, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.PARAM_REQUEST_READ_param_index, tvbrange, value)
end
-- dissect payload of message type PARAM_REQUEST_LIST
function payload_fns.payload_21(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 2 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 2)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PARAM_REQUEST_LIST_target_system, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PARAM_REQUEST_LIST_target_component, tvbrange, value)
end
-- dissect payload of message type PARAM_VALUE
function payload_fns.payload_22(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 25 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 25)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 8, 16)
    value = tvbrange:string()
    subtree = tree:add_le(f.PARAM_VALUE_param_id, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.PARAM_VALUE_param_value, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PARAM_VALUE_param_type, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PARAM_VALUE_param_count, tvbrange, value)
    tvbrange = padded(offset + 6, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PARAM_VALUE_param_index, tvbrange, value)
end
-- dissect payload of message type PARAM_SET
function payload_fns.payload_23(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 23 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 23)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PARAM_SET_target_system, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PARAM_SET_target_component, tvbrange, value)
    tvbrange = padded(offset + 6, 16)
    value = tvbrange:string()
    subtree = tree:add_le(f.PARAM_SET_param_id, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.PARAM_SET_param_value, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PARAM_SET_param_type, tvbrange, value)
end
-- dissect payload of message type GPS_RAW_INT
function payload_fns.payload_24(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 52 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 52)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.GPS_RAW_INT_time_usec, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RAW_INT_fix_type, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GPS_RAW_INT_lat, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GPS_RAW_INT_lon, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GPS_RAW_INT_alt, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RAW_INT_eph, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RAW_INT_epv, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RAW_INT_vel, tvbrange, value)
    tvbrange = padded(offset + 26, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RAW_INT_cog, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RAW_INT_satellites_visible, tvbrange, value)
    tvbrange = padded(offset + 30, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GPS_RAW_INT_alt_ellipsoid, tvbrange, value)
    tvbrange = padded(offset + 34, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RAW_INT_h_acc, tvbrange, value)
    tvbrange = padded(offset + 38, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RAW_INT_v_acc, tvbrange, value)
    tvbrange = padded(offset + 42, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RAW_INT_vel_acc, tvbrange, value)
    tvbrange = padded(offset + 46, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RAW_INT_hdg_acc, tvbrange, value)
    tvbrange = padded(offset + 50, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RAW_INT_yaw, tvbrange, value)
end
-- dissect payload of message type GPS_STATUS
function payload_fns.payload_25(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 101 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 101)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellites_visible, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_prn_0, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_prn_1, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_prn_2, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_prn_3, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_prn_4, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_prn_5, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_prn_6, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_prn_7, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_prn_8, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_prn_9, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_prn_10, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_prn_11, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_prn_12, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_prn_13, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_prn_14, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_prn_15, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_prn_16, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_prn_17, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_prn_18, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_prn_19, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_used_0, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_used_1, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_used_2, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_used_3, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_used_4, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_used_5, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_used_6, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_used_7, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_used_8, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_used_9, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_used_10, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_used_11, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_used_12, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_used_13, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_used_14, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_used_15, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_used_16, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_used_17, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_used_18, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_used_19, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_elevation_0, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_elevation_1, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_elevation_2, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_elevation_3, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_elevation_4, tvbrange, value)
    tvbrange = padded(offset + 46, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_elevation_5, tvbrange, value)
    tvbrange = padded(offset + 47, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_elevation_6, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_elevation_7, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_elevation_8, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_elevation_9, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_elevation_10, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_elevation_11, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_elevation_12, tvbrange, value)
    tvbrange = padded(offset + 54, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_elevation_13, tvbrange, value)
    tvbrange = padded(offset + 55, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_elevation_14, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_elevation_15, tvbrange, value)
    tvbrange = padded(offset + 57, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_elevation_16, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_elevation_17, tvbrange, value)
    tvbrange = padded(offset + 59, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_elevation_18, tvbrange, value)
    tvbrange = padded(offset + 60, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_elevation_19, tvbrange, value)
    tvbrange = padded(offset + 61, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_azimuth_0, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_azimuth_1, tvbrange, value)
    tvbrange = padded(offset + 63, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_azimuth_2, tvbrange, value)
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_azimuth_3, tvbrange, value)
    tvbrange = padded(offset + 65, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_azimuth_4, tvbrange, value)
    tvbrange = padded(offset + 66, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_azimuth_5, tvbrange, value)
    tvbrange = padded(offset + 67, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_azimuth_6, tvbrange, value)
    tvbrange = padded(offset + 68, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_azimuth_7, tvbrange, value)
    tvbrange = padded(offset + 69, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_azimuth_8, tvbrange, value)
    tvbrange = padded(offset + 70, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_azimuth_9, tvbrange, value)
    tvbrange = padded(offset + 71, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_azimuth_10, tvbrange, value)
    tvbrange = padded(offset + 72, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_azimuth_11, tvbrange, value)
    tvbrange = padded(offset + 73, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_azimuth_12, tvbrange, value)
    tvbrange = padded(offset + 74, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_azimuth_13, tvbrange, value)
    tvbrange = padded(offset + 75, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_azimuth_14, tvbrange, value)
    tvbrange = padded(offset + 76, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_azimuth_15, tvbrange, value)
    tvbrange = padded(offset + 77, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_azimuth_16, tvbrange, value)
    tvbrange = padded(offset + 78, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_azimuth_17, tvbrange, value)
    tvbrange = padded(offset + 79, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_azimuth_18, tvbrange, value)
    tvbrange = padded(offset + 80, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_azimuth_19, tvbrange, value)
    tvbrange = padded(offset + 81, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_snr_0, tvbrange, value)
    tvbrange = padded(offset + 82, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_snr_1, tvbrange, value)
    tvbrange = padded(offset + 83, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_snr_2, tvbrange, value)
    tvbrange = padded(offset + 84, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_snr_3, tvbrange, value)
    tvbrange = padded(offset + 85, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_snr_4, tvbrange, value)
    tvbrange = padded(offset + 86, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_snr_5, tvbrange, value)
    tvbrange = padded(offset + 87, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_snr_6, tvbrange, value)
    tvbrange = padded(offset + 88, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_snr_7, tvbrange, value)
    tvbrange = padded(offset + 89, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_snr_8, tvbrange, value)
    tvbrange = padded(offset + 90, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_snr_9, tvbrange, value)
    tvbrange = padded(offset + 91, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_snr_10, tvbrange, value)
    tvbrange = padded(offset + 92, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_snr_11, tvbrange, value)
    tvbrange = padded(offset + 93, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_snr_12, tvbrange, value)
    tvbrange = padded(offset + 94, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_snr_13, tvbrange, value)
    tvbrange = padded(offset + 95, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_snr_14, tvbrange, value)
    tvbrange = padded(offset + 96, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_snr_15, tvbrange, value)
    tvbrange = padded(offset + 97, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_snr_16, tvbrange, value)
    tvbrange = padded(offset + 98, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_snr_17, tvbrange, value)
    tvbrange = padded(offset + 99, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_snr_18, tvbrange, value)
    tvbrange = padded(offset + 100, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_STATUS_satellite_snr_19, tvbrange, value)
end
-- dissect payload of message type SCALED_IMU
function payload_fns.payload_26(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 24 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 24)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SCALED_IMU_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU_xacc, tvbrange, value)
    tvbrange = padded(offset + 6, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU_yacc, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU_zacc, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU_xgyro, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU_ygyro, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU_zgyro, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU_xmag, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU_ymag, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU_zmag, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU_temperature, tvbrange, value)
end
-- dissect payload of message type RAW_IMU
function payload_fns.payload_27(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 29 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 29)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.RAW_IMU_time_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RAW_IMU_xacc, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RAW_IMU_yacc, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RAW_IMU_zacc, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RAW_IMU_xgyro, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RAW_IMU_ygyro, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RAW_IMU_zgyro, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RAW_IMU_xmag, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RAW_IMU_ymag, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RAW_IMU_zmag, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RAW_IMU_id, tvbrange, value)
    tvbrange = padded(offset + 27, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RAW_IMU_temperature, tvbrange, value)
end
-- dissect payload of message type RAW_PRESSURE
function payload_fns.payload_28(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 16 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 16)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.RAW_PRESSURE_time_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RAW_PRESSURE_press_abs, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RAW_PRESSURE_press_diff1, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RAW_PRESSURE_press_diff2, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RAW_PRESSURE_temperature, tvbrange, value)
end
-- dissect payload of message type SCALED_PRESSURE
function payload_fns.payload_29(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 16 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 16)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SCALED_PRESSURE_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SCALED_PRESSURE_press_abs, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SCALED_PRESSURE_press_diff, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_PRESSURE_temperature, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_PRESSURE_temperature_press_diff, tvbrange, value)
end
-- dissect payload of message type ATTITUDE
function payload_fns.payload_30(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 28 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 28)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ATTITUDE_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_roll, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_pitch, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_yaw, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_rollspeed, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_pitchspeed, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_yawspeed, tvbrange, value)
end
-- dissect payload of message type ATTITUDE_QUATERNION
function payload_fns.payload_31(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 48 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 48)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_q1, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_q2, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_q3, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_q4, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_rollspeed, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_pitchspeed, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_yawspeed, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_repr_offset_q_0, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_repr_offset_q_1, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_repr_offset_q_2, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_repr_offset_q_3, tvbrange, value)
end
-- dissect payload of message type LOCAL_POSITION_NED
function payload_fns.payload_32(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 28 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 28)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_x, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_y, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_z, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_vx, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_vy, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_vz, tvbrange, value)
end
-- dissect payload of message type GLOBAL_POSITION_INT
function payload_fns.payload_33(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 28 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 28)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_lat, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_lon, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_alt, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_relative_alt, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_vx, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_vy, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_vz, tvbrange, value)
    tvbrange = padded(offset + 26, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_hdg, tvbrange, value)
end
-- dissect payload of message type RC_CHANNELS_SCALED
function payload_fns.payload_34(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 22 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 22)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_SCALED_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_SCALED_port, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RC_CHANNELS_SCALED_chan1_scaled, tvbrange, value)
    tvbrange = padded(offset + 6, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RC_CHANNELS_SCALED_chan2_scaled, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RC_CHANNELS_SCALED_chan3_scaled, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RC_CHANNELS_SCALED_chan4_scaled, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RC_CHANNELS_SCALED_chan5_scaled, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RC_CHANNELS_SCALED_chan6_scaled, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RC_CHANNELS_SCALED_chan7_scaled, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.RC_CHANNELS_SCALED_chan8_scaled, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_SCALED_rssi, tvbrange, value)
end
-- dissect payload of message type RC_CHANNELS_RAW
function payload_fns.payload_35(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 22 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 22)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_RAW_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_RAW_port, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_RAW_chan1_raw, tvbrange, value)
    tvbrange = padded(offset + 6, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_RAW_chan2_raw, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_RAW_chan3_raw, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_RAW_chan4_raw, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_RAW_chan5_raw, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_RAW_chan6_raw, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_RAW_chan7_raw, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_RAW_chan8_raw, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_RAW_rssi, tvbrange, value)
end
-- dissect payload of message type SERVO_OUTPUT_RAW
function payload_fns.payload_36(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 37 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 37)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERVO_OUTPUT_RAW_time_usec, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERVO_OUTPUT_RAW_port, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERVO_OUTPUT_RAW_servo1_raw, tvbrange, value)
    tvbrange = padded(offset + 6, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERVO_OUTPUT_RAW_servo2_raw, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERVO_OUTPUT_RAW_servo3_raw, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERVO_OUTPUT_RAW_servo4_raw, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERVO_OUTPUT_RAW_servo5_raw, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERVO_OUTPUT_RAW_servo6_raw, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERVO_OUTPUT_RAW_servo7_raw, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERVO_OUTPUT_RAW_servo8_raw, tvbrange, value)
    tvbrange = padded(offset + 21, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERVO_OUTPUT_RAW_servo9_raw, tvbrange, value)
    tvbrange = padded(offset + 23, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERVO_OUTPUT_RAW_servo10_raw, tvbrange, value)
    tvbrange = padded(offset + 25, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERVO_OUTPUT_RAW_servo11_raw, tvbrange, value)
    tvbrange = padded(offset + 27, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERVO_OUTPUT_RAW_servo12_raw, tvbrange, value)
    tvbrange = padded(offset + 29, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERVO_OUTPUT_RAW_servo13_raw, tvbrange, value)
    tvbrange = padded(offset + 31, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERVO_OUTPUT_RAW_servo14_raw, tvbrange, value)
    tvbrange = padded(offset + 33, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERVO_OUTPUT_RAW_servo15_raw, tvbrange, value)
    tvbrange = padded(offset + 35, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERVO_OUTPUT_RAW_servo16_raw, tvbrange, value)
end
-- dissect payload of message type MISSION_REQUEST_PARTIAL_LIST
function payload_fns.payload_37(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 7 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 7)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_REQUEST_PARTIAL_LIST_target_system, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_REQUEST_PARTIAL_LIST_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MISSION_REQUEST_PARTIAL_LIST_start_index, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MISSION_REQUEST_PARTIAL_LIST_end_index, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_REQUEST_PARTIAL_LIST_mission_type, tvbrange, value)
end
-- dissect payload of message type MISSION_WRITE_PARTIAL_LIST
function payload_fns.payload_38(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 7 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 7)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_WRITE_PARTIAL_LIST_target_system, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_WRITE_PARTIAL_LIST_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MISSION_WRITE_PARTIAL_LIST_start_index, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MISSION_WRITE_PARTIAL_LIST_end_index, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_WRITE_PARTIAL_LIST_mission_type, tvbrange, value)
end
-- dissect payload of message type MISSION_ITEM
function payload_fns.payload_39(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 38 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 38)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_ITEM_target_system, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_ITEM_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_ITEM_seq, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_ITEM_frame, tvbrange, value)
    tvbrange = padded(offset + 30, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_ITEM_command, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_ITEM_current, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_ITEM_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MISSION_ITEM_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MISSION_ITEM_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MISSION_ITEM_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MISSION_ITEM_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MISSION_ITEM_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MISSION_ITEM_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MISSION_ITEM_z, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_ITEM_mission_type, tvbrange, value)
end
-- dissect payload of message type MISSION_REQUEST
function payload_fns.payload_40(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 5 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 5)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_REQUEST_target_system, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_REQUEST_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_REQUEST_seq, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_REQUEST_mission_type, tvbrange, value)
end
-- dissect payload of message type MISSION_SET_CURRENT
function payload_fns.payload_41(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 4 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 4)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_SET_CURRENT_target_system, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_SET_CURRENT_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_SET_CURRENT_seq, tvbrange, value)
end
-- dissect payload of message type MISSION_CURRENT
function payload_fns.payload_42(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 6 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 6)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_CURRENT_seq, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_CURRENT_total, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_CURRENT_mission_state, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_CURRENT_mission_mode, tvbrange, value)
end
-- dissect payload of message type MISSION_REQUEST_LIST
function payload_fns.payload_43(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 3 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 3)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_REQUEST_LIST_target_system, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_REQUEST_LIST_target_component, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_REQUEST_LIST_mission_type, tvbrange, value)
end
-- dissect payload of message type MISSION_COUNT
function payload_fns.payload_44(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 5 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 5)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_COUNT_target_system, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_COUNT_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_COUNT_count, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_COUNT_mission_type, tvbrange, value)
end
-- dissect payload of message type MISSION_CLEAR_ALL
function payload_fns.payload_45(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 3 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 3)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_CLEAR_ALL_target_system, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_CLEAR_ALL_target_component, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_CLEAR_ALL_mission_type, tvbrange, value)
end
-- dissect payload of message type MISSION_ITEM_REACHED
function payload_fns.payload_46(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 2 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 2)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_ITEM_REACHED_seq, tvbrange, value)
end
-- dissect payload of message type MISSION_ACK
function payload_fns.payload_47(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 4 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 4)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_ACK_target_system, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_ACK_target_component, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_ACK_type, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_ACK_mission_type, tvbrange, value)
end
-- dissect payload of message type SET_GPS_GLOBAL_ORIGIN
function payload_fns.payload_48(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 21 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 21)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SET_GPS_GLOBAL_ORIGIN_target_system, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SET_GPS_GLOBAL_ORIGIN_latitude, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SET_GPS_GLOBAL_ORIGIN_longitude, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SET_GPS_GLOBAL_ORIGIN_altitude, tvbrange, value)
    tvbrange = padded(offset + 13, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.SET_GPS_GLOBAL_ORIGIN_time_usec, tvbrange, value)
end
-- dissect payload of message type GPS_GLOBAL_ORIGIN
function payload_fns.payload_49(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 20 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 20)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GPS_GLOBAL_ORIGIN_latitude, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GPS_GLOBAL_ORIGIN_longitude, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GPS_GLOBAL_ORIGIN_altitude, tvbrange, value)
    tvbrange = padded(offset + 12, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.GPS_GLOBAL_ORIGIN_time_usec, tvbrange, value)
end
-- dissect payload of message type PARAM_MAP_RC
function payload_fns.payload_50(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 37 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 37)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PARAM_MAP_RC_target_system, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PARAM_MAP_RC_target_component, tvbrange, value)
    tvbrange = padded(offset + 20, 16)
    value = tvbrange:string()
    subtree = tree:add_le(f.PARAM_MAP_RC_param_id, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.PARAM_MAP_RC_param_index, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PARAM_MAP_RC_parameter_rc_channel_index, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.PARAM_MAP_RC_param_value0, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.PARAM_MAP_RC_scale, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.PARAM_MAP_RC_param_value_min, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.PARAM_MAP_RC_param_value_max, tvbrange, value)
end
-- dissect payload of message type MISSION_REQUEST_INT
function payload_fns.payload_51(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 5 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 5)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_REQUEST_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_REQUEST_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_REQUEST_INT_seq, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_REQUEST_INT_mission_type, tvbrange, value)
end
-- dissect payload of message type SAFETY_SET_ALLOWED_AREA
function payload_fns.payload_54(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 27 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 27)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SAFETY_SET_ALLOWED_AREA_target_system, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SAFETY_SET_ALLOWED_AREA_target_component, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SAFETY_SET_ALLOWED_AREA_frame, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SAFETY_SET_ALLOWED_AREA_p1x, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SAFETY_SET_ALLOWED_AREA_p1y, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SAFETY_SET_ALLOWED_AREA_p1z, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SAFETY_SET_ALLOWED_AREA_p2x, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SAFETY_SET_ALLOWED_AREA_p2y, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SAFETY_SET_ALLOWED_AREA_p2z, tvbrange, value)
end
-- dissect payload of message type SAFETY_ALLOWED_AREA
function payload_fns.payload_55(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 25 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 25)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SAFETY_ALLOWED_AREA_frame, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SAFETY_ALLOWED_AREA_p1x, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SAFETY_ALLOWED_AREA_p1y, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SAFETY_ALLOWED_AREA_p1z, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SAFETY_ALLOWED_AREA_p2x, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SAFETY_ALLOWED_AREA_p2y, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SAFETY_ALLOWED_AREA_p2z, tvbrange, value)
end
-- dissect payload of message type ATTITUDE_QUATERNION_COV
function payload_fns.payload_61(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 72 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 72)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_COV_time_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_COV_q_0, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_COV_q_1, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_COV_q_2, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_COV_q_3, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_COV_rollspeed, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_COV_pitchspeed, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_COV_yawspeed, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_COV_covariance_0, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_COV_covariance_1, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_COV_covariance_2, tvbrange, value)
    tvbrange = padded(offset + 48, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_COV_covariance_3, tvbrange, value)
    tvbrange = padded(offset + 52, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_COV_covariance_4, tvbrange, value)
    tvbrange = padded(offset + 56, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_COV_covariance_5, tvbrange, value)
    tvbrange = padded(offset + 60, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_COV_covariance_6, tvbrange, value)
    tvbrange = padded(offset + 64, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_COV_covariance_7, tvbrange, value)
    tvbrange = padded(offset + 68, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_QUATERNION_COV_covariance_8, tvbrange, value)
end
-- dissect payload of message type NAV_CONTROLLER_OUTPUT
function payload_fns.payload_62(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 26 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 26)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.NAV_CONTROLLER_OUTPUT_nav_roll, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.NAV_CONTROLLER_OUTPUT_nav_pitch, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.NAV_CONTROLLER_OUTPUT_nav_bearing, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.NAV_CONTROLLER_OUTPUT_target_bearing, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.NAV_CONTROLLER_OUTPUT_wp_dist, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.NAV_CONTROLLER_OUTPUT_alt_error, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.NAV_CONTROLLER_OUTPUT_aspd_error, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.NAV_CONTROLLER_OUTPUT_xtrack_error, tvbrange, value)
end
-- dissect payload of message type GLOBAL_POSITION_INT_COV
function payload_fns.payload_63(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 181 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 181)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_time_usec, tvbrange, value)
    tvbrange = padded(offset + 180, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_estimator_type, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_lat, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_lon, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_alt, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_relative_alt, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_vx, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_vy, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_vz, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_0, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_1, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_2, tvbrange, value)
    tvbrange = padded(offset + 48, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_3, tvbrange, value)
    tvbrange = padded(offset + 52, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_4, tvbrange, value)
    tvbrange = padded(offset + 56, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_5, tvbrange, value)
    tvbrange = padded(offset + 60, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_6, tvbrange, value)
    tvbrange = padded(offset + 64, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_7, tvbrange, value)
    tvbrange = padded(offset + 68, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_8, tvbrange, value)
    tvbrange = padded(offset + 72, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_9, tvbrange, value)
    tvbrange = padded(offset + 76, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_10, tvbrange, value)
    tvbrange = padded(offset + 80, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_11, tvbrange, value)
    tvbrange = padded(offset + 84, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_12, tvbrange, value)
    tvbrange = padded(offset + 88, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_13, tvbrange, value)
    tvbrange = padded(offset + 92, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_14, tvbrange, value)
    tvbrange = padded(offset + 96, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_15, tvbrange, value)
    tvbrange = padded(offset + 100, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_16, tvbrange, value)
    tvbrange = padded(offset + 104, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_17, tvbrange, value)
    tvbrange = padded(offset + 108, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_18, tvbrange, value)
    tvbrange = padded(offset + 112, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_19, tvbrange, value)
    tvbrange = padded(offset + 116, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_20, tvbrange, value)
    tvbrange = padded(offset + 120, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_21, tvbrange, value)
    tvbrange = padded(offset + 124, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_22, tvbrange, value)
    tvbrange = padded(offset + 128, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_23, tvbrange, value)
    tvbrange = padded(offset + 132, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_24, tvbrange, value)
    tvbrange = padded(offset + 136, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_25, tvbrange, value)
    tvbrange = padded(offset + 140, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_26, tvbrange, value)
    tvbrange = padded(offset + 144, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_27, tvbrange, value)
    tvbrange = padded(offset + 148, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_28, tvbrange, value)
    tvbrange = padded(offset + 152, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_29, tvbrange, value)
    tvbrange = padded(offset + 156, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_30, tvbrange, value)
    tvbrange = padded(offset + 160, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_31, tvbrange, value)
    tvbrange = padded(offset + 164, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_32, tvbrange, value)
    tvbrange = padded(offset + 168, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_33, tvbrange, value)
    tvbrange = padded(offset + 172, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_34, tvbrange, value)
    tvbrange = padded(offset + 176, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_POSITION_INT_COV_covariance_35, tvbrange, value)
end
-- dissect payload of message type LOCAL_POSITION_NED_COV
function payload_fns.payload_64(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 225 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 225)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_time_usec, tvbrange, value)
    tvbrange = padded(offset + 224, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_estimator_type, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_x, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_y, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_z, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_vx, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_vy, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_vz, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_ax, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_ay, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_az, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_0, tvbrange, value)
    tvbrange = padded(offset + 48, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_1, tvbrange, value)
    tvbrange = padded(offset + 52, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_2, tvbrange, value)
    tvbrange = padded(offset + 56, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_3, tvbrange, value)
    tvbrange = padded(offset + 60, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_4, tvbrange, value)
    tvbrange = padded(offset + 64, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_5, tvbrange, value)
    tvbrange = padded(offset + 68, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_6, tvbrange, value)
    tvbrange = padded(offset + 72, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_7, tvbrange, value)
    tvbrange = padded(offset + 76, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_8, tvbrange, value)
    tvbrange = padded(offset + 80, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_9, tvbrange, value)
    tvbrange = padded(offset + 84, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_10, tvbrange, value)
    tvbrange = padded(offset + 88, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_11, tvbrange, value)
    tvbrange = padded(offset + 92, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_12, tvbrange, value)
    tvbrange = padded(offset + 96, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_13, tvbrange, value)
    tvbrange = padded(offset + 100, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_14, tvbrange, value)
    tvbrange = padded(offset + 104, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_15, tvbrange, value)
    tvbrange = padded(offset + 108, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_16, tvbrange, value)
    tvbrange = padded(offset + 112, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_17, tvbrange, value)
    tvbrange = padded(offset + 116, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_18, tvbrange, value)
    tvbrange = padded(offset + 120, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_19, tvbrange, value)
    tvbrange = padded(offset + 124, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_20, tvbrange, value)
    tvbrange = padded(offset + 128, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_21, tvbrange, value)
    tvbrange = padded(offset + 132, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_22, tvbrange, value)
    tvbrange = padded(offset + 136, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_23, tvbrange, value)
    tvbrange = padded(offset + 140, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_24, tvbrange, value)
    tvbrange = padded(offset + 144, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_25, tvbrange, value)
    tvbrange = padded(offset + 148, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_26, tvbrange, value)
    tvbrange = padded(offset + 152, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_27, tvbrange, value)
    tvbrange = padded(offset + 156, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_28, tvbrange, value)
    tvbrange = padded(offset + 160, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_29, tvbrange, value)
    tvbrange = padded(offset + 164, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_30, tvbrange, value)
    tvbrange = padded(offset + 168, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_31, tvbrange, value)
    tvbrange = padded(offset + 172, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_32, tvbrange, value)
    tvbrange = padded(offset + 176, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_33, tvbrange, value)
    tvbrange = padded(offset + 180, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_34, tvbrange, value)
    tvbrange = padded(offset + 184, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_35, tvbrange, value)
    tvbrange = padded(offset + 188, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_36, tvbrange, value)
    tvbrange = padded(offset + 192, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_37, tvbrange, value)
    tvbrange = padded(offset + 196, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_38, tvbrange, value)
    tvbrange = padded(offset + 200, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_39, tvbrange, value)
    tvbrange = padded(offset + 204, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_40, tvbrange, value)
    tvbrange = padded(offset + 208, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_41, tvbrange, value)
    tvbrange = padded(offset + 212, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_42, tvbrange, value)
    tvbrange = padded(offset + 216, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_43, tvbrange, value)
    tvbrange = padded(offset + 220, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_COV_covariance_44, tvbrange, value)
end
-- dissect payload of message type RC_CHANNELS
function payload_fns.payload_65(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 42 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 42)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_chancount, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_chan1_raw, tvbrange, value)
    tvbrange = padded(offset + 6, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_chan2_raw, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_chan3_raw, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_chan4_raw, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_chan5_raw, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_chan6_raw, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_chan7_raw, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_chan8_raw, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_chan9_raw, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_chan10_raw, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_chan11_raw, tvbrange, value)
    tvbrange = padded(offset + 26, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_chan12_raw, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_chan13_raw, tvbrange, value)
    tvbrange = padded(offset + 30, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_chan14_raw, tvbrange, value)
    tvbrange = padded(offset + 32, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_chan15_raw, tvbrange, value)
    tvbrange = padded(offset + 34, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_chan16_raw, tvbrange, value)
    tvbrange = padded(offset + 36, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_chan17_raw, tvbrange, value)
    tvbrange = padded(offset + 38, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_chan18_raw, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_rssi, tvbrange, value)
end
-- dissect payload of message type REQUEST_DATA_STREAM
function payload_fns.payload_66(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 6 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 6)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REQUEST_DATA_STREAM_target_system, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REQUEST_DATA_STREAM_target_component, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REQUEST_DATA_STREAM_req_stream_id, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REQUEST_DATA_STREAM_req_message_rate, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.REQUEST_DATA_STREAM_start_stop, tvbrange, value)
end
-- dissect payload of message type DATA_STREAM
function payload_fns.payload_67(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 4 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 4)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA_STREAM_stream_id, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA_STREAM_message_rate, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA_STREAM_on_off, tvbrange, value)
end
-- dissect payload of message type MANUAL_CONTROL
function payload_fns.payload_69(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 11 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 11)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MANUAL_CONTROL_target, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MANUAL_CONTROL_x, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MANUAL_CONTROL_y, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MANUAL_CONTROL_z, tvbrange, value)
    tvbrange = padded(offset + 6, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MANUAL_CONTROL_r, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MANUAL_CONTROL_buttons, tvbrange, value)
end
-- dissect payload of message type RC_CHANNELS_OVERRIDE
function payload_fns.payload_70(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 38 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 38)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_OVERRIDE_target_system, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_OVERRIDE_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan1_raw, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan2_raw, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan3_raw, tvbrange, value)
    tvbrange = padded(offset + 6, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan4_raw, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan5_raw, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan6_raw, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan7_raw, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan8_raw, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan9_raw, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan10_raw, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan11_raw, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan12_raw, tvbrange, value)
    tvbrange = padded(offset + 26, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan13_raw, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan14_raw, tvbrange, value)
    tvbrange = padded(offset + 30, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan15_raw, tvbrange, value)
    tvbrange = padded(offset + 32, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan16_raw, tvbrange, value)
    tvbrange = padded(offset + 34, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan17_raw, tvbrange, value)
    tvbrange = padded(offset + 36, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RC_CHANNELS_OVERRIDE_chan18_raw, tvbrange, value)
end
-- dissect payload of message type MISSION_ITEM_INT
function payload_fns.payload_73(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 38 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 38)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_ITEM_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_ITEM_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_ITEM_INT_seq, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_ITEM_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 30, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_ITEM_INT_command, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_ITEM_INT_current, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_ITEM_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MISSION_ITEM_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MISSION_ITEM_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MISSION_ITEM_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MISSION_ITEM_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MISSION_ITEM_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MISSION_ITEM_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MISSION_ITEM_INT_z, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MISSION_ITEM_INT_mission_type, tvbrange, value)
end
-- dissect payload of message type VFR_HUD
function payload_fns.payload_74(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 20 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 20)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VFR_HUD_airspeed, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VFR_HUD_groundspeed, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.VFR_HUD_heading, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VFR_HUD_throttle, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VFR_HUD_alt, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VFR_HUD_climb, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_WAYPOINT
function payload_fns.payload_75_cmd16(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_LOITER_UNLIM
function payload_fns.payload_75_cmd17(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_LOITER_TURNS
function payload_fns.payload_75_cmd18(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TURNS_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TURNS_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TURNS_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TURNS_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TURNS_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_LOITER_TIME
function payload_fns.payload_75_cmd19(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TIME_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TIME_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TIME_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TIME_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TIME_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_RETURN_TO_LAUNCH
function payload_fns.payload_75_cmd20(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_LAND
function payload_fns.payload_75_cmd21(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_TAKEOFF
function payload_fns.payload_75_cmd22(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_LAND_LOCAL
function payload_fns.payload_75_cmd23(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_TAKEOFF_LOCAL
function payload_fns.payload_75_cmd24(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_FOLLOW
function payload_fns.payload_75_cmd25(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT
function payload_fns.payload_75_cmd30(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_LOITER_TO_ALT
function payload_fns.payload_75_cmd31(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_FOLLOW
function payload_fns.payload_75_cmd32(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_FOLLOW_REPOSITION
function payload_fns.payload_75_cmd33(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_ROI
function payload_fns.payload_75_cmd80(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ROI_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ROI_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ROI_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ROI_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ROI_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ROI_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_PATHPLANNING
function payload_fns.payload_75_cmd81(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_PATHPLANNING_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_PATHPLANNING_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_PATHPLANNING_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_PATHPLANNING_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_PATHPLANNING_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_PATHPLANNING_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_SPLINE_WAYPOINT
function payload_fns.payload_75_cmd82(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_ALTITUDE_WAIT
function payload_fns.payload_75_cmd83(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ALTITUDE_WAIT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ALTITUDE_WAIT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ALTITUDE_WAIT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_VTOL_TAKEOFF
function payload_fns.payload_75_cmd84(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_VTOL_LAND
function payload_fns.payload_75_cmd85(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_LAND_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_LAND_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_LAND_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_LAND_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_LAND_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_GUIDED_ENABLE
function payload_fns.payload_75_cmd92(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_GUIDED_ENABLE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_DELAY
function payload_fns.payload_75_cmd93(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_DELAY_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_DELAY_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_DELAY_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_DELAY_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_PAYLOAD_PLACE
function payload_fns.payload_75_cmd94(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_LAST
function payload_fns.payload_75_cmd95(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_CONDITION_DELAY
function payload_fns.payload_75_cmd112(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CONDITION_DELAY_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_CONDITION_CHANGE_ALT
function payload_fns.payload_75_cmd113(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CONDITION_CHANGE_ALT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CONDITION_CHANGE_ALT_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_CONDITION_DISTANCE
function payload_fns.payload_75_cmd114(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CONDITION_DISTANCE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_CONDITION_YAW
function payload_fns.payload_75_cmd115(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CONDITION_YAW_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CONDITION_YAW_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CONDITION_YAW_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CONDITION_YAW_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_CONDITION_LAST
function payload_fns.payload_75_cmd159(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_MODE
function payload_fns.payload_75_cmd176(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_MODE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_MODE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_MODE_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_JUMP
function payload_fns.payload_75_cmd177(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_JUMP_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_JUMP_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_CHANGE_SPEED
function payload_fns.payload_75_cmd178(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_CHANGE_SPEED_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_CHANGE_SPEED_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_CHANGE_SPEED_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_CHANGE_SPEED_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_HOME
function payload_fns.payload_75_cmd179(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_HOME_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_HOME_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_HOME_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_HOME_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_PARAMETER
function payload_fns.payload_75_cmd180(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_PARAMETER_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_PARAMETER_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_RELAY
function payload_fns.payload_75_cmd181(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_RELAY_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_RELAY_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_REPEAT_RELAY
function payload_fns.payload_75_cmd182(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_RELAY_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_RELAY_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_RELAY_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_SERVO
function payload_fns.payload_75_cmd183(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_SERVO_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_SERVO_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_REPEAT_SERVO
function payload_fns.payload_75_cmd184(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_SERVO_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_SERVO_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_SERVO_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_SERVO_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_FLIGHTTERMINATION
function payload_fns.payload_75_cmd185(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FLIGHTTERMINATION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_CHANGE_ALTITUDE
function payload_fns.payload_75_cmd186(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_CHANGE_ALTITUDE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_CHANGE_ALTITUDE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_LAND_START
function payload_fns.payload_75_cmd189(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_LAND_START_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_LAND_START_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_LAND_START_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_RALLY_LAND
function payload_fns.payload_75_cmd190(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_RALLY_LAND_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_RALLY_LAND_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_GO_AROUND
function payload_fns.payload_75_cmd191(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GO_AROUND_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_REPOSITION
function payload_fns.payload_75_cmd192(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param2, tvbrange, value)
    dissect_flags_MAV_DO_REPOSITION_FLAGS(subtree, "cmd_MAV_CMD_DO_REPOSITION_param2", tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_PAUSE_CONTINUE
function payload_fns.payload_75_cmd193(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_PAUSE_CONTINUE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_REVERSE
function payload_fns.payload_75_cmd194(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_REVERSE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_ROI_LOCATION
function payload_fns.payload_75_cmd195(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET
function payload_fns.payload_75_cmd196(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_ROI_NONE
function payload_fns.payload_75_cmd197(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_ROI_SYSID
function payload_fns.payload_75_cmd198(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_SYSID_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_CONTROL_VIDEO
function payload_fns.payload_75_cmd200(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_CONTROL_VIDEO_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_CONTROL_VIDEO_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_CONTROL_VIDEO_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_CONTROL_VIDEO_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_ROI
function payload_fns.payload_75_cmd201(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_DIGICAM_CONFIGURE
function payload_fns.payload_75_cmd202(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_DIGICAM_CONTROL
function payload_fns.payload_75_cmd203(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_MOUNT_CONFIGURE
function payload_fns.payload_75_cmd204(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_MOUNT_CONTROL
function payload_fns.payload_75_cmd205(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_CAM_TRIGG_DIST
function payload_fns.payload_75_cmd206(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_DIST_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_DIST_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_DIST_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_FENCE_ENABLE
function payload_fns.payload_75_cmd207(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FENCE_ENABLE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_PARACHUTE
function payload_fns.payload_75_cmd208(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_PARACHUTE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_MOTOR_TEST
function payload_fns.payload_75_cmd209(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOTOR_TEST_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOTOR_TEST_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOTOR_TEST_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOTOR_TEST_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOTOR_TEST_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOTOR_TEST_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_INVERTED_FLIGHT
function payload_fns.payload_75_cmd210(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_INVERTED_FLIGHT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_GRIPPER
function payload_fns.payload_75_cmd211(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GRIPPER_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GRIPPER_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_AUTOTUNE_ENABLE
function payload_fns.payload_75_cmd212(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_AUTOTUNE_ENABLE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_AUTOTUNE_ENABLE_param2, tvbrange, value)
    dissect_flags_AUTOTUNE_AXIS(subtree, "cmd_MAV_CMD_DO_AUTOTUNE_ENABLE_param2", tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_SET_YAW_SPEED
function payload_fns.payload_75_cmd213(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SET_YAW_SPEED_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SET_YAW_SPEED_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SET_YAW_SPEED_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL
function payload_fns.payload_75_cmd214(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_RESUME_REPEAT_DIST
function payload_fns.payload_75_cmd215(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_RESUME_REPEAT_DIST_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SPRAYER
function payload_fns.payload_75_cmd216(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SPRAYER_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SEND_SCRIPT_MESSAGE
function payload_fns.payload_75_cmd217(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SEND_SCRIPT_MESSAGE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SEND_SCRIPT_MESSAGE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SEND_SCRIPT_MESSAGE_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SEND_SCRIPT_MESSAGE_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_AUX_FUNCTION
function payload_fns.payload_75_cmd218(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_AUX_FUNCTION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_AUX_FUNCTION_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_MOUNT_CONTROL_QUAT
function payload_fns.payload_75_cmd220(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_GUIDED_MASTER
function payload_fns.payload_75_cmd221(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GUIDED_MASTER_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GUIDED_MASTER_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_GUIDED_LIMITS
function payload_fns.payload_75_cmd222(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GUIDED_LIMITS_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GUIDED_LIMITS_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GUIDED_LIMITS_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GUIDED_LIMITS_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_ENGINE_CONTROL
function payload_fns.payload_75_cmd223(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_ENGINE_CONTROL_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_ENGINE_CONTROL_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_ENGINE_CONTROL_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SET_MISSION_CURRENT
function payload_fns.payload_75_cmd224(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_MISSION_CURRENT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_LAST
function payload_fns.payload_75_cmd240(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_PREFLIGHT_CALIBRATION
function payload_fns.payload_75_cmd241(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS
function payload_fns.payload_75_cmd242(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_PREFLIGHT_UAVCAN
function payload_fns.payload_75_cmd243(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_UAVCAN_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_PREFLIGHT_STORAGE
function payload_fns.payload_75_cmd245(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_STORAGE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_STORAGE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_STORAGE_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN
function payload_fns.payload_75_cmd246(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_OVERRIDE_GOTO
function payload_fns.payload_75_cmd252(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_OBLIQUE_SURVEY
function payload_fns.payload_75_cmd260(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_OBLIQUE_SURVEY_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_OBLIQUE_SURVEY_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_OBLIQUE_SURVEY_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_OBLIQUE_SURVEY_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_OBLIQUE_SURVEY_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_OBLIQUE_SURVEY_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_MISSION_START
function payload_fns.payload_75_cmd300(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_MISSION_START_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_MISSION_START_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_COMPONENT_ARM_DISARM
function payload_fns.payload_75_cmd400(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_COMPONENT_ARM_DISARM_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_COMPONENT_ARM_DISARM_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_RUN_PREARM_CHECKS
function payload_fns.payload_75_cmd401(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_GET_HOME_POSITION
function payload_fns.payload_75_cmd410(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_START_RX_PAIR
function payload_fns.payload_75_cmd500(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_START_RX_PAIR_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_START_RX_PAIR_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_GET_MESSAGE_INTERVAL
function payload_fns.payload_75_cmd510(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_GET_MESSAGE_INTERVAL_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SET_MESSAGE_INTERVAL
function payload_fns.payload_75_cmd511(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_MESSAGE_INTERVAL_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_MESSAGE_INTERVAL_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_MESSAGE_INTERVAL_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_REQUEST_MESSAGE
function payload_fns.payload_75_cmd512(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_REQUEST_PROTOCOL_VERSION
function payload_fns.payload_75_cmd519(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_PROTOCOL_VERSION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES
function payload_fns.payload_75_cmd520(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_REQUEST_CAMERA_INFORMATION
function payload_fns.payload_75_cmd521(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_CAMERA_INFORMATION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_REQUEST_CAMERA_SETTINGS
function payload_fns.payload_75_cmd522(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_CAMERA_SETTINGS_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_REQUEST_STORAGE_INFORMATION
function payload_fns.payload_75_cmd525(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_STORAGE_INFORMATION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_STORAGE_INFORMATION_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_STORAGE_FORMAT
function payload_fns.payload_75_cmd526(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_STORAGE_FORMAT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_STORAGE_FORMAT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS
function payload_fns.payload_75_cmd527(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_REQUEST_FLIGHT_INFORMATION
function payload_fns.payload_75_cmd528(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_FLIGHT_INFORMATION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_RESET_CAMERA_SETTINGS
function payload_fns.payload_75_cmd529(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_RESET_CAMERA_SETTINGS_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SET_CAMERA_MODE
function payload_fns.payload_75_cmd530(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_CAMERA_MODE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SET_CAMERA_ZOOM
function payload_fns.payload_75_cmd531(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_CAMERA_ZOOM_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_CAMERA_ZOOM_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SET_CAMERA_FOCUS
function payload_fns.payload_75_cmd532(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_CAMERA_FOCUS_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_CAMERA_FOCUS_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_JUMP_TAG
function payload_fns.payload_75_cmd600(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_JUMP_TAG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_JUMP_TAG
function payload_fns.payload_75_cmd601(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_JUMP_TAG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_JUMP_TAG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW
function payload_fns.payload_75_cmd1000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5, tvbrange, value)
    dissect_flags_GIMBAL_MANAGER_FLAGS(subtree, "cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5", tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE
function payload_fns.payload_75_cmd1001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_IMAGE_START_CAPTURE
function payload_fns.payload_75_cmd2000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_IMAGE_START_CAPTURE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_IMAGE_START_CAPTURE_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_IMAGE_START_CAPTURE_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_IMAGE_STOP_CAPTURE
function payload_fns.payload_75_cmd2001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_TRIGGER_CONTROL
function payload_fns.payload_75_cmd2003(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_TRIGGER_CONTROL_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_TRIGGER_CONTROL_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_TRIGGER_CONTROL_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_CAMERA_TRACK_POINT
function payload_fns.payload_75_cmd2004(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_POINT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_POINT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_POINT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_CAMERA_TRACK_RECTANGLE
function payload_fns.payload_75_cmd2005(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_CAMERA_STOP_TRACKING
function payload_fns.payload_75_cmd2010(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_VIDEO_START_CAPTURE
function payload_fns.payload_75_cmd2500(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_VIDEO_START_CAPTURE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_VIDEO_START_CAPTURE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_VIDEO_STOP_CAPTURE
function payload_fns.payload_75_cmd2501(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_VIDEO_STOP_CAPTURE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_VIDEO_START_STREAMING
function payload_fns.payload_75_cmd2502(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_VIDEO_START_STREAMING_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_VIDEO_STOP_STREAMING
function payload_fns.payload_75_cmd2503(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_VIDEO_STOP_STREAMING_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION
function payload_fns.payload_75_cmd2504(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_REQUEST_VIDEO_STREAM_STATUS
function payload_fns.payload_75_cmd2505(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_VIDEO_STREAM_STATUS_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_LOGGING_START
function payload_fns.payload_75_cmd2510(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_LOGGING_START_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_LOGGING_STOP
function payload_fns.payload_75_cmd2511(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_AIRFRAME_CONFIGURATION
function payload_fns.payload_75_cmd2520(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_AIRFRAME_CONFIGURATION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_AIRFRAME_CONFIGURATION_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_CONTROL_HIGH_LATENCY
function payload_fns.payload_75_cmd2600(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CONTROL_HIGH_LATENCY_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_PANORAMA_CREATE
function payload_fns.payload_75_cmd2800(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PANORAMA_CREATE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PANORAMA_CREATE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PANORAMA_CREATE_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PANORAMA_CREATE_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_VTOL_TRANSITION
function payload_fns.payload_75_cmd3000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_VTOL_TRANSITION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_ARM_AUTHORIZATION_REQUEST
function payload_fns.payload_75_cmd3001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_ARM_AUTHORIZATION_REQUEST_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SET_GUIDED_SUBMODE_STANDARD
function payload_fns.payload_75_cmd4000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE
function payload_fns.payload_75_cmd4001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_FENCE_RETURN_POINT
function payload_fns.payload_75_cmd5000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_RETURN_POINT_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_RETURN_POINT_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_RETURN_POINT_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION
function payload_fns.payload_75_cmd5001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION
function payload_fns.payload_75_cmd5002(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION
function payload_fns.payload_75_cmd5003(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION
function payload_fns.payload_75_cmd5004(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_RALLY_POINT
function payload_fns.payload_75_cmd5100(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_RALLY_POINT_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_RALLY_POINT_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_RALLY_POINT_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_UAVCAN_GET_NODE_INFO
function payload_fns.payload_75_cmd5200(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_ADSB_OUT_IDENT
function payload_fns.payload_75_cmd10001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_LOWEHEISER_SET_STATE
function payload_fns.payload_75_cmd10151(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_PAYLOAD_PREPARE_DEPLOY
function payload_fns.payload_75_cmd30001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_PAYLOAD_CONTROL_DEPLOY
function payload_fns.payload_75_cmd30002(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_CONTROL_DEPLOY_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_WAYPOINT_USER_1
function payload_fns.payload_75_cmd31000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_1_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_1_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_1_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_WAYPOINT_USER_2
function payload_fns.payload_75_cmd31001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_2_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_2_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_2_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_WAYPOINT_USER_3
function payload_fns.payload_75_cmd31002(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_3_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_3_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_3_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_WAYPOINT_USER_4
function payload_fns.payload_75_cmd31003(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_4_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_4_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_4_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_WAYPOINT_USER_5
function payload_fns.payload_75_cmd31004(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_5_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_5_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_5_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SPATIAL_USER_1
function payload_fns.payload_75_cmd31005(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_1_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_1_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_1_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SPATIAL_USER_2
function payload_fns.payload_75_cmd31006(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_2_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_2_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_2_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SPATIAL_USER_3
function payload_fns.payload_75_cmd31007(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_3_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_3_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_3_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SPATIAL_USER_4
function payload_fns.payload_75_cmd31008(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_4_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_4_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_4_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SPATIAL_USER_5
function payload_fns.payload_75_cmd31009(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_5_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_5_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_5_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_USER_1
function payload_fns.payload_75_cmd31010(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_USER_2
function payload_fns.payload_75_cmd31011(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_USER_3
function payload_fns.payload_75_cmd31012(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_USER_4
function payload_fns.payload_75_cmd31013(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_USER_5
function payload_fns.payload_75_cmd31014(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_CAN_FORWARD
function payload_fns.payload_75_cmd32000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CAN_FORWARD_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_POWER_OFF_INITIATED
function payload_fns.payload_75_cmd42000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SOLO_BTN_FLY_CLICK
function payload_fns.payload_75_cmd42001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SOLO_BTN_FLY_HOLD
function payload_fns.payload_75_cmd42002(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SOLO_BTN_FLY_HOLD_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SOLO_BTN_PAUSE_CLICK
function payload_fns.payload_75_cmd42003(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SOLO_BTN_PAUSE_CLICK_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_FIXED_MAG_CAL
function payload_fns.payload_75_cmd42004(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_FIXED_MAG_CAL_FIELD
function payload_fns.payload_75_cmd42005(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_FIELD_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_FIELD_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_FIELD_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_FIXED_MAG_CAL_YAW
function payload_fns.payload_75_cmd42006(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SET_EKF_SOURCE_SET
function payload_fns.payload_75_cmd42007(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_EKF_SOURCE_SET_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_START_MAG_CAL
function payload_fns.payload_75_cmd42424(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_START_MAG_CAL_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_START_MAG_CAL_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_START_MAG_CAL_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_START_MAG_CAL_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_START_MAG_CAL_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_ACCEPT_MAG_CAL
function payload_fns.payload_75_cmd42425(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_ACCEPT_MAG_CAL_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_CANCEL_MAG_CAL
function payload_fns.payload_75_cmd42426(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_CANCEL_MAG_CAL_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SET_FACTORY_TEST_MODE
function payload_fns.payload_75_cmd42427(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_FACTORY_TEST_MODE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_SEND_BANNER
function payload_fns.payload_75_cmd42428(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_ACCELCAL_VEHICLE_POS
function payload_fns.payload_75_cmd42429(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_ACCELCAL_VEHICLE_POS_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_GIMBAL_RESET
function payload_fns.payload_75_cmd42501(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_GIMBAL_AXIS_CALIBRATION_STATUS
function payload_fns.payload_75_cmd42502(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_GIMBAL_AXIS_CALIBRATION_STATUS_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_GIMBAL_AXIS_CALIBRATION_STATUS_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_GIMBAL_AXIS_CALIBRATION_STATUS_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_GIMBAL_REQUEST_AXIS_CALIBRATION
function payload_fns.payload_75_cmd42503(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_GIMBAL_FULL_RESET
function payload_fns.payload_75_cmd42505(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DO_WINCH
function payload_fns.payload_75_cmd42600(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_WINCH_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_WINCH_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_WINCH_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_WINCH_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_FLASH_BOOTLOADER
function payload_fns.payload_75_cmd42650(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_FLASH_BOOTLOADER_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_BATTERY_RESET
function payload_fns.payload_75_cmd42651(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_BATTERY_RESET_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_BATTERY_RESET_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_DEBUG_TRAP
function payload_fns.payload_75_cmd42700(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_SCRIPTING
function payload_fns.payload_75_cmd42701(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_SCRIPT_TIME
function payload_fns.payload_75_cmd42702(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SCRIPT_TIME_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SCRIPT_TIME_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SCRIPT_TIME_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SCRIPT_TIME_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SCRIPT_TIME_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SCRIPT_TIME_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_NAV_ATTITUDE_TIME
function payload_fns.payload_75_cmd42703(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ATTITUDE_TIME_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ATTITUDE_TIME_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ATTITUDE_TIME_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ATTITUDE_TIME_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ATTITUDE_TIME_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_GUIDED_CHANGE_SPEED
function payload_fns.payload_75_cmd43000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_GUIDED_CHANGE_SPEED_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_GUIDED_CHANGE_SPEED_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_GUIDED_CHANGE_SPEED_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_GUIDED_CHANGE_ALTITUDE
function payload_fns.payload_75_cmd43001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_GUIDED_CHANGE_ALTITUDE_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_GUIDED_CHANGE_ALTITUDE_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_GUIDED_CHANGE_HEADING
function payload_fns.payload_75_cmd43002(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_GUIDED_CHANGE_HEADING_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_GUIDED_CHANGE_HEADING_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_GUIDED_CHANGE_HEADING_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_EXTERNAL_POSITION_ESTIMATE
function payload_fns.payload_75_cmd43003(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_EXTERNAL_POSITION_ESTIMATE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_EXTERNAL_POSITION_ESTIMATE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_EXTERNAL_POSITION_ESTIMATE_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_EXTERNAL_POSITION_ESTIMATE_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.cmd_MAV_CMD_EXTERNAL_POSITION_ESTIMATE_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_EXTERNAL_POSITION_ESTIMATE_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT with command MAV_CMD_ENUM_END
function payload_fns.payload_75_cmd43004(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_INT
function payload_fns.payload_75(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    local cmd_id = padded(offset + 28, 2):le_uint()
    local cmd_name = enumEntryName.MAV_CMD[cmd_id]
    if cmd_name ~= nil then
        pinfo.cols.info:append(": " .. cmd_name)
    end
    local cmd_fn = payload_fns["payload_75_cmd" .. tostring(cmd_id)]
    if cmd_fn ~= nil then
        cmd_fn(buffer, tree, msgid, offset, limit, pinfo)
        return
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_frame, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_command, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_current, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_INT_autocontinue, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_INT_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_INT_z, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_WAYPOINT
function payload_fns.payload_76_cmd16(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_WAYPOINT_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_LOITER_UNLIM
function payload_fns.payload_76_cmd17(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_UNLIM_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_LOITER_TURNS
function payload_fns.payload_76_cmd18(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TURNS_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TURNS_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TURNS_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TURNS_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TURNS_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_LOITER_TIME
function payload_fns.payload_76_cmd19(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TIME_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TIME_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TIME_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TIME_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TIME_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_RETURN_TO_LAUNCH
function payload_fns.payload_76_cmd20(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_LAND
function payload_fns.payload_76_cmd21(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_TAKEOFF
function payload_fns.payload_76_cmd22(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_LAND_LOCAL
function payload_fns.payload_76_cmd23(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LAND_LOCAL_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_TAKEOFF_LOCAL
function payload_fns.payload_76_cmd24(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_TAKEOFF_LOCAL_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_FOLLOW
function payload_fns.payload_76_cmd25(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FOLLOW_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT
function payload_fns.payload_76_cmd30(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_LOITER_TO_ALT
function payload_fns.payload_76_cmd31(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_LOITER_TO_ALT_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_FOLLOW
function payload_fns.payload_76_cmd32(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_FOLLOW_REPOSITION
function payload_fns.payload_76_cmd33(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FOLLOW_REPOSITION_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_ROI
function payload_fns.payload_76_cmd80(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ROI_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ROI_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ROI_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ROI_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ROI_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ROI_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_PATHPLANNING
function payload_fns.payload_76_cmd81(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_PATHPLANNING_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_PATHPLANNING_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_PATHPLANNING_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_PATHPLANNING_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_PATHPLANNING_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_PATHPLANNING_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_SPLINE_WAYPOINT
function payload_fns.payload_76_cmd82(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SPLINE_WAYPOINT_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_ALTITUDE_WAIT
function payload_fns.payload_76_cmd83(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ALTITUDE_WAIT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ALTITUDE_WAIT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ALTITUDE_WAIT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_VTOL_TAKEOFF
function payload_fns.payload_76_cmd84(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_TAKEOFF_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_VTOL_LAND
function payload_fns.payload_76_cmd85(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_LAND_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_LAND_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_LAND_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_LAND_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_VTOL_LAND_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_GUIDED_ENABLE
function payload_fns.payload_76_cmd92(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_GUIDED_ENABLE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_DELAY
function payload_fns.payload_76_cmd93(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_DELAY_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_DELAY_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_DELAY_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_DELAY_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_PAYLOAD_PLACE
function payload_fns.payload_76_cmd94(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_PAYLOAD_PLACE_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_LAST
function payload_fns.payload_76_cmd95(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_CONDITION_DELAY
function payload_fns.payload_76_cmd112(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CONDITION_DELAY_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_CONDITION_CHANGE_ALT
function payload_fns.payload_76_cmd113(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CONDITION_CHANGE_ALT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CONDITION_CHANGE_ALT_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_CONDITION_DISTANCE
function payload_fns.payload_76_cmd114(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CONDITION_DISTANCE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_CONDITION_YAW
function payload_fns.payload_76_cmd115(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CONDITION_YAW_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CONDITION_YAW_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CONDITION_YAW_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CONDITION_YAW_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_CONDITION_LAST
function payload_fns.payload_76_cmd159(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_MODE
function payload_fns.payload_76_cmd176(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_MODE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_MODE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_MODE_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_JUMP
function payload_fns.payload_76_cmd177(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_JUMP_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_JUMP_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_CHANGE_SPEED
function payload_fns.payload_76_cmd178(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_CHANGE_SPEED_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_CHANGE_SPEED_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_CHANGE_SPEED_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_CHANGE_SPEED_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_HOME
function payload_fns.payload_76_cmd179(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_HOME_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_HOME_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_HOME_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_HOME_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_PARAMETER
function payload_fns.payload_76_cmd180(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_PARAMETER_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_PARAMETER_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_RELAY
function payload_fns.payload_76_cmd181(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_RELAY_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_RELAY_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_REPEAT_RELAY
function payload_fns.payload_76_cmd182(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_RELAY_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_RELAY_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_RELAY_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_SERVO
function payload_fns.payload_76_cmd183(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_SERVO_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_SERVO_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_REPEAT_SERVO
function payload_fns.payload_76_cmd184(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_SERVO_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_SERVO_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_SERVO_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPEAT_SERVO_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_FLIGHTTERMINATION
function payload_fns.payload_76_cmd185(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FLIGHTTERMINATION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_CHANGE_ALTITUDE
function payload_fns.payload_76_cmd186(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_CHANGE_ALTITUDE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_CHANGE_ALTITUDE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_LAND_START
function payload_fns.payload_76_cmd189(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_LAND_START_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_LAND_START_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_LAND_START_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_RALLY_LAND
function payload_fns.payload_76_cmd190(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_RALLY_LAND_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_RALLY_LAND_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_GO_AROUND
function payload_fns.payload_76_cmd191(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GO_AROUND_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_REPOSITION
function payload_fns.payload_76_cmd192(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param2, tvbrange, value)
    dissect_flags_MAV_DO_REPOSITION_FLAGS(subtree, "cmd_MAV_CMD_DO_REPOSITION_param2", tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_REPOSITION_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_PAUSE_CONTINUE
function payload_fns.payload_76_cmd193(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_PAUSE_CONTINUE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_REVERSE
function payload_fns.payload_76_cmd194(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_REVERSE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_ROI_LOCATION
function payload_fns.payload_76_cmd195(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_LOCATION_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET
function payload_fns.payload_76_cmd196(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_ROI_NONE
function payload_fns.payload_76_cmd197(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_ROI_SYSID
function payload_fns.payload_76_cmd198(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_SYSID_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_CONTROL_VIDEO
function payload_fns.payload_76_cmd200(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_CONTROL_VIDEO_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_CONTROL_VIDEO_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_CONTROL_VIDEO_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_CONTROL_VIDEO_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_ROI
function payload_fns.payload_76_cmd201(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_ROI_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_DIGICAM_CONFIGURE
function payload_fns.payload_76_cmd202(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONFIGURE_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_DIGICAM_CONTROL
function payload_fns.payload_76_cmd203(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_DIGICAM_CONTROL_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_MOUNT_CONFIGURE
function payload_fns.payload_76_cmd204(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONFIGURE_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_MOUNT_CONTROL
function payload_fns.payload_76_cmd205(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_CAM_TRIGG_DIST
function payload_fns.payload_76_cmd206(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_DIST_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_DIST_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_DIST_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_FENCE_ENABLE
function payload_fns.payload_76_cmd207(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_FENCE_ENABLE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_PARACHUTE
function payload_fns.payload_76_cmd208(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_PARACHUTE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_MOTOR_TEST
function payload_fns.payload_76_cmd209(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOTOR_TEST_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOTOR_TEST_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOTOR_TEST_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOTOR_TEST_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOTOR_TEST_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOTOR_TEST_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_INVERTED_FLIGHT
function payload_fns.payload_76_cmd210(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_INVERTED_FLIGHT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_GRIPPER
function payload_fns.payload_76_cmd211(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GRIPPER_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GRIPPER_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_AUTOTUNE_ENABLE
function payload_fns.payload_76_cmd212(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_AUTOTUNE_ENABLE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_AUTOTUNE_ENABLE_param2, tvbrange, value)
    dissect_flags_AUTOTUNE_AXIS(subtree, "cmd_MAV_CMD_DO_AUTOTUNE_ENABLE_param2", tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_SET_YAW_SPEED
function payload_fns.payload_76_cmd213(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SET_YAW_SPEED_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SET_YAW_SPEED_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SET_YAW_SPEED_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL
function payload_fns.payload_76_cmd214(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_RESUME_REPEAT_DIST
function payload_fns.payload_76_cmd215(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_RESUME_REPEAT_DIST_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SPRAYER
function payload_fns.payload_76_cmd216(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SPRAYER_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SEND_SCRIPT_MESSAGE
function payload_fns.payload_76_cmd217(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SEND_SCRIPT_MESSAGE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SEND_SCRIPT_MESSAGE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SEND_SCRIPT_MESSAGE_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SEND_SCRIPT_MESSAGE_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_AUX_FUNCTION
function payload_fns.payload_76_cmd218(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_AUX_FUNCTION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_AUX_FUNCTION_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_MOUNT_CONTROL_QUAT
function payload_fns.payload_76_cmd220(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_MOUNT_CONTROL_QUAT_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_GUIDED_MASTER
function payload_fns.payload_76_cmd221(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GUIDED_MASTER_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GUIDED_MASTER_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_GUIDED_LIMITS
function payload_fns.payload_76_cmd222(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GUIDED_LIMITS_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GUIDED_LIMITS_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GUIDED_LIMITS_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GUIDED_LIMITS_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_ENGINE_CONTROL
function payload_fns.payload_76_cmd223(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_ENGINE_CONTROL_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_ENGINE_CONTROL_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_ENGINE_CONTROL_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SET_MISSION_CURRENT
function payload_fns.payload_76_cmd224(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_SET_MISSION_CURRENT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_LAST
function payload_fns.payload_76_cmd240(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_PREFLIGHT_CALIBRATION
function payload_fns.payload_76_cmd241(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_CALIBRATION_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS
function payload_fns.payload_76_cmd242(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_PREFLIGHT_UAVCAN
function payload_fns.payload_76_cmd243(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_UAVCAN_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_PREFLIGHT_STORAGE
function payload_fns.payload_76_cmd245(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_STORAGE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_STORAGE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_STORAGE_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN
function payload_fns.payload_76_cmd246(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_OVERRIDE_GOTO
function payload_fns.payload_76_cmd252(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_OVERRIDE_GOTO_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_OBLIQUE_SURVEY
function payload_fns.payload_76_cmd260(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_OBLIQUE_SURVEY_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_OBLIQUE_SURVEY_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_OBLIQUE_SURVEY_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_OBLIQUE_SURVEY_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_OBLIQUE_SURVEY_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_OBLIQUE_SURVEY_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_MISSION_START
function payload_fns.payload_76_cmd300(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_MISSION_START_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_MISSION_START_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_COMPONENT_ARM_DISARM
function payload_fns.payload_76_cmd400(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_COMPONENT_ARM_DISARM_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_COMPONENT_ARM_DISARM_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_RUN_PREARM_CHECKS
function payload_fns.payload_76_cmd401(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_GET_HOME_POSITION
function payload_fns.payload_76_cmd410(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_START_RX_PAIR
function payload_fns.payload_76_cmd500(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_START_RX_PAIR_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_START_RX_PAIR_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_GET_MESSAGE_INTERVAL
function payload_fns.payload_76_cmd510(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_GET_MESSAGE_INTERVAL_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SET_MESSAGE_INTERVAL
function payload_fns.payload_76_cmd511(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_MESSAGE_INTERVAL_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_MESSAGE_INTERVAL_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_MESSAGE_INTERVAL_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_REQUEST_MESSAGE
function payload_fns.payload_76_cmd512(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_MESSAGE_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_REQUEST_PROTOCOL_VERSION
function payload_fns.payload_76_cmd519(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_PROTOCOL_VERSION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES
function payload_fns.payload_76_cmd520(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_REQUEST_CAMERA_INFORMATION
function payload_fns.payload_76_cmd521(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_CAMERA_INFORMATION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_REQUEST_CAMERA_SETTINGS
function payload_fns.payload_76_cmd522(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_CAMERA_SETTINGS_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_REQUEST_STORAGE_INFORMATION
function payload_fns.payload_76_cmd525(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_STORAGE_INFORMATION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_STORAGE_INFORMATION_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_STORAGE_FORMAT
function payload_fns.payload_76_cmd526(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_STORAGE_FORMAT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_STORAGE_FORMAT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS
function payload_fns.payload_76_cmd527(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_REQUEST_FLIGHT_INFORMATION
function payload_fns.payload_76_cmd528(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_FLIGHT_INFORMATION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_RESET_CAMERA_SETTINGS
function payload_fns.payload_76_cmd529(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_RESET_CAMERA_SETTINGS_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SET_CAMERA_MODE
function payload_fns.payload_76_cmd530(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_CAMERA_MODE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SET_CAMERA_ZOOM
function payload_fns.payload_76_cmd531(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_CAMERA_ZOOM_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_CAMERA_ZOOM_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SET_CAMERA_FOCUS
function payload_fns.payload_76_cmd532(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_CAMERA_FOCUS_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_CAMERA_FOCUS_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_JUMP_TAG
function payload_fns.payload_76_cmd600(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_JUMP_TAG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_JUMP_TAG
function payload_fns.payload_76_cmd601(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_JUMP_TAG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_JUMP_TAG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW
function payload_fns.payload_76_cmd1000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5, tvbrange, value)
    dissect_flags_GIMBAL_MANAGER_FLAGS(subtree, "cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param5", tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_PITCHYAW_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE
function payload_fns.payload_76_cmd1001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_GIMBAL_MANAGER_CONFIGURE_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_IMAGE_START_CAPTURE
function payload_fns.payload_76_cmd2000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_IMAGE_START_CAPTURE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_IMAGE_START_CAPTURE_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_IMAGE_START_CAPTURE_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_IMAGE_STOP_CAPTURE
function payload_fns.payload_76_cmd2001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_TRIGGER_CONTROL
function payload_fns.payload_76_cmd2003(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_TRIGGER_CONTROL_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_TRIGGER_CONTROL_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_TRIGGER_CONTROL_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_CAMERA_TRACK_POINT
function payload_fns.payload_76_cmd2004(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_POINT_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_POINT_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_POINT_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_CAMERA_TRACK_RECTANGLE
function payload_fns.payload_76_cmd2005(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CAMERA_TRACK_RECTANGLE_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_CAMERA_STOP_TRACKING
function payload_fns.payload_76_cmd2010(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_VIDEO_START_CAPTURE
function payload_fns.payload_76_cmd2500(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_VIDEO_START_CAPTURE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_VIDEO_START_CAPTURE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_VIDEO_STOP_CAPTURE
function payload_fns.payload_76_cmd2501(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_VIDEO_STOP_CAPTURE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_VIDEO_START_STREAMING
function payload_fns.payload_76_cmd2502(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_VIDEO_START_STREAMING_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_VIDEO_STOP_STREAMING
function payload_fns.payload_76_cmd2503(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_VIDEO_STOP_STREAMING_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION
function payload_fns.payload_76_cmd2504(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_REQUEST_VIDEO_STREAM_STATUS
function payload_fns.payload_76_cmd2505(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_REQUEST_VIDEO_STREAM_STATUS_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_LOGGING_START
function payload_fns.payload_76_cmd2510(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_LOGGING_START_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_LOGGING_STOP
function payload_fns.payload_76_cmd2511(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_AIRFRAME_CONFIGURATION
function payload_fns.payload_76_cmd2520(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_AIRFRAME_CONFIGURATION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_AIRFRAME_CONFIGURATION_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_CONTROL_HIGH_LATENCY
function payload_fns.payload_76_cmd2600(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CONTROL_HIGH_LATENCY_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_PANORAMA_CREATE
function payload_fns.payload_76_cmd2800(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PANORAMA_CREATE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PANORAMA_CREATE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PANORAMA_CREATE_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PANORAMA_CREATE_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_VTOL_TRANSITION
function payload_fns.payload_76_cmd3000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_VTOL_TRANSITION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_ARM_AUTHORIZATION_REQUEST
function payload_fns.payload_76_cmd3001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_ARM_AUTHORIZATION_REQUEST_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SET_GUIDED_SUBMODE_STANDARD
function payload_fns.payload_76_cmd4000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE
function payload_fns.payload_76_cmd4001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_FENCE_RETURN_POINT
function payload_fns.payload_76_cmd5000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_RETURN_POINT_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_RETURN_POINT_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_RETURN_POINT_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION
function payload_fns.payload_76_cmd5001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION
function payload_fns.payload_76_cmd5002(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION
function payload_fns.payload_76_cmd5003(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION
function payload_fns.payload_76_cmd5004(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_RALLY_POINT
function payload_fns.payload_76_cmd5100(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_RALLY_POINT_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_RALLY_POINT_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_RALLY_POINT_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_UAVCAN_GET_NODE_INFO
function payload_fns.payload_76_cmd5200(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_ADSB_OUT_IDENT
function payload_fns.payload_76_cmd10001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_LOWEHEISER_SET_STATE
function payload_fns.payload_76_cmd10151(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_PAYLOAD_PREPARE_DEPLOY
function payload_fns.payload_76_cmd30001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_PREPARE_DEPLOY_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_PAYLOAD_CONTROL_DEPLOY
function payload_fns.payload_76_cmd30002(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_PAYLOAD_CONTROL_DEPLOY_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_WAYPOINT_USER_1
function payload_fns.payload_76_cmd31000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_1_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_1_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_1_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_WAYPOINT_USER_2
function payload_fns.payload_76_cmd31001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_2_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_2_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_2_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_WAYPOINT_USER_3
function payload_fns.payload_76_cmd31002(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_3_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_3_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_3_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_WAYPOINT_USER_4
function payload_fns.payload_76_cmd31003(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_4_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_4_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_4_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_WAYPOINT_USER_5
function payload_fns.payload_76_cmd31004(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_5_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_5_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_WAYPOINT_USER_5_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SPATIAL_USER_1
function payload_fns.payload_76_cmd31005(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_1_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_1_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_1_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SPATIAL_USER_2
function payload_fns.payload_76_cmd31006(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_2_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_2_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_2_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SPATIAL_USER_3
function payload_fns.payload_76_cmd31007(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_3_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_3_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_3_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SPATIAL_USER_4
function payload_fns.payload_76_cmd31008(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_4_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_4_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_4_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SPATIAL_USER_5
function payload_fns.payload_76_cmd31009(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_5_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_5_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SPATIAL_USER_5_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_USER_1
function payload_fns.payload_76_cmd31010(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_USER_2
function payload_fns.payload_76_cmd31011(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_USER_3
function payload_fns.payload_76_cmd31012(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_USER_4
function payload_fns.payload_76_cmd31013(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_USER_5
function payload_fns.payload_76_cmd31014(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_CAN_FORWARD
function payload_fns.payload_76_cmd32000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_CAN_FORWARD_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_POWER_OFF_INITIATED
function payload_fns.payload_76_cmd42000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SOLO_BTN_FLY_CLICK
function payload_fns.payload_76_cmd42001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SOLO_BTN_FLY_HOLD
function payload_fns.payload_76_cmd42002(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SOLO_BTN_FLY_HOLD_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SOLO_BTN_PAUSE_CLICK
function payload_fns.payload_76_cmd42003(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SOLO_BTN_PAUSE_CLICK_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_FIXED_MAG_CAL
function payload_fns.payload_76_cmd42004(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_FIXED_MAG_CAL_FIELD
function payload_fns.payload_76_cmd42005(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_FIELD_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_FIELD_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_FIELD_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_FIXED_MAG_CAL_YAW
function payload_fns.payload_76_cmd42006(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_FIXED_MAG_CAL_YAW_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SET_EKF_SOURCE_SET
function payload_fns.payload_76_cmd42007(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_EKF_SOURCE_SET_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_START_MAG_CAL
function payload_fns.payload_76_cmd42424(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_START_MAG_CAL_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_START_MAG_CAL_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_START_MAG_CAL_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_START_MAG_CAL_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_START_MAG_CAL_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_ACCEPT_MAG_CAL
function payload_fns.payload_76_cmd42425(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_ACCEPT_MAG_CAL_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_CANCEL_MAG_CAL
function payload_fns.payload_76_cmd42426(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_CANCEL_MAG_CAL_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SET_FACTORY_TEST_MODE
function payload_fns.payload_76_cmd42427(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_SET_FACTORY_TEST_MODE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_SEND_BANNER
function payload_fns.payload_76_cmd42428(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_ACCELCAL_VEHICLE_POS
function payload_fns.payload_76_cmd42429(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_ACCELCAL_VEHICLE_POS_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_GIMBAL_RESET
function payload_fns.payload_76_cmd42501(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_GIMBAL_AXIS_CALIBRATION_STATUS
function payload_fns.payload_76_cmd42502(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_GIMBAL_AXIS_CALIBRATION_STATUS_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_GIMBAL_AXIS_CALIBRATION_STATUS_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_GIMBAL_AXIS_CALIBRATION_STATUS_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_GIMBAL_REQUEST_AXIS_CALIBRATION
function payload_fns.payload_76_cmd42503(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_GIMBAL_FULL_RESET
function payload_fns.payload_76_cmd42505(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DO_WINCH
function payload_fns.payload_76_cmd42600(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_WINCH_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_WINCH_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_WINCH_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_DO_WINCH_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_FLASH_BOOTLOADER
function payload_fns.payload_76_cmd42650(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_FLASH_BOOTLOADER_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_BATTERY_RESET
function payload_fns.payload_76_cmd42651(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_BATTERY_RESET_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_BATTERY_RESET_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_DEBUG_TRAP
function payload_fns.payload_76_cmd42700(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_SCRIPTING
function payload_fns.payload_76_cmd42701(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_SCRIPT_TIME
function payload_fns.payload_76_cmd42702(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SCRIPT_TIME_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SCRIPT_TIME_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SCRIPT_TIME_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SCRIPT_TIME_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SCRIPT_TIME_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_SCRIPT_TIME_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_NAV_ATTITUDE_TIME
function payload_fns.payload_76_cmd42703(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ATTITUDE_TIME_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ATTITUDE_TIME_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ATTITUDE_TIME_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ATTITUDE_TIME_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_NAV_ATTITUDE_TIME_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_GUIDED_CHANGE_SPEED
function payload_fns.payload_76_cmd43000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_GUIDED_CHANGE_SPEED_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_GUIDED_CHANGE_SPEED_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_GUIDED_CHANGE_SPEED_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_GUIDED_CHANGE_ALTITUDE
function payload_fns.payload_76_cmd43001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_GUIDED_CHANGE_ALTITUDE_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_GUIDED_CHANGE_ALTITUDE_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_GUIDED_CHANGE_HEADING
function payload_fns.payload_76_cmd43002(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_GUIDED_CHANGE_HEADING_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_GUIDED_CHANGE_HEADING_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_GUIDED_CHANGE_HEADING_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_EXTERNAL_POSITION_ESTIMATE
function payload_fns.payload_76_cmd43003(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_EXTERNAL_POSITION_ESTIMATE_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_EXTERNAL_POSITION_ESTIMATE_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_EXTERNAL_POSITION_ESTIMATE_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_EXTERNAL_POSITION_ESTIMATE_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_EXTERNAL_POSITION_ESTIMATE_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.cmd_MAV_CMD_EXTERNAL_POSITION_ESTIMATE_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG with command MAV_CMD_ENUM_END
function payload_fns.payload_76_cmd43004(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_LONG
function payload_fns.payload_76(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    local cmd_id = padded(offset + 28, 2):le_uint()
    local cmd_name = enumEntryName.MAV_CMD[cmd_id]
    if cmd_name ~= nil then
        pinfo.cols.info:append(": " .. cmd_name)
    end
    local cmd_fn = payload_fns["payload_76_cmd" .. tostring(cmd_id)]
    if cmd_fn ~= nil then
        cmd_fn(buffer, tree, msgid, offset, limit, pinfo)
        return
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_command, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_LONG_confirmation, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param5, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param6, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COMMAND_LONG_param7, tvbrange, value)
end
-- dissect payload of message type COMMAND_ACK
function payload_fns.payload_77(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 10 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 10)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    local cmd_id = padded(offset + 0, 2):le_uint()
    local cmd_name = enumEntryName.MAV_CMD[cmd_id]
    if cmd_name ~= nil then
        pinfo.cols.info:append(": " .. cmd_name)
    end
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_ACK_command, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_ACK_result, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_ACK_progress, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.COMMAND_ACK_result_param2, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_ACK_target_system, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COMMAND_ACK_target_component, tvbrange, value)
end
-- dissect payload of message type MANUAL_SETPOINT
function payload_fns.payload_81(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 22 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 22)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MANUAL_SETPOINT_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MANUAL_SETPOINT_roll, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MANUAL_SETPOINT_pitch, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MANUAL_SETPOINT_yaw, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MANUAL_SETPOINT_thrust, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MANUAL_SETPOINT_mode_switch, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MANUAL_SETPOINT_manual_override_switch, tvbrange, value)
end
-- dissect payload of message type SET_ATTITUDE_TARGET
function payload_fns.payload_82(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 39 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 39)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SET_ATTITUDE_TARGET_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SET_ATTITUDE_TARGET_target_system, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SET_ATTITUDE_TARGET_target_component, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SET_ATTITUDE_TARGET_type_mask, tvbrange, value)
    dissect_flags_ATTITUDE_TARGET_TYPEMASK(subtree, "SET_ATTITUDE_TARGET_type_mask", tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_ATTITUDE_TARGET_q_0, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_ATTITUDE_TARGET_q_1, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_ATTITUDE_TARGET_q_2, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_ATTITUDE_TARGET_q_3, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_ATTITUDE_TARGET_body_roll_rate, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_ATTITUDE_TARGET_body_pitch_rate, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_ATTITUDE_TARGET_body_yaw_rate, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_ATTITUDE_TARGET_thrust, tvbrange, value)
end
-- dissect payload of message type ATTITUDE_TARGET
function payload_fns.payload_83(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 37 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 37)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ATTITUDE_TARGET_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ATTITUDE_TARGET_type_mask, tvbrange, value)
    dissect_flags_ATTITUDE_TARGET_TYPEMASK(subtree, "ATTITUDE_TARGET_type_mask", tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_TARGET_q_0, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_TARGET_q_1, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_TARGET_q_2, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_TARGET_q_3, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_TARGET_body_roll_rate, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_TARGET_body_pitch_rate, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_TARGET_body_yaw_rate, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATTITUDE_TARGET_thrust, tvbrange, value)
end
-- dissect payload of message type SET_POSITION_TARGET_LOCAL_NED
function payload_fns.payload_84(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 53 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 53)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_target_system, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_target_component, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_coordinate_frame, tvbrange, value)
    tvbrange = padded(offset + 48, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_type_mask, tvbrange, value)
    dissect_flags_POSITION_TARGET_TYPEMASK(subtree, "SET_POSITION_TARGET_LOCAL_NED_type_mask", tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_x, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_y, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_z, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_vx, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_vy, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_vz, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_afx, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_afy, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_afz, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_yaw, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_POSITION_TARGET_LOCAL_NED_yaw_rate, tvbrange, value)
end
-- dissect payload of message type POSITION_TARGET_LOCAL_NED
function payload_fns.payload_85(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 51 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 51)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.POSITION_TARGET_LOCAL_NED_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.POSITION_TARGET_LOCAL_NED_coordinate_frame, tvbrange, value)
    tvbrange = padded(offset + 48, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.POSITION_TARGET_LOCAL_NED_type_mask, tvbrange, value)
    dissect_flags_POSITION_TARGET_TYPEMASK(subtree, "POSITION_TARGET_LOCAL_NED_type_mask", tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.POSITION_TARGET_LOCAL_NED_x, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.POSITION_TARGET_LOCAL_NED_y, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.POSITION_TARGET_LOCAL_NED_z, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.POSITION_TARGET_LOCAL_NED_vx, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.POSITION_TARGET_LOCAL_NED_vy, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.POSITION_TARGET_LOCAL_NED_vz, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.POSITION_TARGET_LOCAL_NED_afx, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.POSITION_TARGET_LOCAL_NED_afy, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.POSITION_TARGET_LOCAL_NED_afz, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.POSITION_TARGET_LOCAL_NED_yaw, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.POSITION_TARGET_LOCAL_NED_yaw_rate, tvbrange, value)
end
-- dissect payload of message type SET_POSITION_TARGET_GLOBAL_INT
function payload_fns.payload_86(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 53 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 53)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_target_system, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_target_component, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_coordinate_frame, tvbrange, value)
    tvbrange = padded(offset + 48, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_type_mask, tvbrange, value)
    dissect_flags_POSITION_TARGET_TYPEMASK(subtree, "SET_POSITION_TARGET_GLOBAL_INT_type_mask", tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_lat_int, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_lon_int, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_alt, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_vx, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_vy, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_vz, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_afx, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_afy, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_afz, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_yaw, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_POSITION_TARGET_GLOBAL_INT_yaw_rate, tvbrange, value)
end
-- dissect payload of message type POSITION_TARGET_GLOBAL_INT
function payload_fns.payload_87(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 51 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 51)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_coordinate_frame, tvbrange, value)
    tvbrange = padded(offset + 48, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_type_mask, tvbrange, value)
    dissect_flags_POSITION_TARGET_TYPEMASK(subtree, "POSITION_TARGET_GLOBAL_INT_type_mask", tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_lat_int, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_lon_int, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_alt, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_vx, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_vy, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_vz, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_afx, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_afy, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_afz, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_yaw, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.POSITION_TARGET_GLOBAL_INT_yaw_rate, tvbrange, value)
end
-- dissect payload of message type LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET
function payload_fns.payload_89(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 28 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 28)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_x, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_y, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_z, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_roll, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_pitch, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_yaw, tvbrange, value)
end
-- dissect payload of message type HIL_STATE
function payload_fns.payload_90(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 56 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 56)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.HIL_STATE_time_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_STATE_roll, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_STATE_pitch, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_STATE_yaw, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_STATE_rollspeed, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_STATE_pitchspeed, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_STATE_yawspeed, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIL_STATE_lat, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIL_STATE_lon, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIL_STATE_alt, tvbrange, value)
    tvbrange = padded(offset + 44, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIL_STATE_vx, tvbrange, value)
    tvbrange = padded(offset + 46, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIL_STATE_vy, tvbrange, value)
    tvbrange = padded(offset + 48, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIL_STATE_vz, tvbrange, value)
    tvbrange = padded(offset + 50, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIL_STATE_xacc, tvbrange, value)
    tvbrange = padded(offset + 52, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIL_STATE_yacc, tvbrange, value)
    tvbrange = padded(offset + 54, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIL_STATE_zacc, tvbrange, value)
end
-- dissect payload of message type HIL_CONTROLS
function payload_fns.payload_91(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 42 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 42)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.HIL_CONTROLS_time_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_CONTROLS_roll_ailerons, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_CONTROLS_pitch_elevator, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_CONTROLS_yaw_rudder, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_CONTROLS_throttle, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_CONTROLS_aux1, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_CONTROLS_aux2, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_CONTROLS_aux3, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_CONTROLS_aux4, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_CONTROLS_mode, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_CONTROLS_nav_mode, tvbrange, value)
end
-- dissect payload of message type HIL_RC_INPUTS_RAW
function payload_fns.payload_92(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.HIL_RC_INPUTS_RAW_time_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_RC_INPUTS_RAW_chan1_raw, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_RC_INPUTS_RAW_chan2_raw, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_RC_INPUTS_RAW_chan3_raw, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_RC_INPUTS_RAW_chan4_raw, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_RC_INPUTS_RAW_chan5_raw, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_RC_INPUTS_RAW_chan6_raw, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_RC_INPUTS_RAW_chan7_raw, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_RC_INPUTS_RAW_chan8_raw, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_RC_INPUTS_RAW_chan9_raw, tvbrange, value)
    tvbrange = padded(offset + 26, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_RC_INPUTS_RAW_chan10_raw, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_RC_INPUTS_RAW_chan11_raw, tvbrange, value)
    tvbrange = padded(offset + 30, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_RC_INPUTS_RAW_chan12_raw, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_RC_INPUTS_RAW_rssi, tvbrange, value)
end
-- dissect payload of message type HIL_ACTUATOR_CONTROLS
function payload_fns.payload_93(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 81 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 81)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.HIL_ACTUATOR_CONTROLS_time_usec, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_0, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_1, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_2, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_3, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_4, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_5, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_6, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_7, tvbrange, value)
    tvbrange = padded(offset + 48, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_8, tvbrange, value)
    tvbrange = padded(offset + 52, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_9, tvbrange, value)
    tvbrange = padded(offset + 56, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_10, tvbrange, value)
    tvbrange = padded(offset + 60, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_11, tvbrange, value)
    tvbrange = padded(offset + 64, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_12, tvbrange, value)
    tvbrange = padded(offset + 68, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_13, tvbrange, value)
    tvbrange = padded(offset + 72, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_14, tvbrange, value)
    tvbrange = padded(offset + 76, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_ACTUATOR_CONTROLS_controls_15, tvbrange, value)
    tvbrange = padded(offset + 80, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_ACTUATOR_CONTROLS_mode, tvbrange, value)
    dissect_flags_MAV_MODE_FLAG(subtree, "HIL_ACTUATOR_CONTROLS_mode", tvbrange, value)
    tvbrange = padded(offset + 8, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.HIL_ACTUATOR_CONTROLS_flags, tvbrange, value)
end
-- dissect payload of message type OPTICAL_FLOW
function payload_fns.payload_100(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 34 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 34)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.OPTICAL_FLOW_time_usec, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPTICAL_FLOW_sensor_id, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.OPTICAL_FLOW_flow_x, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.OPTICAL_FLOW_flow_y, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OPTICAL_FLOW_flow_comp_m_x, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OPTICAL_FLOW_flow_comp_m_y, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPTICAL_FLOW_quality, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OPTICAL_FLOW_ground_distance, tvbrange, value)
    tvbrange = padded(offset + 26, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OPTICAL_FLOW_flow_rate_x, tvbrange, value)
    tvbrange = padded(offset + 30, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OPTICAL_FLOW_flow_rate_y, tvbrange, value)
end
-- dissect payload of message type GLOBAL_VISION_POSITION_ESTIMATE
function payload_fns.payload_101(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 117 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 117)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_x, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_y, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_z, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_roll, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_pitch, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_yaw, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_0, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_1, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_2, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_3, tvbrange, value)
    tvbrange = padded(offset + 48, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_4, tvbrange, value)
    tvbrange = padded(offset + 52, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_5, tvbrange, value)
    tvbrange = padded(offset + 56, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_6, tvbrange, value)
    tvbrange = padded(offset + 60, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_7, tvbrange, value)
    tvbrange = padded(offset + 64, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_8, tvbrange, value)
    tvbrange = padded(offset + 68, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_9, tvbrange, value)
    tvbrange = padded(offset + 72, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_10, tvbrange, value)
    tvbrange = padded(offset + 76, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_11, tvbrange, value)
    tvbrange = padded(offset + 80, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_12, tvbrange, value)
    tvbrange = padded(offset + 84, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_13, tvbrange, value)
    tvbrange = padded(offset + 88, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_14, tvbrange, value)
    tvbrange = padded(offset + 92, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_15, tvbrange, value)
    tvbrange = padded(offset + 96, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_16, tvbrange, value)
    tvbrange = padded(offset + 100, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_17, tvbrange, value)
    tvbrange = padded(offset + 104, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_18, tvbrange, value)
    tvbrange = padded(offset + 108, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_19, tvbrange, value)
    tvbrange = padded(offset + 112, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_covariance_20, tvbrange, value)
    tvbrange = padded(offset + 116, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GLOBAL_VISION_POSITION_ESTIMATE_reset_counter, tvbrange, value)
end
-- dissect payload of message type VISION_POSITION_ESTIMATE
function payload_fns.payload_102(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 117 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 117)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_x, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_y, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_z, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_roll, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_pitch, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_yaw, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_0, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_1, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_2, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_3, tvbrange, value)
    tvbrange = padded(offset + 48, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_4, tvbrange, value)
    tvbrange = padded(offset + 52, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_5, tvbrange, value)
    tvbrange = padded(offset + 56, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_6, tvbrange, value)
    tvbrange = padded(offset + 60, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_7, tvbrange, value)
    tvbrange = padded(offset + 64, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_8, tvbrange, value)
    tvbrange = padded(offset + 68, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_9, tvbrange, value)
    tvbrange = padded(offset + 72, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_10, tvbrange, value)
    tvbrange = padded(offset + 76, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_11, tvbrange, value)
    tvbrange = padded(offset + 80, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_12, tvbrange, value)
    tvbrange = padded(offset + 84, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_13, tvbrange, value)
    tvbrange = padded(offset + 88, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_14, tvbrange, value)
    tvbrange = padded(offset + 92, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_15, tvbrange, value)
    tvbrange = padded(offset + 96, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_16, tvbrange, value)
    tvbrange = padded(offset + 100, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_17, tvbrange, value)
    tvbrange = padded(offset + 104, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_18, tvbrange, value)
    tvbrange = padded(offset + 108, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_19, tvbrange, value)
    tvbrange = padded(offset + 112, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_covariance_20, tvbrange, value)
    tvbrange = padded(offset + 116, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VISION_POSITION_ESTIMATE_reset_counter, tvbrange, value)
end
-- dissect payload of message type VISION_SPEED_ESTIMATE
function payload_fns.payload_103(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 57 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 57)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.VISION_SPEED_ESTIMATE_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_SPEED_ESTIMATE_x, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_SPEED_ESTIMATE_y, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_SPEED_ESTIMATE_z, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_SPEED_ESTIMATE_covariance_0, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_SPEED_ESTIMATE_covariance_1, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_SPEED_ESTIMATE_covariance_2, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_SPEED_ESTIMATE_covariance_3, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_SPEED_ESTIMATE_covariance_4, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_SPEED_ESTIMATE_covariance_5, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_SPEED_ESTIMATE_covariance_6, tvbrange, value)
    tvbrange = padded(offset + 48, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_SPEED_ESTIMATE_covariance_7, tvbrange, value)
    tvbrange = padded(offset + 52, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VISION_SPEED_ESTIMATE_covariance_8, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VISION_SPEED_ESTIMATE_reset_counter, tvbrange, value)
end
-- dissect payload of message type VICON_POSITION_ESTIMATE
function payload_fns.payload_104(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 116 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 116)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_x, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_y, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_z, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_roll, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_pitch, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_yaw, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_0, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_1, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_2, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_3, tvbrange, value)
    tvbrange = padded(offset + 48, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_4, tvbrange, value)
    tvbrange = padded(offset + 52, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_5, tvbrange, value)
    tvbrange = padded(offset + 56, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_6, tvbrange, value)
    tvbrange = padded(offset + 60, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_7, tvbrange, value)
    tvbrange = padded(offset + 64, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_8, tvbrange, value)
    tvbrange = padded(offset + 68, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_9, tvbrange, value)
    tvbrange = padded(offset + 72, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_10, tvbrange, value)
    tvbrange = padded(offset + 76, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_11, tvbrange, value)
    tvbrange = padded(offset + 80, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_12, tvbrange, value)
    tvbrange = padded(offset + 84, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_13, tvbrange, value)
    tvbrange = padded(offset + 88, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_14, tvbrange, value)
    tvbrange = padded(offset + 92, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_15, tvbrange, value)
    tvbrange = padded(offset + 96, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_16, tvbrange, value)
    tvbrange = padded(offset + 100, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_17, tvbrange, value)
    tvbrange = padded(offset + 104, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_18, tvbrange, value)
    tvbrange = padded(offset + 108, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_19, tvbrange, value)
    tvbrange = padded(offset + 112, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VICON_POSITION_ESTIMATE_covariance_20, tvbrange, value)
end
-- dissect payload of message type HIGHRES_IMU
function payload_fns.payload_105(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 63 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 63)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.HIGHRES_IMU_time_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIGHRES_IMU_xacc, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIGHRES_IMU_yacc, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIGHRES_IMU_zacc, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIGHRES_IMU_xgyro, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIGHRES_IMU_ygyro, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIGHRES_IMU_zgyro, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIGHRES_IMU_xmag, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIGHRES_IMU_ymag, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIGHRES_IMU_zmag, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIGHRES_IMU_abs_pressure, tvbrange, value)
    tvbrange = padded(offset + 48, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIGHRES_IMU_diff_pressure, tvbrange, value)
    tvbrange = padded(offset + 52, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIGHRES_IMU_pressure_alt, tvbrange, value)
    tvbrange = padded(offset + 56, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIGHRES_IMU_temperature, tvbrange, value)
    tvbrange = padded(offset + 60, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGHRES_IMU_fields_updated, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGHRES_IMU_id, tvbrange, value)
end
-- dissect payload of message type OPTICAL_FLOW_RAD
function payload_fns.payload_106(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 44 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 44)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.OPTICAL_FLOW_RAD_time_usec, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPTICAL_FLOW_RAD_sensor_id, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPTICAL_FLOW_RAD_integration_time_us, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OPTICAL_FLOW_RAD_integrated_x, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OPTICAL_FLOW_RAD_integrated_y, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OPTICAL_FLOW_RAD_integrated_xgyro, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OPTICAL_FLOW_RAD_integrated_ygyro, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OPTICAL_FLOW_RAD_integrated_zgyro, tvbrange, value)
    tvbrange = padded(offset + 40, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.OPTICAL_FLOW_RAD_temperature, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPTICAL_FLOW_RAD_quality, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPTICAL_FLOW_RAD_time_delta_distance_us, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OPTICAL_FLOW_RAD_distance, tvbrange, value)
end
-- dissect payload of message type HIL_SENSOR
function payload_fns.payload_107(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 65 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 65)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.HIL_SENSOR_time_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_SENSOR_xacc, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_SENSOR_yacc, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_SENSOR_zacc, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_SENSOR_xgyro, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_SENSOR_ygyro, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_SENSOR_zgyro, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_SENSOR_xmag, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_SENSOR_ymag, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_SENSOR_zmag, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_SENSOR_abs_pressure, tvbrange, value)
    tvbrange = padded(offset + 48, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_SENSOR_diff_pressure, tvbrange, value)
    tvbrange = padded(offset + 52, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_SENSOR_pressure_alt, tvbrange, value)
    tvbrange = padded(offset + 56, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_SENSOR_temperature, tvbrange, value)
    tvbrange = padded(offset + 60, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_SENSOR_fields_updated, tvbrange, value)
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_SENSOR_id, tvbrange, value)
end
-- dissect payload of message type SIM_STATE
function payload_fns.payload_108(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 84 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 84)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIM_STATE_q1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIM_STATE_q2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIM_STATE_q3, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIM_STATE_q4, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIM_STATE_roll, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIM_STATE_pitch, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIM_STATE_yaw, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIM_STATE_xacc, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIM_STATE_yacc, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIM_STATE_zacc, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIM_STATE_xgyro, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIM_STATE_ygyro, tvbrange, value)
    tvbrange = padded(offset + 48, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIM_STATE_zgyro, tvbrange, value)
    tvbrange = padded(offset + 52, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIM_STATE_lat, tvbrange, value)
    tvbrange = padded(offset + 56, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIM_STATE_lon, tvbrange, value)
    tvbrange = padded(offset + 60, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIM_STATE_alt, tvbrange, value)
    tvbrange = padded(offset + 64, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIM_STATE_std_dev_horz, tvbrange, value)
    tvbrange = padded(offset + 68, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIM_STATE_std_dev_vert, tvbrange, value)
    tvbrange = padded(offset + 72, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIM_STATE_vn, tvbrange, value)
    tvbrange = padded(offset + 76, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIM_STATE_ve, tvbrange, value)
    tvbrange = padded(offset + 80, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SIM_STATE_vd, tvbrange, value)
end
-- dissect payload of message type RADIO_STATUS
function payload_fns.payload_109(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 9 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 9)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RADIO_STATUS_rssi, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RADIO_STATUS_remrssi, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RADIO_STATUS_txbuf, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RADIO_STATUS_noise, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RADIO_STATUS_remnoise, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RADIO_STATUS_rxerrors, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RADIO_STATUS_fixed, tvbrange, value)
end
-- dissect payload of message type FILE_TRANSFER_PROTOCOL
function payload_fns.payload_110(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 254 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 254)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_target_network, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_target_system, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_target_component, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_0, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_1, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_2, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_3, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_4, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_5, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_6, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_7, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_8, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_9, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_10, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_11, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_12, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_13, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_14, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_15, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_16, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_17, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_18, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_19, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_20, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_21, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_22, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_23, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_24, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_25, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_26, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_27, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_28, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_29, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_30, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_31, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_32, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_33, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_34, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_35, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_36, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_37, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_38, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_39, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_40, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_41, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_42, tvbrange, value)
    tvbrange = padded(offset + 46, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_43, tvbrange, value)
    tvbrange = padded(offset + 47, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_44, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_45, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_46, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_47, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_48, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_49, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_50, tvbrange, value)
    tvbrange = padded(offset + 54, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_51, tvbrange, value)
    tvbrange = padded(offset + 55, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_52, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_53, tvbrange, value)
    tvbrange = padded(offset + 57, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_54, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_55, tvbrange, value)
    tvbrange = padded(offset + 59, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_56, tvbrange, value)
    tvbrange = padded(offset + 60, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_57, tvbrange, value)
    tvbrange = padded(offset + 61, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_58, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_59, tvbrange, value)
    tvbrange = padded(offset + 63, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_60, tvbrange, value)
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_61, tvbrange, value)
    tvbrange = padded(offset + 65, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_62, tvbrange, value)
    tvbrange = padded(offset + 66, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_63, tvbrange, value)
    tvbrange = padded(offset + 67, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_64, tvbrange, value)
    tvbrange = padded(offset + 68, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_65, tvbrange, value)
    tvbrange = padded(offset + 69, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_66, tvbrange, value)
    tvbrange = padded(offset + 70, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_67, tvbrange, value)
    tvbrange = padded(offset + 71, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_68, tvbrange, value)
    tvbrange = padded(offset + 72, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_69, tvbrange, value)
    tvbrange = padded(offset + 73, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_70, tvbrange, value)
    tvbrange = padded(offset + 74, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_71, tvbrange, value)
    tvbrange = padded(offset + 75, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_72, tvbrange, value)
    tvbrange = padded(offset + 76, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_73, tvbrange, value)
    tvbrange = padded(offset + 77, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_74, tvbrange, value)
    tvbrange = padded(offset + 78, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_75, tvbrange, value)
    tvbrange = padded(offset + 79, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_76, tvbrange, value)
    tvbrange = padded(offset + 80, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_77, tvbrange, value)
    tvbrange = padded(offset + 81, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_78, tvbrange, value)
    tvbrange = padded(offset + 82, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_79, tvbrange, value)
    tvbrange = padded(offset + 83, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_80, tvbrange, value)
    tvbrange = padded(offset + 84, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_81, tvbrange, value)
    tvbrange = padded(offset + 85, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_82, tvbrange, value)
    tvbrange = padded(offset + 86, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_83, tvbrange, value)
    tvbrange = padded(offset + 87, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_84, tvbrange, value)
    tvbrange = padded(offset + 88, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_85, tvbrange, value)
    tvbrange = padded(offset + 89, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_86, tvbrange, value)
    tvbrange = padded(offset + 90, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_87, tvbrange, value)
    tvbrange = padded(offset + 91, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_88, tvbrange, value)
    tvbrange = padded(offset + 92, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_89, tvbrange, value)
    tvbrange = padded(offset + 93, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_90, tvbrange, value)
    tvbrange = padded(offset + 94, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_91, tvbrange, value)
    tvbrange = padded(offset + 95, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_92, tvbrange, value)
    tvbrange = padded(offset + 96, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_93, tvbrange, value)
    tvbrange = padded(offset + 97, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_94, tvbrange, value)
    tvbrange = padded(offset + 98, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_95, tvbrange, value)
    tvbrange = padded(offset + 99, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_96, tvbrange, value)
    tvbrange = padded(offset + 100, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_97, tvbrange, value)
    tvbrange = padded(offset + 101, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_98, tvbrange, value)
    tvbrange = padded(offset + 102, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_99, tvbrange, value)
    tvbrange = padded(offset + 103, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_100, tvbrange, value)
    tvbrange = padded(offset + 104, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_101, tvbrange, value)
    tvbrange = padded(offset + 105, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_102, tvbrange, value)
    tvbrange = padded(offset + 106, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_103, tvbrange, value)
    tvbrange = padded(offset + 107, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_104, tvbrange, value)
    tvbrange = padded(offset + 108, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_105, tvbrange, value)
    tvbrange = padded(offset + 109, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_106, tvbrange, value)
    tvbrange = padded(offset + 110, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_107, tvbrange, value)
    tvbrange = padded(offset + 111, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_108, tvbrange, value)
    tvbrange = padded(offset + 112, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_109, tvbrange, value)
    tvbrange = padded(offset + 113, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_110, tvbrange, value)
    tvbrange = padded(offset + 114, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_111, tvbrange, value)
    tvbrange = padded(offset + 115, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_112, tvbrange, value)
    tvbrange = padded(offset + 116, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_113, tvbrange, value)
    tvbrange = padded(offset + 117, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_114, tvbrange, value)
    tvbrange = padded(offset + 118, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_115, tvbrange, value)
    tvbrange = padded(offset + 119, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_116, tvbrange, value)
    tvbrange = padded(offset + 120, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_117, tvbrange, value)
    tvbrange = padded(offset + 121, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_118, tvbrange, value)
    tvbrange = padded(offset + 122, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_119, tvbrange, value)
    tvbrange = padded(offset + 123, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_120, tvbrange, value)
    tvbrange = padded(offset + 124, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_121, tvbrange, value)
    tvbrange = padded(offset + 125, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_122, tvbrange, value)
    tvbrange = padded(offset + 126, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_123, tvbrange, value)
    tvbrange = padded(offset + 127, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_124, tvbrange, value)
    tvbrange = padded(offset + 128, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_125, tvbrange, value)
    tvbrange = padded(offset + 129, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_126, tvbrange, value)
    tvbrange = padded(offset + 130, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_127, tvbrange, value)
    tvbrange = padded(offset + 131, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_128, tvbrange, value)
    tvbrange = padded(offset + 132, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_129, tvbrange, value)
    tvbrange = padded(offset + 133, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_130, tvbrange, value)
    tvbrange = padded(offset + 134, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_131, tvbrange, value)
    tvbrange = padded(offset + 135, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_132, tvbrange, value)
    tvbrange = padded(offset + 136, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_133, tvbrange, value)
    tvbrange = padded(offset + 137, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_134, tvbrange, value)
    tvbrange = padded(offset + 138, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_135, tvbrange, value)
    tvbrange = padded(offset + 139, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_136, tvbrange, value)
    tvbrange = padded(offset + 140, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_137, tvbrange, value)
    tvbrange = padded(offset + 141, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_138, tvbrange, value)
    tvbrange = padded(offset + 142, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_139, tvbrange, value)
    tvbrange = padded(offset + 143, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_140, tvbrange, value)
    tvbrange = padded(offset + 144, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_141, tvbrange, value)
    tvbrange = padded(offset + 145, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_142, tvbrange, value)
    tvbrange = padded(offset + 146, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_143, tvbrange, value)
    tvbrange = padded(offset + 147, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_144, tvbrange, value)
    tvbrange = padded(offset + 148, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_145, tvbrange, value)
    tvbrange = padded(offset + 149, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_146, tvbrange, value)
    tvbrange = padded(offset + 150, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_147, tvbrange, value)
    tvbrange = padded(offset + 151, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_148, tvbrange, value)
    tvbrange = padded(offset + 152, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_149, tvbrange, value)
    tvbrange = padded(offset + 153, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_150, tvbrange, value)
    tvbrange = padded(offset + 154, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_151, tvbrange, value)
    tvbrange = padded(offset + 155, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_152, tvbrange, value)
    tvbrange = padded(offset + 156, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_153, tvbrange, value)
    tvbrange = padded(offset + 157, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_154, tvbrange, value)
    tvbrange = padded(offset + 158, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_155, tvbrange, value)
    tvbrange = padded(offset + 159, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_156, tvbrange, value)
    tvbrange = padded(offset + 160, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_157, tvbrange, value)
    tvbrange = padded(offset + 161, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_158, tvbrange, value)
    tvbrange = padded(offset + 162, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_159, tvbrange, value)
    tvbrange = padded(offset + 163, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_160, tvbrange, value)
    tvbrange = padded(offset + 164, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_161, tvbrange, value)
    tvbrange = padded(offset + 165, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_162, tvbrange, value)
    tvbrange = padded(offset + 166, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_163, tvbrange, value)
    tvbrange = padded(offset + 167, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_164, tvbrange, value)
    tvbrange = padded(offset + 168, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_165, tvbrange, value)
    tvbrange = padded(offset + 169, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_166, tvbrange, value)
    tvbrange = padded(offset + 170, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_167, tvbrange, value)
    tvbrange = padded(offset + 171, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_168, tvbrange, value)
    tvbrange = padded(offset + 172, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_169, tvbrange, value)
    tvbrange = padded(offset + 173, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_170, tvbrange, value)
    tvbrange = padded(offset + 174, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_171, tvbrange, value)
    tvbrange = padded(offset + 175, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_172, tvbrange, value)
    tvbrange = padded(offset + 176, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_173, tvbrange, value)
    tvbrange = padded(offset + 177, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_174, tvbrange, value)
    tvbrange = padded(offset + 178, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_175, tvbrange, value)
    tvbrange = padded(offset + 179, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_176, tvbrange, value)
    tvbrange = padded(offset + 180, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_177, tvbrange, value)
    tvbrange = padded(offset + 181, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_178, tvbrange, value)
    tvbrange = padded(offset + 182, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_179, tvbrange, value)
    tvbrange = padded(offset + 183, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_180, tvbrange, value)
    tvbrange = padded(offset + 184, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_181, tvbrange, value)
    tvbrange = padded(offset + 185, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_182, tvbrange, value)
    tvbrange = padded(offset + 186, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_183, tvbrange, value)
    tvbrange = padded(offset + 187, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_184, tvbrange, value)
    tvbrange = padded(offset + 188, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_185, tvbrange, value)
    tvbrange = padded(offset + 189, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_186, tvbrange, value)
    tvbrange = padded(offset + 190, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_187, tvbrange, value)
    tvbrange = padded(offset + 191, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_188, tvbrange, value)
    tvbrange = padded(offset + 192, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_189, tvbrange, value)
    tvbrange = padded(offset + 193, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_190, tvbrange, value)
    tvbrange = padded(offset + 194, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_191, tvbrange, value)
    tvbrange = padded(offset + 195, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_192, tvbrange, value)
    tvbrange = padded(offset + 196, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_193, tvbrange, value)
    tvbrange = padded(offset + 197, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_194, tvbrange, value)
    tvbrange = padded(offset + 198, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_195, tvbrange, value)
    tvbrange = padded(offset + 199, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_196, tvbrange, value)
    tvbrange = padded(offset + 200, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_197, tvbrange, value)
    tvbrange = padded(offset + 201, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_198, tvbrange, value)
    tvbrange = padded(offset + 202, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_199, tvbrange, value)
    tvbrange = padded(offset + 203, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_200, tvbrange, value)
    tvbrange = padded(offset + 204, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_201, tvbrange, value)
    tvbrange = padded(offset + 205, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_202, tvbrange, value)
    tvbrange = padded(offset + 206, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_203, tvbrange, value)
    tvbrange = padded(offset + 207, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_204, tvbrange, value)
    tvbrange = padded(offset + 208, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_205, tvbrange, value)
    tvbrange = padded(offset + 209, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_206, tvbrange, value)
    tvbrange = padded(offset + 210, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_207, tvbrange, value)
    tvbrange = padded(offset + 211, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_208, tvbrange, value)
    tvbrange = padded(offset + 212, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_209, tvbrange, value)
    tvbrange = padded(offset + 213, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_210, tvbrange, value)
    tvbrange = padded(offset + 214, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_211, tvbrange, value)
    tvbrange = padded(offset + 215, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_212, tvbrange, value)
    tvbrange = padded(offset + 216, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_213, tvbrange, value)
    tvbrange = padded(offset + 217, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_214, tvbrange, value)
    tvbrange = padded(offset + 218, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_215, tvbrange, value)
    tvbrange = padded(offset + 219, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_216, tvbrange, value)
    tvbrange = padded(offset + 220, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_217, tvbrange, value)
    tvbrange = padded(offset + 221, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_218, tvbrange, value)
    tvbrange = padded(offset + 222, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_219, tvbrange, value)
    tvbrange = padded(offset + 223, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_220, tvbrange, value)
    tvbrange = padded(offset + 224, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_221, tvbrange, value)
    tvbrange = padded(offset + 225, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_222, tvbrange, value)
    tvbrange = padded(offset + 226, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_223, tvbrange, value)
    tvbrange = padded(offset + 227, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_224, tvbrange, value)
    tvbrange = padded(offset + 228, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_225, tvbrange, value)
    tvbrange = padded(offset + 229, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_226, tvbrange, value)
    tvbrange = padded(offset + 230, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_227, tvbrange, value)
    tvbrange = padded(offset + 231, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_228, tvbrange, value)
    tvbrange = padded(offset + 232, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_229, tvbrange, value)
    tvbrange = padded(offset + 233, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_230, tvbrange, value)
    tvbrange = padded(offset + 234, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_231, tvbrange, value)
    tvbrange = padded(offset + 235, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_232, tvbrange, value)
    tvbrange = padded(offset + 236, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_233, tvbrange, value)
    tvbrange = padded(offset + 237, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_234, tvbrange, value)
    tvbrange = padded(offset + 238, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_235, tvbrange, value)
    tvbrange = padded(offset + 239, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_236, tvbrange, value)
    tvbrange = padded(offset + 240, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_237, tvbrange, value)
    tvbrange = padded(offset + 241, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_238, tvbrange, value)
    tvbrange = padded(offset + 242, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_239, tvbrange, value)
    tvbrange = padded(offset + 243, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_240, tvbrange, value)
    tvbrange = padded(offset + 244, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_241, tvbrange, value)
    tvbrange = padded(offset + 245, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_242, tvbrange, value)
    tvbrange = padded(offset + 246, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_243, tvbrange, value)
    tvbrange = padded(offset + 247, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_244, tvbrange, value)
    tvbrange = padded(offset + 248, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_245, tvbrange, value)
    tvbrange = padded(offset + 249, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_246, tvbrange, value)
    tvbrange = padded(offset + 250, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_247, tvbrange, value)
    tvbrange = padded(offset + 251, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_248, tvbrange, value)
    tvbrange = padded(offset + 252, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_249, tvbrange, value)
    tvbrange = padded(offset + 253, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FILE_TRANSFER_PROTOCOL_payload_250, tvbrange, value)
end
-- dissect payload of message type TIMESYNC
function payload_fns.payload_111(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 16 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 16)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_int64()
    subtree = tree:add_le(f.TIMESYNC_tc1, tvbrange, value)
    tvbrange = padded(offset + 8, 8)
    value = tvbrange:le_int64()
    subtree = tree:add_le(f.TIMESYNC_ts1, tvbrange, value)
end
-- dissect payload of message type CAMERA_TRIGGER
function payload_fns.payload_112(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 12 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 12)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.CAMERA_TRIGGER_time_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_TRIGGER_seq, tvbrange, value)
end
-- dissect payload of message type HIL_GPS
function payload_fns.payload_113(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 39 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 39)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.HIL_GPS_time_usec, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_GPS_fix_type, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIL_GPS_lat, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIL_GPS_lon, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIL_GPS_alt, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_GPS_eph, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_GPS_epv, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_GPS_vel, tvbrange, value)
    tvbrange = padded(offset + 26, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIL_GPS_vn, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIL_GPS_ve, tvbrange, value)
    tvbrange = padded(offset + 30, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIL_GPS_vd, tvbrange, value)
    tvbrange = padded(offset + 32, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_GPS_cog, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_GPS_satellites_visible, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_GPS_id, tvbrange, value)
    tvbrange = padded(offset + 37, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_GPS_yaw, tvbrange, value)
end
-- dissect payload of message type HIL_OPTICAL_FLOW
function payload_fns.payload_114(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 44 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 44)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.HIL_OPTICAL_FLOW_time_usec, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_OPTICAL_FLOW_sensor_id, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_OPTICAL_FLOW_integration_time_us, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_OPTICAL_FLOW_integrated_x, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_OPTICAL_FLOW_integrated_y, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_OPTICAL_FLOW_integrated_xgyro, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_OPTICAL_FLOW_integrated_ygyro, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_OPTICAL_FLOW_integrated_zgyro, tvbrange, value)
    tvbrange = padded(offset + 40, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIL_OPTICAL_FLOW_temperature, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_OPTICAL_FLOW_quality, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_OPTICAL_FLOW_time_delta_distance_us, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_OPTICAL_FLOW_distance, tvbrange, value)
end
-- dissect payload of message type HIL_STATE_QUATERNION
function payload_fns.payload_115(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 64 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 64)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.HIL_STATE_QUATERNION_time_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_STATE_QUATERNION_attitude_quaternion_0, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_STATE_QUATERNION_attitude_quaternion_1, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_STATE_QUATERNION_attitude_quaternion_2, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_STATE_QUATERNION_attitude_quaternion_3, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_STATE_QUATERNION_rollspeed, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_STATE_QUATERNION_pitchspeed, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HIL_STATE_QUATERNION_yawspeed, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIL_STATE_QUATERNION_lat, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIL_STATE_QUATERNION_lon, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIL_STATE_QUATERNION_alt, tvbrange, value)
    tvbrange = padded(offset + 48, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIL_STATE_QUATERNION_vx, tvbrange, value)
    tvbrange = padded(offset + 50, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIL_STATE_QUATERNION_vy, tvbrange, value)
    tvbrange = padded(offset + 52, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIL_STATE_QUATERNION_vz, tvbrange, value)
    tvbrange = padded(offset + 54, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_STATE_QUATERNION_ind_airspeed, tvbrange, value)
    tvbrange = padded(offset + 56, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIL_STATE_QUATERNION_true_airspeed, tvbrange, value)
    tvbrange = padded(offset + 58, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIL_STATE_QUATERNION_xacc, tvbrange, value)
    tvbrange = padded(offset + 60, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIL_STATE_QUATERNION_yacc, tvbrange, value)
    tvbrange = padded(offset + 62, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIL_STATE_QUATERNION_zacc, tvbrange, value)
end
-- dissect payload of message type SCALED_IMU2
function payload_fns.payload_116(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 24 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 24)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SCALED_IMU2_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU2_xacc, tvbrange, value)
    tvbrange = padded(offset + 6, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU2_yacc, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU2_zacc, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU2_xgyro, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU2_ygyro, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU2_zgyro, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU2_xmag, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU2_ymag, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU2_zmag, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU2_temperature, tvbrange, value)
end
-- dissect payload of message type LOG_REQUEST_LIST
function payload_fns.payload_117(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 6 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 6)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_REQUEST_LIST_target_system, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_REQUEST_LIST_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_REQUEST_LIST_start, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_REQUEST_LIST_end, tvbrange, value)
end
-- dissect payload of message type LOG_ENTRY
function payload_fns.payload_118(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 14 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 14)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_ENTRY_id, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_ENTRY_num_logs, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_ENTRY_last_log_num, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_ENTRY_time_utc, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_ENTRY_size, tvbrange, value)
end
-- dissect payload of message type LOG_REQUEST_DATA
function payload_fns.payload_119(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 12 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 12)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_REQUEST_DATA_target_system, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_REQUEST_DATA_target_component, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_REQUEST_DATA_id, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_REQUEST_DATA_ofs, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_REQUEST_DATA_count, tvbrange, value)
end
-- dissect payload of message type LOG_DATA
function payload_fns.payload_120(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 97 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 97)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_id, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_ofs, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_count, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_0, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_1, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_2, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_3, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_4, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_5, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_6, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_7, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_8, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_9, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_10, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_11, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_12, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_13, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_14, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_15, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_16, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_17, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_18, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_19, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_20, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_21, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_22, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_23, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_24, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_25, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_26, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_27, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_28, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_29, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_30, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_31, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_32, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_33, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_34, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_35, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_36, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_37, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_38, tvbrange, value)
    tvbrange = padded(offset + 46, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_39, tvbrange, value)
    tvbrange = padded(offset + 47, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_40, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_41, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_42, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_43, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_44, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_45, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_46, tvbrange, value)
    tvbrange = padded(offset + 54, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_47, tvbrange, value)
    tvbrange = padded(offset + 55, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_48, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_49, tvbrange, value)
    tvbrange = padded(offset + 57, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_50, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_51, tvbrange, value)
    tvbrange = padded(offset + 59, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_52, tvbrange, value)
    tvbrange = padded(offset + 60, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_53, tvbrange, value)
    tvbrange = padded(offset + 61, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_54, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_55, tvbrange, value)
    tvbrange = padded(offset + 63, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_56, tvbrange, value)
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_57, tvbrange, value)
    tvbrange = padded(offset + 65, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_58, tvbrange, value)
    tvbrange = padded(offset + 66, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_59, tvbrange, value)
    tvbrange = padded(offset + 67, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_60, tvbrange, value)
    tvbrange = padded(offset + 68, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_61, tvbrange, value)
    tvbrange = padded(offset + 69, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_62, tvbrange, value)
    tvbrange = padded(offset + 70, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_63, tvbrange, value)
    tvbrange = padded(offset + 71, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_64, tvbrange, value)
    tvbrange = padded(offset + 72, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_65, tvbrange, value)
    tvbrange = padded(offset + 73, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_66, tvbrange, value)
    tvbrange = padded(offset + 74, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_67, tvbrange, value)
    tvbrange = padded(offset + 75, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_68, tvbrange, value)
    tvbrange = padded(offset + 76, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_69, tvbrange, value)
    tvbrange = padded(offset + 77, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_70, tvbrange, value)
    tvbrange = padded(offset + 78, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_71, tvbrange, value)
    tvbrange = padded(offset + 79, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_72, tvbrange, value)
    tvbrange = padded(offset + 80, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_73, tvbrange, value)
    tvbrange = padded(offset + 81, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_74, tvbrange, value)
    tvbrange = padded(offset + 82, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_75, tvbrange, value)
    tvbrange = padded(offset + 83, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_76, tvbrange, value)
    tvbrange = padded(offset + 84, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_77, tvbrange, value)
    tvbrange = padded(offset + 85, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_78, tvbrange, value)
    tvbrange = padded(offset + 86, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_79, tvbrange, value)
    tvbrange = padded(offset + 87, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_80, tvbrange, value)
    tvbrange = padded(offset + 88, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_81, tvbrange, value)
    tvbrange = padded(offset + 89, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_82, tvbrange, value)
    tvbrange = padded(offset + 90, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_83, tvbrange, value)
    tvbrange = padded(offset + 91, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_84, tvbrange, value)
    tvbrange = padded(offset + 92, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_85, tvbrange, value)
    tvbrange = padded(offset + 93, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_86, tvbrange, value)
    tvbrange = padded(offset + 94, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_87, tvbrange, value)
    tvbrange = padded(offset + 95, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_88, tvbrange, value)
    tvbrange = padded(offset + 96, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_DATA_data_89, tvbrange, value)
end
-- dissect payload of message type LOG_ERASE
function payload_fns.payload_121(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 2 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 2)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_ERASE_target_system, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_ERASE_target_component, tvbrange, value)
end
-- dissect payload of message type LOG_REQUEST_END
function payload_fns.payload_122(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 2 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 2)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_REQUEST_END_target_system, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOG_REQUEST_END_target_component, tvbrange, value)
end
-- dissect payload of message type GPS_INJECT_DATA
function payload_fns.payload_123(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 113 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 113)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_target_system, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_target_component, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_len, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_0, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_1, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_2, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_3, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_4, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_5, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_6, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_7, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_8, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_9, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_10, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_11, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_12, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_13, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_14, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_15, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_16, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_17, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_18, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_19, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_20, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_21, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_22, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_23, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_24, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_25, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_26, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_27, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_28, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_29, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_30, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_31, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_32, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_33, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_34, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_35, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_36, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_37, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_38, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_39, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_40, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_41, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_42, tvbrange, value)
    tvbrange = padded(offset + 46, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_43, tvbrange, value)
    tvbrange = padded(offset + 47, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_44, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_45, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_46, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_47, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_48, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_49, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_50, tvbrange, value)
    tvbrange = padded(offset + 54, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_51, tvbrange, value)
    tvbrange = padded(offset + 55, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_52, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_53, tvbrange, value)
    tvbrange = padded(offset + 57, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_54, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_55, tvbrange, value)
    tvbrange = padded(offset + 59, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_56, tvbrange, value)
    tvbrange = padded(offset + 60, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_57, tvbrange, value)
    tvbrange = padded(offset + 61, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_58, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_59, tvbrange, value)
    tvbrange = padded(offset + 63, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_60, tvbrange, value)
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_61, tvbrange, value)
    tvbrange = padded(offset + 65, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_62, tvbrange, value)
    tvbrange = padded(offset + 66, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_63, tvbrange, value)
    tvbrange = padded(offset + 67, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_64, tvbrange, value)
    tvbrange = padded(offset + 68, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_65, tvbrange, value)
    tvbrange = padded(offset + 69, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_66, tvbrange, value)
    tvbrange = padded(offset + 70, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_67, tvbrange, value)
    tvbrange = padded(offset + 71, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_68, tvbrange, value)
    tvbrange = padded(offset + 72, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_69, tvbrange, value)
    tvbrange = padded(offset + 73, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_70, tvbrange, value)
    tvbrange = padded(offset + 74, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_71, tvbrange, value)
    tvbrange = padded(offset + 75, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_72, tvbrange, value)
    tvbrange = padded(offset + 76, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_73, tvbrange, value)
    tvbrange = padded(offset + 77, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_74, tvbrange, value)
    tvbrange = padded(offset + 78, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_75, tvbrange, value)
    tvbrange = padded(offset + 79, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_76, tvbrange, value)
    tvbrange = padded(offset + 80, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_77, tvbrange, value)
    tvbrange = padded(offset + 81, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_78, tvbrange, value)
    tvbrange = padded(offset + 82, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_79, tvbrange, value)
    tvbrange = padded(offset + 83, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_80, tvbrange, value)
    tvbrange = padded(offset + 84, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_81, tvbrange, value)
    tvbrange = padded(offset + 85, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_82, tvbrange, value)
    tvbrange = padded(offset + 86, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_83, tvbrange, value)
    tvbrange = padded(offset + 87, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_84, tvbrange, value)
    tvbrange = padded(offset + 88, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_85, tvbrange, value)
    tvbrange = padded(offset + 89, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_86, tvbrange, value)
    tvbrange = padded(offset + 90, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_87, tvbrange, value)
    tvbrange = padded(offset + 91, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_88, tvbrange, value)
    tvbrange = padded(offset + 92, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_89, tvbrange, value)
    tvbrange = padded(offset + 93, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_90, tvbrange, value)
    tvbrange = padded(offset + 94, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_91, tvbrange, value)
    tvbrange = padded(offset + 95, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_92, tvbrange, value)
    tvbrange = padded(offset + 96, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_93, tvbrange, value)
    tvbrange = padded(offset + 97, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_94, tvbrange, value)
    tvbrange = padded(offset + 98, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_95, tvbrange, value)
    tvbrange = padded(offset + 99, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_96, tvbrange, value)
    tvbrange = padded(offset + 100, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_97, tvbrange, value)
    tvbrange = padded(offset + 101, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_98, tvbrange, value)
    tvbrange = padded(offset + 102, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_99, tvbrange, value)
    tvbrange = padded(offset + 103, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_100, tvbrange, value)
    tvbrange = padded(offset + 104, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_101, tvbrange, value)
    tvbrange = padded(offset + 105, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_102, tvbrange, value)
    tvbrange = padded(offset + 106, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_103, tvbrange, value)
    tvbrange = padded(offset + 107, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_104, tvbrange, value)
    tvbrange = padded(offset + 108, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_105, tvbrange, value)
    tvbrange = padded(offset + 109, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_106, tvbrange, value)
    tvbrange = padded(offset + 110, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_107, tvbrange, value)
    tvbrange = padded(offset + 111, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_108, tvbrange, value)
    tvbrange = padded(offset + 112, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INJECT_DATA_data_109, tvbrange, value)
end
-- dissect payload of message type GPS2_RAW
function payload_fns.payload_124(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 57 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 57)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.GPS2_RAW_time_usec, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS2_RAW_fix_type, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GPS2_RAW_lat, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GPS2_RAW_lon, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GPS2_RAW_alt, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS2_RAW_eph, tvbrange, value)
    tvbrange = padded(offset + 26, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS2_RAW_epv, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS2_RAW_vel, tvbrange, value)
    tvbrange = padded(offset + 30, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS2_RAW_cog, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS2_RAW_satellites_visible, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS2_RAW_dgps_numch, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS2_RAW_dgps_age, tvbrange, value)
    tvbrange = padded(offset + 35, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS2_RAW_yaw, tvbrange, value)
    tvbrange = padded(offset + 37, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GPS2_RAW_alt_ellipsoid, tvbrange, value)
    tvbrange = padded(offset + 41, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS2_RAW_h_acc, tvbrange, value)
    tvbrange = padded(offset + 45, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS2_RAW_v_acc, tvbrange, value)
    tvbrange = padded(offset + 49, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS2_RAW_vel_acc, tvbrange, value)
    tvbrange = padded(offset + 53, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS2_RAW_hdg_acc, tvbrange, value)
end
-- dissect payload of message type POWER_STATUS
function payload_fns.payload_125(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 6 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 6)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.POWER_STATUS_Vcc, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.POWER_STATUS_Vservo, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.POWER_STATUS_flags, tvbrange, value)
    dissect_flags_MAV_POWER_STATUS(subtree, "POWER_STATUS_flags", tvbrange, value)
end
-- dissect payload of message type SERIAL_CONTROL
function payload_fns.payload_126(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 79 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 79)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_device, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_flags, tvbrange, value)
    dissect_flags_SERIAL_CONTROL_FLAG(subtree, "SERIAL_CONTROL_flags", tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_timeout, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_baudrate, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_count, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_0, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_1, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_2, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_3, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_4, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_5, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_6, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_7, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_8, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_9, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_10, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_11, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_12, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_13, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_14, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_15, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_16, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_17, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_18, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_19, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_20, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_21, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_22, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_23, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_24, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_25, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_26, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_27, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_28, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_29, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_30, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_31, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_32, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_33, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_34, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_35, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_36, tvbrange, value)
    tvbrange = padded(offset + 46, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_37, tvbrange, value)
    tvbrange = padded(offset + 47, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_38, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_39, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_40, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_41, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_42, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_43, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_44, tvbrange, value)
    tvbrange = padded(offset + 54, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_45, tvbrange, value)
    tvbrange = padded(offset + 55, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_46, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_47, tvbrange, value)
    tvbrange = padded(offset + 57, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_48, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_49, tvbrange, value)
    tvbrange = padded(offset + 59, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_50, tvbrange, value)
    tvbrange = padded(offset + 60, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_51, tvbrange, value)
    tvbrange = padded(offset + 61, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_52, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_53, tvbrange, value)
    tvbrange = padded(offset + 63, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_54, tvbrange, value)
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_55, tvbrange, value)
    tvbrange = padded(offset + 65, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_56, tvbrange, value)
    tvbrange = padded(offset + 66, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_57, tvbrange, value)
    tvbrange = padded(offset + 67, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_58, tvbrange, value)
    tvbrange = padded(offset + 68, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_59, tvbrange, value)
    tvbrange = padded(offset + 69, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_60, tvbrange, value)
    tvbrange = padded(offset + 70, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_61, tvbrange, value)
    tvbrange = padded(offset + 71, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_62, tvbrange, value)
    tvbrange = padded(offset + 72, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_63, tvbrange, value)
    tvbrange = padded(offset + 73, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_64, tvbrange, value)
    tvbrange = padded(offset + 74, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_65, tvbrange, value)
    tvbrange = padded(offset + 75, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_66, tvbrange, value)
    tvbrange = padded(offset + 76, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_67, tvbrange, value)
    tvbrange = padded(offset + 77, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_68, tvbrange, value)
    tvbrange = padded(offset + 78, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SERIAL_CONTROL_data_69, tvbrange, value)
end
-- dissect payload of message type GPS_RTK
function payload_fns.payload_127(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTK_time_last_baseline_ms, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTK_rtk_receiver_id, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTK_wn, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTK_tow, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTK_rtk_health, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTK_rtk_rate, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTK_nsats, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTK_baseline_coords_type, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GPS_RTK_baseline_a_mm, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GPS_RTK_baseline_b_mm, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GPS_RTK_baseline_c_mm, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTK_accuracy, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GPS_RTK_iar_num_hypotheses, tvbrange, value)
end
-- dissect payload of message type GPS2_RTK
function payload_fns.payload_128(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS2_RTK_time_last_baseline_ms, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS2_RTK_rtk_receiver_id, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS2_RTK_wn, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS2_RTK_tow, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS2_RTK_rtk_health, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS2_RTK_rtk_rate, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS2_RTK_nsats, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS2_RTK_baseline_coords_type, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GPS2_RTK_baseline_a_mm, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GPS2_RTK_baseline_b_mm, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GPS2_RTK_baseline_c_mm, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS2_RTK_accuracy, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GPS2_RTK_iar_num_hypotheses, tvbrange, value)
end
-- dissect payload of message type SCALED_IMU3
function payload_fns.payload_129(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 24 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 24)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SCALED_IMU3_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU3_xacc, tvbrange, value)
    tvbrange = padded(offset + 6, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU3_yacc, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU3_zacc, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU3_xgyro, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU3_ygyro, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU3_zgyro, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU3_xmag, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU3_ymag, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU3_zmag, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_IMU3_temperature, tvbrange, value)
end
-- dissect payload of message type DATA_TRANSMISSION_HANDSHAKE
function payload_fns.payload_130(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 13 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 13)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA_TRANSMISSION_HANDSHAKE_type, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA_TRANSMISSION_HANDSHAKE_size, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA_TRANSMISSION_HANDSHAKE_width, tvbrange, value)
    tvbrange = padded(offset + 6, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA_TRANSMISSION_HANDSHAKE_height, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA_TRANSMISSION_HANDSHAKE_packets, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA_TRANSMISSION_HANDSHAKE_payload, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DATA_TRANSMISSION_HANDSHAKE_jpg_quality, tvbrange, value)
end
-- dissect payload of message type ENCAPSULATED_DATA
function payload_fns.payload_131(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 255 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 255)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_seqnr, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_0, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_1, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_2, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_3, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_4, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_5, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_6, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_7, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_8, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_9, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_10, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_11, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_12, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_13, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_14, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_15, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_16, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_17, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_18, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_19, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_20, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_21, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_22, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_23, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_24, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_25, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_26, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_27, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_28, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_29, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_30, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_31, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_32, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_33, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_34, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_35, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_36, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_37, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_38, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_39, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_40, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_41, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_42, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_43, tvbrange, value)
    tvbrange = padded(offset + 46, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_44, tvbrange, value)
    tvbrange = padded(offset + 47, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_45, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_46, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_47, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_48, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_49, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_50, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_51, tvbrange, value)
    tvbrange = padded(offset + 54, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_52, tvbrange, value)
    tvbrange = padded(offset + 55, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_53, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_54, tvbrange, value)
    tvbrange = padded(offset + 57, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_55, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_56, tvbrange, value)
    tvbrange = padded(offset + 59, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_57, tvbrange, value)
    tvbrange = padded(offset + 60, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_58, tvbrange, value)
    tvbrange = padded(offset + 61, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_59, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_60, tvbrange, value)
    tvbrange = padded(offset + 63, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_61, tvbrange, value)
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_62, tvbrange, value)
    tvbrange = padded(offset + 65, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_63, tvbrange, value)
    tvbrange = padded(offset + 66, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_64, tvbrange, value)
    tvbrange = padded(offset + 67, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_65, tvbrange, value)
    tvbrange = padded(offset + 68, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_66, tvbrange, value)
    tvbrange = padded(offset + 69, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_67, tvbrange, value)
    tvbrange = padded(offset + 70, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_68, tvbrange, value)
    tvbrange = padded(offset + 71, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_69, tvbrange, value)
    tvbrange = padded(offset + 72, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_70, tvbrange, value)
    tvbrange = padded(offset + 73, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_71, tvbrange, value)
    tvbrange = padded(offset + 74, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_72, tvbrange, value)
    tvbrange = padded(offset + 75, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_73, tvbrange, value)
    tvbrange = padded(offset + 76, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_74, tvbrange, value)
    tvbrange = padded(offset + 77, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_75, tvbrange, value)
    tvbrange = padded(offset + 78, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_76, tvbrange, value)
    tvbrange = padded(offset + 79, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_77, tvbrange, value)
    tvbrange = padded(offset + 80, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_78, tvbrange, value)
    tvbrange = padded(offset + 81, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_79, tvbrange, value)
    tvbrange = padded(offset + 82, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_80, tvbrange, value)
    tvbrange = padded(offset + 83, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_81, tvbrange, value)
    tvbrange = padded(offset + 84, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_82, tvbrange, value)
    tvbrange = padded(offset + 85, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_83, tvbrange, value)
    tvbrange = padded(offset + 86, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_84, tvbrange, value)
    tvbrange = padded(offset + 87, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_85, tvbrange, value)
    tvbrange = padded(offset + 88, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_86, tvbrange, value)
    tvbrange = padded(offset + 89, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_87, tvbrange, value)
    tvbrange = padded(offset + 90, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_88, tvbrange, value)
    tvbrange = padded(offset + 91, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_89, tvbrange, value)
    tvbrange = padded(offset + 92, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_90, tvbrange, value)
    tvbrange = padded(offset + 93, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_91, tvbrange, value)
    tvbrange = padded(offset + 94, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_92, tvbrange, value)
    tvbrange = padded(offset + 95, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_93, tvbrange, value)
    tvbrange = padded(offset + 96, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_94, tvbrange, value)
    tvbrange = padded(offset + 97, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_95, tvbrange, value)
    tvbrange = padded(offset + 98, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_96, tvbrange, value)
    tvbrange = padded(offset + 99, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_97, tvbrange, value)
    tvbrange = padded(offset + 100, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_98, tvbrange, value)
    tvbrange = padded(offset + 101, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_99, tvbrange, value)
    tvbrange = padded(offset + 102, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_100, tvbrange, value)
    tvbrange = padded(offset + 103, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_101, tvbrange, value)
    tvbrange = padded(offset + 104, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_102, tvbrange, value)
    tvbrange = padded(offset + 105, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_103, tvbrange, value)
    tvbrange = padded(offset + 106, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_104, tvbrange, value)
    tvbrange = padded(offset + 107, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_105, tvbrange, value)
    tvbrange = padded(offset + 108, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_106, tvbrange, value)
    tvbrange = padded(offset + 109, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_107, tvbrange, value)
    tvbrange = padded(offset + 110, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_108, tvbrange, value)
    tvbrange = padded(offset + 111, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_109, tvbrange, value)
    tvbrange = padded(offset + 112, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_110, tvbrange, value)
    tvbrange = padded(offset + 113, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_111, tvbrange, value)
    tvbrange = padded(offset + 114, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_112, tvbrange, value)
    tvbrange = padded(offset + 115, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_113, tvbrange, value)
    tvbrange = padded(offset + 116, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_114, tvbrange, value)
    tvbrange = padded(offset + 117, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_115, tvbrange, value)
    tvbrange = padded(offset + 118, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_116, tvbrange, value)
    tvbrange = padded(offset + 119, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_117, tvbrange, value)
    tvbrange = padded(offset + 120, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_118, tvbrange, value)
    tvbrange = padded(offset + 121, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_119, tvbrange, value)
    tvbrange = padded(offset + 122, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_120, tvbrange, value)
    tvbrange = padded(offset + 123, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_121, tvbrange, value)
    tvbrange = padded(offset + 124, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_122, tvbrange, value)
    tvbrange = padded(offset + 125, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_123, tvbrange, value)
    tvbrange = padded(offset + 126, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_124, tvbrange, value)
    tvbrange = padded(offset + 127, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_125, tvbrange, value)
    tvbrange = padded(offset + 128, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_126, tvbrange, value)
    tvbrange = padded(offset + 129, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_127, tvbrange, value)
    tvbrange = padded(offset + 130, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_128, tvbrange, value)
    tvbrange = padded(offset + 131, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_129, tvbrange, value)
    tvbrange = padded(offset + 132, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_130, tvbrange, value)
    tvbrange = padded(offset + 133, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_131, tvbrange, value)
    tvbrange = padded(offset + 134, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_132, tvbrange, value)
    tvbrange = padded(offset + 135, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_133, tvbrange, value)
    tvbrange = padded(offset + 136, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_134, tvbrange, value)
    tvbrange = padded(offset + 137, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_135, tvbrange, value)
    tvbrange = padded(offset + 138, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_136, tvbrange, value)
    tvbrange = padded(offset + 139, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_137, tvbrange, value)
    tvbrange = padded(offset + 140, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_138, tvbrange, value)
    tvbrange = padded(offset + 141, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_139, tvbrange, value)
    tvbrange = padded(offset + 142, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_140, tvbrange, value)
    tvbrange = padded(offset + 143, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_141, tvbrange, value)
    tvbrange = padded(offset + 144, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_142, tvbrange, value)
    tvbrange = padded(offset + 145, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_143, tvbrange, value)
    tvbrange = padded(offset + 146, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_144, tvbrange, value)
    tvbrange = padded(offset + 147, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_145, tvbrange, value)
    tvbrange = padded(offset + 148, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_146, tvbrange, value)
    tvbrange = padded(offset + 149, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_147, tvbrange, value)
    tvbrange = padded(offset + 150, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_148, tvbrange, value)
    tvbrange = padded(offset + 151, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_149, tvbrange, value)
    tvbrange = padded(offset + 152, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_150, tvbrange, value)
    tvbrange = padded(offset + 153, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_151, tvbrange, value)
    tvbrange = padded(offset + 154, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_152, tvbrange, value)
    tvbrange = padded(offset + 155, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_153, tvbrange, value)
    tvbrange = padded(offset + 156, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_154, tvbrange, value)
    tvbrange = padded(offset + 157, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_155, tvbrange, value)
    tvbrange = padded(offset + 158, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_156, tvbrange, value)
    tvbrange = padded(offset + 159, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_157, tvbrange, value)
    tvbrange = padded(offset + 160, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_158, tvbrange, value)
    tvbrange = padded(offset + 161, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_159, tvbrange, value)
    tvbrange = padded(offset + 162, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_160, tvbrange, value)
    tvbrange = padded(offset + 163, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_161, tvbrange, value)
    tvbrange = padded(offset + 164, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_162, tvbrange, value)
    tvbrange = padded(offset + 165, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_163, tvbrange, value)
    tvbrange = padded(offset + 166, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_164, tvbrange, value)
    tvbrange = padded(offset + 167, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_165, tvbrange, value)
    tvbrange = padded(offset + 168, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_166, tvbrange, value)
    tvbrange = padded(offset + 169, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_167, tvbrange, value)
    tvbrange = padded(offset + 170, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_168, tvbrange, value)
    tvbrange = padded(offset + 171, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_169, tvbrange, value)
    tvbrange = padded(offset + 172, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_170, tvbrange, value)
    tvbrange = padded(offset + 173, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_171, tvbrange, value)
    tvbrange = padded(offset + 174, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_172, tvbrange, value)
    tvbrange = padded(offset + 175, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_173, tvbrange, value)
    tvbrange = padded(offset + 176, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_174, tvbrange, value)
    tvbrange = padded(offset + 177, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_175, tvbrange, value)
    tvbrange = padded(offset + 178, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_176, tvbrange, value)
    tvbrange = padded(offset + 179, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_177, tvbrange, value)
    tvbrange = padded(offset + 180, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_178, tvbrange, value)
    tvbrange = padded(offset + 181, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_179, tvbrange, value)
    tvbrange = padded(offset + 182, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_180, tvbrange, value)
    tvbrange = padded(offset + 183, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_181, tvbrange, value)
    tvbrange = padded(offset + 184, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_182, tvbrange, value)
    tvbrange = padded(offset + 185, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_183, tvbrange, value)
    tvbrange = padded(offset + 186, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_184, tvbrange, value)
    tvbrange = padded(offset + 187, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_185, tvbrange, value)
    tvbrange = padded(offset + 188, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_186, tvbrange, value)
    tvbrange = padded(offset + 189, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_187, tvbrange, value)
    tvbrange = padded(offset + 190, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_188, tvbrange, value)
    tvbrange = padded(offset + 191, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_189, tvbrange, value)
    tvbrange = padded(offset + 192, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_190, tvbrange, value)
    tvbrange = padded(offset + 193, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_191, tvbrange, value)
    tvbrange = padded(offset + 194, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_192, tvbrange, value)
    tvbrange = padded(offset + 195, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_193, tvbrange, value)
    tvbrange = padded(offset + 196, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_194, tvbrange, value)
    tvbrange = padded(offset + 197, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_195, tvbrange, value)
    tvbrange = padded(offset + 198, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_196, tvbrange, value)
    tvbrange = padded(offset + 199, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_197, tvbrange, value)
    tvbrange = padded(offset + 200, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_198, tvbrange, value)
    tvbrange = padded(offset + 201, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_199, tvbrange, value)
    tvbrange = padded(offset + 202, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_200, tvbrange, value)
    tvbrange = padded(offset + 203, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_201, tvbrange, value)
    tvbrange = padded(offset + 204, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_202, tvbrange, value)
    tvbrange = padded(offset + 205, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_203, tvbrange, value)
    tvbrange = padded(offset + 206, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_204, tvbrange, value)
    tvbrange = padded(offset + 207, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_205, tvbrange, value)
    tvbrange = padded(offset + 208, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_206, tvbrange, value)
    tvbrange = padded(offset + 209, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_207, tvbrange, value)
    tvbrange = padded(offset + 210, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_208, tvbrange, value)
    tvbrange = padded(offset + 211, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_209, tvbrange, value)
    tvbrange = padded(offset + 212, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_210, tvbrange, value)
    tvbrange = padded(offset + 213, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_211, tvbrange, value)
    tvbrange = padded(offset + 214, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_212, tvbrange, value)
    tvbrange = padded(offset + 215, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_213, tvbrange, value)
    tvbrange = padded(offset + 216, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_214, tvbrange, value)
    tvbrange = padded(offset + 217, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_215, tvbrange, value)
    tvbrange = padded(offset + 218, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_216, tvbrange, value)
    tvbrange = padded(offset + 219, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_217, tvbrange, value)
    tvbrange = padded(offset + 220, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_218, tvbrange, value)
    tvbrange = padded(offset + 221, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_219, tvbrange, value)
    tvbrange = padded(offset + 222, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_220, tvbrange, value)
    tvbrange = padded(offset + 223, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_221, tvbrange, value)
    tvbrange = padded(offset + 224, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_222, tvbrange, value)
    tvbrange = padded(offset + 225, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_223, tvbrange, value)
    tvbrange = padded(offset + 226, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_224, tvbrange, value)
    tvbrange = padded(offset + 227, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_225, tvbrange, value)
    tvbrange = padded(offset + 228, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_226, tvbrange, value)
    tvbrange = padded(offset + 229, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_227, tvbrange, value)
    tvbrange = padded(offset + 230, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_228, tvbrange, value)
    tvbrange = padded(offset + 231, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_229, tvbrange, value)
    tvbrange = padded(offset + 232, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_230, tvbrange, value)
    tvbrange = padded(offset + 233, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_231, tvbrange, value)
    tvbrange = padded(offset + 234, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_232, tvbrange, value)
    tvbrange = padded(offset + 235, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_233, tvbrange, value)
    tvbrange = padded(offset + 236, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_234, tvbrange, value)
    tvbrange = padded(offset + 237, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_235, tvbrange, value)
    tvbrange = padded(offset + 238, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_236, tvbrange, value)
    tvbrange = padded(offset + 239, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_237, tvbrange, value)
    tvbrange = padded(offset + 240, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_238, tvbrange, value)
    tvbrange = padded(offset + 241, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_239, tvbrange, value)
    tvbrange = padded(offset + 242, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_240, tvbrange, value)
    tvbrange = padded(offset + 243, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_241, tvbrange, value)
    tvbrange = padded(offset + 244, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_242, tvbrange, value)
    tvbrange = padded(offset + 245, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_243, tvbrange, value)
    tvbrange = padded(offset + 246, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_244, tvbrange, value)
    tvbrange = padded(offset + 247, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_245, tvbrange, value)
    tvbrange = padded(offset + 248, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_246, tvbrange, value)
    tvbrange = padded(offset + 249, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_247, tvbrange, value)
    tvbrange = padded(offset + 250, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_248, tvbrange, value)
    tvbrange = padded(offset + 251, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_249, tvbrange, value)
    tvbrange = padded(offset + 252, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_250, tvbrange, value)
    tvbrange = padded(offset + 253, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_251, tvbrange, value)
    tvbrange = padded(offset + 254, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ENCAPSULATED_DATA_data_252, tvbrange, value)
end
-- dissect payload of message type DISTANCE_SENSOR
function payload_fns.payload_132(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 39 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 39)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DISTANCE_SENSOR_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DISTANCE_SENSOR_min_distance, tvbrange, value)
    tvbrange = padded(offset + 6, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DISTANCE_SENSOR_max_distance, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DISTANCE_SENSOR_current_distance, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DISTANCE_SENSOR_type, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DISTANCE_SENSOR_id, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DISTANCE_SENSOR_orientation, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DISTANCE_SENSOR_covariance, tvbrange, value)
    tvbrange = padded(offset + 14, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DISTANCE_SENSOR_horizontal_fov, tvbrange, value)
    tvbrange = padded(offset + 18, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DISTANCE_SENSOR_vertical_fov, tvbrange, value)
    tvbrange = padded(offset + 22, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DISTANCE_SENSOR_quaternion_0, tvbrange, value)
    tvbrange = padded(offset + 26, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DISTANCE_SENSOR_quaternion_1, tvbrange, value)
    tvbrange = padded(offset + 30, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DISTANCE_SENSOR_quaternion_2, tvbrange, value)
    tvbrange = padded(offset + 34, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DISTANCE_SENSOR_quaternion_3, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DISTANCE_SENSOR_signal_quality, tvbrange, value)
end
-- dissect payload of message type TERRAIN_REQUEST
function payload_fns.payload_133(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 18 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 18)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.TERRAIN_REQUEST_lat, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.TERRAIN_REQUEST_lon, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TERRAIN_REQUEST_grid_spacing, tvbrange, value)
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.TERRAIN_REQUEST_mask, tvbrange, value)
end
-- dissect payload of message type TERRAIN_DATA
function payload_fns.payload_134(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 43 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 43)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.TERRAIN_DATA_lat, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.TERRAIN_DATA_lon, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TERRAIN_DATA_grid_spacing, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TERRAIN_DATA_gridbit, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.TERRAIN_DATA_data_0, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.TERRAIN_DATA_data_1, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.TERRAIN_DATA_data_2, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.TERRAIN_DATA_data_3, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.TERRAIN_DATA_data_4, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.TERRAIN_DATA_data_5, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.TERRAIN_DATA_data_6, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.TERRAIN_DATA_data_7, tvbrange, value)
    tvbrange = padded(offset + 26, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.TERRAIN_DATA_data_8, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.TERRAIN_DATA_data_9, tvbrange, value)
    tvbrange = padded(offset + 30, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.TERRAIN_DATA_data_10, tvbrange, value)
    tvbrange = padded(offset + 32, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.TERRAIN_DATA_data_11, tvbrange, value)
    tvbrange = padded(offset + 34, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.TERRAIN_DATA_data_12, tvbrange, value)
    tvbrange = padded(offset + 36, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.TERRAIN_DATA_data_13, tvbrange, value)
    tvbrange = padded(offset + 38, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.TERRAIN_DATA_data_14, tvbrange, value)
    tvbrange = padded(offset + 40, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.TERRAIN_DATA_data_15, tvbrange, value)
end
-- dissect payload of message type TERRAIN_CHECK
function payload_fns.payload_135(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 8 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 8)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.TERRAIN_CHECK_lat, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.TERRAIN_CHECK_lon, tvbrange, value)
end
-- dissect payload of message type TERRAIN_REPORT
function payload_fns.payload_136(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 22 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 22)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.TERRAIN_REPORT_lat, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.TERRAIN_REPORT_lon, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TERRAIN_REPORT_spacing, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.TERRAIN_REPORT_terrain_height, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.TERRAIN_REPORT_current_height, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TERRAIN_REPORT_pending, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TERRAIN_REPORT_loaded, tvbrange, value)
end
-- dissect payload of message type SCALED_PRESSURE2
function payload_fns.payload_137(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 16 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 16)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SCALED_PRESSURE2_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SCALED_PRESSURE2_press_abs, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SCALED_PRESSURE2_press_diff, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_PRESSURE2_temperature, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_PRESSURE2_temperature_press_diff, tvbrange, value)
end
-- dissect payload of message type ATT_POS_MOCAP
function payload_fns.payload_138(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 120 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 120)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.ATT_POS_MOCAP_time_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_q_0, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_q_1, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_q_2, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_q_3, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_x, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_y, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_z, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_covariance_0, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_covariance_1, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_covariance_2, tvbrange, value)
    tvbrange = padded(offset + 48, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_covariance_3, tvbrange, value)
    tvbrange = padded(offset + 52, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_covariance_4, tvbrange, value)
    tvbrange = padded(offset + 56, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_covariance_5, tvbrange, value)
    tvbrange = padded(offset + 60, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_covariance_6, tvbrange, value)
    tvbrange = padded(offset + 64, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_covariance_7, tvbrange, value)
    tvbrange = padded(offset + 68, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_covariance_8, tvbrange, value)
    tvbrange = padded(offset + 72, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_covariance_9, tvbrange, value)
    tvbrange = padded(offset + 76, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_covariance_10, tvbrange, value)
    tvbrange = padded(offset + 80, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_covariance_11, tvbrange, value)
    tvbrange = padded(offset + 84, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_covariance_12, tvbrange, value)
    tvbrange = padded(offset + 88, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_covariance_13, tvbrange, value)
    tvbrange = padded(offset + 92, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_covariance_14, tvbrange, value)
    tvbrange = padded(offset + 96, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_covariance_15, tvbrange, value)
    tvbrange = padded(offset + 100, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_covariance_16, tvbrange, value)
    tvbrange = padded(offset + 104, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_covariance_17, tvbrange, value)
    tvbrange = padded(offset + 108, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_covariance_18, tvbrange, value)
    tvbrange = padded(offset + 112, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_covariance_19, tvbrange, value)
    tvbrange = padded(offset + 116, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ATT_POS_MOCAP_covariance_20, tvbrange, value)
end
-- dissect payload of message type SET_ACTUATOR_CONTROL_TARGET
function payload_fns.payload_139(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 43 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 43)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.SET_ACTUATOR_CONTROL_TARGET_time_usec, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SET_ACTUATOR_CONTROL_TARGET_group_mlx, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SET_ACTUATOR_CONTROL_TARGET_target_system, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SET_ACTUATOR_CONTROL_TARGET_target_component, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_ACTUATOR_CONTROL_TARGET_controls_0, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_ACTUATOR_CONTROL_TARGET_controls_1, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_ACTUATOR_CONTROL_TARGET_controls_2, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_ACTUATOR_CONTROL_TARGET_controls_3, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_ACTUATOR_CONTROL_TARGET_controls_4, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_ACTUATOR_CONTROL_TARGET_controls_5, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_ACTUATOR_CONTROL_TARGET_controls_6, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_ACTUATOR_CONTROL_TARGET_controls_7, tvbrange, value)
end
-- dissect payload of message type ACTUATOR_CONTROL_TARGET
function payload_fns.payload_140(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 41 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 41)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.ACTUATOR_CONTROL_TARGET_time_usec, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ACTUATOR_CONTROL_TARGET_group_mlx, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_CONTROL_TARGET_controls_0, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_CONTROL_TARGET_controls_1, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_CONTROL_TARGET_controls_2, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_CONTROL_TARGET_controls_3, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_CONTROL_TARGET_controls_4, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_CONTROL_TARGET_controls_5, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_CONTROL_TARGET_controls_6, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_CONTROL_TARGET_controls_7, tvbrange, value)
end
-- dissect payload of message type ALTITUDE
function payload_fns.payload_141(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 32 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 32)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.ALTITUDE_time_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ALTITUDE_altitude_monotonic, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ALTITUDE_altitude_amsl, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ALTITUDE_altitude_local, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ALTITUDE_altitude_relative, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ALTITUDE_altitude_terrain, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ALTITUDE_bottom_clearance, tvbrange, value)
end
-- dissect payload of message type RESOURCE_REQUEST
function payload_fns.payload_142(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 243 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 243)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_request_id, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_type, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_0, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_1, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_2, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_3, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_4, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_5, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_6, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_7, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_8, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_9, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_10, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_11, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_12, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_13, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_14, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_15, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_16, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_17, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_18, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_19, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_20, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_21, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_22, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_23, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_24, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_25, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_26, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_27, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_28, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_29, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_30, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_31, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_32, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_33, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_34, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_35, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_36, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_37, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_38, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_39, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_40, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_41, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_42, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_43, tvbrange, value)
    tvbrange = padded(offset + 46, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_44, tvbrange, value)
    tvbrange = padded(offset + 47, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_45, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_46, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_47, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_48, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_49, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_50, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_51, tvbrange, value)
    tvbrange = padded(offset + 54, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_52, tvbrange, value)
    tvbrange = padded(offset + 55, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_53, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_54, tvbrange, value)
    tvbrange = padded(offset + 57, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_55, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_56, tvbrange, value)
    tvbrange = padded(offset + 59, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_57, tvbrange, value)
    tvbrange = padded(offset + 60, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_58, tvbrange, value)
    tvbrange = padded(offset + 61, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_59, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_60, tvbrange, value)
    tvbrange = padded(offset + 63, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_61, tvbrange, value)
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_62, tvbrange, value)
    tvbrange = padded(offset + 65, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_63, tvbrange, value)
    tvbrange = padded(offset + 66, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_64, tvbrange, value)
    tvbrange = padded(offset + 67, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_65, tvbrange, value)
    tvbrange = padded(offset + 68, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_66, tvbrange, value)
    tvbrange = padded(offset + 69, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_67, tvbrange, value)
    tvbrange = padded(offset + 70, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_68, tvbrange, value)
    tvbrange = padded(offset + 71, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_69, tvbrange, value)
    tvbrange = padded(offset + 72, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_70, tvbrange, value)
    tvbrange = padded(offset + 73, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_71, tvbrange, value)
    tvbrange = padded(offset + 74, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_72, tvbrange, value)
    tvbrange = padded(offset + 75, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_73, tvbrange, value)
    tvbrange = padded(offset + 76, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_74, tvbrange, value)
    tvbrange = padded(offset + 77, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_75, tvbrange, value)
    tvbrange = padded(offset + 78, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_76, tvbrange, value)
    tvbrange = padded(offset + 79, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_77, tvbrange, value)
    tvbrange = padded(offset + 80, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_78, tvbrange, value)
    tvbrange = padded(offset + 81, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_79, tvbrange, value)
    tvbrange = padded(offset + 82, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_80, tvbrange, value)
    tvbrange = padded(offset + 83, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_81, tvbrange, value)
    tvbrange = padded(offset + 84, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_82, tvbrange, value)
    tvbrange = padded(offset + 85, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_83, tvbrange, value)
    tvbrange = padded(offset + 86, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_84, tvbrange, value)
    tvbrange = padded(offset + 87, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_85, tvbrange, value)
    tvbrange = padded(offset + 88, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_86, tvbrange, value)
    tvbrange = padded(offset + 89, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_87, tvbrange, value)
    tvbrange = padded(offset + 90, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_88, tvbrange, value)
    tvbrange = padded(offset + 91, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_89, tvbrange, value)
    tvbrange = padded(offset + 92, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_90, tvbrange, value)
    tvbrange = padded(offset + 93, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_91, tvbrange, value)
    tvbrange = padded(offset + 94, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_92, tvbrange, value)
    tvbrange = padded(offset + 95, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_93, tvbrange, value)
    tvbrange = padded(offset + 96, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_94, tvbrange, value)
    tvbrange = padded(offset + 97, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_95, tvbrange, value)
    tvbrange = padded(offset + 98, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_96, tvbrange, value)
    tvbrange = padded(offset + 99, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_97, tvbrange, value)
    tvbrange = padded(offset + 100, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_98, tvbrange, value)
    tvbrange = padded(offset + 101, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_99, tvbrange, value)
    tvbrange = padded(offset + 102, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_100, tvbrange, value)
    tvbrange = padded(offset + 103, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_101, tvbrange, value)
    tvbrange = padded(offset + 104, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_102, tvbrange, value)
    tvbrange = padded(offset + 105, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_103, tvbrange, value)
    tvbrange = padded(offset + 106, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_104, tvbrange, value)
    tvbrange = padded(offset + 107, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_105, tvbrange, value)
    tvbrange = padded(offset + 108, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_106, tvbrange, value)
    tvbrange = padded(offset + 109, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_107, tvbrange, value)
    tvbrange = padded(offset + 110, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_108, tvbrange, value)
    tvbrange = padded(offset + 111, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_109, tvbrange, value)
    tvbrange = padded(offset + 112, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_110, tvbrange, value)
    tvbrange = padded(offset + 113, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_111, tvbrange, value)
    tvbrange = padded(offset + 114, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_112, tvbrange, value)
    tvbrange = padded(offset + 115, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_113, tvbrange, value)
    tvbrange = padded(offset + 116, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_114, tvbrange, value)
    tvbrange = padded(offset + 117, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_115, tvbrange, value)
    tvbrange = padded(offset + 118, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_116, tvbrange, value)
    tvbrange = padded(offset + 119, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_117, tvbrange, value)
    tvbrange = padded(offset + 120, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_118, tvbrange, value)
    tvbrange = padded(offset + 121, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_uri_119, tvbrange, value)
    tvbrange = padded(offset + 122, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_transfer_type, tvbrange, value)
    tvbrange = padded(offset + 123, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_0, tvbrange, value)
    tvbrange = padded(offset + 124, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_1, tvbrange, value)
    tvbrange = padded(offset + 125, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_2, tvbrange, value)
    tvbrange = padded(offset + 126, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_3, tvbrange, value)
    tvbrange = padded(offset + 127, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_4, tvbrange, value)
    tvbrange = padded(offset + 128, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_5, tvbrange, value)
    tvbrange = padded(offset + 129, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_6, tvbrange, value)
    tvbrange = padded(offset + 130, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_7, tvbrange, value)
    tvbrange = padded(offset + 131, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_8, tvbrange, value)
    tvbrange = padded(offset + 132, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_9, tvbrange, value)
    tvbrange = padded(offset + 133, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_10, tvbrange, value)
    tvbrange = padded(offset + 134, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_11, tvbrange, value)
    tvbrange = padded(offset + 135, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_12, tvbrange, value)
    tvbrange = padded(offset + 136, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_13, tvbrange, value)
    tvbrange = padded(offset + 137, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_14, tvbrange, value)
    tvbrange = padded(offset + 138, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_15, tvbrange, value)
    tvbrange = padded(offset + 139, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_16, tvbrange, value)
    tvbrange = padded(offset + 140, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_17, tvbrange, value)
    tvbrange = padded(offset + 141, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_18, tvbrange, value)
    tvbrange = padded(offset + 142, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_19, tvbrange, value)
    tvbrange = padded(offset + 143, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_20, tvbrange, value)
    tvbrange = padded(offset + 144, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_21, tvbrange, value)
    tvbrange = padded(offset + 145, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_22, tvbrange, value)
    tvbrange = padded(offset + 146, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_23, tvbrange, value)
    tvbrange = padded(offset + 147, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_24, tvbrange, value)
    tvbrange = padded(offset + 148, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_25, tvbrange, value)
    tvbrange = padded(offset + 149, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_26, tvbrange, value)
    tvbrange = padded(offset + 150, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_27, tvbrange, value)
    tvbrange = padded(offset + 151, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_28, tvbrange, value)
    tvbrange = padded(offset + 152, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_29, tvbrange, value)
    tvbrange = padded(offset + 153, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_30, tvbrange, value)
    tvbrange = padded(offset + 154, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_31, tvbrange, value)
    tvbrange = padded(offset + 155, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_32, tvbrange, value)
    tvbrange = padded(offset + 156, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_33, tvbrange, value)
    tvbrange = padded(offset + 157, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_34, tvbrange, value)
    tvbrange = padded(offset + 158, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_35, tvbrange, value)
    tvbrange = padded(offset + 159, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_36, tvbrange, value)
    tvbrange = padded(offset + 160, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_37, tvbrange, value)
    tvbrange = padded(offset + 161, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_38, tvbrange, value)
    tvbrange = padded(offset + 162, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_39, tvbrange, value)
    tvbrange = padded(offset + 163, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_40, tvbrange, value)
    tvbrange = padded(offset + 164, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_41, tvbrange, value)
    tvbrange = padded(offset + 165, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_42, tvbrange, value)
    tvbrange = padded(offset + 166, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_43, tvbrange, value)
    tvbrange = padded(offset + 167, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_44, tvbrange, value)
    tvbrange = padded(offset + 168, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_45, tvbrange, value)
    tvbrange = padded(offset + 169, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_46, tvbrange, value)
    tvbrange = padded(offset + 170, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_47, tvbrange, value)
    tvbrange = padded(offset + 171, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_48, tvbrange, value)
    tvbrange = padded(offset + 172, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_49, tvbrange, value)
    tvbrange = padded(offset + 173, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_50, tvbrange, value)
    tvbrange = padded(offset + 174, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_51, tvbrange, value)
    tvbrange = padded(offset + 175, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_52, tvbrange, value)
    tvbrange = padded(offset + 176, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_53, tvbrange, value)
    tvbrange = padded(offset + 177, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_54, tvbrange, value)
    tvbrange = padded(offset + 178, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_55, tvbrange, value)
    tvbrange = padded(offset + 179, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_56, tvbrange, value)
    tvbrange = padded(offset + 180, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_57, tvbrange, value)
    tvbrange = padded(offset + 181, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_58, tvbrange, value)
    tvbrange = padded(offset + 182, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_59, tvbrange, value)
    tvbrange = padded(offset + 183, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_60, tvbrange, value)
    tvbrange = padded(offset + 184, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_61, tvbrange, value)
    tvbrange = padded(offset + 185, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_62, tvbrange, value)
    tvbrange = padded(offset + 186, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_63, tvbrange, value)
    tvbrange = padded(offset + 187, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_64, tvbrange, value)
    tvbrange = padded(offset + 188, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_65, tvbrange, value)
    tvbrange = padded(offset + 189, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_66, tvbrange, value)
    tvbrange = padded(offset + 190, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_67, tvbrange, value)
    tvbrange = padded(offset + 191, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_68, tvbrange, value)
    tvbrange = padded(offset + 192, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_69, tvbrange, value)
    tvbrange = padded(offset + 193, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_70, tvbrange, value)
    tvbrange = padded(offset + 194, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_71, tvbrange, value)
    tvbrange = padded(offset + 195, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_72, tvbrange, value)
    tvbrange = padded(offset + 196, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_73, tvbrange, value)
    tvbrange = padded(offset + 197, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_74, tvbrange, value)
    tvbrange = padded(offset + 198, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_75, tvbrange, value)
    tvbrange = padded(offset + 199, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_76, tvbrange, value)
    tvbrange = padded(offset + 200, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_77, tvbrange, value)
    tvbrange = padded(offset + 201, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_78, tvbrange, value)
    tvbrange = padded(offset + 202, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_79, tvbrange, value)
    tvbrange = padded(offset + 203, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_80, tvbrange, value)
    tvbrange = padded(offset + 204, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_81, tvbrange, value)
    tvbrange = padded(offset + 205, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_82, tvbrange, value)
    tvbrange = padded(offset + 206, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_83, tvbrange, value)
    tvbrange = padded(offset + 207, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_84, tvbrange, value)
    tvbrange = padded(offset + 208, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_85, tvbrange, value)
    tvbrange = padded(offset + 209, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_86, tvbrange, value)
    tvbrange = padded(offset + 210, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_87, tvbrange, value)
    tvbrange = padded(offset + 211, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_88, tvbrange, value)
    tvbrange = padded(offset + 212, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_89, tvbrange, value)
    tvbrange = padded(offset + 213, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_90, tvbrange, value)
    tvbrange = padded(offset + 214, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_91, tvbrange, value)
    tvbrange = padded(offset + 215, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_92, tvbrange, value)
    tvbrange = padded(offset + 216, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_93, tvbrange, value)
    tvbrange = padded(offset + 217, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_94, tvbrange, value)
    tvbrange = padded(offset + 218, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_95, tvbrange, value)
    tvbrange = padded(offset + 219, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_96, tvbrange, value)
    tvbrange = padded(offset + 220, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_97, tvbrange, value)
    tvbrange = padded(offset + 221, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_98, tvbrange, value)
    tvbrange = padded(offset + 222, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_99, tvbrange, value)
    tvbrange = padded(offset + 223, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_100, tvbrange, value)
    tvbrange = padded(offset + 224, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_101, tvbrange, value)
    tvbrange = padded(offset + 225, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_102, tvbrange, value)
    tvbrange = padded(offset + 226, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_103, tvbrange, value)
    tvbrange = padded(offset + 227, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_104, tvbrange, value)
    tvbrange = padded(offset + 228, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_105, tvbrange, value)
    tvbrange = padded(offset + 229, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_106, tvbrange, value)
    tvbrange = padded(offset + 230, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_107, tvbrange, value)
    tvbrange = padded(offset + 231, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_108, tvbrange, value)
    tvbrange = padded(offset + 232, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_109, tvbrange, value)
    tvbrange = padded(offset + 233, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_110, tvbrange, value)
    tvbrange = padded(offset + 234, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_111, tvbrange, value)
    tvbrange = padded(offset + 235, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_112, tvbrange, value)
    tvbrange = padded(offset + 236, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_113, tvbrange, value)
    tvbrange = padded(offset + 237, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_114, tvbrange, value)
    tvbrange = padded(offset + 238, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_115, tvbrange, value)
    tvbrange = padded(offset + 239, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_116, tvbrange, value)
    tvbrange = padded(offset + 240, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_117, tvbrange, value)
    tvbrange = padded(offset + 241, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_118, tvbrange, value)
    tvbrange = padded(offset + 242, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RESOURCE_REQUEST_storage_119, tvbrange, value)
end
-- dissect payload of message type SCALED_PRESSURE3
function payload_fns.payload_143(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 16 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 16)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SCALED_PRESSURE3_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SCALED_PRESSURE3_press_abs, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SCALED_PRESSURE3_press_diff, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_PRESSURE3_temperature, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SCALED_PRESSURE3_temperature_press_diff, tvbrange, value)
end
-- dissect payload of message type FOLLOW_TARGET
function payload_fns.payload_144(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 93 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 93)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.FOLLOW_TARGET_timestamp, tvbrange, value)
    tvbrange = padded(offset + 92, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FOLLOW_TARGET_est_capabilities, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.FOLLOW_TARGET_lat, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.FOLLOW_TARGET_lon, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.FOLLOW_TARGET_alt, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.FOLLOW_TARGET_vel_0, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.FOLLOW_TARGET_vel_1, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.FOLLOW_TARGET_vel_2, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.FOLLOW_TARGET_acc_0, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.FOLLOW_TARGET_acc_1, tvbrange, value)
    tvbrange = padded(offset + 48, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.FOLLOW_TARGET_acc_2, tvbrange, value)
    tvbrange = padded(offset + 52, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.FOLLOW_TARGET_attitude_q_0, tvbrange, value)
    tvbrange = padded(offset + 56, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.FOLLOW_TARGET_attitude_q_1, tvbrange, value)
    tvbrange = padded(offset + 60, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.FOLLOW_TARGET_attitude_q_2, tvbrange, value)
    tvbrange = padded(offset + 64, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.FOLLOW_TARGET_attitude_q_3, tvbrange, value)
    tvbrange = padded(offset + 68, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.FOLLOW_TARGET_rates_0, tvbrange, value)
    tvbrange = padded(offset + 72, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.FOLLOW_TARGET_rates_1, tvbrange, value)
    tvbrange = padded(offset + 76, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.FOLLOW_TARGET_rates_2, tvbrange, value)
    tvbrange = padded(offset + 80, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.FOLLOW_TARGET_position_cov_0, tvbrange, value)
    tvbrange = padded(offset + 84, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.FOLLOW_TARGET_position_cov_1, tvbrange, value)
    tvbrange = padded(offset + 88, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.FOLLOW_TARGET_position_cov_2, tvbrange, value)
    tvbrange = padded(offset + 8, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.FOLLOW_TARGET_custom_state, tvbrange, value)
end
-- dissect payload of message type CONTROL_SYSTEM_STATE
function payload_fns.payload_146(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 100 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 100)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.CONTROL_SYSTEM_STATE_time_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CONTROL_SYSTEM_STATE_x_acc, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CONTROL_SYSTEM_STATE_y_acc, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CONTROL_SYSTEM_STATE_z_acc, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CONTROL_SYSTEM_STATE_x_vel, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CONTROL_SYSTEM_STATE_y_vel, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CONTROL_SYSTEM_STATE_z_vel, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CONTROL_SYSTEM_STATE_x_pos, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CONTROL_SYSTEM_STATE_y_pos, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CONTROL_SYSTEM_STATE_z_pos, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CONTROL_SYSTEM_STATE_airspeed, tvbrange, value)
    tvbrange = padded(offset + 48, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CONTROL_SYSTEM_STATE_vel_variance_0, tvbrange, value)
    tvbrange = padded(offset + 52, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CONTROL_SYSTEM_STATE_vel_variance_1, tvbrange, value)
    tvbrange = padded(offset + 56, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CONTROL_SYSTEM_STATE_vel_variance_2, tvbrange, value)
    tvbrange = padded(offset + 60, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CONTROL_SYSTEM_STATE_pos_variance_0, tvbrange, value)
    tvbrange = padded(offset + 64, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CONTROL_SYSTEM_STATE_pos_variance_1, tvbrange, value)
    tvbrange = padded(offset + 68, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CONTROL_SYSTEM_STATE_pos_variance_2, tvbrange, value)
    tvbrange = padded(offset + 72, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CONTROL_SYSTEM_STATE_q_0, tvbrange, value)
    tvbrange = padded(offset + 76, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CONTROL_SYSTEM_STATE_q_1, tvbrange, value)
    tvbrange = padded(offset + 80, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CONTROL_SYSTEM_STATE_q_2, tvbrange, value)
    tvbrange = padded(offset + 84, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CONTROL_SYSTEM_STATE_q_3, tvbrange, value)
    tvbrange = padded(offset + 88, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CONTROL_SYSTEM_STATE_roll_rate, tvbrange, value)
    tvbrange = padded(offset + 92, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CONTROL_SYSTEM_STATE_pitch_rate, tvbrange, value)
    tvbrange = padded(offset + 96, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CONTROL_SYSTEM_STATE_yaw_rate, tvbrange, value)
end
-- dissect payload of message type BATTERY_STATUS
function payload_fns.payload_147(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 54 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 54)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.BATTERY_STATUS_id, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.BATTERY_STATUS_battery_function, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.BATTERY_STATUS_type, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.BATTERY_STATUS_temperature, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.BATTERY_STATUS_voltages_0, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.BATTERY_STATUS_voltages_1, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.BATTERY_STATUS_voltages_2, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.BATTERY_STATUS_voltages_3, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.BATTERY_STATUS_voltages_4, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.BATTERY_STATUS_voltages_5, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.BATTERY_STATUS_voltages_6, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.BATTERY_STATUS_voltages_7, tvbrange, value)
    tvbrange = padded(offset + 26, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.BATTERY_STATUS_voltages_8, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.BATTERY_STATUS_voltages_9, tvbrange, value)
    tvbrange = padded(offset + 30, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.BATTERY_STATUS_current_battery, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.BATTERY_STATUS_current_consumed, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.BATTERY_STATUS_energy_consumed, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.BATTERY_STATUS_battery_remaining, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.BATTERY_STATUS_time_remaining, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.BATTERY_STATUS_charge_state, tvbrange, value)
    tvbrange = padded(offset + 41, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.BATTERY_STATUS_voltages_ext_0, tvbrange, value)
    tvbrange = padded(offset + 43, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.BATTERY_STATUS_voltages_ext_1, tvbrange, value)
    tvbrange = padded(offset + 45, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.BATTERY_STATUS_voltages_ext_2, tvbrange, value)
    tvbrange = padded(offset + 47, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.BATTERY_STATUS_voltages_ext_3, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.BATTERY_STATUS_mode, tvbrange, value)
    tvbrange = padded(offset + 50, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.BATTERY_STATUS_fault_bitmask, tvbrange, value)
    dissect_flags_MAV_BATTERY_FAULT(subtree, "BATTERY_STATUS_fault_bitmask", tvbrange, value)
end
-- dissect payload of message type AUTOPILOT_VERSION
function payload_fns.payload_148(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 78 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 78)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_capabilities, tvbrange, value)
    dissect_flags_MAV_PROTOCOL_CAPABILITY(subtree, "AUTOPILOT_VERSION_capabilities", tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_flight_sw_version, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_middleware_sw_version, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_os_sw_version, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_board_version, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_flight_custom_version_0, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_flight_custom_version_1, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_flight_custom_version_2, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_flight_custom_version_3, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_flight_custom_version_4, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_flight_custom_version_5, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_flight_custom_version_6, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_flight_custom_version_7, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_middleware_custom_version_0, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_middleware_custom_version_1, tvbrange, value)
    tvbrange = padded(offset + 46, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_middleware_custom_version_2, tvbrange, value)
    tvbrange = padded(offset + 47, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_middleware_custom_version_3, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_middleware_custom_version_4, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_middleware_custom_version_5, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_middleware_custom_version_6, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_middleware_custom_version_7, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_os_custom_version_0, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_os_custom_version_1, tvbrange, value)
    tvbrange = padded(offset + 54, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_os_custom_version_2, tvbrange, value)
    tvbrange = padded(offset + 55, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_os_custom_version_3, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_os_custom_version_4, tvbrange, value)
    tvbrange = padded(offset + 57, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_os_custom_version_5, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_os_custom_version_6, tvbrange, value)
    tvbrange = padded(offset + 59, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_os_custom_version_7, tvbrange, value)
    tvbrange = padded(offset + 32, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_vendor_id, tvbrange, value)
    tvbrange = padded(offset + 34, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_product_id, tvbrange, value)
    tvbrange = padded(offset + 8, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_uid, tvbrange, value)
    tvbrange = padded(offset + 60, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_uid2_0, tvbrange, value)
    tvbrange = padded(offset + 61, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_uid2_1, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_uid2_2, tvbrange, value)
    tvbrange = padded(offset + 63, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_uid2_3, tvbrange, value)
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_uid2_4, tvbrange, value)
    tvbrange = padded(offset + 65, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_uid2_5, tvbrange, value)
    tvbrange = padded(offset + 66, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_uid2_6, tvbrange, value)
    tvbrange = padded(offset + 67, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_uid2_7, tvbrange, value)
    tvbrange = padded(offset + 68, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_uid2_8, tvbrange, value)
    tvbrange = padded(offset + 69, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_uid2_9, tvbrange, value)
    tvbrange = padded(offset + 70, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_uid2_10, tvbrange, value)
    tvbrange = padded(offset + 71, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_uid2_11, tvbrange, value)
    tvbrange = padded(offset + 72, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_uid2_12, tvbrange, value)
    tvbrange = padded(offset + 73, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_uid2_13, tvbrange, value)
    tvbrange = padded(offset + 74, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_uid2_14, tvbrange, value)
    tvbrange = padded(offset + 75, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_uid2_15, tvbrange, value)
    tvbrange = padded(offset + 76, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_uid2_16, tvbrange, value)
    tvbrange = padded(offset + 77, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_VERSION_uid2_17, tvbrange, value)
end
-- dissect payload of message type LANDING_TARGET
function payload_fns.payload_149(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 60 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 60)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.LANDING_TARGET_time_usec, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LANDING_TARGET_target_num, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LANDING_TARGET_frame, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LANDING_TARGET_angle_x, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LANDING_TARGET_angle_y, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LANDING_TARGET_distance, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LANDING_TARGET_size_x, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LANDING_TARGET_size_y, tvbrange, value)
    tvbrange = padded(offset + 30, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LANDING_TARGET_x, tvbrange, value)
    tvbrange = padded(offset + 34, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LANDING_TARGET_y, tvbrange, value)
    tvbrange = padded(offset + 38, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LANDING_TARGET_z, tvbrange, value)
    tvbrange = padded(offset + 42, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LANDING_TARGET_q_0, tvbrange, value)
    tvbrange = padded(offset + 46, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LANDING_TARGET_q_1, tvbrange, value)
    tvbrange = padded(offset + 50, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LANDING_TARGET_q_2, tvbrange, value)
    tvbrange = padded(offset + 54, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LANDING_TARGET_q_3, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LANDING_TARGET_type, tvbrange, value)
    tvbrange = padded(offset + 59, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LANDING_TARGET_position_valid, tvbrange, value)
end
-- dissect payload of message type FENCE_STATUS
function payload_fns.payload_162(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 9 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 9)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FENCE_STATUS_breach_status, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FENCE_STATUS_breach_count, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FENCE_STATUS_breach_type, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FENCE_STATUS_breach_time, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FENCE_STATUS_breach_mitigation, tvbrange, value)
end
-- dissect payload of message type MAG_CAL_REPORT
function payload_fns.payload_192(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 54 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 54)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MAG_CAL_REPORT_compass_id, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MAG_CAL_REPORT_cal_mask, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MAG_CAL_REPORT_cal_status, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MAG_CAL_REPORT_autosaved, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MAG_CAL_REPORT_fitness, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MAG_CAL_REPORT_ofs_x, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MAG_CAL_REPORT_ofs_y, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MAG_CAL_REPORT_ofs_z, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MAG_CAL_REPORT_diag_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MAG_CAL_REPORT_diag_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MAG_CAL_REPORT_diag_z, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MAG_CAL_REPORT_offdiag_x, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MAG_CAL_REPORT_offdiag_y, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MAG_CAL_REPORT_offdiag_z, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MAG_CAL_REPORT_orientation_confidence, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MAG_CAL_REPORT_old_orientation, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MAG_CAL_REPORT_new_orientation, tvbrange, value)
    tvbrange = padded(offset + 50, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MAG_CAL_REPORT_scale_factor, tvbrange, value)
end
-- dissect payload of message type EFI_STATUS
function payload_fns.payload_225(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 73 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 73)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.EFI_STATUS_health, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.EFI_STATUS_ecu_index, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.EFI_STATUS_rpm, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.EFI_STATUS_fuel_consumed, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.EFI_STATUS_fuel_flow, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.EFI_STATUS_engine_load, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.EFI_STATUS_throttle_position, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.EFI_STATUS_spark_dwell_time, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.EFI_STATUS_barometric_pressure, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.EFI_STATUS_intake_manifold_pressure, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.EFI_STATUS_intake_manifold_temperature, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.EFI_STATUS_cylinder_head_temperature, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.EFI_STATUS_ignition_timing, tvbrange, value)
    tvbrange = padded(offset + 48, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.EFI_STATUS_injection_time, tvbrange, value)
    tvbrange = padded(offset + 52, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.EFI_STATUS_exhaust_gas_temperature, tvbrange, value)
    tvbrange = padded(offset + 56, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.EFI_STATUS_throttle_out, tvbrange, value)
    tvbrange = padded(offset + 60, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.EFI_STATUS_pt_compensation, tvbrange, value)
    tvbrange = padded(offset + 65, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.EFI_STATUS_ignition_voltage, tvbrange, value)
    tvbrange = padded(offset + 69, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.EFI_STATUS_fuel_pressure, tvbrange, value)
end
-- dissect payload of message type ESTIMATOR_STATUS
function payload_fns.payload_230(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 42 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 42)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.ESTIMATOR_STATUS_time_usec, tvbrange, value)
    tvbrange = padded(offset + 40, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ESTIMATOR_STATUS_flags, tvbrange, value)
    dissect_flags_ESTIMATOR_STATUS_FLAGS(subtree, "ESTIMATOR_STATUS_flags", tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ESTIMATOR_STATUS_vel_ratio, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ESTIMATOR_STATUS_pos_horiz_ratio, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ESTIMATOR_STATUS_pos_vert_ratio, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ESTIMATOR_STATUS_mag_ratio, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ESTIMATOR_STATUS_hagl_ratio, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ESTIMATOR_STATUS_tas_ratio, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ESTIMATOR_STATUS_pos_horiz_accuracy, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ESTIMATOR_STATUS_pos_vert_accuracy, tvbrange, value)
end
-- dissect payload of message type WIND_COV
function payload_fns.payload_231(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 40 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 40)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.WIND_COV_time_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.WIND_COV_wind_x, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.WIND_COV_wind_y, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.WIND_COV_wind_z, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.WIND_COV_var_horiz, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.WIND_COV_var_vert, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.WIND_COV_wind_alt, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.WIND_COV_horiz_accuracy, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.WIND_COV_vert_accuracy, tvbrange, value)
end
-- dissect payload of message type GPS_INPUT
function payload_fns.payload_232(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 65 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 65)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.GPS_INPUT_time_usec, tvbrange, value)
    tvbrange = padded(offset + 60, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INPUT_gps_id, tvbrange, value)
    tvbrange = padded(offset + 56, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INPUT_ignore_flags, tvbrange, value)
    dissect_flags_GPS_INPUT_IGNORE_FLAGS(subtree, "GPS_INPUT_ignore_flags", tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INPUT_time_week_ms, tvbrange, value)
    tvbrange = padded(offset + 58, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INPUT_time_week, tvbrange, value)
    tvbrange = padded(offset + 61, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INPUT_fix_type, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GPS_INPUT_lat, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GPS_INPUT_lon, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GPS_INPUT_alt, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GPS_INPUT_hdop, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GPS_INPUT_vdop, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GPS_INPUT_vn, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GPS_INPUT_ve, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GPS_INPUT_vd, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GPS_INPUT_speed_accuracy, tvbrange, value)
    tvbrange = padded(offset + 48, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GPS_INPUT_horiz_accuracy, tvbrange, value)
    tvbrange = padded(offset + 52, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GPS_INPUT_vert_accuracy, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INPUT_satellites_visible, tvbrange, value)
    tvbrange = padded(offset + 63, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_INPUT_yaw, tvbrange, value)
end
-- dissect payload of message type GPS_RTCM_DATA
function payload_fns.payload_233(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 182 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 182)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_flags, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_len, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_0, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_1, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_2, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_3, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_4, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_5, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_6, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_7, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_8, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_9, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_10, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_11, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_12, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_13, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_14, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_15, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_16, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_17, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_18, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_19, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_20, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_21, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_22, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_23, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_24, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_25, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_26, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_27, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_28, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_29, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_30, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_31, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_32, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_33, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_34, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_35, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_36, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_37, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_38, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_39, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_40, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_41, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_42, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_43, tvbrange, value)
    tvbrange = padded(offset + 46, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_44, tvbrange, value)
    tvbrange = padded(offset + 47, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_45, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_46, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_47, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_48, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_49, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_50, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_51, tvbrange, value)
    tvbrange = padded(offset + 54, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_52, tvbrange, value)
    tvbrange = padded(offset + 55, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_53, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_54, tvbrange, value)
    tvbrange = padded(offset + 57, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_55, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_56, tvbrange, value)
    tvbrange = padded(offset + 59, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_57, tvbrange, value)
    tvbrange = padded(offset + 60, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_58, tvbrange, value)
    tvbrange = padded(offset + 61, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_59, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_60, tvbrange, value)
    tvbrange = padded(offset + 63, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_61, tvbrange, value)
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_62, tvbrange, value)
    tvbrange = padded(offset + 65, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_63, tvbrange, value)
    tvbrange = padded(offset + 66, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_64, tvbrange, value)
    tvbrange = padded(offset + 67, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_65, tvbrange, value)
    tvbrange = padded(offset + 68, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_66, tvbrange, value)
    tvbrange = padded(offset + 69, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_67, tvbrange, value)
    tvbrange = padded(offset + 70, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_68, tvbrange, value)
    tvbrange = padded(offset + 71, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_69, tvbrange, value)
    tvbrange = padded(offset + 72, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_70, tvbrange, value)
    tvbrange = padded(offset + 73, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_71, tvbrange, value)
    tvbrange = padded(offset + 74, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_72, tvbrange, value)
    tvbrange = padded(offset + 75, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_73, tvbrange, value)
    tvbrange = padded(offset + 76, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_74, tvbrange, value)
    tvbrange = padded(offset + 77, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_75, tvbrange, value)
    tvbrange = padded(offset + 78, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_76, tvbrange, value)
    tvbrange = padded(offset + 79, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_77, tvbrange, value)
    tvbrange = padded(offset + 80, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_78, tvbrange, value)
    tvbrange = padded(offset + 81, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_79, tvbrange, value)
    tvbrange = padded(offset + 82, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_80, tvbrange, value)
    tvbrange = padded(offset + 83, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_81, tvbrange, value)
    tvbrange = padded(offset + 84, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_82, tvbrange, value)
    tvbrange = padded(offset + 85, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_83, tvbrange, value)
    tvbrange = padded(offset + 86, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_84, tvbrange, value)
    tvbrange = padded(offset + 87, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_85, tvbrange, value)
    tvbrange = padded(offset + 88, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_86, tvbrange, value)
    tvbrange = padded(offset + 89, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_87, tvbrange, value)
    tvbrange = padded(offset + 90, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_88, tvbrange, value)
    tvbrange = padded(offset + 91, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_89, tvbrange, value)
    tvbrange = padded(offset + 92, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_90, tvbrange, value)
    tvbrange = padded(offset + 93, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_91, tvbrange, value)
    tvbrange = padded(offset + 94, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_92, tvbrange, value)
    tvbrange = padded(offset + 95, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_93, tvbrange, value)
    tvbrange = padded(offset + 96, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_94, tvbrange, value)
    tvbrange = padded(offset + 97, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_95, tvbrange, value)
    tvbrange = padded(offset + 98, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_96, tvbrange, value)
    tvbrange = padded(offset + 99, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_97, tvbrange, value)
    tvbrange = padded(offset + 100, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_98, tvbrange, value)
    tvbrange = padded(offset + 101, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_99, tvbrange, value)
    tvbrange = padded(offset + 102, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_100, tvbrange, value)
    tvbrange = padded(offset + 103, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_101, tvbrange, value)
    tvbrange = padded(offset + 104, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_102, tvbrange, value)
    tvbrange = padded(offset + 105, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_103, tvbrange, value)
    tvbrange = padded(offset + 106, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_104, tvbrange, value)
    tvbrange = padded(offset + 107, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_105, tvbrange, value)
    tvbrange = padded(offset + 108, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_106, tvbrange, value)
    tvbrange = padded(offset + 109, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_107, tvbrange, value)
    tvbrange = padded(offset + 110, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_108, tvbrange, value)
    tvbrange = padded(offset + 111, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_109, tvbrange, value)
    tvbrange = padded(offset + 112, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_110, tvbrange, value)
    tvbrange = padded(offset + 113, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_111, tvbrange, value)
    tvbrange = padded(offset + 114, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_112, tvbrange, value)
    tvbrange = padded(offset + 115, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_113, tvbrange, value)
    tvbrange = padded(offset + 116, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_114, tvbrange, value)
    tvbrange = padded(offset + 117, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_115, tvbrange, value)
    tvbrange = padded(offset + 118, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_116, tvbrange, value)
    tvbrange = padded(offset + 119, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_117, tvbrange, value)
    tvbrange = padded(offset + 120, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_118, tvbrange, value)
    tvbrange = padded(offset + 121, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_119, tvbrange, value)
    tvbrange = padded(offset + 122, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_120, tvbrange, value)
    tvbrange = padded(offset + 123, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_121, tvbrange, value)
    tvbrange = padded(offset + 124, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_122, tvbrange, value)
    tvbrange = padded(offset + 125, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_123, tvbrange, value)
    tvbrange = padded(offset + 126, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_124, tvbrange, value)
    tvbrange = padded(offset + 127, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_125, tvbrange, value)
    tvbrange = padded(offset + 128, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_126, tvbrange, value)
    tvbrange = padded(offset + 129, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_127, tvbrange, value)
    tvbrange = padded(offset + 130, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_128, tvbrange, value)
    tvbrange = padded(offset + 131, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_129, tvbrange, value)
    tvbrange = padded(offset + 132, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_130, tvbrange, value)
    tvbrange = padded(offset + 133, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_131, tvbrange, value)
    tvbrange = padded(offset + 134, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_132, tvbrange, value)
    tvbrange = padded(offset + 135, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_133, tvbrange, value)
    tvbrange = padded(offset + 136, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_134, tvbrange, value)
    tvbrange = padded(offset + 137, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_135, tvbrange, value)
    tvbrange = padded(offset + 138, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_136, tvbrange, value)
    tvbrange = padded(offset + 139, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_137, tvbrange, value)
    tvbrange = padded(offset + 140, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_138, tvbrange, value)
    tvbrange = padded(offset + 141, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_139, tvbrange, value)
    tvbrange = padded(offset + 142, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_140, tvbrange, value)
    tvbrange = padded(offset + 143, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_141, tvbrange, value)
    tvbrange = padded(offset + 144, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_142, tvbrange, value)
    tvbrange = padded(offset + 145, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_143, tvbrange, value)
    tvbrange = padded(offset + 146, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_144, tvbrange, value)
    tvbrange = padded(offset + 147, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_145, tvbrange, value)
    tvbrange = padded(offset + 148, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_146, tvbrange, value)
    tvbrange = padded(offset + 149, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_147, tvbrange, value)
    tvbrange = padded(offset + 150, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_148, tvbrange, value)
    tvbrange = padded(offset + 151, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_149, tvbrange, value)
    tvbrange = padded(offset + 152, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_150, tvbrange, value)
    tvbrange = padded(offset + 153, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_151, tvbrange, value)
    tvbrange = padded(offset + 154, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_152, tvbrange, value)
    tvbrange = padded(offset + 155, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_153, tvbrange, value)
    tvbrange = padded(offset + 156, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_154, tvbrange, value)
    tvbrange = padded(offset + 157, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_155, tvbrange, value)
    tvbrange = padded(offset + 158, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_156, tvbrange, value)
    tvbrange = padded(offset + 159, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_157, tvbrange, value)
    tvbrange = padded(offset + 160, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_158, tvbrange, value)
    tvbrange = padded(offset + 161, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_159, tvbrange, value)
    tvbrange = padded(offset + 162, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_160, tvbrange, value)
    tvbrange = padded(offset + 163, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_161, tvbrange, value)
    tvbrange = padded(offset + 164, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_162, tvbrange, value)
    tvbrange = padded(offset + 165, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_163, tvbrange, value)
    tvbrange = padded(offset + 166, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_164, tvbrange, value)
    tvbrange = padded(offset + 167, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_165, tvbrange, value)
    tvbrange = padded(offset + 168, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_166, tvbrange, value)
    tvbrange = padded(offset + 169, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_167, tvbrange, value)
    tvbrange = padded(offset + 170, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_168, tvbrange, value)
    tvbrange = padded(offset + 171, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_169, tvbrange, value)
    tvbrange = padded(offset + 172, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_170, tvbrange, value)
    tvbrange = padded(offset + 173, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_171, tvbrange, value)
    tvbrange = padded(offset + 174, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_172, tvbrange, value)
    tvbrange = padded(offset + 175, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_173, tvbrange, value)
    tvbrange = padded(offset + 176, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_174, tvbrange, value)
    tvbrange = padded(offset + 177, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_175, tvbrange, value)
    tvbrange = padded(offset + 178, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_176, tvbrange, value)
    tvbrange = padded(offset + 179, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_177, tvbrange, value)
    tvbrange = padded(offset + 180, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_178, tvbrange, value)
    tvbrange = padded(offset + 181, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GPS_RTCM_DATA_data_179, tvbrange, value)
end
-- dissect payload of message type HIGH_LATENCY
function payload_fns.payload_234(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 40 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 40)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY_base_mode, tvbrange, value)
    dissect_flags_MAV_MODE_FLAG(subtree, "HIGH_LATENCY_base_mode", tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY_custom_mode, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY_landed_state, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIGH_LATENCY_roll, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIGH_LATENCY_pitch, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY_heading, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIGH_LATENCY_throttle, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIGH_LATENCY_heading_sp, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIGH_LATENCY_latitude, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIGH_LATENCY_longitude, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIGH_LATENCY_altitude_amsl, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIGH_LATENCY_altitude_sp, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY_airspeed, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY_airspeed_sp, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY_groundspeed, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIGH_LATENCY_climb_rate, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY_gps_nsat, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY_gps_fix_type, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY_battery_remaining, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIGH_LATENCY_temperature, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIGH_LATENCY_temperature_air, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY_failsafe, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY_wp_num, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY_wp_distance, tvbrange, value)
end
-- dissect payload of message type HIGH_LATENCY2
function payload_fns.payload_235(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 42 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 42)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY2_timestamp, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY2_type, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY2_autopilot, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY2_custom_mode, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIGH_LATENCY2_latitude, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIGH_LATENCY2_longitude, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIGH_LATENCY2_altitude, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIGH_LATENCY2_target_altitude, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY2_heading, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY2_target_heading, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY2_target_distance, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY2_throttle, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY2_airspeed, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY2_airspeed_sp, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY2_groundspeed, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY2_windspeed, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY2_wind_heading, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY2_eph, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY2_epv, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIGH_LATENCY2_temperature_air, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIGH_LATENCY2_climb_rate, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIGH_LATENCY2_battery, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY2_wp_num, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HIGH_LATENCY2_failure_flags, tvbrange, value)
    dissect_flags_HL_FAILURE_FLAG(subtree, "HIGH_LATENCY2_failure_flags", tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIGH_LATENCY2_custom0, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIGH_LATENCY2_custom1, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HIGH_LATENCY2_custom2, tvbrange, value)
end
-- dissect payload of message type VIBRATION
function payload_fns.payload_241(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 32 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 32)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.VIBRATION_time_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VIBRATION_vibration_x, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VIBRATION_vibration_y, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VIBRATION_vibration_z, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VIBRATION_clipping_0, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VIBRATION_clipping_1, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VIBRATION_clipping_2, tvbrange, value)
end
-- dissect payload of message type HOME_POSITION
function payload_fns.payload_242(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 60 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 60)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HOME_POSITION_latitude, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HOME_POSITION_longitude, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HOME_POSITION_altitude, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HOME_POSITION_x, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HOME_POSITION_y, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HOME_POSITION_z, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HOME_POSITION_q_0, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HOME_POSITION_q_1, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HOME_POSITION_q_2, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HOME_POSITION_q_3, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HOME_POSITION_approach_x, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HOME_POSITION_approach_y, tvbrange, value)
    tvbrange = padded(offset + 48, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HOME_POSITION_approach_z, tvbrange, value)
    tvbrange = padded(offset + 52, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.HOME_POSITION_time_usec, tvbrange, value)
end
-- dissect payload of message type SET_HOME_POSITION
function payload_fns.payload_243(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 61 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 61)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SET_HOME_POSITION_target_system, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SET_HOME_POSITION_latitude, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SET_HOME_POSITION_longitude, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SET_HOME_POSITION_altitude, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_HOME_POSITION_x, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_HOME_POSITION_y, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_HOME_POSITION_z, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_HOME_POSITION_q_0, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_HOME_POSITION_q_1, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_HOME_POSITION_q_2, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_HOME_POSITION_q_3, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_HOME_POSITION_approach_x, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_HOME_POSITION_approach_y, tvbrange, value)
    tvbrange = padded(offset + 48, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.SET_HOME_POSITION_approach_z, tvbrange, value)
    tvbrange = padded(offset + 53, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.SET_HOME_POSITION_time_usec, tvbrange, value)
end
-- dissect payload of message type MESSAGE_INTERVAL
function payload_fns.payload_244(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 6 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 6)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MESSAGE_INTERVAL_message_id, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MESSAGE_INTERVAL_interval_us, tvbrange, value)
end
-- dissect payload of message type EXTENDED_SYS_STATE
function payload_fns.payload_245(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 2 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 2)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.EXTENDED_SYS_STATE_vtol_state, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.EXTENDED_SYS_STATE_landed_state, tvbrange, value)
end
-- dissect payload of message type ADSB_VEHICLE
function payload_fns.payload_246(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 38 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 38)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ADSB_VEHICLE_ICAO_address, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.ADSB_VEHICLE_lat, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.ADSB_VEHICLE_lon, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ADSB_VEHICLE_altitude_type, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.ADSB_VEHICLE_altitude, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ADSB_VEHICLE_heading, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ADSB_VEHICLE_hor_velocity, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.ADSB_VEHICLE_ver_velocity, tvbrange, value)
    tvbrange = padded(offset + 27, 9)
    value = tvbrange:string()
    subtree = tree:add_le(f.ADSB_VEHICLE_callsign, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ADSB_VEHICLE_emitter_type, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ADSB_VEHICLE_tslc, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ADSB_VEHICLE_flags, tvbrange, value)
    dissect_flags_ADSB_FLAGS(subtree, "ADSB_VEHICLE_flags", tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ADSB_VEHICLE_squawk, tvbrange, value)
end
-- dissect payload of message type COLLISION
function payload_fns.payload_247(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 19 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 19)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COLLISION_src, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COLLISION_id, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COLLISION_action, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.COLLISION_threat_level, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COLLISION_time_to_minimum_delta, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COLLISION_altitude_minimum_delta, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.COLLISION_horizontal_minimum_delta, tvbrange, value)
end
-- dissect payload of message type V2_EXTENSION
function payload_fns.payload_248(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 254 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 254)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_target_network, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_target_system, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_message_type, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_0, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_1, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_2, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_3, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_4, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_5, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_6, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_7, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_8, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_9, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_10, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_11, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_12, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_13, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_14, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_15, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_16, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_17, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_18, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_19, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_20, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_21, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_22, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_23, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_24, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_25, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_26, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_27, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_28, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_29, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_30, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_31, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_32, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_33, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_34, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_35, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_36, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_37, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_38, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_39, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_40, tvbrange, value)
    tvbrange = padded(offset + 46, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_41, tvbrange, value)
    tvbrange = padded(offset + 47, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_42, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_43, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_44, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_45, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_46, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_47, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_48, tvbrange, value)
    tvbrange = padded(offset + 54, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_49, tvbrange, value)
    tvbrange = padded(offset + 55, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_50, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_51, tvbrange, value)
    tvbrange = padded(offset + 57, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_52, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_53, tvbrange, value)
    tvbrange = padded(offset + 59, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_54, tvbrange, value)
    tvbrange = padded(offset + 60, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_55, tvbrange, value)
    tvbrange = padded(offset + 61, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_56, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_57, tvbrange, value)
    tvbrange = padded(offset + 63, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_58, tvbrange, value)
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_59, tvbrange, value)
    tvbrange = padded(offset + 65, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_60, tvbrange, value)
    tvbrange = padded(offset + 66, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_61, tvbrange, value)
    tvbrange = padded(offset + 67, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_62, tvbrange, value)
    tvbrange = padded(offset + 68, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_63, tvbrange, value)
    tvbrange = padded(offset + 69, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_64, tvbrange, value)
    tvbrange = padded(offset + 70, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_65, tvbrange, value)
    tvbrange = padded(offset + 71, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_66, tvbrange, value)
    tvbrange = padded(offset + 72, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_67, tvbrange, value)
    tvbrange = padded(offset + 73, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_68, tvbrange, value)
    tvbrange = padded(offset + 74, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_69, tvbrange, value)
    tvbrange = padded(offset + 75, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_70, tvbrange, value)
    tvbrange = padded(offset + 76, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_71, tvbrange, value)
    tvbrange = padded(offset + 77, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_72, tvbrange, value)
    tvbrange = padded(offset + 78, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_73, tvbrange, value)
    tvbrange = padded(offset + 79, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_74, tvbrange, value)
    tvbrange = padded(offset + 80, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_75, tvbrange, value)
    tvbrange = padded(offset + 81, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_76, tvbrange, value)
    tvbrange = padded(offset + 82, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_77, tvbrange, value)
    tvbrange = padded(offset + 83, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_78, tvbrange, value)
    tvbrange = padded(offset + 84, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_79, tvbrange, value)
    tvbrange = padded(offset + 85, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_80, tvbrange, value)
    tvbrange = padded(offset + 86, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_81, tvbrange, value)
    tvbrange = padded(offset + 87, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_82, tvbrange, value)
    tvbrange = padded(offset + 88, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_83, tvbrange, value)
    tvbrange = padded(offset + 89, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_84, tvbrange, value)
    tvbrange = padded(offset + 90, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_85, tvbrange, value)
    tvbrange = padded(offset + 91, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_86, tvbrange, value)
    tvbrange = padded(offset + 92, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_87, tvbrange, value)
    tvbrange = padded(offset + 93, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_88, tvbrange, value)
    tvbrange = padded(offset + 94, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_89, tvbrange, value)
    tvbrange = padded(offset + 95, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_90, tvbrange, value)
    tvbrange = padded(offset + 96, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_91, tvbrange, value)
    tvbrange = padded(offset + 97, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_92, tvbrange, value)
    tvbrange = padded(offset + 98, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_93, tvbrange, value)
    tvbrange = padded(offset + 99, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_94, tvbrange, value)
    tvbrange = padded(offset + 100, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_95, tvbrange, value)
    tvbrange = padded(offset + 101, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_96, tvbrange, value)
    tvbrange = padded(offset + 102, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_97, tvbrange, value)
    tvbrange = padded(offset + 103, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_98, tvbrange, value)
    tvbrange = padded(offset + 104, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_99, tvbrange, value)
    tvbrange = padded(offset + 105, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_100, tvbrange, value)
    tvbrange = padded(offset + 106, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_101, tvbrange, value)
    tvbrange = padded(offset + 107, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_102, tvbrange, value)
    tvbrange = padded(offset + 108, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_103, tvbrange, value)
    tvbrange = padded(offset + 109, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_104, tvbrange, value)
    tvbrange = padded(offset + 110, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_105, tvbrange, value)
    tvbrange = padded(offset + 111, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_106, tvbrange, value)
    tvbrange = padded(offset + 112, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_107, tvbrange, value)
    tvbrange = padded(offset + 113, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_108, tvbrange, value)
    tvbrange = padded(offset + 114, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_109, tvbrange, value)
    tvbrange = padded(offset + 115, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_110, tvbrange, value)
    tvbrange = padded(offset + 116, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_111, tvbrange, value)
    tvbrange = padded(offset + 117, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_112, tvbrange, value)
    tvbrange = padded(offset + 118, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_113, tvbrange, value)
    tvbrange = padded(offset + 119, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_114, tvbrange, value)
    tvbrange = padded(offset + 120, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_115, tvbrange, value)
    tvbrange = padded(offset + 121, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_116, tvbrange, value)
    tvbrange = padded(offset + 122, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_117, tvbrange, value)
    tvbrange = padded(offset + 123, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_118, tvbrange, value)
    tvbrange = padded(offset + 124, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_119, tvbrange, value)
    tvbrange = padded(offset + 125, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_120, tvbrange, value)
    tvbrange = padded(offset + 126, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_121, tvbrange, value)
    tvbrange = padded(offset + 127, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_122, tvbrange, value)
    tvbrange = padded(offset + 128, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_123, tvbrange, value)
    tvbrange = padded(offset + 129, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_124, tvbrange, value)
    tvbrange = padded(offset + 130, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_125, tvbrange, value)
    tvbrange = padded(offset + 131, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_126, tvbrange, value)
    tvbrange = padded(offset + 132, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_127, tvbrange, value)
    tvbrange = padded(offset + 133, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_128, tvbrange, value)
    tvbrange = padded(offset + 134, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_129, tvbrange, value)
    tvbrange = padded(offset + 135, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_130, tvbrange, value)
    tvbrange = padded(offset + 136, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_131, tvbrange, value)
    tvbrange = padded(offset + 137, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_132, tvbrange, value)
    tvbrange = padded(offset + 138, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_133, tvbrange, value)
    tvbrange = padded(offset + 139, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_134, tvbrange, value)
    tvbrange = padded(offset + 140, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_135, tvbrange, value)
    tvbrange = padded(offset + 141, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_136, tvbrange, value)
    tvbrange = padded(offset + 142, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_137, tvbrange, value)
    tvbrange = padded(offset + 143, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_138, tvbrange, value)
    tvbrange = padded(offset + 144, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_139, tvbrange, value)
    tvbrange = padded(offset + 145, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_140, tvbrange, value)
    tvbrange = padded(offset + 146, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_141, tvbrange, value)
    tvbrange = padded(offset + 147, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_142, tvbrange, value)
    tvbrange = padded(offset + 148, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_143, tvbrange, value)
    tvbrange = padded(offset + 149, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_144, tvbrange, value)
    tvbrange = padded(offset + 150, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_145, tvbrange, value)
    tvbrange = padded(offset + 151, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_146, tvbrange, value)
    tvbrange = padded(offset + 152, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_147, tvbrange, value)
    tvbrange = padded(offset + 153, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_148, tvbrange, value)
    tvbrange = padded(offset + 154, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_149, tvbrange, value)
    tvbrange = padded(offset + 155, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_150, tvbrange, value)
    tvbrange = padded(offset + 156, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_151, tvbrange, value)
    tvbrange = padded(offset + 157, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_152, tvbrange, value)
    tvbrange = padded(offset + 158, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_153, tvbrange, value)
    tvbrange = padded(offset + 159, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_154, tvbrange, value)
    tvbrange = padded(offset + 160, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_155, tvbrange, value)
    tvbrange = padded(offset + 161, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_156, tvbrange, value)
    tvbrange = padded(offset + 162, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_157, tvbrange, value)
    tvbrange = padded(offset + 163, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_158, tvbrange, value)
    tvbrange = padded(offset + 164, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_159, tvbrange, value)
    tvbrange = padded(offset + 165, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_160, tvbrange, value)
    tvbrange = padded(offset + 166, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_161, tvbrange, value)
    tvbrange = padded(offset + 167, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_162, tvbrange, value)
    tvbrange = padded(offset + 168, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_163, tvbrange, value)
    tvbrange = padded(offset + 169, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_164, tvbrange, value)
    tvbrange = padded(offset + 170, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_165, tvbrange, value)
    tvbrange = padded(offset + 171, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_166, tvbrange, value)
    tvbrange = padded(offset + 172, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_167, tvbrange, value)
    tvbrange = padded(offset + 173, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_168, tvbrange, value)
    tvbrange = padded(offset + 174, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_169, tvbrange, value)
    tvbrange = padded(offset + 175, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_170, tvbrange, value)
    tvbrange = padded(offset + 176, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_171, tvbrange, value)
    tvbrange = padded(offset + 177, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_172, tvbrange, value)
    tvbrange = padded(offset + 178, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_173, tvbrange, value)
    tvbrange = padded(offset + 179, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_174, tvbrange, value)
    tvbrange = padded(offset + 180, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_175, tvbrange, value)
    tvbrange = padded(offset + 181, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_176, tvbrange, value)
    tvbrange = padded(offset + 182, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_177, tvbrange, value)
    tvbrange = padded(offset + 183, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_178, tvbrange, value)
    tvbrange = padded(offset + 184, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_179, tvbrange, value)
    tvbrange = padded(offset + 185, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_180, tvbrange, value)
    tvbrange = padded(offset + 186, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_181, tvbrange, value)
    tvbrange = padded(offset + 187, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_182, tvbrange, value)
    tvbrange = padded(offset + 188, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_183, tvbrange, value)
    tvbrange = padded(offset + 189, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_184, tvbrange, value)
    tvbrange = padded(offset + 190, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_185, tvbrange, value)
    tvbrange = padded(offset + 191, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_186, tvbrange, value)
    tvbrange = padded(offset + 192, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_187, tvbrange, value)
    tvbrange = padded(offset + 193, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_188, tvbrange, value)
    tvbrange = padded(offset + 194, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_189, tvbrange, value)
    tvbrange = padded(offset + 195, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_190, tvbrange, value)
    tvbrange = padded(offset + 196, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_191, tvbrange, value)
    tvbrange = padded(offset + 197, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_192, tvbrange, value)
    tvbrange = padded(offset + 198, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_193, tvbrange, value)
    tvbrange = padded(offset + 199, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_194, tvbrange, value)
    tvbrange = padded(offset + 200, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_195, tvbrange, value)
    tvbrange = padded(offset + 201, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_196, tvbrange, value)
    tvbrange = padded(offset + 202, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_197, tvbrange, value)
    tvbrange = padded(offset + 203, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_198, tvbrange, value)
    tvbrange = padded(offset + 204, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_199, tvbrange, value)
    tvbrange = padded(offset + 205, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_200, tvbrange, value)
    tvbrange = padded(offset + 206, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_201, tvbrange, value)
    tvbrange = padded(offset + 207, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_202, tvbrange, value)
    tvbrange = padded(offset + 208, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_203, tvbrange, value)
    tvbrange = padded(offset + 209, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_204, tvbrange, value)
    tvbrange = padded(offset + 210, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_205, tvbrange, value)
    tvbrange = padded(offset + 211, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_206, tvbrange, value)
    tvbrange = padded(offset + 212, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_207, tvbrange, value)
    tvbrange = padded(offset + 213, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_208, tvbrange, value)
    tvbrange = padded(offset + 214, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_209, tvbrange, value)
    tvbrange = padded(offset + 215, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_210, tvbrange, value)
    tvbrange = padded(offset + 216, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_211, tvbrange, value)
    tvbrange = padded(offset + 217, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_212, tvbrange, value)
    tvbrange = padded(offset + 218, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_213, tvbrange, value)
    tvbrange = padded(offset + 219, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_214, tvbrange, value)
    tvbrange = padded(offset + 220, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_215, tvbrange, value)
    tvbrange = padded(offset + 221, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_216, tvbrange, value)
    tvbrange = padded(offset + 222, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_217, tvbrange, value)
    tvbrange = padded(offset + 223, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_218, tvbrange, value)
    tvbrange = padded(offset + 224, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_219, tvbrange, value)
    tvbrange = padded(offset + 225, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_220, tvbrange, value)
    tvbrange = padded(offset + 226, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_221, tvbrange, value)
    tvbrange = padded(offset + 227, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_222, tvbrange, value)
    tvbrange = padded(offset + 228, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_223, tvbrange, value)
    tvbrange = padded(offset + 229, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_224, tvbrange, value)
    tvbrange = padded(offset + 230, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_225, tvbrange, value)
    tvbrange = padded(offset + 231, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_226, tvbrange, value)
    tvbrange = padded(offset + 232, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_227, tvbrange, value)
    tvbrange = padded(offset + 233, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_228, tvbrange, value)
    tvbrange = padded(offset + 234, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_229, tvbrange, value)
    tvbrange = padded(offset + 235, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_230, tvbrange, value)
    tvbrange = padded(offset + 236, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_231, tvbrange, value)
    tvbrange = padded(offset + 237, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_232, tvbrange, value)
    tvbrange = padded(offset + 238, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_233, tvbrange, value)
    tvbrange = padded(offset + 239, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_234, tvbrange, value)
    tvbrange = padded(offset + 240, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_235, tvbrange, value)
    tvbrange = padded(offset + 241, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_236, tvbrange, value)
    tvbrange = padded(offset + 242, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_237, tvbrange, value)
    tvbrange = padded(offset + 243, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_238, tvbrange, value)
    tvbrange = padded(offset + 244, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_239, tvbrange, value)
    tvbrange = padded(offset + 245, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_240, tvbrange, value)
    tvbrange = padded(offset + 246, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_241, tvbrange, value)
    tvbrange = padded(offset + 247, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_242, tvbrange, value)
    tvbrange = padded(offset + 248, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_243, tvbrange, value)
    tvbrange = padded(offset + 249, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_244, tvbrange, value)
    tvbrange = padded(offset + 250, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_245, tvbrange, value)
    tvbrange = padded(offset + 251, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_246, tvbrange, value)
    tvbrange = padded(offset + 252, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_247, tvbrange, value)
    tvbrange = padded(offset + 253, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.V2_EXTENSION_payload_248, tvbrange, value)
end
-- dissect payload of message type MEMORY_VECT
function payload_fns.payload_249(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 36 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 36)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MEMORY_VECT_address, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MEMORY_VECT_ver, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MEMORY_VECT_type, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_0, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_1, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_2, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_3, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_4, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_5, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_6, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_7, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_8, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_9, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_10, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_11, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_12, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_13, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_14, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_15, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_16, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_17, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_18, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_19, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_20, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_21, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_22, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_23, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_24, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_25, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_26, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_27, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_28, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_29, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_30, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.MEMORY_VECT_value_31, tvbrange, value)
end
-- dissect payload of message type DEBUG_VECT
function payload_fns.payload_250(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 30 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 30)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 20, 10)
    value = tvbrange:string()
    subtree = tree:add_le(f.DEBUG_VECT_name, tvbrange, value)
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.DEBUG_VECT_time_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_VECT_x, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_VECT_y, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_VECT_z, tvbrange, value)
end
-- dissect payload of message type NAMED_VALUE_FLOAT
function payload_fns.payload_251(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 18 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 18)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.NAMED_VALUE_FLOAT_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 8, 10)
    value = tvbrange:string()
    subtree = tree:add_le(f.NAMED_VALUE_FLOAT_name, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.NAMED_VALUE_FLOAT_value, tvbrange, value)
end
-- dissect payload of message type NAMED_VALUE_INT
function payload_fns.payload_252(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 18 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 18)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.NAMED_VALUE_INT_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 8, 10)
    value = tvbrange:string()
    subtree = tree:add_le(f.NAMED_VALUE_INT_name, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.NAMED_VALUE_INT_value, tvbrange, value)
end
-- dissect payload of message type STATUSTEXT
function payload_fns.payload_253(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 54 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 54)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.STATUSTEXT_severity, tvbrange, value)
    tvbrange = padded(offset + 1, 50)
    value = tvbrange:string()
    subtree = tree:add_le(f.STATUSTEXT_text, tvbrange, value)
    tvbrange = padded(offset + 51, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.STATUSTEXT_id, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.STATUSTEXT_chunk_seq, tvbrange, value)
end
-- dissect payload of message type DEBUG
function payload_fns.payload_254(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 9 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 9)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEBUG_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEBUG_ind, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_value, tvbrange, value)
end
-- dissect payload of message type SETUP_SIGNING
function payload_fns.payload_256(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 42 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 42)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_target_system, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_target_component, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_0, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_1, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_2, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_3, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_4, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_5, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_6, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_7, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_8, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_9, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_10, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_11, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_12, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_13, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_14, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_15, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_16, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_17, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_18, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_19, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_20, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_21, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_22, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_23, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_24, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_25, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_26, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_27, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_28, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_29, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_30, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SETUP_SIGNING_secret_key_31, tvbrange, value)
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.SETUP_SIGNING_initial_timestamp, tvbrange, value)
end
-- dissect payload of message type BUTTON_CHANGE
function payload_fns.payload_257(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 9 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 9)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.BUTTON_CHANGE_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.BUTTON_CHANGE_last_change_ms, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.BUTTON_CHANGE_state, tvbrange, value)
end
-- dissect payload of message type PLAY_TUNE
function payload_fns.payload_258(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 232 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 232)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PLAY_TUNE_target_system, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PLAY_TUNE_target_component, tvbrange, value)
    tvbrange = padded(offset + 2, 30)
    value = tvbrange:string()
    subtree = tree:add_le(f.PLAY_TUNE_tune, tvbrange, value)
    tvbrange = padded(offset + 32, 200)
    value = tvbrange:string()
    subtree = tree:add_le(f.PLAY_TUNE_tune2, tvbrange, value)
end
-- dissect payload of message type CAMERA_INFORMATION
function payload_fns.payload_259(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 235 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 235)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_0, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_1, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_2, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_3, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_4, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_5, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_6, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_7, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_8, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_9, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_10, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_11, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_12, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_13, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_14, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_15, tvbrange, value)
    tvbrange = padded(offset + 46, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_16, tvbrange, value)
    tvbrange = padded(offset + 47, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_17, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_18, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_19, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_20, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_21, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_22, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_23, tvbrange, value)
    tvbrange = padded(offset + 54, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_24, tvbrange, value)
    tvbrange = padded(offset + 55, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_25, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_26, tvbrange, value)
    tvbrange = padded(offset + 57, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_27, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_28, tvbrange, value)
    tvbrange = padded(offset + 59, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_29, tvbrange, value)
    tvbrange = padded(offset + 60, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_30, tvbrange, value)
    tvbrange = padded(offset + 61, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_vendor_name_31, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_0, tvbrange, value)
    tvbrange = padded(offset + 63, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_1, tvbrange, value)
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_2, tvbrange, value)
    tvbrange = padded(offset + 65, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_3, tvbrange, value)
    tvbrange = padded(offset + 66, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_4, tvbrange, value)
    tvbrange = padded(offset + 67, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_5, tvbrange, value)
    tvbrange = padded(offset + 68, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_6, tvbrange, value)
    tvbrange = padded(offset + 69, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_7, tvbrange, value)
    tvbrange = padded(offset + 70, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_8, tvbrange, value)
    tvbrange = padded(offset + 71, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_9, tvbrange, value)
    tvbrange = padded(offset + 72, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_10, tvbrange, value)
    tvbrange = padded(offset + 73, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_11, tvbrange, value)
    tvbrange = padded(offset + 74, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_12, tvbrange, value)
    tvbrange = padded(offset + 75, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_13, tvbrange, value)
    tvbrange = padded(offset + 76, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_14, tvbrange, value)
    tvbrange = padded(offset + 77, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_15, tvbrange, value)
    tvbrange = padded(offset + 78, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_16, tvbrange, value)
    tvbrange = padded(offset + 79, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_17, tvbrange, value)
    tvbrange = padded(offset + 80, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_18, tvbrange, value)
    tvbrange = padded(offset + 81, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_19, tvbrange, value)
    tvbrange = padded(offset + 82, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_20, tvbrange, value)
    tvbrange = padded(offset + 83, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_21, tvbrange, value)
    tvbrange = padded(offset + 84, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_22, tvbrange, value)
    tvbrange = padded(offset + 85, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_23, tvbrange, value)
    tvbrange = padded(offset + 86, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_24, tvbrange, value)
    tvbrange = padded(offset + 87, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_25, tvbrange, value)
    tvbrange = padded(offset + 88, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_26, tvbrange, value)
    tvbrange = padded(offset + 89, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_27, tvbrange, value)
    tvbrange = padded(offset + 90, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_28, tvbrange, value)
    tvbrange = padded(offset + 91, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_29, tvbrange, value)
    tvbrange = padded(offset + 92, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_30, tvbrange, value)
    tvbrange = padded(offset + 93, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_model_name_31, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_firmware_version, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_INFORMATION_focal_length, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_INFORMATION_sensor_size_h, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_INFORMATION_sensor_size_v, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_resolution_h, tvbrange, value)
    tvbrange = padded(offset + 26, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_resolution_v, tvbrange, value)
    tvbrange = padded(offset + 94, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_lens_id, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_flags, tvbrange, value)
    dissect_flags_CAMERA_CAP_FLAGS(subtree, "CAMERA_INFORMATION_flags", tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_INFORMATION_cam_definition_version, tvbrange, value)
    tvbrange = padded(offset + 95, 140)
    value = tvbrange:string()
    subtree = tree:add_le(f.CAMERA_INFORMATION_cam_definition_uri, tvbrange, value)
end
-- dissect payload of message type CAMERA_SETTINGS
function payload_fns.payload_260(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 13 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 13)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_SETTINGS_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_SETTINGS_mode_id, tvbrange, value)
    tvbrange = padded(offset + 5, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_SETTINGS_zoomLevel, tvbrange, value)
    tvbrange = padded(offset + 9, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_SETTINGS_focusLevel, tvbrange, value)
end
-- dissect payload of message type STORAGE_INFORMATION
function payload_fns.payload_261(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 60 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 60)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.STORAGE_INFORMATION_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.STORAGE_INFORMATION_storage_id, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.STORAGE_INFORMATION_storage_count, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.STORAGE_INFORMATION_status, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.STORAGE_INFORMATION_total_capacity, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.STORAGE_INFORMATION_used_capacity, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.STORAGE_INFORMATION_available_capacity, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.STORAGE_INFORMATION_read_speed, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.STORAGE_INFORMATION_write_speed, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.STORAGE_INFORMATION_type, tvbrange, value)
    tvbrange = padded(offset + 28, 32)
    value = tvbrange:string()
    subtree = tree:add_le(f.STORAGE_INFORMATION_name, tvbrange, value)
end
-- dissect payload of message type CAMERA_CAPTURE_STATUS
function payload_fns.payload_262(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 22 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 22)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_CAPTURE_STATUS_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_CAPTURE_STATUS_image_status, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_CAPTURE_STATUS_video_status, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_CAPTURE_STATUS_image_interval, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_CAPTURE_STATUS_recording_time_ms, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_CAPTURE_STATUS_available_capacity, tvbrange, value)
    tvbrange = padded(offset + 18, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.CAMERA_CAPTURE_STATUS_image_count, tvbrange, value)
end
-- dissect payload of message type CAMERA_IMAGE_CAPTURED
function payload_fns.payload_263(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 255 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 255)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_IMAGE_CAPTURED_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.CAMERA_IMAGE_CAPTURED_time_utc, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_IMAGE_CAPTURED_camera_id, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.CAMERA_IMAGE_CAPTURED_lat, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.CAMERA_IMAGE_CAPTURED_lon, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.CAMERA_IMAGE_CAPTURED_alt, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.CAMERA_IMAGE_CAPTURED_relative_alt, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_IMAGE_CAPTURED_q_0, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_IMAGE_CAPTURED_q_1, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_IMAGE_CAPTURED_q_2, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_IMAGE_CAPTURED_q_3, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.CAMERA_IMAGE_CAPTURED_image_index, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.CAMERA_IMAGE_CAPTURED_capture_result, tvbrange, value)
    tvbrange = padded(offset + 50, 205)
    value = tvbrange:string()
    subtree = tree:add_le(f.CAMERA_IMAGE_CAPTURED_file_url, tvbrange, value)
end
-- dissect payload of message type FLIGHT_INFORMATION
function payload_fns.payload_264(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 28 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 28)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.FLIGHT_INFORMATION_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.FLIGHT_INFORMATION_arming_time_utc, tvbrange, value)
    tvbrange = padded(offset + 8, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.FLIGHT_INFORMATION_takeoff_time_utc, tvbrange, value)
    tvbrange = padded(offset + 16, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.FLIGHT_INFORMATION_flight_uuid, tvbrange, value)
end
-- dissect payload of message type MOUNT_ORIENTATION
function payload_fns.payload_265(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 20 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 20)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.MOUNT_ORIENTATION_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MOUNT_ORIENTATION_roll, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MOUNT_ORIENTATION_pitch, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MOUNT_ORIENTATION_yaw, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.MOUNT_ORIENTATION_yaw_absolute, tvbrange, value)
end
-- dissect payload of message type LOGGING_DATA
function payload_fns.payload_266(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 255 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 255)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_target_system, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_sequence, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_length, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_first_message_offset, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_0, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_1, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_2, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_3, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_4, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_5, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_6, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_7, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_8, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_9, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_10, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_11, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_12, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_13, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_14, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_15, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_16, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_17, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_18, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_19, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_20, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_21, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_22, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_23, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_24, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_25, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_26, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_27, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_28, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_29, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_30, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_31, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_32, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_33, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_34, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_35, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_36, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_37, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_38, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_39, tvbrange, value)
    tvbrange = padded(offset + 46, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_40, tvbrange, value)
    tvbrange = padded(offset + 47, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_41, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_42, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_43, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_44, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_45, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_46, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_47, tvbrange, value)
    tvbrange = padded(offset + 54, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_48, tvbrange, value)
    tvbrange = padded(offset + 55, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_49, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_50, tvbrange, value)
    tvbrange = padded(offset + 57, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_51, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_52, tvbrange, value)
    tvbrange = padded(offset + 59, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_53, tvbrange, value)
    tvbrange = padded(offset + 60, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_54, tvbrange, value)
    tvbrange = padded(offset + 61, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_55, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_56, tvbrange, value)
    tvbrange = padded(offset + 63, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_57, tvbrange, value)
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_58, tvbrange, value)
    tvbrange = padded(offset + 65, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_59, tvbrange, value)
    tvbrange = padded(offset + 66, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_60, tvbrange, value)
    tvbrange = padded(offset + 67, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_61, tvbrange, value)
    tvbrange = padded(offset + 68, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_62, tvbrange, value)
    tvbrange = padded(offset + 69, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_63, tvbrange, value)
    tvbrange = padded(offset + 70, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_64, tvbrange, value)
    tvbrange = padded(offset + 71, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_65, tvbrange, value)
    tvbrange = padded(offset + 72, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_66, tvbrange, value)
    tvbrange = padded(offset + 73, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_67, tvbrange, value)
    tvbrange = padded(offset + 74, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_68, tvbrange, value)
    tvbrange = padded(offset + 75, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_69, tvbrange, value)
    tvbrange = padded(offset + 76, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_70, tvbrange, value)
    tvbrange = padded(offset + 77, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_71, tvbrange, value)
    tvbrange = padded(offset + 78, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_72, tvbrange, value)
    tvbrange = padded(offset + 79, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_73, tvbrange, value)
    tvbrange = padded(offset + 80, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_74, tvbrange, value)
    tvbrange = padded(offset + 81, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_75, tvbrange, value)
    tvbrange = padded(offset + 82, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_76, tvbrange, value)
    tvbrange = padded(offset + 83, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_77, tvbrange, value)
    tvbrange = padded(offset + 84, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_78, tvbrange, value)
    tvbrange = padded(offset + 85, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_79, tvbrange, value)
    tvbrange = padded(offset + 86, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_80, tvbrange, value)
    tvbrange = padded(offset + 87, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_81, tvbrange, value)
    tvbrange = padded(offset + 88, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_82, tvbrange, value)
    tvbrange = padded(offset + 89, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_83, tvbrange, value)
    tvbrange = padded(offset + 90, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_84, tvbrange, value)
    tvbrange = padded(offset + 91, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_85, tvbrange, value)
    tvbrange = padded(offset + 92, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_86, tvbrange, value)
    tvbrange = padded(offset + 93, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_87, tvbrange, value)
    tvbrange = padded(offset + 94, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_88, tvbrange, value)
    tvbrange = padded(offset + 95, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_89, tvbrange, value)
    tvbrange = padded(offset + 96, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_90, tvbrange, value)
    tvbrange = padded(offset + 97, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_91, tvbrange, value)
    tvbrange = padded(offset + 98, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_92, tvbrange, value)
    tvbrange = padded(offset + 99, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_93, tvbrange, value)
    tvbrange = padded(offset + 100, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_94, tvbrange, value)
    tvbrange = padded(offset + 101, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_95, tvbrange, value)
    tvbrange = padded(offset + 102, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_96, tvbrange, value)
    tvbrange = padded(offset + 103, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_97, tvbrange, value)
    tvbrange = padded(offset + 104, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_98, tvbrange, value)
    tvbrange = padded(offset + 105, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_99, tvbrange, value)
    tvbrange = padded(offset + 106, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_100, tvbrange, value)
    tvbrange = padded(offset + 107, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_101, tvbrange, value)
    tvbrange = padded(offset + 108, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_102, tvbrange, value)
    tvbrange = padded(offset + 109, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_103, tvbrange, value)
    tvbrange = padded(offset + 110, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_104, tvbrange, value)
    tvbrange = padded(offset + 111, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_105, tvbrange, value)
    tvbrange = padded(offset + 112, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_106, tvbrange, value)
    tvbrange = padded(offset + 113, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_107, tvbrange, value)
    tvbrange = padded(offset + 114, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_108, tvbrange, value)
    tvbrange = padded(offset + 115, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_109, tvbrange, value)
    tvbrange = padded(offset + 116, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_110, tvbrange, value)
    tvbrange = padded(offset + 117, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_111, tvbrange, value)
    tvbrange = padded(offset + 118, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_112, tvbrange, value)
    tvbrange = padded(offset + 119, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_113, tvbrange, value)
    tvbrange = padded(offset + 120, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_114, tvbrange, value)
    tvbrange = padded(offset + 121, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_115, tvbrange, value)
    tvbrange = padded(offset + 122, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_116, tvbrange, value)
    tvbrange = padded(offset + 123, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_117, tvbrange, value)
    tvbrange = padded(offset + 124, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_118, tvbrange, value)
    tvbrange = padded(offset + 125, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_119, tvbrange, value)
    tvbrange = padded(offset + 126, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_120, tvbrange, value)
    tvbrange = padded(offset + 127, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_121, tvbrange, value)
    tvbrange = padded(offset + 128, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_122, tvbrange, value)
    tvbrange = padded(offset + 129, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_123, tvbrange, value)
    tvbrange = padded(offset + 130, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_124, tvbrange, value)
    tvbrange = padded(offset + 131, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_125, tvbrange, value)
    tvbrange = padded(offset + 132, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_126, tvbrange, value)
    tvbrange = padded(offset + 133, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_127, tvbrange, value)
    tvbrange = padded(offset + 134, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_128, tvbrange, value)
    tvbrange = padded(offset + 135, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_129, tvbrange, value)
    tvbrange = padded(offset + 136, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_130, tvbrange, value)
    tvbrange = padded(offset + 137, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_131, tvbrange, value)
    tvbrange = padded(offset + 138, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_132, tvbrange, value)
    tvbrange = padded(offset + 139, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_133, tvbrange, value)
    tvbrange = padded(offset + 140, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_134, tvbrange, value)
    tvbrange = padded(offset + 141, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_135, tvbrange, value)
    tvbrange = padded(offset + 142, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_136, tvbrange, value)
    tvbrange = padded(offset + 143, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_137, tvbrange, value)
    tvbrange = padded(offset + 144, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_138, tvbrange, value)
    tvbrange = padded(offset + 145, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_139, tvbrange, value)
    tvbrange = padded(offset + 146, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_140, tvbrange, value)
    tvbrange = padded(offset + 147, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_141, tvbrange, value)
    tvbrange = padded(offset + 148, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_142, tvbrange, value)
    tvbrange = padded(offset + 149, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_143, tvbrange, value)
    tvbrange = padded(offset + 150, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_144, tvbrange, value)
    tvbrange = padded(offset + 151, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_145, tvbrange, value)
    tvbrange = padded(offset + 152, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_146, tvbrange, value)
    tvbrange = padded(offset + 153, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_147, tvbrange, value)
    tvbrange = padded(offset + 154, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_148, tvbrange, value)
    tvbrange = padded(offset + 155, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_149, tvbrange, value)
    tvbrange = padded(offset + 156, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_150, tvbrange, value)
    tvbrange = padded(offset + 157, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_151, tvbrange, value)
    tvbrange = padded(offset + 158, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_152, tvbrange, value)
    tvbrange = padded(offset + 159, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_153, tvbrange, value)
    tvbrange = padded(offset + 160, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_154, tvbrange, value)
    tvbrange = padded(offset + 161, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_155, tvbrange, value)
    tvbrange = padded(offset + 162, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_156, tvbrange, value)
    tvbrange = padded(offset + 163, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_157, tvbrange, value)
    tvbrange = padded(offset + 164, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_158, tvbrange, value)
    tvbrange = padded(offset + 165, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_159, tvbrange, value)
    tvbrange = padded(offset + 166, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_160, tvbrange, value)
    tvbrange = padded(offset + 167, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_161, tvbrange, value)
    tvbrange = padded(offset + 168, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_162, tvbrange, value)
    tvbrange = padded(offset + 169, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_163, tvbrange, value)
    tvbrange = padded(offset + 170, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_164, tvbrange, value)
    tvbrange = padded(offset + 171, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_165, tvbrange, value)
    tvbrange = padded(offset + 172, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_166, tvbrange, value)
    tvbrange = padded(offset + 173, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_167, tvbrange, value)
    tvbrange = padded(offset + 174, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_168, tvbrange, value)
    tvbrange = padded(offset + 175, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_169, tvbrange, value)
    tvbrange = padded(offset + 176, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_170, tvbrange, value)
    tvbrange = padded(offset + 177, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_171, tvbrange, value)
    tvbrange = padded(offset + 178, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_172, tvbrange, value)
    tvbrange = padded(offset + 179, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_173, tvbrange, value)
    tvbrange = padded(offset + 180, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_174, tvbrange, value)
    tvbrange = padded(offset + 181, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_175, tvbrange, value)
    tvbrange = padded(offset + 182, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_176, tvbrange, value)
    tvbrange = padded(offset + 183, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_177, tvbrange, value)
    tvbrange = padded(offset + 184, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_178, tvbrange, value)
    tvbrange = padded(offset + 185, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_179, tvbrange, value)
    tvbrange = padded(offset + 186, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_180, tvbrange, value)
    tvbrange = padded(offset + 187, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_181, tvbrange, value)
    tvbrange = padded(offset + 188, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_182, tvbrange, value)
    tvbrange = padded(offset + 189, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_183, tvbrange, value)
    tvbrange = padded(offset + 190, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_184, tvbrange, value)
    tvbrange = padded(offset + 191, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_185, tvbrange, value)
    tvbrange = padded(offset + 192, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_186, tvbrange, value)
    tvbrange = padded(offset + 193, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_187, tvbrange, value)
    tvbrange = padded(offset + 194, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_188, tvbrange, value)
    tvbrange = padded(offset + 195, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_189, tvbrange, value)
    tvbrange = padded(offset + 196, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_190, tvbrange, value)
    tvbrange = padded(offset + 197, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_191, tvbrange, value)
    tvbrange = padded(offset + 198, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_192, tvbrange, value)
    tvbrange = padded(offset + 199, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_193, tvbrange, value)
    tvbrange = padded(offset + 200, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_194, tvbrange, value)
    tvbrange = padded(offset + 201, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_195, tvbrange, value)
    tvbrange = padded(offset + 202, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_196, tvbrange, value)
    tvbrange = padded(offset + 203, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_197, tvbrange, value)
    tvbrange = padded(offset + 204, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_198, tvbrange, value)
    tvbrange = padded(offset + 205, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_199, tvbrange, value)
    tvbrange = padded(offset + 206, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_200, tvbrange, value)
    tvbrange = padded(offset + 207, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_201, tvbrange, value)
    tvbrange = padded(offset + 208, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_202, tvbrange, value)
    tvbrange = padded(offset + 209, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_203, tvbrange, value)
    tvbrange = padded(offset + 210, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_204, tvbrange, value)
    tvbrange = padded(offset + 211, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_205, tvbrange, value)
    tvbrange = padded(offset + 212, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_206, tvbrange, value)
    tvbrange = padded(offset + 213, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_207, tvbrange, value)
    tvbrange = padded(offset + 214, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_208, tvbrange, value)
    tvbrange = padded(offset + 215, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_209, tvbrange, value)
    tvbrange = padded(offset + 216, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_210, tvbrange, value)
    tvbrange = padded(offset + 217, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_211, tvbrange, value)
    tvbrange = padded(offset + 218, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_212, tvbrange, value)
    tvbrange = padded(offset + 219, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_213, tvbrange, value)
    tvbrange = padded(offset + 220, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_214, tvbrange, value)
    tvbrange = padded(offset + 221, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_215, tvbrange, value)
    tvbrange = padded(offset + 222, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_216, tvbrange, value)
    tvbrange = padded(offset + 223, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_217, tvbrange, value)
    tvbrange = padded(offset + 224, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_218, tvbrange, value)
    tvbrange = padded(offset + 225, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_219, tvbrange, value)
    tvbrange = padded(offset + 226, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_220, tvbrange, value)
    tvbrange = padded(offset + 227, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_221, tvbrange, value)
    tvbrange = padded(offset + 228, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_222, tvbrange, value)
    tvbrange = padded(offset + 229, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_223, tvbrange, value)
    tvbrange = padded(offset + 230, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_224, tvbrange, value)
    tvbrange = padded(offset + 231, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_225, tvbrange, value)
    tvbrange = padded(offset + 232, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_226, tvbrange, value)
    tvbrange = padded(offset + 233, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_227, tvbrange, value)
    tvbrange = padded(offset + 234, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_228, tvbrange, value)
    tvbrange = padded(offset + 235, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_229, tvbrange, value)
    tvbrange = padded(offset + 236, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_230, tvbrange, value)
    tvbrange = padded(offset + 237, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_231, tvbrange, value)
    tvbrange = padded(offset + 238, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_232, tvbrange, value)
    tvbrange = padded(offset + 239, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_233, tvbrange, value)
    tvbrange = padded(offset + 240, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_234, tvbrange, value)
    tvbrange = padded(offset + 241, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_235, tvbrange, value)
    tvbrange = padded(offset + 242, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_236, tvbrange, value)
    tvbrange = padded(offset + 243, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_237, tvbrange, value)
    tvbrange = padded(offset + 244, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_238, tvbrange, value)
    tvbrange = padded(offset + 245, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_239, tvbrange, value)
    tvbrange = padded(offset + 246, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_240, tvbrange, value)
    tvbrange = padded(offset + 247, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_241, tvbrange, value)
    tvbrange = padded(offset + 248, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_242, tvbrange, value)
    tvbrange = padded(offset + 249, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_243, tvbrange, value)
    tvbrange = padded(offset + 250, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_244, tvbrange, value)
    tvbrange = padded(offset + 251, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_245, tvbrange, value)
    tvbrange = padded(offset + 252, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_246, tvbrange, value)
    tvbrange = padded(offset + 253, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_247, tvbrange, value)
    tvbrange = padded(offset + 254, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_data_248, tvbrange, value)
end
-- dissect payload of message type LOGGING_DATA_ACKED
function payload_fns.payload_267(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 255 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 255)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_target_system, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_sequence, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_length, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_first_message_offset, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_0, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_1, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_2, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_3, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_4, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_5, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_6, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_7, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_8, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_9, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_10, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_11, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_12, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_13, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_14, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_15, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_16, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_17, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_18, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_19, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_20, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_21, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_22, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_23, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_24, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_25, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_26, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_27, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_28, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_29, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_30, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_31, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_32, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_33, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_34, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_35, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_36, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_37, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_38, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_39, tvbrange, value)
    tvbrange = padded(offset + 46, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_40, tvbrange, value)
    tvbrange = padded(offset + 47, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_41, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_42, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_43, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_44, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_45, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_46, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_47, tvbrange, value)
    tvbrange = padded(offset + 54, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_48, tvbrange, value)
    tvbrange = padded(offset + 55, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_49, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_50, tvbrange, value)
    tvbrange = padded(offset + 57, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_51, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_52, tvbrange, value)
    tvbrange = padded(offset + 59, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_53, tvbrange, value)
    tvbrange = padded(offset + 60, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_54, tvbrange, value)
    tvbrange = padded(offset + 61, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_55, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_56, tvbrange, value)
    tvbrange = padded(offset + 63, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_57, tvbrange, value)
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_58, tvbrange, value)
    tvbrange = padded(offset + 65, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_59, tvbrange, value)
    tvbrange = padded(offset + 66, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_60, tvbrange, value)
    tvbrange = padded(offset + 67, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_61, tvbrange, value)
    tvbrange = padded(offset + 68, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_62, tvbrange, value)
    tvbrange = padded(offset + 69, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_63, tvbrange, value)
    tvbrange = padded(offset + 70, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_64, tvbrange, value)
    tvbrange = padded(offset + 71, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_65, tvbrange, value)
    tvbrange = padded(offset + 72, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_66, tvbrange, value)
    tvbrange = padded(offset + 73, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_67, tvbrange, value)
    tvbrange = padded(offset + 74, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_68, tvbrange, value)
    tvbrange = padded(offset + 75, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_69, tvbrange, value)
    tvbrange = padded(offset + 76, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_70, tvbrange, value)
    tvbrange = padded(offset + 77, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_71, tvbrange, value)
    tvbrange = padded(offset + 78, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_72, tvbrange, value)
    tvbrange = padded(offset + 79, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_73, tvbrange, value)
    tvbrange = padded(offset + 80, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_74, tvbrange, value)
    tvbrange = padded(offset + 81, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_75, tvbrange, value)
    tvbrange = padded(offset + 82, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_76, tvbrange, value)
    tvbrange = padded(offset + 83, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_77, tvbrange, value)
    tvbrange = padded(offset + 84, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_78, tvbrange, value)
    tvbrange = padded(offset + 85, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_79, tvbrange, value)
    tvbrange = padded(offset + 86, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_80, tvbrange, value)
    tvbrange = padded(offset + 87, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_81, tvbrange, value)
    tvbrange = padded(offset + 88, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_82, tvbrange, value)
    tvbrange = padded(offset + 89, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_83, tvbrange, value)
    tvbrange = padded(offset + 90, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_84, tvbrange, value)
    tvbrange = padded(offset + 91, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_85, tvbrange, value)
    tvbrange = padded(offset + 92, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_86, tvbrange, value)
    tvbrange = padded(offset + 93, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_87, tvbrange, value)
    tvbrange = padded(offset + 94, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_88, tvbrange, value)
    tvbrange = padded(offset + 95, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_89, tvbrange, value)
    tvbrange = padded(offset + 96, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_90, tvbrange, value)
    tvbrange = padded(offset + 97, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_91, tvbrange, value)
    tvbrange = padded(offset + 98, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_92, tvbrange, value)
    tvbrange = padded(offset + 99, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_93, tvbrange, value)
    tvbrange = padded(offset + 100, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_94, tvbrange, value)
    tvbrange = padded(offset + 101, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_95, tvbrange, value)
    tvbrange = padded(offset + 102, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_96, tvbrange, value)
    tvbrange = padded(offset + 103, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_97, tvbrange, value)
    tvbrange = padded(offset + 104, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_98, tvbrange, value)
    tvbrange = padded(offset + 105, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_99, tvbrange, value)
    tvbrange = padded(offset + 106, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_100, tvbrange, value)
    tvbrange = padded(offset + 107, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_101, tvbrange, value)
    tvbrange = padded(offset + 108, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_102, tvbrange, value)
    tvbrange = padded(offset + 109, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_103, tvbrange, value)
    tvbrange = padded(offset + 110, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_104, tvbrange, value)
    tvbrange = padded(offset + 111, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_105, tvbrange, value)
    tvbrange = padded(offset + 112, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_106, tvbrange, value)
    tvbrange = padded(offset + 113, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_107, tvbrange, value)
    tvbrange = padded(offset + 114, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_108, tvbrange, value)
    tvbrange = padded(offset + 115, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_109, tvbrange, value)
    tvbrange = padded(offset + 116, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_110, tvbrange, value)
    tvbrange = padded(offset + 117, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_111, tvbrange, value)
    tvbrange = padded(offset + 118, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_112, tvbrange, value)
    tvbrange = padded(offset + 119, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_113, tvbrange, value)
    tvbrange = padded(offset + 120, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_114, tvbrange, value)
    tvbrange = padded(offset + 121, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_115, tvbrange, value)
    tvbrange = padded(offset + 122, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_116, tvbrange, value)
    tvbrange = padded(offset + 123, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_117, tvbrange, value)
    tvbrange = padded(offset + 124, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_118, tvbrange, value)
    tvbrange = padded(offset + 125, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_119, tvbrange, value)
    tvbrange = padded(offset + 126, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_120, tvbrange, value)
    tvbrange = padded(offset + 127, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_121, tvbrange, value)
    tvbrange = padded(offset + 128, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_122, tvbrange, value)
    tvbrange = padded(offset + 129, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_123, tvbrange, value)
    tvbrange = padded(offset + 130, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_124, tvbrange, value)
    tvbrange = padded(offset + 131, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_125, tvbrange, value)
    tvbrange = padded(offset + 132, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_126, tvbrange, value)
    tvbrange = padded(offset + 133, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_127, tvbrange, value)
    tvbrange = padded(offset + 134, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_128, tvbrange, value)
    tvbrange = padded(offset + 135, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_129, tvbrange, value)
    tvbrange = padded(offset + 136, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_130, tvbrange, value)
    tvbrange = padded(offset + 137, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_131, tvbrange, value)
    tvbrange = padded(offset + 138, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_132, tvbrange, value)
    tvbrange = padded(offset + 139, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_133, tvbrange, value)
    tvbrange = padded(offset + 140, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_134, tvbrange, value)
    tvbrange = padded(offset + 141, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_135, tvbrange, value)
    tvbrange = padded(offset + 142, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_136, tvbrange, value)
    tvbrange = padded(offset + 143, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_137, tvbrange, value)
    tvbrange = padded(offset + 144, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_138, tvbrange, value)
    tvbrange = padded(offset + 145, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_139, tvbrange, value)
    tvbrange = padded(offset + 146, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_140, tvbrange, value)
    tvbrange = padded(offset + 147, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_141, tvbrange, value)
    tvbrange = padded(offset + 148, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_142, tvbrange, value)
    tvbrange = padded(offset + 149, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_143, tvbrange, value)
    tvbrange = padded(offset + 150, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_144, tvbrange, value)
    tvbrange = padded(offset + 151, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_145, tvbrange, value)
    tvbrange = padded(offset + 152, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_146, tvbrange, value)
    tvbrange = padded(offset + 153, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_147, tvbrange, value)
    tvbrange = padded(offset + 154, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_148, tvbrange, value)
    tvbrange = padded(offset + 155, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_149, tvbrange, value)
    tvbrange = padded(offset + 156, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_150, tvbrange, value)
    tvbrange = padded(offset + 157, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_151, tvbrange, value)
    tvbrange = padded(offset + 158, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_152, tvbrange, value)
    tvbrange = padded(offset + 159, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_153, tvbrange, value)
    tvbrange = padded(offset + 160, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_154, tvbrange, value)
    tvbrange = padded(offset + 161, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_155, tvbrange, value)
    tvbrange = padded(offset + 162, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_156, tvbrange, value)
    tvbrange = padded(offset + 163, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_157, tvbrange, value)
    tvbrange = padded(offset + 164, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_158, tvbrange, value)
    tvbrange = padded(offset + 165, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_159, tvbrange, value)
    tvbrange = padded(offset + 166, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_160, tvbrange, value)
    tvbrange = padded(offset + 167, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_161, tvbrange, value)
    tvbrange = padded(offset + 168, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_162, tvbrange, value)
    tvbrange = padded(offset + 169, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_163, tvbrange, value)
    tvbrange = padded(offset + 170, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_164, tvbrange, value)
    tvbrange = padded(offset + 171, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_165, tvbrange, value)
    tvbrange = padded(offset + 172, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_166, tvbrange, value)
    tvbrange = padded(offset + 173, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_167, tvbrange, value)
    tvbrange = padded(offset + 174, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_168, tvbrange, value)
    tvbrange = padded(offset + 175, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_169, tvbrange, value)
    tvbrange = padded(offset + 176, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_170, tvbrange, value)
    tvbrange = padded(offset + 177, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_171, tvbrange, value)
    tvbrange = padded(offset + 178, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_172, tvbrange, value)
    tvbrange = padded(offset + 179, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_173, tvbrange, value)
    tvbrange = padded(offset + 180, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_174, tvbrange, value)
    tvbrange = padded(offset + 181, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_175, tvbrange, value)
    tvbrange = padded(offset + 182, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_176, tvbrange, value)
    tvbrange = padded(offset + 183, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_177, tvbrange, value)
    tvbrange = padded(offset + 184, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_178, tvbrange, value)
    tvbrange = padded(offset + 185, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_179, tvbrange, value)
    tvbrange = padded(offset + 186, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_180, tvbrange, value)
    tvbrange = padded(offset + 187, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_181, tvbrange, value)
    tvbrange = padded(offset + 188, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_182, tvbrange, value)
    tvbrange = padded(offset + 189, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_183, tvbrange, value)
    tvbrange = padded(offset + 190, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_184, tvbrange, value)
    tvbrange = padded(offset + 191, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_185, tvbrange, value)
    tvbrange = padded(offset + 192, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_186, tvbrange, value)
    tvbrange = padded(offset + 193, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_187, tvbrange, value)
    tvbrange = padded(offset + 194, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_188, tvbrange, value)
    tvbrange = padded(offset + 195, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_189, tvbrange, value)
    tvbrange = padded(offset + 196, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_190, tvbrange, value)
    tvbrange = padded(offset + 197, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_191, tvbrange, value)
    tvbrange = padded(offset + 198, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_192, tvbrange, value)
    tvbrange = padded(offset + 199, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_193, tvbrange, value)
    tvbrange = padded(offset + 200, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_194, tvbrange, value)
    tvbrange = padded(offset + 201, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_195, tvbrange, value)
    tvbrange = padded(offset + 202, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_196, tvbrange, value)
    tvbrange = padded(offset + 203, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_197, tvbrange, value)
    tvbrange = padded(offset + 204, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_198, tvbrange, value)
    tvbrange = padded(offset + 205, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_199, tvbrange, value)
    tvbrange = padded(offset + 206, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_200, tvbrange, value)
    tvbrange = padded(offset + 207, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_201, tvbrange, value)
    tvbrange = padded(offset + 208, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_202, tvbrange, value)
    tvbrange = padded(offset + 209, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_203, tvbrange, value)
    tvbrange = padded(offset + 210, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_204, tvbrange, value)
    tvbrange = padded(offset + 211, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_205, tvbrange, value)
    tvbrange = padded(offset + 212, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_206, tvbrange, value)
    tvbrange = padded(offset + 213, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_207, tvbrange, value)
    tvbrange = padded(offset + 214, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_208, tvbrange, value)
    tvbrange = padded(offset + 215, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_209, tvbrange, value)
    tvbrange = padded(offset + 216, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_210, tvbrange, value)
    tvbrange = padded(offset + 217, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_211, tvbrange, value)
    tvbrange = padded(offset + 218, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_212, tvbrange, value)
    tvbrange = padded(offset + 219, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_213, tvbrange, value)
    tvbrange = padded(offset + 220, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_214, tvbrange, value)
    tvbrange = padded(offset + 221, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_215, tvbrange, value)
    tvbrange = padded(offset + 222, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_216, tvbrange, value)
    tvbrange = padded(offset + 223, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_217, tvbrange, value)
    tvbrange = padded(offset + 224, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_218, tvbrange, value)
    tvbrange = padded(offset + 225, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_219, tvbrange, value)
    tvbrange = padded(offset + 226, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_220, tvbrange, value)
    tvbrange = padded(offset + 227, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_221, tvbrange, value)
    tvbrange = padded(offset + 228, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_222, tvbrange, value)
    tvbrange = padded(offset + 229, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_223, tvbrange, value)
    tvbrange = padded(offset + 230, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_224, tvbrange, value)
    tvbrange = padded(offset + 231, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_225, tvbrange, value)
    tvbrange = padded(offset + 232, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_226, tvbrange, value)
    tvbrange = padded(offset + 233, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_227, tvbrange, value)
    tvbrange = padded(offset + 234, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_228, tvbrange, value)
    tvbrange = padded(offset + 235, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_229, tvbrange, value)
    tvbrange = padded(offset + 236, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_230, tvbrange, value)
    tvbrange = padded(offset + 237, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_231, tvbrange, value)
    tvbrange = padded(offset + 238, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_232, tvbrange, value)
    tvbrange = padded(offset + 239, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_233, tvbrange, value)
    tvbrange = padded(offset + 240, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_234, tvbrange, value)
    tvbrange = padded(offset + 241, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_235, tvbrange, value)
    tvbrange = padded(offset + 242, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_236, tvbrange, value)
    tvbrange = padded(offset + 243, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_237, tvbrange, value)
    tvbrange = padded(offset + 244, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_238, tvbrange, value)
    tvbrange = padded(offset + 245, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_239, tvbrange, value)
    tvbrange = padded(offset + 246, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_240, tvbrange, value)
    tvbrange = padded(offset + 247, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_241, tvbrange, value)
    tvbrange = padded(offset + 248, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_242, tvbrange, value)
    tvbrange = padded(offset + 249, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_243, tvbrange, value)
    tvbrange = padded(offset + 250, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_244, tvbrange, value)
    tvbrange = padded(offset + 251, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_245, tvbrange, value)
    tvbrange = padded(offset + 252, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_246, tvbrange, value)
    tvbrange = padded(offset + 253, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_247, tvbrange, value)
    tvbrange = padded(offset + 254, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_DATA_ACKED_data_248, tvbrange, value)
end
-- dissect payload of message type LOGGING_ACK
function payload_fns.payload_268(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 4 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 4)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_ACK_target_system, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_ACK_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOGGING_ACK_sequence, tvbrange, value)
end
-- dissect payload of message type VIDEO_STREAM_INFORMATION
function payload_fns.payload_269(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 213 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 213)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VIDEO_STREAM_INFORMATION_stream_id, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VIDEO_STREAM_INFORMATION_count, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VIDEO_STREAM_INFORMATION_type, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VIDEO_STREAM_INFORMATION_flags, tvbrange, value)
    dissect_flags_VIDEO_STREAM_STATUS_FLAGS(subtree, "VIDEO_STREAM_INFORMATION_flags", tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VIDEO_STREAM_INFORMATION_framerate, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VIDEO_STREAM_INFORMATION_resolution_h, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VIDEO_STREAM_INFORMATION_resolution_v, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VIDEO_STREAM_INFORMATION_bitrate, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VIDEO_STREAM_INFORMATION_rotation, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VIDEO_STREAM_INFORMATION_hfov, tvbrange, value)
    tvbrange = padded(offset + 21, 32)
    value = tvbrange:string()
    subtree = tree:add_le(f.VIDEO_STREAM_INFORMATION_name, tvbrange, value)
    tvbrange = padded(offset + 53, 160)
    value = tvbrange:string()
    subtree = tree:add_le(f.VIDEO_STREAM_INFORMATION_uri, tvbrange, value)
end
-- dissect payload of message type VIDEO_STREAM_STATUS
function payload_fns.payload_270(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 19 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 19)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VIDEO_STREAM_STATUS_stream_id, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VIDEO_STREAM_STATUS_flags, tvbrange, value)
    dissect_flags_VIDEO_STREAM_STATUS_FLAGS(subtree, "VIDEO_STREAM_STATUS_flags", tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.VIDEO_STREAM_STATUS_framerate, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VIDEO_STREAM_STATUS_resolution_h, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VIDEO_STREAM_STATUS_resolution_v, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VIDEO_STREAM_STATUS_bitrate, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VIDEO_STREAM_STATUS_rotation, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.VIDEO_STREAM_STATUS_hfov, tvbrange, value)
end
-- dissect payload of message type CAMERA_FOV_STATUS
function payload_fns.payload_271(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 52 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 52)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_FOV_STATUS_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.CAMERA_FOV_STATUS_lat_camera, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.CAMERA_FOV_STATUS_lon_camera, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.CAMERA_FOV_STATUS_alt_camera, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.CAMERA_FOV_STATUS_lat_image, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.CAMERA_FOV_STATUS_lon_image, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.CAMERA_FOV_STATUS_alt_image, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_FOV_STATUS_q_0, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_FOV_STATUS_q_1, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_FOV_STATUS_q_2, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_FOV_STATUS_q_3, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_FOV_STATUS_hfov, tvbrange, value)
    tvbrange = padded(offset + 48, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_FOV_STATUS_vfov, tvbrange, value)
end
-- dissect payload of message type CAMERA_TRACKING_IMAGE_STATUS
function payload_fns.payload_275(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 31 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 31)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_TRACKING_IMAGE_STATUS_tracking_status, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_TRACKING_IMAGE_STATUS_tracking_mode, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_TRACKING_IMAGE_STATUS_target_data, tvbrange, value)
    dissect_flags_CAMERA_TRACKING_TARGET_DATA(subtree, "CAMERA_TRACKING_IMAGE_STATUS_target_data", tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_TRACKING_IMAGE_STATUS_point_x, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_TRACKING_IMAGE_STATUS_point_y, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_TRACKING_IMAGE_STATUS_radius, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_TRACKING_IMAGE_STATUS_rec_top_x, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_TRACKING_IMAGE_STATUS_rec_top_y, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_TRACKING_IMAGE_STATUS_rec_bottom_x, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_TRACKING_IMAGE_STATUS_rec_bottom_y, tvbrange, value)
end
-- dissect payload of message type CAMERA_TRACKING_GEO_STATUS
function payload_fns.payload_276(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 49 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 49)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_tracking_status, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_lat, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_lon, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_alt, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_h_acc, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_v_acc, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_vel_n, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_vel_e, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_vel_d, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_vel_acc, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_dist, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_hdg, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.CAMERA_TRACKING_GEO_STATUS_hdg_acc, tvbrange, value)
end
-- dissect payload of message type GIMBAL_MANAGER_INFORMATION
function payload_fns.payload_280(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 33 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 33)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_MANAGER_INFORMATION_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_MANAGER_INFORMATION_cap_flags, tvbrange, value)
    dissect_flags_GIMBAL_MANAGER_CAP_FLAGS(subtree, "GIMBAL_MANAGER_INFORMATION_cap_flags", tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_MANAGER_INFORMATION_gimbal_device_id, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_MANAGER_INFORMATION_roll_min, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_MANAGER_INFORMATION_roll_max, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_MANAGER_INFORMATION_pitch_min, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_MANAGER_INFORMATION_pitch_max, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_MANAGER_INFORMATION_yaw_min, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_MANAGER_INFORMATION_yaw_max, tvbrange, value)
end
-- dissect payload of message type GIMBAL_MANAGER_STATUS
function payload_fns.payload_281(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 13 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 13)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_MANAGER_STATUS_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_MANAGER_STATUS_flags, tvbrange, value)
    dissect_flags_GIMBAL_MANAGER_FLAGS(subtree, "GIMBAL_MANAGER_STATUS_flags", tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_MANAGER_STATUS_gimbal_device_id, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_MANAGER_STATUS_primary_control_sysid, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_MANAGER_STATUS_primary_control_compid, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_MANAGER_STATUS_secondary_control_sysid, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_MANAGER_STATUS_secondary_control_compid, tvbrange, value)
end
-- dissect payload of message type GIMBAL_DEVICE_INFORMATION
function payload_fns.payload_283(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 144 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 144)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 48, 32)
    value = tvbrange:string()
    subtree = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_vendor_name, tvbrange, value)
    tvbrange = padded(offset + 80, 32)
    value = tvbrange:string()
    subtree = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_model_name, tvbrange, value)
    tvbrange = padded(offset + 112, 32)
    value = tvbrange:string()
    subtree = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_custom_name, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_firmware_version, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_hardware_version, tvbrange, value)
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_uid, tvbrange, value)
    tvbrange = padded(offset + 44, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_cap_flags, tvbrange, value)
    dissect_flags_GIMBAL_DEVICE_CAP_FLAGS(subtree, "GIMBAL_DEVICE_INFORMATION_cap_flags", tvbrange, value)
    tvbrange = padded(offset + 46, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_custom_cap_flags, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_roll_min, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_roll_max, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_pitch_min, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_pitch_max, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_yaw_min, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_DEVICE_INFORMATION_yaw_max, tvbrange, value)
end
-- dissect payload of message type GIMBAL_DEVICE_SET_ATTITUDE
function payload_fns.payload_284(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 32 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 32)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_DEVICE_SET_ATTITUDE_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_DEVICE_SET_ATTITUDE_target_component, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_DEVICE_SET_ATTITUDE_flags, tvbrange, value)
    dissect_flags_GIMBAL_DEVICE_FLAGS(subtree, "GIMBAL_DEVICE_SET_ATTITUDE_flags", tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_DEVICE_SET_ATTITUDE_q_0, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_DEVICE_SET_ATTITUDE_q_1, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_DEVICE_SET_ATTITUDE_q_2, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_DEVICE_SET_ATTITUDE_q_3, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_DEVICE_SET_ATTITUDE_angular_velocity_x, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_DEVICE_SET_ATTITUDE_angular_velocity_y, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_DEVICE_SET_ATTITUDE_angular_velocity_z, tvbrange, value)
end
-- dissect payload of message type GIMBAL_DEVICE_ATTITUDE_STATUS
function payload_fns.payload_285(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 40 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 40)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_target_system, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_time_boot_ms, tvbrange, value)
    tvbrange = padded(offset + 36, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_flags, tvbrange, value)
    dissect_flags_GIMBAL_DEVICE_FLAGS(subtree, "GIMBAL_DEVICE_ATTITUDE_STATUS_flags", tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_q_0, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_q_1, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_q_2, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_q_3, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_angular_velocity_x, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_angular_velocity_y, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_angular_velocity_z, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags, tvbrange, value)
    dissect_flags_GIMBAL_DEVICE_ERROR_FLAGS(subtree, "GIMBAL_DEVICE_ATTITUDE_STATUS_failure_flags", tvbrange, value)
end
-- dissect payload of message type AUTOPILOT_STATE_FOR_GIMBAL_DEVICE
function payload_fns.payload_286(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 53 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 53)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_target_system, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_time_boot_us, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_0, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_1, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_2, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_3, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_q_estimated_delay_us, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_vx, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_vy, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_vz, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_v_estimated_delay_us, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_feed_forward_angular_velocity_z, tvbrange, value)
    tvbrange = padded(offset + 48, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status, tvbrange, value)
    dissect_flags_ESTIMATOR_STATUS_FLAGS(subtree, "AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_estimator_status", tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_landed_state, tvbrange, value)
end
-- dissect payload of message type GIMBAL_MANAGER_SET_ATTITUDE
function payload_fns.payload_282(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 35 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 35)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_MANAGER_SET_ATTITUDE_target_system, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_MANAGER_SET_ATTITUDE_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_MANAGER_SET_ATTITUDE_flags, tvbrange, value)
    dissect_flags_GIMBAL_MANAGER_FLAGS(subtree, "GIMBAL_MANAGER_SET_ATTITUDE_flags", tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_MANAGER_SET_ATTITUDE_gimbal_device_id, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_MANAGER_SET_ATTITUDE_q_0, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_MANAGER_SET_ATTITUDE_q_1, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_MANAGER_SET_ATTITUDE_q_2, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_MANAGER_SET_ATTITUDE_q_3, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_MANAGER_SET_ATTITUDE_angular_velocity_x, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_MANAGER_SET_ATTITUDE_angular_velocity_y, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_MANAGER_SET_ATTITUDE_angular_velocity_z, tvbrange, value)
end
-- dissect payload of message type GIMBAL_MANAGER_SET_PITCHYAW
function payload_fns.payload_287(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 23 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 23)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_MANAGER_SET_PITCHYAW_target_system, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_MANAGER_SET_PITCHYAW_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_MANAGER_SET_PITCHYAW_flags, tvbrange, value)
    dissect_flags_GIMBAL_MANAGER_FLAGS(subtree, "GIMBAL_MANAGER_SET_PITCHYAW_flags", tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GIMBAL_MANAGER_SET_PITCHYAW_gimbal_device_id, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_MANAGER_SET_PITCHYAW_pitch, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_MANAGER_SET_PITCHYAW_yaw, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_MANAGER_SET_PITCHYAW_pitch_rate, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GIMBAL_MANAGER_SET_PITCHYAW_yaw_rate, tvbrange, value)
end
-- dissect payload of message type WIFI_CONFIG_AP
function payload_fns.payload_299(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 96 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 96)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 32)
    value = tvbrange:string()
    subtree = tree:add_le(f.WIFI_CONFIG_AP_ssid, tvbrange, value)
    tvbrange = padded(offset + 32, 64)
    value = tvbrange:string()
    subtree = tree:add_le(f.WIFI_CONFIG_AP_password, tvbrange, value)
end
-- dissect payload of message type AIS_VESSEL
function payload_fns.payload_301(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 58 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 58)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AIS_VESSEL_MMSI, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.AIS_VESSEL_lat, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.AIS_VESSEL_lon, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AIS_VESSEL_COG, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AIS_VESSEL_heading, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AIS_VESSEL_velocity, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.AIS_VESSEL_turn_rate, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AIS_VESSEL_navigational_status, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AIS_VESSEL_type, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AIS_VESSEL_dimension_bow, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AIS_VESSEL_dimension_stern, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AIS_VESSEL_dimension_port, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AIS_VESSEL_dimension_starboard, tvbrange, value)
    tvbrange = padded(offset + 31, 7)
    value = tvbrange:string()
    subtree = tree:add_le(f.AIS_VESSEL_callsign, tvbrange, value)
    tvbrange = padded(offset + 38, 20)
    value = tvbrange:string()
    subtree = tree:add_le(f.AIS_VESSEL_name, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AIS_VESSEL_tslc, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.AIS_VESSEL_flags, tvbrange, value)
    dissect_flags_AIS_FLAGS(subtree, "AIS_VESSEL_flags", tvbrange, value)
end
-- dissect payload of message type UAVCAN_NODE_STATUS
function payload_fns.payload_310(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 17 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 17)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.UAVCAN_NODE_STATUS_time_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_STATUS_uptime_sec, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_STATUS_health, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_STATUS_mode, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_STATUS_sub_mode, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_STATUS_vendor_specific_status_code, tvbrange, value)
end
-- dissect payload of message type UAVCAN_NODE_INFO
function payload_fns.payload_311(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 116 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 116)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.UAVCAN_NODE_INFO_time_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_INFO_uptime_sec, tvbrange, value)
    tvbrange = padded(offset + 16, 80)
    value = tvbrange:string()
    subtree = tree:add_le(f.UAVCAN_NODE_INFO_name, tvbrange, value)
    tvbrange = padded(offset + 96, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_INFO_hw_version_major, tvbrange, value)
    tvbrange = padded(offset + 97, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_INFO_hw_version_minor, tvbrange, value)
    tvbrange = padded(offset + 98, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_0, tvbrange, value)
    tvbrange = padded(offset + 99, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_1, tvbrange, value)
    tvbrange = padded(offset + 100, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_2, tvbrange, value)
    tvbrange = padded(offset + 101, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_3, tvbrange, value)
    tvbrange = padded(offset + 102, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_4, tvbrange, value)
    tvbrange = padded(offset + 103, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_5, tvbrange, value)
    tvbrange = padded(offset + 104, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_6, tvbrange, value)
    tvbrange = padded(offset + 105, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_7, tvbrange, value)
    tvbrange = padded(offset + 106, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_8, tvbrange, value)
    tvbrange = padded(offset + 107, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_9, tvbrange, value)
    tvbrange = padded(offset + 108, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_10, tvbrange, value)
    tvbrange = padded(offset + 109, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_11, tvbrange, value)
    tvbrange = padded(offset + 110, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_12, tvbrange, value)
    tvbrange = padded(offset + 111, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_13, tvbrange, value)
    tvbrange = padded(offset + 112, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_14, tvbrange, value)
    tvbrange = padded(offset + 113, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_INFO_hw_unique_id_15, tvbrange, value)
    tvbrange = padded(offset + 114, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_INFO_sw_version_major, tvbrange, value)
    tvbrange = padded(offset + 115, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_INFO_sw_version_minor, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVCAN_NODE_INFO_sw_vcs_commit, tvbrange, value)
end
-- dissect payload of message type PARAM_EXT_REQUEST_READ
function payload_fns.payload_320(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 20 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 20)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PARAM_EXT_REQUEST_READ_target_system, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PARAM_EXT_REQUEST_READ_target_component, tvbrange, value)
    tvbrange = padded(offset + 4, 16)
    value = tvbrange:string()
    subtree = tree:add_le(f.PARAM_EXT_REQUEST_READ_param_id, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.PARAM_EXT_REQUEST_READ_param_index, tvbrange, value)
end
-- dissect payload of message type PARAM_EXT_REQUEST_LIST
function payload_fns.payload_321(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 2 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 2)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PARAM_EXT_REQUEST_LIST_target_system, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PARAM_EXT_REQUEST_LIST_target_component, tvbrange, value)
end
-- dissect payload of message type PARAM_EXT_VALUE
function payload_fns.payload_322(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 149 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 149)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 4, 16)
    value = tvbrange:string()
    subtree = tree:add_le(f.PARAM_EXT_VALUE_param_id, tvbrange, value)
    tvbrange = padded(offset + 20, 128)
    value = tvbrange:string()
    subtree = tree:add_le(f.PARAM_EXT_VALUE_param_value, tvbrange, value)
    tvbrange = padded(offset + 148, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PARAM_EXT_VALUE_param_type, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PARAM_EXT_VALUE_param_count, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PARAM_EXT_VALUE_param_index, tvbrange, value)
end
-- dissect payload of message type PARAM_EXT_SET
function payload_fns.payload_323(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 147 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 147)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PARAM_EXT_SET_target_system, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PARAM_EXT_SET_target_component, tvbrange, value)
    tvbrange = padded(offset + 2, 16)
    value = tvbrange:string()
    subtree = tree:add_le(f.PARAM_EXT_SET_param_id, tvbrange, value)
    tvbrange = padded(offset + 18, 128)
    value = tvbrange:string()
    subtree = tree:add_le(f.PARAM_EXT_SET_param_value, tvbrange, value)
    tvbrange = padded(offset + 146, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PARAM_EXT_SET_param_type, tvbrange, value)
end
-- dissect payload of message type PARAM_EXT_ACK
function payload_fns.payload_324(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 146 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 146)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 16)
    value = tvbrange:string()
    subtree = tree:add_le(f.PARAM_EXT_ACK_param_id, tvbrange, value)
    tvbrange = padded(offset + 16, 128)
    value = tvbrange:string()
    subtree = tree:add_le(f.PARAM_EXT_ACK_param_value, tvbrange, value)
    tvbrange = padded(offset + 144, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PARAM_EXT_ACK_param_type, tvbrange, value)
    tvbrange = padded(offset + 145, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.PARAM_EXT_ACK_param_result, tvbrange, value)
end
-- dissect payload of message type OBSTACLE_DISTANCE
function payload_fns.payload_330(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 167 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 167)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_time_usec, tvbrange, value)
    tvbrange = padded(offset + 156, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_sensor_type, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_0, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_1, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_2, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_3, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_4, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_5, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_6, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_7, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_8, tvbrange, value)
    tvbrange = padded(offset + 26, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_9, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_10, tvbrange, value)
    tvbrange = padded(offset + 30, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_11, tvbrange, value)
    tvbrange = padded(offset + 32, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_12, tvbrange, value)
    tvbrange = padded(offset + 34, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_13, tvbrange, value)
    tvbrange = padded(offset + 36, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_14, tvbrange, value)
    tvbrange = padded(offset + 38, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_15, tvbrange, value)
    tvbrange = padded(offset + 40, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_16, tvbrange, value)
    tvbrange = padded(offset + 42, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_17, tvbrange, value)
    tvbrange = padded(offset + 44, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_18, tvbrange, value)
    tvbrange = padded(offset + 46, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_19, tvbrange, value)
    tvbrange = padded(offset + 48, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_20, tvbrange, value)
    tvbrange = padded(offset + 50, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_21, tvbrange, value)
    tvbrange = padded(offset + 52, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_22, tvbrange, value)
    tvbrange = padded(offset + 54, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_23, tvbrange, value)
    tvbrange = padded(offset + 56, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_24, tvbrange, value)
    tvbrange = padded(offset + 58, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_25, tvbrange, value)
    tvbrange = padded(offset + 60, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_26, tvbrange, value)
    tvbrange = padded(offset + 62, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_27, tvbrange, value)
    tvbrange = padded(offset + 64, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_28, tvbrange, value)
    tvbrange = padded(offset + 66, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_29, tvbrange, value)
    tvbrange = padded(offset + 68, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_30, tvbrange, value)
    tvbrange = padded(offset + 70, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_31, tvbrange, value)
    tvbrange = padded(offset + 72, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_32, tvbrange, value)
    tvbrange = padded(offset + 74, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_33, tvbrange, value)
    tvbrange = padded(offset + 76, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_34, tvbrange, value)
    tvbrange = padded(offset + 78, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_35, tvbrange, value)
    tvbrange = padded(offset + 80, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_36, tvbrange, value)
    tvbrange = padded(offset + 82, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_37, tvbrange, value)
    tvbrange = padded(offset + 84, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_38, tvbrange, value)
    tvbrange = padded(offset + 86, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_39, tvbrange, value)
    tvbrange = padded(offset + 88, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_40, tvbrange, value)
    tvbrange = padded(offset + 90, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_41, tvbrange, value)
    tvbrange = padded(offset + 92, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_42, tvbrange, value)
    tvbrange = padded(offset + 94, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_43, tvbrange, value)
    tvbrange = padded(offset + 96, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_44, tvbrange, value)
    tvbrange = padded(offset + 98, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_45, tvbrange, value)
    tvbrange = padded(offset + 100, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_46, tvbrange, value)
    tvbrange = padded(offset + 102, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_47, tvbrange, value)
    tvbrange = padded(offset + 104, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_48, tvbrange, value)
    tvbrange = padded(offset + 106, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_49, tvbrange, value)
    tvbrange = padded(offset + 108, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_50, tvbrange, value)
    tvbrange = padded(offset + 110, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_51, tvbrange, value)
    tvbrange = padded(offset + 112, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_52, tvbrange, value)
    tvbrange = padded(offset + 114, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_53, tvbrange, value)
    tvbrange = padded(offset + 116, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_54, tvbrange, value)
    tvbrange = padded(offset + 118, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_55, tvbrange, value)
    tvbrange = padded(offset + 120, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_56, tvbrange, value)
    tvbrange = padded(offset + 122, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_57, tvbrange, value)
    tvbrange = padded(offset + 124, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_58, tvbrange, value)
    tvbrange = padded(offset + 126, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_59, tvbrange, value)
    tvbrange = padded(offset + 128, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_60, tvbrange, value)
    tvbrange = padded(offset + 130, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_61, tvbrange, value)
    tvbrange = padded(offset + 132, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_62, tvbrange, value)
    tvbrange = padded(offset + 134, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_63, tvbrange, value)
    tvbrange = padded(offset + 136, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_64, tvbrange, value)
    tvbrange = padded(offset + 138, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_65, tvbrange, value)
    tvbrange = padded(offset + 140, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_66, tvbrange, value)
    tvbrange = padded(offset + 142, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_67, tvbrange, value)
    tvbrange = padded(offset + 144, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_68, tvbrange, value)
    tvbrange = padded(offset + 146, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_69, tvbrange, value)
    tvbrange = padded(offset + 148, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_70, tvbrange, value)
    tvbrange = padded(offset + 150, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_distances_71, tvbrange, value)
    tvbrange = padded(offset + 157, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_increment, tvbrange, value)
    tvbrange = padded(offset + 152, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_min_distance, tvbrange, value)
    tvbrange = padded(offset + 154, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_max_distance, tvbrange, value)
    tvbrange = padded(offset + 158, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_increment_f, tvbrange, value)
    tvbrange = padded(offset + 162, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_angle_offset, tvbrange, value)
    tvbrange = padded(offset + 166, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OBSTACLE_DISTANCE_frame, tvbrange, value)
end
-- dissect payload of message type ODOMETRY
function payload_fns.payload_331(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 233 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 233)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.ODOMETRY_time_usec, tvbrange, value)
    tvbrange = padded(offset + 228, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ODOMETRY_frame_id, tvbrange, value)
    tvbrange = padded(offset + 229, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ODOMETRY_child_frame_id, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_x, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_y, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_z, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_q_0, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_q_1, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_q_2, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_q_3, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_vx, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_vy, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_vz, tvbrange, value)
    tvbrange = padded(offset + 48, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_rollspeed, tvbrange, value)
    tvbrange = padded(offset + 52, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_pitchspeed, tvbrange, value)
    tvbrange = padded(offset + 56, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_yawspeed, tvbrange, value)
    tvbrange = padded(offset + 60, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_pose_covariance_0, tvbrange, value)
    tvbrange = padded(offset + 64, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_pose_covariance_1, tvbrange, value)
    tvbrange = padded(offset + 68, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_pose_covariance_2, tvbrange, value)
    tvbrange = padded(offset + 72, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_pose_covariance_3, tvbrange, value)
    tvbrange = padded(offset + 76, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_pose_covariance_4, tvbrange, value)
    tvbrange = padded(offset + 80, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_pose_covariance_5, tvbrange, value)
    tvbrange = padded(offset + 84, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_pose_covariance_6, tvbrange, value)
    tvbrange = padded(offset + 88, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_pose_covariance_7, tvbrange, value)
    tvbrange = padded(offset + 92, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_pose_covariance_8, tvbrange, value)
    tvbrange = padded(offset + 96, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_pose_covariance_9, tvbrange, value)
    tvbrange = padded(offset + 100, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_pose_covariance_10, tvbrange, value)
    tvbrange = padded(offset + 104, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_pose_covariance_11, tvbrange, value)
    tvbrange = padded(offset + 108, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_pose_covariance_12, tvbrange, value)
    tvbrange = padded(offset + 112, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_pose_covariance_13, tvbrange, value)
    tvbrange = padded(offset + 116, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_pose_covariance_14, tvbrange, value)
    tvbrange = padded(offset + 120, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_pose_covariance_15, tvbrange, value)
    tvbrange = padded(offset + 124, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_pose_covariance_16, tvbrange, value)
    tvbrange = padded(offset + 128, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_pose_covariance_17, tvbrange, value)
    tvbrange = padded(offset + 132, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_pose_covariance_18, tvbrange, value)
    tvbrange = padded(offset + 136, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_pose_covariance_19, tvbrange, value)
    tvbrange = padded(offset + 140, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_pose_covariance_20, tvbrange, value)
    tvbrange = padded(offset + 144, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_velocity_covariance_0, tvbrange, value)
    tvbrange = padded(offset + 148, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_velocity_covariance_1, tvbrange, value)
    tvbrange = padded(offset + 152, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_velocity_covariance_2, tvbrange, value)
    tvbrange = padded(offset + 156, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_velocity_covariance_3, tvbrange, value)
    tvbrange = padded(offset + 160, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_velocity_covariance_4, tvbrange, value)
    tvbrange = padded(offset + 164, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_velocity_covariance_5, tvbrange, value)
    tvbrange = padded(offset + 168, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_velocity_covariance_6, tvbrange, value)
    tvbrange = padded(offset + 172, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_velocity_covariance_7, tvbrange, value)
    tvbrange = padded(offset + 176, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_velocity_covariance_8, tvbrange, value)
    tvbrange = padded(offset + 180, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_velocity_covariance_9, tvbrange, value)
    tvbrange = padded(offset + 184, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_velocity_covariance_10, tvbrange, value)
    tvbrange = padded(offset + 188, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_velocity_covariance_11, tvbrange, value)
    tvbrange = padded(offset + 192, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_velocity_covariance_12, tvbrange, value)
    tvbrange = padded(offset + 196, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_velocity_covariance_13, tvbrange, value)
    tvbrange = padded(offset + 200, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_velocity_covariance_14, tvbrange, value)
    tvbrange = padded(offset + 204, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_velocity_covariance_15, tvbrange, value)
    tvbrange = padded(offset + 208, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_velocity_covariance_16, tvbrange, value)
    tvbrange = padded(offset + 212, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_velocity_covariance_17, tvbrange, value)
    tvbrange = padded(offset + 216, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_velocity_covariance_18, tvbrange, value)
    tvbrange = padded(offset + 220, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_velocity_covariance_19, tvbrange, value)
    tvbrange = padded(offset + 224, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ODOMETRY_velocity_covariance_20, tvbrange, value)
    tvbrange = padded(offset + 230, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ODOMETRY_reset_counter, tvbrange, value)
    tvbrange = padded(offset + 231, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ODOMETRY_estimator_type, tvbrange, value)
    tvbrange = padded(offset + 232, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.ODOMETRY_quality, tvbrange, value)
end
-- dissect payload of message type ISBD_LINK_STATUS
function payload_fns.payload_335(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 24 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 24)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.ISBD_LINK_STATUS_timestamp, tvbrange, value)
    tvbrange = padded(offset + 8, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.ISBD_LINK_STATUS_last_heartbeat, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ISBD_LINK_STATUS_failed_sessions, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ISBD_LINK_STATUS_successful_sessions, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ISBD_LINK_STATUS_signal_quality, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ISBD_LINK_STATUS_ring_pending, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ISBD_LINK_STATUS_tx_session_pending, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ISBD_LINK_STATUS_rx_session_pending, tvbrange, value)
end
-- dissect payload of message type RAW_RPM
function payload_fns.payload_339(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 5 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 5)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.RAW_RPM_index, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.RAW_RPM_frequency, tvbrange, value)
end
-- dissect payload of message type UTM_GLOBAL_POSITION
function payload_fns.payload_340(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 70 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 70)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_time, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_0, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_1, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_2, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_3, tvbrange, value)
    tvbrange = padded(offset + 54, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_4, tvbrange, value)
    tvbrange = padded(offset + 55, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_5, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_6, tvbrange, value)
    tvbrange = padded(offset + 57, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_7, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_8, tvbrange, value)
    tvbrange = padded(offset + 59, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_9, tvbrange, value)
    tvbrange = padded(offset + 60, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_10, tvbrange, value)
    tvbrange = padded(offset + 61, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_11, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_12, tvbrange, value)
    tvbrange = padded(offset + 63, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_13, tvbrange, value)
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_14, tvbrange, value)
    tvbrange = padded(offset + 65, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_15, tvbrange, value)
    tvbrange = padded(offset + 66, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_16, tvbrange, value)
    tvbrange = padded(offset + 67, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_uas_id_17, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_lat, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_lon, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_alt, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_relative_alt, tvbrange, value)
    tvbrange = padded(offset + 36, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_vx, tvbrange, value)
    tvbrange = padded(offset + 38, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_vy, tvbrange, value)
    tvbrange = padded(offset + 40, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_vz, tvbrange, value)
    tvbrange = padded(offset + 42, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_h_acc, tvbrange, value)
    tvbrange = padded(offset + 44, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_v_acc, tvbrange, value)
    tvbrange = padded(offset + 46, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_vel_acc, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_next_lat, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_next_lon, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_next_alt, tvbrange, value)
    tvbrange = padded(offset + 48, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_update_rate, tvbrange, value)
    tvbrange = padded(offset + 68, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_flight_state, tvbrange, value)
    tvbrange = padded(offset + 69, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UTM_GLOBAL_POSITION_flags, tvbrange, value)
    dissect_flags_UTM_DATA_AVAIL_FLAGS(subtree, "UTM_GLOBAL_POSITION_flags", tvbrange, value)
end
-- dissect payload of message type DEBUG_FLOAT_ARRAY
function payload_fns.payload_350(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 252 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 252)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_time_usec, tvbrange, value)
    tvbrange = padded(offset + 10, 10)
    value = tvbrange:string()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_name, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_array_id, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_0, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_1, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_2, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_3, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_4, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_5, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_6, tvbrange, value)
    tvbrange = padded(offset + 48, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_7, tvbrange, value)
    tvbrange = padded(offset + 52, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_8, tvbrange, value)
    tvbrange = padded(offset + 56, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_9, tvbrange, value)
    tvbrange = padded(offset + 60, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_10, tvbrange, value)
    tvbrange = padded(offset + 64, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_11, tvbrange, value)
    tvbrange = padded(offset + 68, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_12, tvbrange, value)
    tvbrange = padded(offset + 72, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_13, tvbrange, value)
    tvbrange = padded(offset + 76, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_14, tvbrange, value)
    tvbrange = padded(offset + 80, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_15, tvbrange, value)
    tvbrange = padded(offset + 84, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_16, tvbrange, value)
    tvbrange = padded(offset + 88, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_17, tvbrange, value)
    tvbrange = padded(offset + 92, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_18, tvbrange, value)
    tvbrange = padded(offset + 96, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_19, tvbrange, value)
    tvbrange = padded(offset + 100, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_20, tvbrange, value)
    tvbrange = padded(offset + 104, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_21, tvbrange, value)
    tvbrange = padded(offset + 108, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_22, tvbrange, value)
    tvbrange = padded(offset + 112, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_23, tvbrange, value)
    tvbrange = padded(offset + 116, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_24, tvbrange, value)
    tvbrange = padded(offset + 120, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_25, tvbrange, value)
    tvbrange = padded(offset + 124, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_26, tvbrange, value)
    tvbrange = padded(offset + 128, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_27, tvbrange, value)
    tvbrange = padded(offset + 132, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_28, tvbrange, value)
    tvbrange = padded(offset + 136, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_29, tvbrange, value)
    tvbrange = padded(offset + 140, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_30, tvbrange, value)
    tvbrange = padded(offset + 144, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_31, tvbrange, value)
    tvbrange = padded(offset + 148, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_32, tvbrange, value)
    tvbrange = padded(offset + 152, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_33, tvbrange, value)
    tvbrange = padded(offset + 156, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_34, tvbrange, value)
    tvbrange = padded(offset + 160, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_35, tvbrange, value)
    tvbrange = padded(offset + 164, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_36, tvbrange, value)
    tvbrange = padded(offset + 168, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_37, tvbrange, value)
    tvbrange = padded(offset + 172, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_38, tvbrange, value)
    tvbrange = padded(offset + 176, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_39, tvbrange, value)
    tvbrange = padded(offset + 180, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_40, tvbrange, value)
    tvbrange = padded(offset + 184, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_41, tvbrange, value)
    tvbrange = padded(offset + 188, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_42, tvbrange, value)
    tvbrange = padded(offset + 192, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_43, tvbrange, value)
    tvbrange = padded(offset + 196, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_44, tvbrange, value)
    tvbrange = padded(offset + 200, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_45, tvbrange, value)
    tvbrange = padded(offset + 204, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_46, tvbrange, value)
    tvbrange = padded(offset + 208, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_47, tvbrange, value)
    tvbrange = padded(offset + 212, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_48, tvbrange, value)
    tvbrange = padded(offset + 216, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_49, tvbrange, value)
    tvbrange = padded(offset + 220, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_50, tvbrange, value)
    tvbrange = padded(offset + 224, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_51, tvbrange, value)
    tvbrange = padded(offset + 228, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_52, tvbrange, value)
    tvbrange = padded(offset + 232, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_53, tvbrange, value)
    tvbrange = padded(offset + 236, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_54, tvbrange, value)
    tvbrange = padded(offset + 240, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_55, tvbrange, value)
    tvbrange = padded(offset + 244, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_56, tvbrange, value)
    tvbrange = padded(offset + 248, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.DEBUG_FLOAT_ARRAY_data_57, tvbrange, value)
end
-- dissect payload of message type SMART_BATTERY_INFO
function payload_fns.payload_370(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 109 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 109)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SMART_BATTERY_INFO_id, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SMART_BATTERY_INFO_battery_function, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SMART_BATTERY_INFO_type, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SMART_BATTERY_INFO_capacity_full_specification, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.SMART_BATTERY_INFO_capacity_full, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SMART_BATTERY_INFO_cycle_count, tvbrange, value)
    tvbrange = padded(offset + 21, 16)
    value = tvbrange:string()
    subtree = tree:add_le(f.SMART_BATTERY_INFO_serial_number, tvbrange, value)
    tvbrange = padded(offset + 37, 50)
    value = tvbrange:string()
    subtree = tree:add_le(f.SMART_BATTERY_INFO_device_name, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SMART_BATTERY_INFO_weight, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SMART_BATTERY_INFO_discharge_minimum_voltage, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SMART_BATTERY_INFO_charging_minimum_voltage, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SMART_BATTERY_INFO_resting_minimum_voltage, tvbrange, value)
    tvbrange = padded(offset + 87, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SMART_BATTERY_INFO_charging_maximum_voltage, tvbrange, value)
    tvbrange = padded(offset + 89, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SMART_BATTERY_INFO_cells_in_series, tvbrange, value)
    tvbrange = padded(offset + 90, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SMART_BATTERY_INFO_discharge_maximum_current, tvbrange, value)
    tvbrange = padded(offset + 94, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.SMART_BATTERY_INFO_discharge_maximum_burst_current, tvbrange, value)
    tvbrange = padded(offset + 98, 11)
    value = tvbrange:string()
    subtree = tree:add_le(f.SMART_BATTERY_INFO_manufacture_date, tvbrange, value)
end
-- dissect payload of message type GENERATOR_STATUS
function payload_fns.payload_373(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 42 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 42)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.GENERATOR_STATUS_status, tvbrange, value)
    dissect_flags_MAV_GENERATOR_STATUS_FLAG(subtree, "GENERATOR_STATUS_status", tvbrange, value)
    tvbrange = padded(offset + 36, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GENERATOR_STATUS_generator_speed, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GENERATOR_STATUS_battery_current, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GENERATOR_STATUS_load_current, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GENERATOR_STATUS_power_generated, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GENERATOR_STATUS_bus_voltage, tvbrange, value)
    tvbrange = padded(offset + 38, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GENERATOR_STATUS_rectifier_temperature, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.GENERATOR_STATUS_bat_current_setpoint, tvbrange, value)
    tvbrange = padded(offset + 40, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GENERATOR_STATUS_generator_temperature, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.GENERATOR_STATUS_runtime, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.GENERATOR_STATUS_time_until_maintenance, tvbrange, value)
end
-- dissect payload of message type ACTUATOR_OUTPUT_STATUS
function payload_fns.payload_375(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 140 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 140)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_time_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_active, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_0, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_1, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_2, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_3, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_4, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_5, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_6, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_7, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_8, tvbrange, value)
    tvbrange = padded(offset + 48, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_9, tvbrange, value)
    tvbrange = padded(offset + 52, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_10, tvbrange, value)
    tvbrange = padded(offset + 56, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_11, tvbrange, value)
    tvbrange = padded(offset + 60, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_12, tvbrange, value)
    tvbrange = padded(offset + 64, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_13, tvbrange, value)
    tvbrange = padded(offset + 68, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_14, tvbrange, value)
    tvbrange = padded(offset + 72, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_15, tvbrange, value)
    tvbrange = padded(offset + 76, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_16, tvbrange, value)
    tvbrange = padded(offset + 80, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_17, tvbrange, value)
    tvbrange = padded(offset + 84, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_18, tvbrange, value)
    tvbrange = padded(offset + 88, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_19, tvbrange, value)
    tvbrange = padded(offset + 92, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_20, tvbrange, value)
    tvbrange = padded(offset + 96, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_21, tvbrange, value)
    tvbrange = padded(offset + 100, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_22, tvbrange, value)
    tvbrange = padded(offset + 104, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_23, tvbrange, value)
    tvbrange = padded(offset + 108, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_24, tvbrange, value)
    tvbrange = padded(offset + 112, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_25, tvbrange, value)
    tvbrange = padded(offset + 116, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_26, tvbrange, value)
    tvbrange = padded(offset + 120, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_27, tvbrange, value)
    tvbrange = padded(offset + 124, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_28, tvbrange, value)
    tvbrange = padded(offset + 128, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_29, tvbrange, value)
    tvbrange = padded(offset + 132, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_30, tvbrange, value)
    tvbrange = padded(offset + 136, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ACTUATOR_OUTPUT_STATUS_actuator_31, tvbrange, value)
end
-- dissect payload of message type TUNNEL
function payload_fns.payload_385(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 133 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 133)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_target_system, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_type, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_length, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_0, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_1, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_2, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_3, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_4, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_5, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_6, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_7, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_8, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_9, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_10, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_11, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_12, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_13, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_14, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_15, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_16, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_17, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_18, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_19, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_20, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_21, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_22, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_23, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_24, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_25, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_26, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_27, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_28, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_29, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_30, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_31, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_32, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_33, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_34, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_35, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_36, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_37, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_38, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_39, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_40, tvbrange, value)
    tvbrange = padded(offset + 46, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_41, tvbrange, value)
    tvbrange = padded(offset + 47, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_42, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_43, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_44, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_45, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_46, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_47, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_48, tvbrange, value)
    tvbrange = padded(offset + 54, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_49, tvbrange, value)
    tvbrange = padded(offset + 55, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_50, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_51, tvbrange, value)
    tvbrange = padded(offset + 57, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_52, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_53, tvbrange, value)
    tvbrange = padded(offset + 59, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_54, tvbrange, value)
    tvbrange = padded(offset + 60, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_55, tvbrange, value)
    tvbrange = padded(offset + 61, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_56, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_57, tvbrange, value)
    tvbrange = padded(offset + 63, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_58, tvbrange, value)
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_59, tvbrange, value)
    tvbrange = padded(offset + 65, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_60, tvbrange, value)
    tvbrange = padded(offset + 66, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_61, tvbrange, value)
    tvbrange = padded(offset + 67, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_62, tvbrange, value)
    tvbrange = padded(offset + 68, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_63, tvbrange, value)
    tvbrange = padded(offset + 69, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_64, tvbrange, value)
    tvbrange = padded(offset + 70, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_65, tvbrange, value)
    tvbrange = padded(offset + 71, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_66, tvbrange, value)
    tvbrange = padded(offset + 72, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_67, tvbrange, value)
    tvbrange = padded(offset + 73, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_68, tvbrange, value)
    tvbrange = padded(offset + 74, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_69, tvbrange, value)
    tvbrange = padded(offset + 75, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_70, tvbrange, value)
    tvbrange = padded(offset + 76, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_71, tvbrange, value)
    tvbrange = padded(offset + 77, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_72, tvbrange, value)
    tvbrange = padded(offset + 78, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_73, tvbrange, value)
    tvbrange = padded(offset + 79, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_74, tvbrange, value)
    tvbrange = padded(offset + 80, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_75, tvbrange, value)
    tvbrange = padded(offset + 81, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_76, tvbrange, value)
    tvbrange = padded(offset + 82, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_77, tvbrange, value)
    tvbrange = padded(offset + 83, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_78, tvbrange, value)
    tvbrange = padded(offset + 84, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_79, tvbrange, value)
    tvbrange = padded(offset + 85, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_80, tvbrange, value)
    tvbrange = padded(offset + 86, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_81, tvbrange, value)
    tvbrange = padded(offset + 87, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_82, tvbrange, value)
    tvbrange = padded(offset + 88, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_83, tvbrange, value)
    tvbrange = padded(offset + 89, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_84, tvbrange, value)
    tvbrange = padded(offset + 90, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_85, tvbrange, value)
    tvbrange = padded(offset + 91, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_86, tvbrange, value)
    tvbrange = padded(offset + 92, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_87, tvbrange, value)
    tvbrange = padded(offset + 93, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_88, tvbrange, value)
    tvbrange = padded(offset + 94, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_89, tvbrange, value)
    tvbrange = padded(offset + 95, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_90, tvbrange, value)
    tvbrange = padded(offset + 96, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_91, tvbrange, value)
    tvbrange = padded(offset + 97, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_92, tvbrange, value)
    tvbrange = padded(offset + 98, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_93, tvbrange, value)
    tvbrange = padded(offset + 99, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_94, tvbrange, value)
    tvbrange = padded(offset + 100, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_95, tvbrange, value)
    tvbrange = padded(offset + 101, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_96, tvbrange, value)
    tvbrange = padded(offset + 102, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_97, tvbrange, value)
    tvbrange = padded(offset + 103, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_98, tvbrange, value)
    tvbrange = padded(offset + 104, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_99, tvbrange, value)
    tvbrange = padded(offset + 105, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_100, tvbrange, value)
    tvbrange = padded(offset + 106, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_101, tvbrange, value)
    tvbrange = padded(offset + 107, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_102, tvbrange, value)
    tvbrange = padded(offset + 108, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_103, tvbrange, value)
    tvbrange = padded(offset + 109, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_104, tvbrange, value)
    tvbrange = padded(offset + 110, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_105, tvbrange, value)
    tvbrange = padded(offset + 111, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_106, tvbrange, value)
    tvbrange = padded(offset + 112, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_107, tvbrange, value)
    tvbrange = padded(offset + 113, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_108, tvbrange, value)
    tvbrange = padded(offset + 114, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_109, tvbrange, value)
    tvbrange = padded(offset + 115, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_110, tvbrange, value)
    tvbrange = padded(offset + 116, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_111, tvbrange, value)
    tvbrange = padded(offset + 117, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_112, tvbrange, value)
    tvbrange = padded(offset + 118, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_113, tvbrange, value)
    tvbrange = padded(offset + 119, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_114, tvbrange, value)
    tvbrange = padded(offset + 120, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_115, tvbrange, value)
    tvbrange = padded(offset + 121, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_116, tvbrange, value)
    tvbrange = padded(offset + 122, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_117, tvbrange, value)
    tvbrange = padded(offset + 123, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_118, tvbrange, value)
    tvbrange = padded(offset + 124, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_119, tvbrange, value)
    tvbrange = padded(offset + 125, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_120, tvbrange, value)
    tvbrange = padded(offset + 126, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_121, tvbrange, value)
    tvbrange = padded(offset + 127, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_122, tvbrange, value)
    tvbrange = padded(offset + 128, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_123, tvbrange, value)
    tvbrange = padded(offset + 129, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_124, tvbrange, value)
    tvbrange = padded(offset + 130, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_125, tvbrange, value)
    tvbrange = padded(offset + 131, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_126, tvbrange, value)
    tvbrange = padded(offset + 132, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.TUNNEL_payload_127, tvbrange, value)
end
-- dissect payload of message type CAN_FRAME
function payload_fns.payload_386(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 16 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 16)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FRAME_target_system, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FRAME_target_component, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FRAME_bus, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FRAME_len, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FRAME_id, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FRAME_data_0, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FRAME_data_1, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FRAME_data_2, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FRAME_data_3, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FRAME_data_4, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FRAME_data_5, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FRAME_data_6, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FRAME_data_7, tvbrange, value)
end
-- dissect payload of message type CANFD_FRAME
function payload_fns.payload_387(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 72 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 72)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_target_system, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_target_component, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_bus, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_len, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_id, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_0, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_1, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_2, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_3, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_4, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_5, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_6, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_7, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_8, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_9, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_10, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_11, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_12, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_13, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_14, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_15, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_16, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_17, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_18, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_19, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_20, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_21, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_22, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_23, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_24, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_25, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_26, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_27, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_28, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_29, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_30, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_31, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_32, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_33, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_34, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_35, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_36, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_37, tvbrange, value)
    tvbrange = padded(offset + 46, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_38, tvbrange, value)
    tvbrange = padded(offset + 47, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_39, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_40, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_41, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_42, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_43, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_44, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_45, tvbrange, value)
    tvbrange = padded(offset + 54, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_46, tvbrange, value)
    tvbrange = padded(offset + 55, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_47, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_48, tvbrange, value)
    tvbrange = padded(offset + 57, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_49, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_50, tvbrange, value)
    tvbrange = padded(offset + 59, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_51, tvbrange, value)
    tvbrange = padded(offset + 60, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_52, tvbrange, value)
    tvbrange = padded(offset + 61, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_53, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_54, tvbrange, value)
    tvbrange = padded(offset + 63, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_55, tvbrange, value)
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_56, tvbrange, value)
    tvbrange = padded(offset + 65, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_57, tvbrange, value)
    tvbrange = padded(offset + 66, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_58, tvbrange, value)
    tvbrange = padded(offset + 67, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_59, tvbrange, value)
    tvbrange = padded(offset + 68, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_60, tvbrange, value)
    tvbrange = padded(offset + 69, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_61, tvbrange, value)
    tvbrange = padded(offset + 70, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_62, tvbrange, value)
    tvbrange = padded(offset + 71, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CANFD_FRAME_data_63, tvbrange, value)
end
-- dissect payload of message type CAN_FILTER_MODIFY
function payload_fns.payload_388(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 37 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 37)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FILTER_MODIFY_target_system, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FILTER_MODIFY_target_component, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FILTER_MODIFY_bus, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FILTER_MODIFY_operation, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FILTER_MODIFY_num_ids, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FILTER_MODIFY_ids_0, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FILTER_MODIFY_ids_1, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FILTER_MODIFY_ids_2, tvbrange, value)
    tvbrange = padded(offset + 6, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FILTER_MODIFY_ids_3, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FILTER_MODIFY_ids_4, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FILTER_MODIFY_ids_5, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FILTER_MODIFY_ids_6, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FILTER_MODIFY_ids_7, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FILTER_MODIFY_ids_8, tvbrange, value)
    tvbrange = padded(offset + 18, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FILTER_MODIFY_ids_9, tvbrange, value)
    tvbrange = padded(offset + 20, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FILTER_MODIFY_ids_10, tvbrange, value)
    tvbrange = padded(offset + 22, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FILTER_MODIFY_ids_11, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FILTER_MODIFY_ids_12, tvbrange, value)
    tvbrange = padded(offset + 26, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FILTER_MODIFY_ids_13, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FILTER_MODIFY_ids_14, tvbrange, value)
    tvbrange = padded(offset + 30, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CAN_FILTER_MODIFY_ids_15, tvbrange, value)
end
-- dissect payload of message type WHEEL_DISTANCE
function payload_fns.payload_9000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 137 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 137)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.WHEEL_DISTANCE_time_usec, tvbrange, value)
    tvbrange = padded(offset + 136, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.WHEEL_DISTANCE_count, tvbrange, value)
    tvbrange = padded(offset + 8, 8)
    value = tvbrange:le_double()
    subtree = tree:add_le(f.WHEEL_DISTANCE_distance_0, tvbrange, value)
    tvbrange = padded(offset + 16, 8)
    value = tvbrange:le_double()
    subtree = tree:add_le(f.WHEEL_DISTANCE_distance_1, tvbrange, value)
    tvbrange = padded(offset + 24, 8)
    value = tvbrange:le_double()
    subtree = tree:add_le(f.WHEEL_DISTANCE_distance_2, tvbrange, value)
    tvbrange = padded(offset + 32, 8)
    value = tvbrange:le_double()
    subtree = tree:add_le(f.WHEEL_DISTANCE_distance_3, tvbrange, value)
    tvbrange = padded(offset + 40, 8)
    value = tvbrange:le_double()
    subtree = tree:add_le(f.WHEEL_DISTANCE_distance_4, tvbrange, value)
    tvbrange = padded(offset + 48, 8)
    value = tvbrange:le_double()
    subtree = tree:add_le(f.WHEEL_DISTANCE_distance_5, tvbrange, value)
    tvbrange = padded(offset + 56, 8)
    value = tvbrange:le_double()
    subtree = tree:add_le(f.WHEEL_DISTANCE_distance_6, tvbrange, value)
    tvbrange = padded(offset + 64, 8)
    value = tvbrange:le_double()
    subtree = tree:add_le(f.WHEEL_DISTANCE_distance_7, tvbrange, value)
    tvbrange = padded(offset + 72, 8)
    value = tvbrange:le_double()
    subtree = tree:add_le(f.WHEEL_DISTANCE_distance_8, tvbrange, value)
    tvbrange = padded(offset + 80, 8)
    value = tvbrange:le_double()
    subtree = tree:add_le(f.WHEEL_DISTANCE_distance_9, tvbrange, value)
    tvbrange = padded(offset + 88, 8)
    value = tvbrange:le_double()
    subtree = tree:add_le(f.WHEEL_DISTANCE_distance_10, tvbrange, value)
    tvbrange = padded(offset + 96, 8)
    value = tvbrange:le_double()
    subtree = tree:add_le(f.WHEEL_DISTANCE_distance_11, tvbrange, value)
    tvbrange = padded(offset + 104, 8)
    value = tvbrange:le_double()
    subtree = tree:add_le(f.WHEEL_DISTANCE_distance_12, tvbrange, value)
    tvbrange = padded(offset + 112, 8)
    value = tvbrange:le_double()
    subtree = tree:add_le(f.WHEEL_DISTANCE_distance_13, tvbrange, value)
    tvbrange = padded(offset + 120, 8)
    value = tvbrange:le_double()
    subtree = tree:add_le(f.WHEEL_DISTANCE_distance_14, tvbrange, value)
    tvbrange = padded(offset + 128, 8)
    value = tvbrange:le_double()
    subtree = tree:add_le(f.WHEEL_DISTANCE_distance_15, tvbrange, value)
end
-- dissect payload of message type WINCH_STATUS
function payload_fns.payload_9005(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 34 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 34)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 8)
    value = tvbrange:le_uint64()
    subtree = tree:add_le(f.WINCH_STATUS_time_usec, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.WINCH_STATUS_line_length, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.WINCH_STATUS_speed, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.WINCH_STATUS_tension, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.WINCH_STATUS_voltage, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.WINCH_STATUS_current, tvbrange, value)
    tvbrange = padded(offset + 32, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.WINCH_STATUS_temperature, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.WINCH_STATUS_status, tvbrange, value)
    dissect_flags_MAV_WINCH_STATUS_FLAG(subtree, "WINCH_STATUS_status", tvbrange, value)
end
-- dissect payload of message type OPEN_DRONE_ID_BASIC_ID
function payload_fns.payload_12900(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 44 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 44)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_target_system, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_target_component, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_0, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_1, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_2, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_3, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_4, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_5, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_6, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_7, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_8, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_9, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_10, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_11, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_12, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_13, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_14, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_15, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_16, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_17, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_18, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_or_mac_19, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_id_type, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_ua_type, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_0, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_1, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_2, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_3, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_4, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_5, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_6, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_7, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_8, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_9, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_10, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_11, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_12, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_13, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_14, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_15, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_16, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_17, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_18, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_BASIC_ID_uas_id_19, tvbrange, value)
end
-- dissect payload of message type OPEN_DRONE_ID_LOCATION
function payload_fns.payload_12901(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 59 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 59)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_target_system, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_target_component, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_0, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_1, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_2, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_3, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_4, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_5, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_6, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_7, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_8, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_9, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_10, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_11, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_12, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_13, tvbrange, value)
    tvbrange = padded(offset + 46, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_14, tvbrange, value)
    tvbrange = padded(offset + 47, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_15, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_16, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_17, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_18, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_id_or_mac_19, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_status, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_direction, tvbrange, value)
    tvbrange = padded(offset + 26, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_speed_horizontal, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_speed_vertical, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_latitude, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_longitude, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_altitude_barometric, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_altitude_geodetic, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_height_reference, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_height, tvbrange, value)
    tvbrange = padded(offset + 54, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_horizontal_accuracy, tvbrange, value)
    tvbrange = padded(offset + 55, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_vertical_accuracy, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_barometer_accuracy, tvbrange, value)
    tvbrange = padded(offset + 57, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_speed_accuracy, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_timestamp, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_LOCATION_timestamp_accuracy, tvbrange, value)
end
-- dissect payload of message type OPEN_DRONE_ID_AUTHENTICATION
function payload_fns.payload_12902(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 53 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 53)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_target_system, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_target_component, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_0, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_1, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_2, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_3, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_4, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_5, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_6, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_7, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_8, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_9, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_10, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_11, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_12, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_13, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_14, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_15, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_16, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_17, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_18, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_id_or_mac_19, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_type, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_data_page, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_last_page_index, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_length, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_timestamp, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_0, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_1, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_2, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_3, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_4, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_5, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_6, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_7, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_8, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_9, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_10, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_11, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_12, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_13, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_14, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_15, tvbrange, value)
    tvbrange = padded(offset + 46, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_16, tvbrange, value)
    tvbrange = padded(offset + 47, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_17, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_18, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_19, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_20, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_21, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_AUTHENTICATION_authentication_data_22, tvbrange, value)
end
-- dissect payload of message type OPEN_DRONE_ID_SELF_ID
function payload_fns.payload_12903(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 46 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 46)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_target_system, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_target_component, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_0, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_1, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_2, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_3, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_4, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_5, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_6, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_7, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_8, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_9, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_10, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_11, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_12, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_13, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_14, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_15, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_16, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_17, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_18, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_id_or_mac_19, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_description_type, tvbrange, value)
    tvbrange = padded(offset + 23, 23)
    value = tvbrange:string()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SELF_ID_description, tvbrange, value)
end
-- dissect payload of message type OPEN_DRONE_ID_SYSTEM
function payload_fns.payload_12904(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 54 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 54)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_target_system, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_target_component, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_0, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_1, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_2, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_3, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_4, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_5, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_6, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_7, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_8, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_9, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_10, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_11, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_12, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_13, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_14, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_15, tvbrange, value)
    tvbrange = padded(offset + 46, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_16, tvbrange, value)
    tvbrange = padded(offset + 47, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_17, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_18, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_id_or_mac_19, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_operator_location_type, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_classification_type, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_operator_latitude, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_operator_longitude, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_area_count, tvbrange, value)
    tvbrange = padded(offset + 26, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_area_radius, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_area_ceiling, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_area_floor, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_category_eu, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_class_eu, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_operator_altitude_geo, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_timestamp, tvbrange, value)
end
-- dissect payload of message type OPEN_DRONE_ID_OPERATOR_ID
function payload_fns.payload_12905(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 43 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 43)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_target_system, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_target_component, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_0, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_1, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_2, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_3, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_4, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_5, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_6, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_7, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_8, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_9, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_10, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_11, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_12, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_13, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_14, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_15, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_16, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_17, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_18, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_id_or_mac_19, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_operator_id_type, tvbrange, value)
    tvbrange = padded(offset + 23, 20)
    value = tvbrange:string()
    subtree = tree:add_le(f.OPEN_DRONE_ID_OPERATOR_ID_operator_id, tvbrange, value)
end
-- dissect payload of message type OPEN_DRONE_ID_ARM_STATUS
function payload_fns.payload_12918(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 51 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 51)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_ARM_STATUS_status, tvbrange, value)
    tvbrange = padded(offset + 1, 50)
    value = tvbrange:string()
    subtree = tree:add_le(f.OPEN_DRONE_ID_ARM_STATUS_error, tvbrange, value)
end
-- dissect payload of message type OPEN_DRONE_ID_MESSAGE_PACK
function payload_fns.payload_12915(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 249 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 249)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_target_system, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_target_component, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_0, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_1, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_2, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_3, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_4, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_5, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_6, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_7, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_8, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_9, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_10, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_11, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_12, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_13, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_14, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_15, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_16, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_17, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_18, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_id_or_mac_19, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_single_message_size, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_msg_pack_size, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_0, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_1, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_2, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_3, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_4, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_5, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_6, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_7, tvbrange, value)
    tvbrange = padded(offset + 32, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_8, tvbrange, value)
    tvbrange = padded(offset + 33, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_9, tvbrange, value)
    tvbrange = padded(offset + 34, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_10, tvbrange, value)
    tvbrange = padded(offset + 35, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_11, tvbrange, value)
    tvbrange = padded(offset + 36, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_12, tvbrange, value)
    tvbrange = padded(offset + 37, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_13, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_14, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_15, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_16, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_17, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_18, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_19, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_20, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_21, tvbrange, value)
    tvbrange = padded(offset + 46, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_22, tvbrange, value)
    tvbrange = padded(offset + 47, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_23, tvbrange, value)
    tvbrange = padded(offset + 48, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_24, tvbrange, value)
    tvbrange = padded(offset + 49, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_25, tvbrange, value)
    tvbrange = padded(offset + 50, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_26, tvbrange, value)
    tvbrange = padded(offset + 51, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_27, tvbrange, value)
    tvbrange = padded(offset + 52, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_28, tvbrange, value)
    tvbrange = padded(offset + 53, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_29, tvbrange, value)
    tvbrange = padded(offset + 54, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_30, tvbrange, value)
    tvbrange = padded(offset + 55, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_31, tvbrange, value)
    tvbrange = padded(offset + 56, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_32, tvbrange, value)
    tvbrange = padded(offset + 57, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_33, tvbrange, value)
    tvbrange = padded(offset + 58, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_34, tvbrange, value)
    tvbrange = padded(offset + 59, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_35, tvbrange, value)
    tvbrange = padded(offset + 60, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_36, tvbrange, value)
    tvbrange = padded(offset + 61, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_37, tvbrange, value)
    tvbrange = padded(offset + 62, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_38, tvbrange, value)
    tvbrange = padded(offset + 63, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_39, tvbrange, value)
    tvbrange = padded(offset + 64, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_40, tvbrange, value)
    tvbrange = padded(offset + 65, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_41, tvbrange, value)
    tvbrange = padded(offset + 66, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_42, tvbrange, value)
    tvbrange = padded(offset + 67, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_43, tvbrange, value)
    tvbrange = padded(offset + 68, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_44, tvbrange, value)
    tvbrange = padded(offset + 69, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_45, tvbrange, value)
    tvbrange = padded(offset + 70, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_46, tvbrange, value)
    tvbrange = padded(offset + 71, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_47, tvbrange, value)
    tvbrange = padded(offset + 72, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_48, tvbrange, value)
    tvbrange = padded(offset + 73, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_49, tvbrange, value)
    tvbrange = padded(offset + 74, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_50, tvbrange, value)
    tvbrange = padded(offset + 75, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_51, tvbrange, value)
    tvbrange = padded(offset + 76, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_52, tvbrange, value)
    tvbrange = padded(offset + 77, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_53, tvbrange, value)
    tvbrange = padded(offset + 78, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_54, tvbrange, value)
    tvbrange = padded(offset + 79, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_55, tvbrange, value)
    tvbrange = padded(offset + 80, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_56, tvbrange, value)
    tvbrange = padded(offset + 81, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_57, tvbrange, value)
    tvbrange = padded(offset + 82, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_58, tvbrange, value)
    tvbrange = padded(offset + 83, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_59, tvbrange, value)
    tvbrange = padded(offset + 84, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_60, tvbrange, value)
    tvbrange = padded(offset + 85, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_61, tvbrange, value)
    tvbrange = padded(offset + 86, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_62, tvbrange, value)
    tvbrange = padded(offset + 87, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_63, tvbrange, value)
    tvbrange = padded(offset + 88, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_64, tvbrange, value)
    tvbrange = padded(offset + 89, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_65, tvbrange, value)
    tvbrange = padded(offset + 90, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_66, tvbrange, value)
    tvbrange = padded(offset + 91, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_67, tvbrange, value)
    tvbrange = padded(offset + 92, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_68, tvbrange, value)
    tvbrange = padded(offset + 93, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_69, tvbrange, value)
    tvbrange = padded(offset + 94, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_70, tvbrange, value)
    tvbrange = padded(offset + 95, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_71, tvbrange, value)
    tvbrange = padded(offset + 96, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_72, tvbrange, value)
    tvbrange = padded(offset + 97, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_73, tvbrange, value)
    tvbrange = padded(offset + 98, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_74, tvbrange, value)
    tvbrange = padded(offset + 99, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_75, tvbrange, value)
    tvbrange = padded(offset + 100, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_76, tvbrange, value)
    tvbrange = padded(offset + 101, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_77, tvbrange, value)
    tvbrange = padded(offset + 102, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_78, tvbrange, value)
    tvbrange = padded(offset + 103, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_79, tvbrange, value)
    tvbrange = padded(offset + 104, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_80, tvbrange, value)
    tvbrange = padded(offset + 105, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_81, tvbrange, value)
    tvbrange = padded(offset + 106, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_82, tvbrange, value)
    tvbrange = padded(offset + 107, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_83, tvbrange, value)
    tvbrange = padded(offset + 108, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_84, tvbrange, value)
    tvbrange = padded(offset + 109, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_85, tvbrange, value)
    tvbrange = padded(offset + 110, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_86, tvbrange, value)
    tvbrange = padded(offset + 111, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_87, tvbrange, value)
    tvbrange = padded(offset + 112, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_88, tvbrange, value)
    tvbrange = padded(offset + 113, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_89, tvbrange, value)
    tvbrange = padded(offset + 114, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_90, tvbrange, value)
    tvbrange = padded(offset + 115, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_91, tvbrange, value)
    tvbrange = padded(offset + 116, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_92, tvbrange, value)
    tvbrange = padded(offset + 117, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_93, tvbrange, value)
    tvbrange = padded(offset + 118, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_94, tvbrange, value)
    tvbrange = padded(offset + 119, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_95, tvbrange, value)
    tvbrange = padded(offset + 120, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_96, tvbrange, value)
    tvbrange = padded(offset + 121, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_97, tvbrange, value)
    tvbrange = padded(offset + 122, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_98, tvbrange, value)
    tvbrange = padded(offset + 123, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_99, tvbrange, value)
    tvbrange = padded(offset + 124, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_100, tvbrange, value)
    tvbrange = padded(offset + 125, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_101, tvbrange, value)
    tvbrange = padded(offset + 126, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_102, tvbrange, value)
    tvbrange = padded(offset + 127, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_103, tvbrange, value)
    tvbrange = padded(offset + 128, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_104, tvbrange, value)
    tvbrange = padded(offset + 129, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_105, tvbrange, value)
    tvbrange = padded(offset + 130, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_106, tvbrange, value)
    tvbrange = padded(offset + 131, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_107, tvbrange, value)
    tvbrange = padded(offset + 132, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_108, tvbrange, value)
    tvbrange = padded(offset + 133, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_109, tvbrange, value)
    tvbrange = padded(offset + 134, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_110, tvbrange, value)
    tvbrange = padded(offset + 135, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_111, tvbrange, value)
    tvbrange = padded(offset + 136, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_112, tvbrange, value)
    tvbrange = padded(offset + 137, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_113, tvbrange, value)
    tvbrange = padded(offset + 138, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_114, tvbrange, value)
    tvbrange = padded(offset + 139, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_115, tvbrange, value)
    tvbrange = padded(offset + 140, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_116, tvbrange, value)
    tvbrange = padded(offset + 141, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_117, tvbrange, value)
    tvbrange = padded(offset + 142, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_118, tvbrange, value)
    tvbrange = padded(offset + 143, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_119, tvbrange, value)
    tvbrange = padded(offset + 144, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_120, tvbrange, value)
    tvbrange = padded(offset + 145, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_121, tvbrange, value)
    tvbrange = padded(offset + 146, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_122, tvbrange, value)
    tvbrange = padded(offset + 147, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_123, tvbrange, value)
    tvbrange = padded(offset + 148, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_124, tvbrange, value)
    tvbrange = padded(offset + 149, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_125, tvbrange, value)
    tvbrange = padded(offset + 150, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_126, tvbrange, value)
    tvbrange = padded(offset + 151, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_127, tvbrange, value)
    tvbrange = padded(offset + 152, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_128, tvbrange, value)
    tvbrange = padded(offset + 153, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_129, tvbrange, value)
    tvbrange = padded(offset + 154, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_130, tvbrange, value)
    tvbrange = padded(offset + 155, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_131, tvbrange, value)
    tvbrange = padded(offset + 156, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_132, tvbrange, value)
    tvbrange = padded(offset + 157, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_133, tvbrange, value)
    tvbrange = padded(offset + 158, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_134, tvbrange, value)
    tvbrange = padded(offset + 159, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_135, tvbrange, value)
    tvbrange = padded(offset + 160, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_136, tvbrange, value)
    tvbrange = padded(offset + 161, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_137, tvbrange, value)
    tvbrange = padded(offset + 162, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_138, tvbrange, value)
    tvbrange = padded(offset + 163, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_139, tvbrange, value)
    tvbrange = padded(offset + 164, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_140, tvbrange, value)
    tvbrange = padded(offset + 165, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_141, tvbrange, value)
    tvbrange = padded(offset + 166, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_142, tvbrange, value)
    tvbrange = padded(offset + 167, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_143, tvbrange, value)
    tvbrange = padded(offset + 168, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_144, tvbrange, value)
    tvbrange = padded(offset + 169, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_145, tvbrange, value)
    tvbrange = padded(offset + 170, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_146, tvbrange, value)
    tvbrange = padded(offset + 171, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_147, tvbrange, value)
    tvbrange = padded(offset + 172, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_148, tvbrange, value)
    tvbrange = padded(offset + 173, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_149, tvbrange, value)
    tvbrange = padded(offset + 174, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_150, tvbrange, value)
    tvbrange = padded(offset + 175, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_151, tvbrange, value)
    tvbrange = padded(offset + 176, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_152, tvbrange, value)
    tvbrange = padded(offset + 177, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_153, tvbrange, value)
    tvbrange = padded(offset + 178, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_154, tvbrange, value)
    tvbrange = padded(offset + 179, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_155, tvbrange, value)
    tvbrange = padded(offset + 180, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_156, tvbrange, value)
    tvbrange = padded(offset + 181, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_157, tvbrange, value)
    tvbrange = padded(offset + 182, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_158, tvbrange, value)
    tvbrange = padded(offset + 183, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_159, tvbrange, value)
    tvbrange = padded(offset + 184, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_160, tvbrange, value)
    tvbrange = padded(offset + 185, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_161, tvbrange, value)
    tvbrange = padded(offset + 186, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_162, tvbrange, value)
    tvbrange = padded(offset + 187, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_163, tvbrange, value)
    tvbrange = padded(offset + 188, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_164, tvbrange, value)
    tvbrange = padded(offset + 189, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_165, tvbrange, value)
    tvbrange = padded(offset + 190, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_166, tvbrange, value)
    tvbrange = padded(offset + 191, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_167, tvbrange, value)
    tvbrange = padded(offset + 192, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_168, tvbrange, value)
    tvbrange = padded(offset + 193, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_169, tvbrange, value)
    tvbrange = padded(offset + 194, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_170, tvbrange, value)
    tvbrange = padded(offset + 195, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_171, tvbrange, value)
    tvbrange = padded(offset + 196, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_172, tvbrange, value)
    tvbrange = padded(offset + 197, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_173, tvbrange, value)
    tvbrange = padded(offset + 198, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_174, tvbrange, value)
    tvbrange = padded(offset + 199, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_175, tvbrange, value)
    tvbrange = padded(offset + 200, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_176, tvbrange, value)
    tvbrange = padded(offset + 201, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_177, tvbrange, value)
    tvbrange = padded(offset + 202, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_178, tvbrange, value)
    tvbrange = padded(offset + 203, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_179, tvbrange, value)
    tvbrange = padded(offset + 204, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_180, tvbrange, value)
    tvbrange = padded(offset + 205, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_181, tvbrange, value)
    tvbrange = padded(offset + 206, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_182, tvbrange, value)
    tvbrange = padded(offset + 207, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_183, tvbrange, value)
    tvbrange = padded(offset + 208, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_184, tvbrange, value)
    tvbrange = padded(offset + 209, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_185, tvbrange, value)
    tvbrange = padded(offset + 210, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_186, tvbrange, value)
    tvbrange = padded(offset + 211, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_187, tvbrange, value)
    tvbrange = padded(offset + 212, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_188, tvbrange, value)
    tvbrange = padded(offset + 213, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_189, tvbrange, value)
    tvbrange = padded(offset + 214, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_190, tvbrange, value)
    tvbrange = padded(offset + 215, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_191, tvbrange, value)
    tvbrange = padded(offset + 216, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_192, tvbrange, value)
    tvbrange = padded(offset + 217, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_193, tvbrange, value)
    tvbrange = padded(offset + 218, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_194, tvbrange, value)
    tvbrange = padded(offset + 219, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_195, tvbrange, value)
    tvbrange = padded(offset + 220, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_196, tvbrange, value)
    tvbrange = padded(offset + 221, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_197, tvbrange, value)
    tvbrange = padded(offset + 222, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_198, tvbrange, value)
    tvbrange = padded(offset + 223, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_199, tvbrange, value)
    tvbrange = padded(offset + 224, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_200, tvbrange, value)
    tvbrange = padded(offset + 225, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_201, tvbrange, value)
    tvbrange = padded(offset + 226, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_202, tvbrange, value)
    tvbrange = padded(offset + 227, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_203, tvbrange, value)
    tvbrange = padded(offset + 228, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_204, tvbrange, value)
    tvbrange = padded(offset + 229, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_205, tvbrange, value)
    tvbrange = padded(offset + 230, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_206, tvbrange, value)
    tvbrange = padded(offset + 231, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_207, tvbrange, value)
    tvbrange = padded(offset + 232, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_208, tvbrange, value)
    tvbrange = padded(offset + 233, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_209, tvbrange, value)
    tvbrange = padded(offset + 234, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_210, tvbrange, value)
    tvbrange = padded(offset + 235, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_211, tvbrange, value)
    tvbrange = padded(offset + 236, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_212, tvbrange, value)
    tvbrange = padded(offset + 237, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_213, tvbrange, value)
    tvbrange = padded(offset + 238, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_214, tvbrange, value)
    tvbrange = padded(offset + 239, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_215, tvbrange, value)
    tvbrange = padded(offset + 240, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_216, tvbrange, value)
    tvbrange = padded(offset + 241, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_217, tvbrange, value)
    tvbrange = padded(offset + 242, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_218, tvbrange, value)
    tvbrange = padded(offset + 243, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_219, tvbrange, value)
    tvbrange = padded(offset + 244, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_220, tvbrange, value)
    tvbrange = padded(offset + 245, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_221, tvbrange, value)
    tvbrange = padded(offset + 246, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_222, tvbrange, value)
    tvbrange = padded(offset + 247, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_223, tvbrange, value)
    tvbrange = padded(offset + 248, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_MESSAGE_PACK_messages_224, tvbrange, value)
end
-- dissect payload of message type OPEN_DRONE_ID_SYSTEM_UPDATE
function payload_fns.payload_12919(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 18 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 18)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_UPDATE_target_system, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_UPDATE_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_UPDATE_operator_latitude, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_UPDATE_operator_longitude, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_UPDATE_operator_altitude_geo, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.OPEN_DRONE_ID_SYSTEM_UPDATE_timestamp, tvbrange, value)
end
-- dissect payload of message type HYGROMETER_SENSOR
function payload_fns.payload_12920(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 5 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 5)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HYGROMETER_SENSOR_id, tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HYGROMETER_SENSOR_temperature, tvbrange, value)
    tvbrange = padded(offset + 2, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HYGROMETER_SENSOR_humidity, tvbrange, value)
end
-- dissect payload of message type UAVIONIX_ADSB_OUT_CFG
function payload_fns.payload_10001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 20 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 20)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_CFG_ICAO, tvbrange, value)
    tvbrange = padded(offset + 6, 9)
    value = tvbrange:string()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_CFG_callsign, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_CFG_emitterType, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_CFG_aircraftSize, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_CFG_gpsOffsetLat, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_CFG_gpsOffsetLon, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_CFG_stallSpeed, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_CFG_rfSelect, tvbrange, value)
    dissect_flags_UAVIONIX_ADSB_OUT_RF_SELECT(subtree, "UAVIONIX_ADSB_OUT_CFG_rfSelect", tvbrange, value)
end
-- dissect payload of message type UAVIONIX_ADSB_OUT_DYNAMIC
function payload_fns.payload_10002(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 41 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 41)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_DYNAMIC_utcTime, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_DYNAMIC_gpsLat, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_DYNAMIC_gpsLon, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_DYNAMIC_gpsAlt, tvbrange, value)
    tvbrange = padded(offset + 38, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_DYNAMIC_gpsFix, tvbrange, value)
    tvbrange = padded(offset + 39, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_DYNAMIC_numSats, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_DYNAMIC_baroAltMSL, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_DYNAMIC_accuracyHor, tvbrange, value)
    tvbrange = padded(offset + 24, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_DYNAMIC_accuracyVert, tvbrange, value)
    tvbrange = padded(offset + 26, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_DYNAMIC_accuracyVel, tvbrange, value)
    tvbrange = padded(offset + 28, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_DYNAMIC_velVert, tvbrange, value)
    tvbrange = padded(offset + 30, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_DYNAMIC_velNS, tvbrange, value)
    tvbrange = padded(offset + 32, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_DYNAMIC_VelEW, tvbrange, value)
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_DYNAMIC_emergencyStatus, tvbrange, value)
    tvbrange = padded(offset + 34, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_DYNAMIC_state, tvbrange, value)
    dissect_flags_UAVIONIX_ADSB_OUT_DYNAMIC_STATE(subtree, "UAVIONIX_ADSB_OUT_DYNAMIC_state", tvbrange, value)
    tvbrange = padded(offset + 36, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_DYNAMIC_squawk, tvbrange, value)
end
-- dissect payload of message type UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT
function payload_fns.payload_10003(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 1 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 1)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT_rfHealth, tvbrange, value)
    dissect_flags_UAVIONIX_ADSB_RF_HEALTH(subtree, "UAVIONIX_ADSB_TRANSCEIVER_HEALTH_REPORT_rfHealth", tvbrange, value)
end
-- dissect payload of message type UAVIONIX_ADSB_OUT_CFG_REGISTRATION
function payload_fns.payload_10004(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 9 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 9)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 9)
    value = tvbrange:string()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_CFG_REGISTRATION_registration, tvbrange, value)
end
-- dissect payload of message type UAVIONIX_ADSB_OUT_CFG_FLIGHTID
function payload_fns.payload_10005(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 9 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 9)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 9)
    value = tvbrange:string()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_CFG_FLIGHTID_flight_id, tvbrange, value)
end
-- dissect payload of message type UAVIONIX_ADSB_GET
function payload_fns.payload_10006(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 4 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 4)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_GET_ReqMessageId, tvbrange, value)
end
-- dissect payload of message type UAVIONIX_ADSB_OUT_CONTROL
function payload_fns.payload_10007(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 17 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 17)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_CONTROL_state, tvbrange, value)
    dissect_flags_UAVIONIX_ADSB_OUT_CONTROL_STATE(subtree, "UAVIONIX_ADSB_OUT_CONTROL_state", tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_CONTROL_baroAltMSL, tvbrange, value)
    tvbrange = padded(offset + 4, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_CONTROL_squawk, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_CONTROL_emergencyStatus, tvbrange, value)
    tvbrange = padded(offset + 8, 8)
    value = tvbrange:string()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_CONTROL_flight_id, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_CONTROL_x_bit, tvbrange, value)
    dissect_flags_UAVIONIX_ADSB_XBIT(subtree, "UAVIONIX_ADSB_OUT_CONTROL_x_bit", tvbrange, value)
end
-- dissect payload of message type UAVIONIX_ADSB_OUT_STATUS
function payload_fns.payload_10008(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 14 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 14)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_STATUS_state, tvbrange, value)
    dissect_flags_UAVIONIX_ADSB_OUT_STATUS_STATE(subtree, "UAVIONIX_ADSB_OUT_STATUS_state", tvbrange, value)
    tvbrange = padded(offset + 0, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_STATUS_squawk, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_STATUS_NIC_NACp, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_STATUS_boardTemp, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_STATUS_fault, tvbrange, value)
    dissect_flags_UAVIONIX_ADSB_OUT_STATUS_FAULT(subtree, "UAVIONIX_ADSB_OUT_STATUS_fault", tvbrange, value)
    tvbrange = padded(offset + 6, 8)
    value = tvbrange:string()
    subtree = tree:add_le(f.UAVIONIX_ADSB_OUT_STATUS_flight_id, tvbrange, value)
end
-- dissect payload of message type ICAROUS_HEARTBEAT
function payload_fns.payload_42000(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 1 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 1)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ICAROUS_HEARTBEAT_status, tvbrange, value)
end
-- dissect payload of message type ICAROUS_KINEMATIC_BANDS
function payload_fns.payload_42001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 46 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 46)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 40, 1)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.ICAROUS_KINEMATIC_BANDS_numBands, tvbrange, value)
    tvbrange = padded(offset + 41, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ICAROUS_KINEMATIC_BANDS_type1, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ICAROUS_KINEMATIC_BANDS_min1, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ICAROUS_KINEMATIC_BANDS_max1, tvbrange, value)
    tvbrange = padded(offset + 42, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ICAROUS_KINEMATIC_BANDS_type2, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ICAROUS_KINEMATIC_BANDS_min2, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ICAROUS_KINEMATIC_BANDS_max2, tvbrange, value)
    tvbrange = padded(offset + 43, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ICAROUS_KINEMATIC_BANDS_type3, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ICAROUS_KINEMATIC_BANDS_min3, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ICAROUS_KINEMATIC_BANDS_max3, tvbrange, value)
    tvbrange = padded(offset + 44, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ICAROUS_KINEMATIC_BANDS_type4, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ICAROUS_KINEMATIC_BANDS_min4, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ICAROUS_KINEMATIC_BANDS_max4, tvbrange, value)
    tvbrange = padded(offset + 45, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.ICAROUS_KINEMATIC_BANDS_type5, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ICAROUS_KINEMATIC_BANDS_min5, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.ICAROUS_KINEMATIC_BANDS_max5, tvbrange, value)
end
-- dissect payload of message type LOWEHEISER_GOV_EFI
function payload_fns.payload_10151(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 85 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 85)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOWEHEISER_GOV_EFI_volt_batt, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOWEHEISER_GOV_EFI_curr_batt, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOWEHEISER_GOV_EFI_curr_gen, tvbrange, value)
    tvbrange = padded(offset + 12, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOWEHEISER_GOV_EFI_curr_rot, tvbrange, value)
    tvbrange = padded(offset + 16, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOWEHEISER_GOV_EFI_fuel_level, tvbrange, value)
    tvbrange = padded(offset + 20, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOWEHEISER_GOV_EFI_throttle, tvbrange, value)
    tvbrange = padded(offset + 24, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOWEHEISER_GOV_EFI_runtime, tvbrange, value)
    tvbrange = padded(offset + 28, 4)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.LOWEHEISER_GOV_EFI_until_maintenance, tvbrange, value)
    tvbrange = padded(offset + 32, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOWEHEISER_GOV_EFI_rectifier_temp, tvbrange, value)
    tvbrange = padded(offset + 36, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOWEHEISER_GOV_EFI_generator_temp, tvbrange, value)
    tvbrange = padded(offset + 40, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOWEHEISER_GOV_EFI_efi_batt, tvbrange, value)
    tvbrange = padded(offset + 44, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOWEHEISER_GOV_EFI_efi_rpm, tvbrange, value)
    tvbrange = padded(offset + 48, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOWEHEISER_GOV_EFI_efi_pw, tvbrange, value)
    tvbrange = padded(offset + 52, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOWEHEISER_GOV_EFI_efi_fuel_flow, tvbrange, value)
    tvbrange = padded(offset + 56, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOWEHEISER_GOV_EFI_efi_fuel_consumed, tvbrange, value)
    tvbrange = padded(offset + 60, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOWEHEISER_GOV_EFI_efi_baro, tvbrange, value)
    tvbrange = padded(offset + 64, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOWEHEISER_GOV_EFI_efi_mat, tvbrange, value)
    tvbrange = padded(offset + 68, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOWEHEISER_GOV_EFI_efi_clt, tvbrange, value)
    tvbrange = padded(offset + 72, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOWEHEISER_GOV_EFI_efi_tps, tvbrange, value)
    tvbrange = padded(offset + 76, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.LOWEHEISER_GOV_EFI_efi_exhaust_gas_temperature, tvbrange, value)
    tvbrange = padded(offset + 84, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOWEHEISER_GOV_EFI_efi_index, tvbrange, value)
    tvbrange = padded(offset + 80, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOWEHEISER_GOV_EFI_generator_status, tvbrange, value)
    tvbrange = padded(offset + 82, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.LOWEHEISER_GOV_EFI_efi_status, tvbrange, value)
end
-- dissect payload of message type CUBEPILOT_RAW_RC
function payload_fns.payload_50001(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 32 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 32)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 0, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_0, tvbrange, value)
    tvbrange = padded(offset + 1, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_1, tvbrange, value)
    tvbrange = padded(offset + 2, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_2, tvbrange, value)
    tvbrange = padded(offset + 3, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_3, tvbrange, value)
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_4, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_5, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_6, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_7, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_8, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_9, tvbrange, value)
    tvbrange = padded(offset + 10, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_10, tvbrange, value)
    tvbrange = padded(offset + 11, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_11, tvbrange, value)
    tvbrange = padded(offset + 12, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_12, tvbrange, value)
    tvbrange = padded(offset + 13, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_13, tvbrange, value)
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_14, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_15, tvbrange, value)
    tvbrange = padded(offset + 16, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_16, tvbrange, value)
    tvbrange = padded(offset + 17, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_17, tvbrange, value)
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_18, tvbrange, value)
    tvbrange = padded(offset + 19, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_19, tvbrange, value)
    tvbrange = padded(offset + 20, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_20, tvbrange, value)
    tvbrange = padded(offset + 21, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_21, tvbrange, value)
    tvbrange = padded(offset + 22, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_22, tvbrange, value)
    tvbrange = padded(offset + 23, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_23, tvbrange, value)
    tvbrange = padded(offset + 24, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_24, tvbrange, value)
    tvbrange = padded(offset + 25, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_25, tvbrange, value)
    tvbrange = padded(offset + 26, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_26, tvbrange, value)
    tvbrange = padded(offset + 27, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_27, tvbrange, value)
    tvbrange = padded(offset + 28, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_28, tvbrange, value)
    tvbrange = padded(offset + 29, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_29, tvbrange, value)
    tvbrange = padded(offset + 30, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_30, tvbrange, value)
    tvbrange = padded(offset + 31, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_RAW_RC_rc_raw_31, tvbrange, value)
end
-- dissect payload of message type HERELINK_VIDEO_STREAM_INFORMATION
function payload_fns.payload_50002(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 246 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 246)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 14, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HERELINK_VIDEO_STREAM_INFORMATION_camera_id, tvbrange, value)
    tvbrange = padded(offset + 15, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HERELINK_VIDEO_STREAM_INFORMATION_status, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_float()
    subtree = tree:add_le(f.HERELINK_VIDEO_STREAM_INFORMATION_framerate, tvbrange, value)
    tvbrange = padded(offset + 8, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HERELINK_VIDEO_STREAM_INFORMATION_resolution_h, tvbrange, value)
    tvbrange = padded(offset + 10, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HERELINK_VIDEO_STREAM_INFORMATION_resolution_v, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HERELINK_VIDEO_STREAM_INFORMATION_bitrate, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HERELINK_VIDEO_STREAM_INFORMATION_rotation, tvbrange, value)
    tvbrange = padded(offset + 16, 230)
    value = tvbrange:string()
    subtree = tree:add_le(f.HERELINK_VIDEO_STREAM_INFORMATION_uri, tvbrange, value)
end
-- dissect payload of message type HERELINK_TELEM
function payload_fns.payload_50003(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 19 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 19)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 18, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HERELINK_TELEM_rssi, tvbrange, value)
    tvbrange = padded(offset + 12, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HERELINK_TELEM_snr, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HERELINK_TELEM_rf_freq, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HERELINK_TELEM_link_bw, tvbrange, value)
    tvbrange = padded(offset + 8, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HERELINK_TELEM_link_rate, tvbrange, value)
    tvbrange = padded(offset + 14, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HERELINK_TELEM_cpu_temp, tvbrange, value)
    tvbrange = padded(offset + 16, 2)
    value = tvbrange:le_int()
    subtree = tree:add_le(f.HERELINK_TELEM_board_temp, tvbrange, value)
end
-- dissect payload of message type CUBEPILOT_FIRMWARE_UPDATE_START
function payload_fns.payload_50004(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 10 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 10)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_FIRMWARE_UPDATE_START_target_system, tvbrange, value)
    tvbrange = padded(offset + 9, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_FIRMWARE_UPDATE_START_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_FIRMWARE_UPDATE_START_size, tvbrange, value)
    tvbrange = padded(offset + 4, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_FIRMWARE_UPDATE_START_crc, tvbrange, value)
end
-- dissect payload of message type CUBEPILOT_FIRMWARE_UPDATE_RESP
function payload_fns.payload_50005(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 6 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 6)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_FIRMWARE_UPDATE_RESP_target_system, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_FIRMWARE_UPDATE_RESP_target_component, tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.CUBEPILOT_FIRMWARE_UPDATE_RESP_offset, tvbrange, value)
end
-- dissect payload of message type HEARTBEAT
function payload_fns.payload_0(buffer, tree, msgid, offset, limit, pinfo)
    local padded, field_offset, value, subtree, tvbrange
    if (offset + 9 > limit) then
        padded = buffer(0, limit):bytes()
        padded:set_size(offset + 9)
        padded = padded:tvb("Untruncated payload")
    else
        padded = buffer
    end
    tvbrange = padded(offset + 4, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HEARTBEAT_type, tvbrange, value)
    tvbrange = padded(offset + 5, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HEARTBEAT_autopilot, tvbrange, value)
    tvbrange = padded(offset + 6, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HEARTBEAT_base_mode, tvbrange, value)
    dissect_flags_MAV_MODE_FLAG(subtree, "HEARTBEAT_base_mode", tvbrange, value)
    tvbrange = padded(offset + 0, 4)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HEARTBEAT_custom_mode, tvbrange, value)
    tvbrange = padded(offset + 7, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HEARTBEAT_system_status, tvbrange, value)
    tvbrange = padded(offset + 8, 1)
    value = tvbrange:le_uint()
    subtree = tree:add_le(f.HEARTBEAT_mavlink_version, tvbrange, value)
end
-- dissector function
function mavlink_proto.dissector(buffer,pinfo,tree)
    local offset = 0
    local msgCount = 0
    
    -- loop through the buffer to extract all the messages in the buffer
    while (offset < buffer:len()) 
    do
        msgCount = msgCount + 1
        local subtree = tree:add (mavlink_proto, buffer(), "MAVLink Protocol ("..buffer:len()..")")

        -- decode protocol version first
        local version = buffer(offset,1):uint()
        local protocolString = ""
    
    	while (true)
		do
            protocolString = protocolVersions[version]
            if (protocolString ~= nil) then
                break
            else
                protocolString = "unknown"
                -- some unknown data found, record the begin offset
                if (unknownFrameBeginOffset == 0) then
                    unknownFrameBeginOffset = offset
                end
               
                offset = offset + 1
                
                if (offset < buffer:len()) then
                    version = buffer(offset,1):uint()
                else
                    -- no magic value found in the whole buffer. print the raw data and exit
                    if (unknownFrameBeginOffset ~= 0) then
                        if (msgCount == 1) then
                            pinfo.cols.info:set("Unknown message")
                        else
                            pinfo.cols.info:append("  Unknown message")
                        end
                        size = offset - unknownFrameBeginOffset
                        subtree:add(f.rawpayload, buffer(unknownFrameBeginOffset,size))
                        unknownFrameBeginOffset = 0
                    end
                    return
                end
            end	
        end
        
        if (unknownFrameBeginOffset ~= 0) then
            pinfo.cols.info:append("Unknown message")
            size = offset - unknownFrameBeginOffset
            subtree:add(f.rawpayload, buffer(unknownFrameBeginOffset,size))
            unknownFrameBeginOffset = 0
            -- jump to next loop
            break
        end
        
        -- some Wireshark decoration
        pinfo.cols.protocol = protocolString

        -- HEADER ----------------------------------------
    
        local msgid
        local length
        local incompatibility_flag

        if (version == 0xfe) then
            if (buffer:len() - 2 - offset > 6) then
                -- normal header
                local header = subtree:add(buffer(offset, 6), "Header")
                header:add(f.magic, buffer(offset,1), version)
                offset = offset + 1
            
                length = buffer(offset,1)
                header:add(f.length, length)
                offset = offset + 1
            
                local sequence = buffer(offset,1)
                header:add(f.sequence, sequence)
                offset = offset + 1
            
                local sysid = buffer(offset,1)
                header:add(f.sysid, sysid)
                offset = offset + 1
        
                local compid = buffer(offset,1)
                header:add(f.compid, compid)
                offset = offset + 1
            
                pinfo.cols.src = "System: "..tostring(sysid:uint())..', Component: '..tostring(compid:uint())
        
                msgid = buffer(offset,1):uint()
                header:add(f.msgid, buffer(offset,1), msgid)
                offset = offset + 1
            else 
                -- handle truncated header
                local hsize = buffer:len() - 2 - offset
                subtree:add(f.rawheader, buffer(offset, hsize))
                offset = offset + hsize
            end
        elseif (version == 0xfd) then
            if (buffer:len() - 2 - offset > 10) then
                -- normal header
                local header = subtree:add(buffer(offset, 10), "Header")
                header:add(f.magic, buffer(offset,1), version)
                offset = offset + 1
                length = buffer(offset,1)
                header:add(f.length, length)
                offset = offset + 1
                incompatibility_flag = buffer(offset,1):uint()
                header:add(f.incompatibility_flag, buffer(offset,1), incompatibility_flag)
                offset = offset + 1
                local compatibility_flag = buffer(offset,1)
                header:add(f.compatibility_flag, compatibility_flag)
                offset = offset + 1
                local sequence = buffer(offset,1)
                header:add(f.sequence, sequence)
                offset = offset + 1
                local sysid = buffer(offset,1)
                header:add(f.sysid, sysid)
                offset = offset + 1
                local compid = buffer(offset,1)
                header:add(f.compid, compid)
                offset = offset + 1
                pinfo.cols.src = "System: "..tostring(sysid:uint())..', Component: '..tostring(compid:uint())
                msgid = buffer(offset,3):le_uint()
                header:add(f.msgid, buffer(offset,3), msgid)
                offset = offset + 3
            else 
                -- handle truncated header
                local hsize = buffer:len() - 2 - offset
                subtree:add(f.rawheader, buffer(offset, hsize))
                offset = offset + hsize
            end
        end


        -- BODY ----------------------------------------
    
        -- dynamically call the type-specific payload dissector    
        local msgnr = msgid
        local dissect_payload_fn = "payload_"..tostring(msgnr)
        local fn = payload_fns[dissect_payload_fn]
        local limit = buffer:len() - 2

        if (length) then
            length = length:uint()
        else
            length = 0
        end

        if (offset + length < limit) then
            limit = offset + length
        end
    
        if (fn == nil) then
            pinfo.cols.info:append ("Unknown message type   ")
            subtree:add_expert_info(PI_MALFORMED, PI_ERROR, "Unknown message type")
            size = buffer:len() - 2 - offset
            subtree:add(f.rawpayload, buffer(offset,size))
            offset = offset + size
        else
            local payload = subtree:add(f.payload, buffer(offset, limit - offset), msgid)
            pinfo.cols.dst:set(messageName[msgid])
            if (msgCount == 1) then
            -- first message should over write the TCP/UDP info
                pinfo.cols.info = messageName[msgid]
            else
                pinfo.cols.info:append("   "..messageName[msgid])
            end
            fn(buffer, payload, msgid, offset, limit, pinfo)
            offset = limit
        end

        -- CRC ----------------------------------------

        local crc = buffer(offset,2)
        subtree:add_le(f.crc, crc)
        offset = offset + 2

        -- SIGNATURE ----------------------------------

        if (version == 0xfd and incompatibility_flag == 0x01) then
            local signature = subtree:add("Signature")

            local link = buffer(offset,1)
            signature:add(f.signature_link, link)
            offset = offset + 1

            local signature_time = buffer(offset,6):le_uint64()
            local time_secs = signature_time / 100000
            local time_nsecs = (signature_time - (time_secs * 100000)) * 10000
            signature:add(f.signature_time, buffer(offset,6), NSTime.new(signature_time_ref + time_secs:tonumber(), time_nsecs:tonumber()))
            offset = offset + 6

            local signature_signature = buffer(offset,6)
            signature:add(f.signature_signature, signature_signature)
            offset = offset + 6
        end

    end
end


   
-- bind protocol dissector to USER0 linktype

wtap_encap = DissectorTable.get("wtap_encap")
wtap_encap:add(wtap.USER0, mavlink_proto)

-- bind protocol dissector to ports: 14550, 14580, 18570

local udp_dissector_table = DissectorTable.get("udp.port")
udp_dissector_table:add(14550, mavlink_proto)
udp_dissector_table:add(14580, mavlink_proto)
udp_dissector_table:add(18570, mavlink_proto)

-- register common Mavlink TCP ports

DissectorTable.get("tcp.port"):add("5760-5763", mavlink_proto)

