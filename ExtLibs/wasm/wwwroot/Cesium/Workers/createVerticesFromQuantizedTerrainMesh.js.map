{"version":3,"file":"createVerticesFromQuantizedTerrainMesh.js","sources":["../../../../Source/Core/TerrainProvider.js","../../../../Source/WorkersES6/createVerticesFromQuantizedTerrainMesh.js"],"sourcesContent":["import defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\n\n/**\n * Provides terrain or other geometry for the surface of an ellipsoid.  The surface geometry is\n * organized into a pyramid of tiles according to a {@link TilingScheme}.  This type describes an\n * interface and is not intended to be instantiated directly.\n *\n * @alias TerrainProvider\n * @constructor\n *\n * @see EllipsoidTerrainProvider\n * @see CesiumTerrainProvider\n * @see VRTheWorldTerrainProvider\n * @see GoogleEarthEnterpriseTerrainProvider\n */\nfunction TerrainProvider() {\n  DeveloperError.throwInstantiationError();\n}\n\nObject.defineProperties(TerrainProvider.prototype, {\n  /**\n   * Gets an event that is raised when the terrain provider encounters an asynchronous error..  By subscribing\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n   * are passed an instance of {@link TileProviderError}.\n   * @memberof TerrainProvider.prototype\n   * @type {Event}\n   */\n  errorEvent: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the credit to display when this terrain provider is active.  Typically this is used to credit\n   * the source of the terrain. This function should\n   * not be called before {@link TerrainProvider#ready} returns true.\n   * @memberof TerrainProvider.prototype\n   * @type {Credit}\n   */\n  credit: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets the tiling scheme used by the provider.  This function should\n   * not be called before {@link TerrainProvider#ready} returns true.\n   * @memberof TerrainProvider.prototype\n   * @type {TilingScheme}\n   */\n  tilingScheme: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider is ready for use.\n   * @memberof TerrainProvider.prototype\n   * @type {Boolean}\n   */\n  ready: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets a promise that resolves to true when the provider is ready for use.\n   * @memberof TerrainProvider.prototype\n   * @type {Promise.<Boolean>}\n   * @readonly\n   */\n  readyPromise: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets a value indicating whether or not the provider includes a water mask.  The water mask\n   * indicates which areas of the globe are water rather than land, so they can be rendered\n   * as a reflective surface with animated waves.  This function should not be\n   * called before {@link TerrainProvider#ready} returns true.\n   * @memberof TerrainProvider.prototype\n   * @type {Boolean}\n   */\n  hasWaterMask: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets a value indicating whether or not the requested tiles include vertex normals.\n   * This function should not be called before {@link TerrainProvider#ready} returns true.\n   * @memberof TerrainProvider.prototype\n   * @type {Boolean}\n   */\n  hasVertexNormals: {\n    get: DeveloperError.throwInstantiationError,\n  },\n\n  /**\n   * Gets an object that can be used to determine availability of terrain from this provider, such as\n   * at points and in rectangles.  This function should not be called before\n   * {@link TerrainProvider#ready} returns true.  This property may be undefined if availability\n   * information is not available.\n   * @memberof TerrainProvider.prototype\n   * @type {TileAvailability}\n   */\n  availability: {\n    get: DeveloperError.throwInstantiationError,\n  },\n});\n\nvar regularGridIndicesCache = [];\n\n/**\n * Gets a list of indices for a triangle mesh representing a regular grid.  Calling\n * this function multiple times with the same grid width and height returns the\n * same list of indices.  The total number of vertices must be less than or equal\n * to 65536.\n *\n * @param {Number} width The number of vertices in the regular grid in the horizontal direction.\n * @param {Number} height The number of vertices in the regular grid in the vertical direction.\n * @returns {Uint16Array|Uint32Array} The list of indices. Uint16Array gets returned for 64KB or less and Uint32Array for 4GB or less.\n */\nTerrainProvider.getRegularGridIndices = function (width, height) {\n  //>>includeStart('debug', pragmas.debug);\n  if (width * height >= CesiumMath.FOUR_GIGABYTES) {\n    throw new DeveloperError(\n      \"The total number of vertices (width * height) must be less than 4,294,967,296.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var byWidth = regularGridIndicesCache[width];\n  if (!defined(byWidth)) {\n    regularGridIndicesCache[width] = byWidth = [];\n  }\n\n  var indices = byWidth[height];\n  if (!defined(indices)) {\n    if (width * height < CesiumMath.SIXTY_FOUR_KILOBYTES) {\n      indices = byWidth[height] = new Uint16Array(\n        (width - 1) * (height - 1) * 6\n      );\n    } else {\n      indices = byWidth[height] = new Uint32Array(\n        (width - 1) * (height - 1) * 6\n      );\n    }\n    addRegularGridIndices(width, height, indices, 0);\n  }\n\n  return indices;\n};\n\nvar regularGridAndEdgeIndicesCache = [];\n\n/**\n * @private\n */\nTerrainProvider.getRegularGridIndicesAndEdgeIndices = function (width, height) {\n  //>>includeStart('debug', pragmas.debug);\n  if (width * height >= CesiumMath.FOUR_GIGABYTES) {\n    throw new DeveloperError(\n      \"The total number of vertices (width * height) must be less than 4,294,967,296.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var byWidth = regularGridAndEdgeIndicesCache[width];\n  if (!defined(byWidth)) {\n    regularGridAndEdgeIndicesCache[width] = byWidth = [];\n  }\n\n  var indicesAndEdges = byWidth[height];\n  if (!defined(indicesAndEdges)) {\n    var indices = TerrainProvider.getRegularGridIndices(width, height);\n\n    var edgeIndices = getEdgeIndices(width, height);\n    var westIndicesSouthToNorth = edgeIndices.westIndicesSouthToNorth;\n    var southIndicesEastToWest = edgeIndices.southIndicesEastToWest;\n    var eastIndicesNorthToSouth = edgeIndices.eastIndicesNorthToSouth;\n    var northIndicesWestToEast = edgeIndices.northIndicesWestToEast;\n\n    indicesAndEdges = byWidth[height] = {\n      indices: indices,\n      westIndicesSouthToNorth: westIndicesSouthToNorth,\n      southIndicesEastToWest: southIndicesEastToWest,\n      eastIndicesNorthToSouth: eastIndicesNorthToSouth,\n      northIndicesWestToEast: northIndicesWestToEast,\n    };\n  }\n\n  return indicesAndEdges;\n};\n\nvar regularGridAndSkirtAndEdgeIndicesCache = [];\n\n/**\n * @private\n */\nTerrainProvider.getRegularGridAndSkirtIndicesAndEdgeIndices = function (\n  width,\n  height\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (width * height >= CesiumMath.FOUR_GIGABYTES) {\n    throw new DeveloperError(\n      \"The total number of vertices (width * height) must be less than 4,294,967,296.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var byWidth = regularGridAndSkirtAndEdgeIndicesCache[width];\n  if (!defined(byWidth)) {\n    regularGridAndSkirtAndEdgeIndicesCache[width] = byWidth = [];\n  }\n\n  var indicesAndEdges = byWidth[height];\n  if (!defined(indicesAndEdges)) {\n    var gridVertexCount = width * height;\n    var gridIndexCount = (width - 1) * (height - 1) * 6;\n    var edgeVertexCount = width * 2 + height * 2;\n    var edgeIndexCount = Math.max(0, edgeVertexCount - 4) * 6;\n    var vertexCount = gridVertexCount + edgeVertexCount;\n    var indexCount = gridIndexCount + edgeIndexCount;\n\n    var edgeIndices = getEdgeIndices(width, height);\n    var westIndicesSouthToNorth = edgeIndices.westIndicesSouthToNorth;\n    var southIndicesEastToWest = edgeIndices.southIndicesEastToWest;\n    var eastIndicesNorthToSouth = edgeIndices.eastIndicesNorthToSouth;\n    var northIndicesWestToEast = edgeIndices.northIndicesWestToEast;\n\n    var indices = IndexDatatype.createTypedArray(vertexCount, indexCount);\n    addRegularGridIndices(width, height, indices, 0);\n    TerrainProvider.addSkirtIndices(\n      westIndicesSouthToNorth,\n      southIndicesEastToWest,\n      eastIndicesNorthToSouth,\n      northIndicesWestToEast,\n      gridVertexCount,\n      indices,\n      gridIndexCount\n    );\n\n    indicesAndEdges = byWidth[height] = {\n      indices: indices,\n      westIndicesSouthToNorth: westIndicesSouthToNorth,\n      southIndicesEastToWest: southIndicesEastToWest,\n      eastIndicesNorthToSouth: eastIndicesNorthToSouth,\n      northIndicesWestToEast: northIndicesWestToEast,\n      indexCountWithoutSkirts: gridIndexCount,\n    };\n  }\n\n  return indicesAndEdges;\n};\n\n/**\n * @private\n */\nTerrainProvider.addSkirtIndices = function (\n  westIndicesSouthToNorth,\n  southIndicesEastToWest,\n  eastIndicesNorthToSouth,\n  northIndicesWestToEast,\n  vertexCount,\n  indices,\n  offset\n) {\n  var vertexIndex = vertexCount;\n  offset = addSkirtIndices(\n    westIndicesSouthToNorth,\n    vertexIndex,\n    indices,\n    offset\n  );\n  vertexIndex += westIndicesSouthToNorth.length;\n  offset = addSkirtIndices(\n    southIndicesEastToWest,\n    vertexIndex,\n    indices,\n    offset\n  );\n  vertexIndex += southIndicesEastToWest.length;\n  offset = addSkirtIndices(\n    eastIndicesNorthToSouth,\n    vertexIndex,\n    indices,\n    offset\n  );\n  vertexIndex += eastIndicesNorthToSouth.length;\n  addSkirtIndices(northIndicesWestToEast, vertexIndex, indices, offset);\n};\n\nfunction getEdgeIndices(width, height) {\n  var westIndicesSouthToNorth = new Array(height);\n  var southIndicesEastToWest = new Array(width);\n  var eastIndicesNorthToSouth = new Array(height);\n  var northIndicesWestToEast = new Array(width);\n\n  var i;\n  for (i = 0; i < width; ++i) {\n    northIndicesWestToEast[i] = i;\n    southIndicesEastToWest[i] = width * height - 1 - i;\n  }\n\n  for (i = 0; i < height; ++i) {\n    eastIndicesNorthToSouth[i] = (i + 1) * width - 1;\n    westIndicesSouthToNorth[i] = (height - i - 1) * width;\n  }\n\n  return {\n    westIndicesSouthToNorth: westIndicesSouthToNorth,\n    southIndicesEastToWest: southIndicesEastToWest,\n    eastIndicesNorthToSouth: eastIndicesNorthToSouth,\n    northIndicesWestToEast: northIndicesWestToEast,\n  };\n}\n\nfunction addRegularGridIndices(width, height, indices, offset) {\n  var index = 0;\n  for (var j = 0; j < height - 1; ++j) {\n    for (var i = 0; i < width - 1; ++i) {\n      var upperLeft = index;\n      var lowerLeft = upperLeft + width;\n      var lowerRight = lowerLeft + 1;\n      var upperRight = upperLeft + 1;\n\n      indices[offset++] = upperLeft;\n      indices[offset++] = lowerLeft;\n      indices[offset++] = upperRight;\n      indices[offset++] = upperRight;\n      indices[offset++] = lowerLeft;\n      indices[offset++] = lowerRight;\n\n      ++index;\n    }\n    ++index;\n  }\n}\n\nfunction addSkirtIndices(edgeIndices, vertexIndex, indices, offset) {\n  var previousIndex = edgeIndices[0];\n\n  var length = edgeIndices.length;\n  for (var i = 1; i < length; ++i) {\n    var index = edgeIndices[i];\n\n    indices[offset++] = previousIndex;\n    indices[offset++] = index;\n    indices[offset++] = vertexIndex;\n\n    indices[offset++] = vertexIndex;\n    indices[offset++] = index;\n    indices[offset++] = vertexIndex + 1;\n\n    previousIndex = index;\n    ++vertexIndex;\n  }\n\n  return offset;\n}\n\n/**\n * Specifies the quality of terrain created from heightmaps.  A value of 1.0 will\n * ensure that adjacent heightmap vertices are separated by no more than\n * {@link Globe.maximumScreenSpaceError} screen pixels and will probably go very slowly.\n * A value of 0.5 will cut the estimated level zero geometric error in half, allowing twice the\n * screen pixels between adjacent heightmap vertices and thus rendering more quickly.\n * @type {Number}\n */\nTerrainProvider.heightmapTerrainQuality = 0.25;\n\n/**\n * Determines an appropriate geometric error estimate when the geometry comes from a heightmap.\n *\n * @param {Ellipsoid} ellipsoid The ellipsoid to which the terrain is attached.\n * @param {Number} tileImageWidth The width, in pixels, of the heightmap associated with a single tile.\n * @param {Number} numberOfTilesAtLevelZero The number of tiles in the horizontal direction at tile level zero.\n * @returns {Number} An estimated geometric error.\n */\nTerrainProvider.getEstimatedLevelZeroGeometricErrorForAHeightmap = function (\n  ellipsoid,\n  tileImageWidth,\n  numberOfTilesAtLevelZero\n) {\n  return (\n    (ellipsoid.maximumRadius *\n      2 *\n      Math.PI *\n      TerrainProvider.heightmapTerrainQuality) /\n    (tileImageWidth * numberOfTilesAtLevelZero)\n  );\n};\n\n/**\n * Requests the geometry for a given tile.  This function should not be called before\n * {@link TerrainProvider#ready} returns true.  The result must include terrain data and\n * may optionally include a water mask and an indication of which child tiles are available.\n * @function\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @param {Request} [request] The request object. Intended for internal use only.\n *\n * @returns {Promise.<TerrainData>|undefined} A promise for the requested geometry.  If this method\n *          returns undefined instead of a promise, it is an indication that too many requests are already\n *          pending and the request will be retried later.\n */\nTerrainProvider.prototype.requestTileGeometry =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Gets the maximum geometric error allowed in a tile at a given level.  This function should not be\n * called before {@link TerrainProvider#ready} returns true.\n * @function\n *\n * @param {Number} level The tile level for which to get the maximum geometric error.\n * @returns {Number} The maximum geometric error.\n */\nTerrainProvider.prototype.getLevelMaximumGeometricError =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Determines whether data for a tile is available to be loaded.\n * @function\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @returns {Boolean} Undefined if not supported by the terrain provider, otherwise true or false.\n */\nTerrainProvider.prototype.getTileDataAvailable =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Makes sure we load availability data for a tile\n * @function\n *\n * @param {Number} x The X coordinate of the tile for which to request geometry.\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\n * @param {Number} level The level of the tile for which to request geometry.\n * @returns {undefined|Promise} Undefined if nothing need to be loaded or a Promise that resolves when all required tiles are loaded\n */\nTerrainProvider.prototype.loadTileDataAvailability =\n  DeveloperError.throwInstantiationError;\nexport default TerrainProvider;\n","import AttributeCompression from \"../Core/AttributeCompression.js\";\nimport AxisAlignedBoundingBox from \"../Core/AxisAlignedBoundingBox.js\";\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\nimport Cartesian2 from \"../Core/Cartesian2.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport EllipsoidalOccluder from \"../Core/EllipsoidalOccluder.js\";\nimport IndexDatatype from \"../Core/IndexDatatype.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport Matrix4 from \"../Core/Matrix4.js\";\nimport OrientedBoundingBox from \"../Core/OrientedBoundingBox.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport TerrainEncoding from \"../Core/TerrainEncoding.js\";\nimport TerrainProvider from \"../Core/TerrainProvider.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport WebMercatorProjection from \"../Core/WebMercatorProjection.js\";\nimport createTaskProcessorWorker from \"./createTaskProcessorWorker.js\";\n\nvar maxShort = 32767;\n\nvar cartesian3Scratch = new Cartesian3();\nvar scratchMinimum = new Cartesian3();\nvar scratchMaximum = new Cartesian3();\nvar cartographicScratch = new Cartographic();\nvar toPack = new Cartesian2();\nvar scratchNormal = new Cartesian3();\nvar scratchToENU = new Matrix4();\nvar scratchFromENU = new Matrix4();\n\nfunction createVerticesFromQuantizedTerrainMesh(\n  parameters,\n  transferableObjects\n) {\n  var quantizedVertices = parameters.quantizedVertices;\n  var quantizedVertexCount = quantizedVertices.length / 3;\n  var octEncodedNormals = parameters.octEncodedNormals;\n  var edgeVertexCount =\n    parameters.westIndices.length +\n    parameters.eastIndices.length +\n    parameters.southIndices.length +\n    parameters.northIndices.length;\n  var includeWebMercatorT = parameters.includeWebMercatorT;\n\n  var rectangle = Rectangle.clone(parameters.rectangle);\n  var west = rectangle.west;\n  var south = rectangle.south;\n  var east = rectangle.east;\n  var north = rectangle.north;\n\n  var ellipsoid = Ellipsoid.clone(parameters.ellipsoid);\n\n  var exaggeration = parameters.exaggeration;\n  var minimumHeight = parameters.minimumHeight * exaggeration;\n  var maximumHeight = parameters.maximumHeight * exaggeration;\n\n  var center = parameters.relativeToCenter;\n  var fromENU = Transforms.eastNorthUpToFixedFrame(center, ellipsoid);\n  var toENU = Matrix4.inverseTransformation(fromENU, new Matrix4());\n\n  var southMercatorY;\n  var oneOverMercatorHeight;\n  if (includeWebMercatorT) {\n    southMercatorY = WebMercatorProjection.geodeticLatitudeToMercatorAngle(\n      south\n    );\n    oneOverMercatorHeight =\n      1.0 /\n      (WebMercatorProjection.geodeticLatitudeToMercatorAngle(north) -\n        southMercatorY);\n  }\n\n  var uBuffer = quantizedVertices.subarray(0, quantizedVertexCount);\n  var vBuffer = quantizedVertices.subarray(\n    quantizedVertexCount,\n    2 * quantizedVertexCount\n  );\n  var heightBuffer = quantizedVertices.subarray(\n    quantizedVertexCount * 2,\n    3 * quantizedVertexCount\n  );\n  var hasVertexNormals = defined(octEncodedNormals);\n\n  var uvs = new Array(quantizedVertexCount);\n  var heights = new Array(quantizedVertexCount);\n  var positions = new Array(quantizedVertexCount);\n  var webMercatorTs = includeWebMercatorT\n    ? new Array(quantizedVertexCount)\n    : [];\n\n  var minimum = scratchMinimum;\n  minimum.x = Number.POSITIVE_INFINITY;\n  minimum.y = Number.POSITIVE_INFINITY;\n  minimum.z = Number.POSITIVE_INFINITY;\n\n  var maximum = scratchMaximum;\n  maximum.x = Number.NEGATIVE_INFINITY;\n  maximum.y = Number.NEGATIVE_INFINITY;\n  maximum.z = Number.NEGATIVE_INFINITY;\n\n  var minLongitude = Number.POSITIVE_INFINITY;\n  var maxLongitude = Number.NEGATIVE_INFINITY;\n  var minLatitude = Number.POSITIVE_INFINITY;\n  var maxLatitude = Number.NEGATIVE_INFINITY;\n\n  for (var i = 0; i < quantizedVertexCount; ++i) {\n    var rawU = uBuffer[i];\n    var rawV = vBuffer[i];\n\n    var u = rawU / maxShort;\n    var v = rawV / maxShort;\n    var height = CesiumMath.lerp(\n      minimumHeight,\n      maximumHeight,\n      heightBuffer[i] / maxShort\n    );\n\n    cartographicScratch.longitude = CesiumMath.lerp(west, east, u);\n    cartographicScratch.latitude = CesiumMath.lerp(south, north, v);\n    cartographicScratch.height = height;\n\n    minLongitude = Math.min(cartographicScratch.longitude, minLongitude);\n    maxLongitude = Math.max(cartographicScratch.longitude, maxLongitude);\n    minLatitude = Math.min(cartographicScratch.latitude, minLatitude);\n    maxLatitude = Math.max(cartographicScratch.latitude, maxLatitude);\n\n    var position = ellipsoid.cartographicToCartesian(cartographicScratch);\n\n    uvs[i] = new Cartesian2(u, v);\n    heights[i] = height;\n    positions[i] = position;\n\n    if (includeWebMercatorT) {\n      webMercatorTs[i] =\n        (WebMercatorProjection.geodeticLatitudeToMercatorAngle(\n          cartographicScratch.latitude\n        ) -\n          southMercatorY) *\n        oneOverMercatorHeight;\n    }\n\n    Matrix4.multiplyByPoint(toENU, position, cartesian3Scratch);\n\n    Cartesian3.minimumByComponent(cartesian3Scratch, minimum, minimum);\n    Cartesian3.maximumByComponent(cartesian3Scratch, maximum, maximum);\n  }\n\n  var westIndicesSouthToNorth = copyAndSort(parameters.westIndices, function (\n    a,\n    b\n  ) {\n    return uvs[a].y - uvs[b].y;\n  });\n  var eastIndicesNorthToSouth = copyAndSort(parameters.eastIndices, function (\n    a,\n    b\n  ) {\n    return uvs[b].y - uvs[a].y;\n  });\n  var southIndicesEastToWest = copyAndSort(parameters.southIndices, function (\n    a,\n    b\n  ) {\n    return uvs[b].x - uvs[a].x;\n  });\n  var northIndicesWestToEast = copyAndSort(parameters.northIndices, function (\n    a,\n    b\n  ) {\n    return uvs[a].x - uvs[b].x;\n  });\n\n  var orientedBoundingBox;\n  var boundingSphere;\n\n  if (exaggeration !== 1.0) {\n    // Bounding volumes need to be recomputed since the tile payload assumes no exaggeration.\n    boundingSphere = BoundingSphere.fromPoints(positions);\n    orientedBoundingBox = OrientedBoundingBox.fromRectangle(\n      rectangle,\n      minimumHeight,\n      maximumHeight,\n      ellipsoid\n    );\n  }\n\n  var occludeePointInScaledSpace;\n  if (exaggeration !== 1.0 || minimumHeight < 0.0) {\n    // Horizon culling point needs to be recomputed since the tile payload assumes no exaggeration.\n    var occluder = new EllipsoidalOccluder(ellipsoid);\n    occludeePointInScaledSpace = occluder.computeHorizonCullingPointPossiblyUnderEllipsoid(\n      center,\n      positions,\n      minimumHeight\n    );\n  }\n\n  var hMin = minimumHeight;\n  hMin = Math.min(\n    hMin,\n    findMinMaxSkirts(\n      parameters.westIndices,\n      parameters.westSkirtHeight,\n      heights,\n      uvs,\n      rectangle,\n      ellipsoid,\n      toENU,\n      minimum,\n      maximum\n    )\n  );\n  hMin = Math.min(\n    hMin,\n    findMinMaxSkirts(\n      parameters.southIndices,\n      parameters.southSkirtHeight,\n      heights,\n      uvs,\n      rectangle,\n      ellipsoid,\n      toENU,\n      minimum,\n      maximum\n    )\n  );\n  hMin = Math.min(\n    hMin,\n    findMinMaxSkirts(\n      parameters.eastIndices,\n      parameters.eastSkirtHeight,\n      heights,\n      uvs,\n      rectangle,\n      ellipsoid,\n      toENU,\n      minimum,\n      maximum\n    )\n  );\n  hMin = Math.min(\n    hMin,\n    findMinMaxSkirts(\n      parameters.northIndices,\n      parameters.northSkirtHeight,\n      heights,\n      uvs,\n      rectangle,\n      ellipsoid,\n      toENU,\n      minimum,\n      maximum\n    )\n  );\n\n  var aaBox = new AxisAlignedBoundingBox(minimum, maximum, center);\n  var encoding = new TerrainEncoding(\n    aaBox,\n    hMin,\n    maximumHeight,\n    fromENU,\n    hasVertexNormals,\n    includeWebMercatorT\n  );\n  var vertexStride = encoding.getStride();\n  var size =\n    quantizedVertexCount * vertexStride + edgeVertexCount * vertexStride;\n  var vertexBuffer = new Float32Array(size);\n\n  var bufferIndex = 0;\n  for (var j = 0; j < quantizedVertexCount; ++j) {\n    if (hasVertexNormals) {\n      var n = j * 2.0;\n      toPack.x = octEncodedNormals[n];\n      toPack.y = octEncodedNormals[n + 1];\n\n      if (exaggeration !== 1.0) {\n        var normal = AttributeCompression.octDecode(\n          toPack.x,\n          toPack.y,\n          scratchNormal\n        );\n        var fromENUNormal = Transforms.eastNorthUpToFixedFrame(\n          positions[j],\n          ellipsoid,\n          scratchFromENU\n        );\n        var toENUNormal = Matrix4.inverseTransformation(\n          fromENUNormal,\n          scratchToENU\n        );\n\n        Matrix4.multiplyByPointAsVector(toENUNormal, normal, normal);\n        normal.z *= exaggeration;\n        Cartesian3.normalize(normal, normal);\n\n        Matrix4.multiplyByPointAsVector(fromENUNormal, normal, normal);\n        Cartesian3.normalize(normal, normal);\n\n        AttributeCompression.octEncode(normal, toPack);\n      }\n    }\n\n    bufferIndex = encoding.encode(\n      vertexBuffer,\n      bufferIndex,\n      positions[j],\n      uvs[j],\n      heights[j],\n      toPack,\n      webMercatorTs[j]\n    );\n  }\n\n  var edgeTriangleCount = Math.max(0, (edgeVertexCount - 4) * 2);\n  var indexBufferLength = parameters.indices.length + edgeTriangleCount * 3;\n  var indexBuffer = IndexDatatype.createTypedArray(\n    quantizedVertexCount + edgeVertexCount,\n    indexBufferLength\n  );\n  indexBuffer.set(parameters.indices, 0);\n\n  var percentage = 0.0001;\n  var lonOffset = (maxLongitude - minLongitude) * percentage;\n  var latOffset = (maxLatitude - minLatitude) * percentage;\n  var westLongitudeOffset = -lonOffset;\n  var westLatitudeOffset = 0.0;\n  var eastLongitudeOffset = lonOffset;\n  var eastLatitudeOffset = 0.0;\n  var northLongitudeOffset = 0.0;\n  var northLatitudeOffset = latOffset;\n  var southLongitudeOffset = 0.0;\n  var southLatitudeOffset = -latOffset;\n\n  // Add skirts.\n  var vertexBufferIndex = quantizedVertexCount * vertexStride;\n  addSkirt(\n    vertexBuffer,\n    vertexBufferIndex,\n    westIndicesSouthToNorth,\n    encoding,\n    heights,\n    uvs,\n    octEncodedNormals,\n    ellipsoid,\n    rectangle,\n    parameters.westSkirtHeight,\n    exaggeration,\n    southMercatorY,\n    oneOverMercatorHeight,\n    westLongitudeOffset,\n    westLatitudeOffset\n  );\n  vertexBufferIndex += parameters.westIndices.length * vertexStride;\n  addSkirt(\n    vertexBuffer,\n    vertexBufferIndex,\n    southIndicesEastToWest,\n    encoding,\n    heights,\n    uvs,\n    octEncodedNormals,\n    ellipsoid,\n    rectangle,\n    parameters.southSkirtHeight,\n    exaggeration,\n    southMercatorY,\n    oneOverMercatorHeight,\n    southLongitudeOffset,\n    southLatitudeOffset\n  );\n  vertexBufferIndex += parameters.southIndices.length * vertexStride;\n  addSkirt(\n    vertexBuffer,\n    vertexBufferIndex,\n    eastIndicesNorthToSouth,\n    encoding,\n    heights,\n    uvs,\n    octEncodedNormals,\n    ellipsoid,\n    rectangle,\n    parameters.eastSkirtHeight,\n    exaggeration,\n    southMercatorY,\n    oneOverMercatorHeight,\n    eastLongitudeOffset,\n    eastLatitudeOffset\n  );\n  vertexBufferIndex += parameters.eastIndices.length * vertexStride;\n  addSkirt(\n    vertexBuffer,\n    vertexBufferIndex,\n    northIndicesWestToEast,\n    encoding,\n    heights,\n    uvs,\n    octEncodedNormals,\n    ellipsoid,\n    rectangle,\n    parameters.northSkirtHeight,\n    exaggeration,\n    southMercatorY,\n    oneOverMercatorHeight,\n    northLongitudeOffset,\n    northLatitudeOffset\n  );\n\n  TerrainProvider.addSkirtIndices(\n    westIndicesSouthToNorth,\n    southIndicesEastToWest,\n    eastIndicesNorthToSouth,\n    northIndicesWestToEast,\n    quantizedVertexCount,\n    indexBuffer,\n    parameters.indices.length\n  );\n\n  transferableObjects.push(vertexBuffer.buffer, indexBuffer.buffer);\n\n  return {\n    vertices: vertexBuffer.buffer,\n    indices: indexBuffer.buffer,\n    westIndicesSouthToNorth: westIndicesSouthToNorth,\n    southIndicesEastToWest: southIndicesEastToWest,\n    eastIndicesNorthToSouth: eastIndicesNorthToSouth,\n    northIndicesWestToEast: northIndicesWestToEast,\n    vertexStride: vertexStride,\n    center: center,\n    minimumHeight: minimumHeight,\n    maximumHeight: maximumHeight,\n    boundingSphere: boundingSphere,\n    orientedBoundingBox: orientedBoundingBox,\n    occludeePointInScaledSpace: occludeePointInScaledSpace,\n    encoding: encoding,\n    indexCountWithoutSkirts: parameters.indices.length,\n  };\n}\n\nfunction findMinMaxSkirts(\n  edgeIndices,\n  edgeHeight,\n  heights,\n  uvs,\n  rectangle,\n  ellipsoid,\n  toENU,\n  minimum,\n  maximum\n) {\n  var hMin = Number.POSITIVE_INFINITY;\n\n  var north = rectangle.north;\n  var south = rectangle.south;\n  var east = rectangle.east;\n  var west = rectangle.west;\n\n  if (east < west) {\n    east += CesiumMath.TWO_PI;\n  }\n\n  var length = edgeIndices.length;\n  for (var i = 0; i < length; ++i) {\n    var index = edgeIndices[i];\n    var h = heights[index];\n    var uv = uvs[index];\n\n    cartographicScratch.longitude = CesiumMath.lerp(west, east, uv.x);\n    cartographicScratch.latitude = CesiumMath.lerp(south, north, uv.y);\n    cartographicScratch.height = h - edgeHeight;\n\n    var position = ellipsoid.cartographicToCartesian(\n      cartographicScratch,\n      cartesian3Scratch\n    );\n    Matrix4.multiplyByPoint(toENU, position, position);\n\n    Cartesian3.minimumByComponent(position, minimum, minimum);\n    Cartesian3.maximumByComponent(position, maximum, maximum);\n\n    hMin = Math.min(hMin, cartographicScratch.height);\n  }\n  return hMin;\n}\n\nfunction addSkirt(\n  vertexBuffer,\n  vertexBufferIndex,\n  edgeVertices,\n  encoding,\n  heights,\n  uvs,\n  octEncodedNormals,\n  ellipsoid,\n  rectangle,\n  skirtLength,\n  exaggeration,\n  southMercatorY,\n  oneOverMercatorHeight,\n  longitudeOffset,\n  latitudeOffset\n) {\n  var hasVertexNormals = defined(octEncodedNormals);\n\n  var north = rectangle.north;\n  var south = rectangle.south;\n  var east = rectangle.east;\n  var west = rectangle.west;\n\n  if (east < west) {\n    east += CesiumMath.TWO_PI;\n  }\n\n  var length = edgeVertices.length;\n  for (var i = 0; i < length; ++i) {\n    var index = edgeVertices[i];\n    var h = heights[index];\n    var uv = uvs[index];\n\n    cartographicScratch.longitude =\n      CesiumMath.lerp(west, east, uv.x) + longitudeOffset;\n    cartographicScratch.latitude =\n      CesiumMath.lerp(south, north, uv.y) + latitudeOffset;\n    cartographicScratch.height = h - skirtLength;\n\n    var position = ellipsoid.cartographicToCartesian(\n      cartographicScratch,\n      cartesian3Scratch\n    );\n\n    if (hasVertexNormals) {\n      var n = index * 2.0;\n      toPack.x = octEncodedNormals[n];\n      toPack.y = octEncodedNormals[n + 1];\n\n      if (exaggeration !== 1.0) {\n        var normal = AttributeCompression.octDecode(\n          toPack.x,\n          toPack.y,\n          scratchNormal\n        );\n        var fromENUNormal = Transforms.eastNorthUpToFixedFrame(\n          cartesian3Scratch,\n          ellipsoid,\n          scratchFromENU\n        );\n        var toENUNormal = Matrix4.inverseTransformation(\n          fromENUNormal,\n          scratchToENU\n        );\n\n        Matrix4.multiplyByPointAsVector(toENUNormal, normal, normal);\n        normal.z *= exaggeration;\n        Cartesian3.normalize(normal, normal);\n\n        Matrix4.multiplyByPointAsVector(fromENUNormal, normal, normal);\n        Cartesian3.normalize(normal, normal);\n\n        AttributeCompression.octEncode(normal, toPack);\n      }\n    }\n\n    var webMercatorT;\n    if (encoding.hasWebMercatorT) {\n      webMercatorT =\n        (WebMercatorProjection.geodeticLatitudeToMercatorAngle(\n          cartographicScratch.latitude\n        ) -\n          southMercatorY) *\n        oneOverMercatorHeight;\n    }\n\n    vertexBufferIndex = encoding.encode(\n      vertexBuffer,\n      vertexBufferIndex,\n      position,\n      uv,\n      cartographicScratch.height,\n      toPack,\n      webMercatorT\n    );\n  }\n}\n\nfunction copyAndSort(typedArray, comparator) {\n  var copy;\n  if (typeof typedArray.slice === \"function\") {\n    copy = typedArray.slice();\n    if (typeof copy.sort !== \"function\") {\n      // Sliced typed array isn't sortable, so we can't use it.\n      copy = undefined;\n    }\n  }\n\n  if (!defined(copy)) {\n    copy = Array.prototype.slice.call(typedArray);\n  }\n\n  copy.sort(comparator);\n\n  return copy;\n}\nexport default createTaskProcessorWorker(\n  createVerticesFromQuantizedTerrainMesh\n);\n"],"names":["DeveloperError","CesiumMath","defined","IndexDatatype","Cartesian3","Cartographic","Cartesian2","Matrix4","Rectangle","Ellipsoid","Transforms","WebMercatorProjection","BoundingSphere","OrientedBoundingBox","EllipsoidalOccluder","AxisAlignedBoundingBox","TerrainEncoding","AttributeCompression"],"mappings":"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"}