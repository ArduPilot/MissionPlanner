/* 
 * Dronelogbook API
 *
 * This is the swagger file that describes Dronelogbook API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@dronelogbook.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Dronelogbook.Model
{
    /// <summary>
    /// Company
    /// </summary>
    [DataContract]
    public partial class Company :  IEquatable<Company>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Company" /> class.
        /// </summary>
        /// <param name="Address">Address.</param>
        /// <param name="City">City.</param>
        /// <param name="Country">Country.</param>
        /// <param name="EmailContact">EmailContact.</param>
        /// <param name="GovernmentLicense">GovernmentLicense.</param>
        /// <param name="Guid">Guid.</param>
        /// <param name="HasInsurance">HasInsurance.</param>
        /// <param name="Incorporation">Incorporation.</param>
        /// <param name="Industry">Industry.</param>
        /// <param name="InsuranceCoverageAmount">InsuranceCoverageAmount.</param>
        /// <param name="LegalIdentifier">LegalIdentifier.</param>
        /// <param name="Name">Name.</param>
        /// <param name="PhoneContact">PhoneContact.</param>
        /// <param name="Size">Size.</param>
        /// <param name="State">State.</param>
        /// <param name="Token">Token.</param>
        /// <param name="WebsiteUrl">WebsiteUrl.</param>
        /// <param name="ZipCode">ZipCode.</param>
        public Company(string Address = null, string City = null, string Country = null, string EmailContact = null, string GovernmentLicense = null, string Guid = null, int? HasInsurance = null, string Incorporation = null, string Industry = null, string InsuranceCoverageAmount = null, string LegalIdentifier = null, string Name = null, string PhoneContact = null, string Size = null, string State = null, string Token = null, string WebsiteUrl = null, string ZipCode = null)
        {
            this.Address = Address;
            this.City = City;
            this.Country = Country;
            this.EmailContact = EmailContact;
            this.GovernmentLicense = GovernmentLicense;
            this.Guid = Guid;
            this.HasInsurance = HasInsurance;
            this.Incorporation = Incorporation;
            this.Industry = Industry;
            this.InsuranceCoverageAmount = InsuranceCoverageAmount;
            this.LegalIdentifier = LegalIdentifier;
            this.Name = Name;
            this.PhoneContact = PhoneContact;
            this.Size = Size;
            this.State = State;
            this.Token = Token;
            this.WebsiteUrl = WebsiteUrl;
            this.ZipCode = ZipCode;
        }
        
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }
        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }
        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// Gets or Sets EmailContact
        /// </summary>
        [DataMember(Name="email_contact", EmitDefaultValue=false)]
        public string EmailContact { get; set; }
        /// <summary>
        /// Gets or Sets GovernmentLicense
        /// </summary>
        [DataMember(Name="government_license", EmitDefaultValue=false)]
        public string GovernmentLicense { get; set; }
        /// <summary>
        /// Gets or Sets Guid
        /// </summary>
        [DataMember(Name="guid", EmitDefaultValue=false)]
        public string Guid { get; set; }
        /// <summary>
        /// Gets or Sets HasInsurance
        /// </summary>
        [DataMember(Name="has_insurance", EmitDefaultValue=false)]
        public int? HasInsurance { get; set; }
        /// <summary>
        /// Gets or Sets Incorporation
        /// </summary>
        [DataMember(Name="incorporation", EmitDefaultValue=false)]
        public string Incorporation { get; set; }
        /// <summary>
        /// Gets or Sets Industry
        /// </summary>
        [DataMember(Name="industry", EmitDefaultValue=false)]
        public string Industry { get; set; }
        /// <summary>
        /// Gets or Sets InsuranceCoverageAmount
        /// </summary>
        [DataMember(Name="insurance_coverage_amount", EmitDefaultValue=false)]
        public string InsuranceCoverageAmount { get; set; }
        /// <summary>
        /// Gets or Sets LegalIdentifier
        /// </summary>
        [DataMember(Name="legal_identifier", EmitDefaultValue=false)]
        public string LegalIdentifier { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets PhoneContact
        /// </summary>
        [DataMember(Name="phone_contact", EmitDefaultValue=false)]
        public string PhoneContact { get; set; }
        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public string Size { get; set; }
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }
        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }
        /// <summary>
        /// Gets or Sets WebsiteUrl
        /// </summary>
        [DataMember(Name="website_url", EmitDefaultValue=false)]
        public string WebsiteUrl { get; set; }
        /// <summary>
        /// Gets or Sets ZipCode
        /// </summary>
        [DataMember(Name="zip_code", EmitDefaultValue=false)]
        public string ZipCode { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Company {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  EmailContact: ").Append(EmailContact).Append("\n");
            sb.Append("  GovernmentLicense: ").Append(GovernmentLicense).Append("\n");
            sb.Append("  Guid: ").Append(Guid).Append("\n");
            sb.Append("  HasInsurance: ").Append(HasInsurance).Append("\n");
            sb.Append("  Incorporation: ").Append(Incorporation).Append("\n");
            sb.Append("  Industry: ").Append(Industry).Append("\n");
            sb.Append("  InsuranceCoverageAmount: ").Append(InsuranceCoverageAmount).Append("\n");
            sb.Append("  LegalIdentifier: ").Append(LegalIdentifier).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PhoneContact: ").Append(PhoneContact).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  WebsiteUrl: ").Append(WebsiteUrl).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Company);
        }

        /// <summary>
        /// Returns true if Company instances are equal
        /// </summary>
        /// <param name="other">Instance of Company to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Company other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.EmailContact == other.EmailContact ||
                    this.EmailContact != null &&
                    this.EmailContact.Equals(other.EmailContact)
                ) && 
                (
                    this.GovernmentLicense == other.GovernmentLicense ||
                    this.GovernmentLicense != null &&
                    this.GovernmentLicense.Equals(other.GovernmentLicense)
                ) && 
                (
                    this.Guid == other.Guid ||
                    this.Guid != null &&
                    this.Guid.Equals(other.Guid)
                ) && 
                (
                    this.HasInsurance == other.HasInsurance ||
                    this.HasInsurance != null &&
                    this.HasInsurance.Equals(other.HasInsurance)
                ) && 
                (
                    this.Incorporation == other.Incorporation ||
                    this.Incorporation != null &&
                    this.Incorporation.Equals(other.Incorporation)
                ) && 
                (
                    this.Industry == other.Industry ||
                    this.Industry != null &&
                    this.Industry.Equals(other.Industry)
                ) && 
                (
                    this.InsuranceCoverageAmount == other.InsuranceCoverageAmount ||
                    this.InsuranceCoverageAmount != null &&
                    this.InsuranceCoverageAmount.Equals(other.InsuranceCoverageAmount)
                ) && 
                (
                    this.LegalIdentifier == other.LegalIdentifier ||
                    this.LegalIdentifier != null &&
                    this.LegalIdentifier.Equals(other.LegalIdentifier)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.PhoneContact == other.PhoneContact ||
                    this.PhoneContact != null &&
                    this.PhoneContact.Equals(other.PhoneContact)
                ) && 
                (
                    this.Size == other.Size ||
                    this.Size != null &&
                    this.Size.Equals(other.Size)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.Token == other.Token ||
                    this.Token != null &&
                    this.Token.Equals(other.Token)
                ) && 
                (
                    this.WebsiteUrl == other.WebsiteUrl ||
                    this.WebsiteUrl != null &&
                    this.WebsiteUrl.Equals(other.WebsiteUrl)
                ) && 
                (
                    this.ZipCode == other.ZipCode ||
                    this.ZipCode != null &&
                    this.ZipCode.Equals(other.ZipCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.EmailContact != null)
                    hash = hash * 59 + this.EmailContact.GetHashCode();
                if (this.GovernmentLicense != null)
                    hash = hash * 59 + this.GovernmentLicense.GetHashCode();
                if (this.Guid != null)
                    hash = hash * 59 + this.Guid.GetHashCode();
                if (this.HasInsurance != null)
                    hash = hash * 59 + this.HasInsurance.GetHashCode();
                if (this.Incorporation != null)
                    hash = hash * 59 + this.Incorporation.GetHashCode();
                if (this.Industry != null)
                    hash = hash * 59 + this.Industry.GetHashCode();
                if (this.InsuranceCoverageAmount != null)
                    hash = hash * 59 + this.InsuranceCoverageAmount.GetHashCode();
                if (this.LegalIdentifier != null)
                    hash = hash * 59 + this.LegalIdentifier.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.PhoneContact != null)
                    hash = hash * 59 + this.PhoneContact.GetHashCode();
                if (this.Size != null)
                    hash = hash * 59 + this.Size.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.Token != null)
                    hash = hash * 59 + this.Token.GetHashCode();
                if (this.WebsiteUrl != null)
                    hash = hash * 59 + this.WebsiteUrl.GetHashCode();
                if (this.ZipCode != null)
                    hash = hash * 59 + this.ZipCode.GetHashCode();
                return hash;
            }
        }
    }

}
