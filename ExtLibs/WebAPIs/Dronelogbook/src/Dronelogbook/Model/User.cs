/* 
 * Dronelogbook API
 *
 * This is the swagger file that describes Dronelogbook API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@dronelogbook.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Dronelogbook.Model
{
    /// <summary>
    /// User
    /// </summary>
    [DataContract]
    public partial class User :  IEquatable<User>
    {
        /// <summary>
        /// Gets or Sets LegalProfile
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LegalProfileEnum
        {
            
            /// <summary>
            /// Enum  for ""
            /// </summary>
            [EnumMember(Value = "")]
            _,
            
            /// <summary>
            /// Enum FAA for "FAA"
            /// </summary>
            [EnumMember(Value = "FAA")]
            FAA,
            
            /// <summary>
            /// Enum CAA for "CAA"
            /// </summary>
            [EnumMember(Value = "CAA")]
            CAA,
            
            /// <summary>
            /// Enum CASA for "CASA"
            /// </summary>
            [EnumMember(Value = "CASA")]
            CASA,
            
            /// <summary>
            /// Enum TransportCanada for "Transport Canada"
            /// </summary>
            [EnumMember(Value = "Transport Canada")]
            TransportCanada,
            
            /// <summary>
            /// Enum HongKongCAD for "Hong-Kong CAD"
            /// </summary>
            [EnumMember(Value = "Hong-Kong CAD")]
            HongKongCAD,
            
            /// <summary>
            /// Enum EuropeEASA for "Europe EASA"
            /// </summary>
            [EnumMember(Value = "Europe EASA")]
            EuropeEASA,
            
            /// <summary>
            /// Enum FranceDGAC for "France DGAC"
            /// </summary>
            [EnumMember(Value = "France DGAC")]
            FranceDGAC,
            
            /// <summary>
            /// Enum DenmarkTBST for "Denmark TBST"
            /// </summary>
            [EnumMember(Value = "Denmark TBST")]
            DenmarkTBST,
            
            /// <summary>
            /// Enum Other for "Other"
            /// </summary>
            [EnumMember(Value = "Other")]
            Other
        }

        /// <summary>
        /// Gets or Sets LicenseType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LicenseTypeEnum
        {
            
            /// <summary>
            /// Enum  for ""
            /// </summary>
            [EnumMember(Value = "")]
            _,
            
            /// <summary>
            /// Enum BasicOperations for "Basic Operations"
            /// </summary>
            [EnumMember(Value = "Basic Operations")]
            BasicOperations,
            
            /// <summary>
            /// Enum AdvancedOperations for "Advanced Operations"
            /// </summary>
            [EnumMember(Value = "Advanced Operations")]
            AdvancedOperations,
            
            /// <summary>
            /// Enum FlightReviewerRating for "Flight Reviewer Rating"
            /// </summary>
            [EnumMember(Value = "Flight Reviewer Rating")]
            FlightReviewerRating,
            
            /// <summary>
            /// Enum CASARePL for "CASA RePL"
            /// </summary>
            [EnumMember(Value = "CASA RePL")]
            CASARePL,
            
            /// <summary>
            /// Enum CASAReOC for "CASA ReOC"
            /// </summary>
            [EnumMember(Value = "CASA ReOC")]
            CASAReOC
        }


        /// <summary>
        /// Gets or Sets Roles
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RolesEnum
        {
            
            /// <summary>
            /// Enum Manager for "Manager"
            /// </summary>
            [EnumMember(Value = "Manager")]
            Manager,
            
            /// <summary>
            /// Enum Pilot for "Pilot"
            /// </summary>
            [EnumMember(Value = "Pilot")]
            Pilot,
            
            /// <summary>
            /// Enum Observer for "Observer"
            /// </summary>
            [EnumMember(Value = "Observer")]
            Observer,
            
            /// <summary>
            /// Enum Payloadoperator for "Payload operator"
            /// </summary>
            [EnumMember(Value = "Payload operator")]
            Payloadoperator,
            
            /// <summary>
            /// Enum GroundSupportCrew for "Ground Support Crew"
            /// </summary>
            [EnumMember(Value = "Ground Support Crew")]
            GroundSupportCrew,
            
            /// <summary>
            /// Enum Instructor for "Instructor"
            /// </summary>
            [EnumMember(Value = "Instructor")]
            Instructor
        }

        /// <summary>
        /// Gets or Sets LegalProfile
        /// </summary>
        [DataMember(Name="legal_profile", EmitDefaultValue=false)]
        public LegalProfileEnum? LegalProfile { get; set; }
        /// <summary>
        /// Gets or Sets LicenseType
        /// </summary>
        [DataMember(Name="license_type", EmitDefaultValue=false)]
        public LicenseTypeEnum? LicenseType { get; set; }
        /// <summary>
        /// Gets or Sets Roles
        /// </summary>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public List<RolesEnum> Roles { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="CompanyAdmin">CompanyAdmin.</param>
        /// <param name="Country">Country.</param>
        /// <param name="DateCreation">DateCreation.</param>
        /// <param name="FullName">FullName.</param>
        /// <param name="Guid">Guid.</param>
        /// <param name="Language">Language.</param>
        /// <param name="LastLoginDate">LastLoginDate.</param>
        /// <param name="LegalProfile">LegalProfile.</param>
        /// <param name="LicenseNumber">LicenseNumber.</param>
        /// <param name="LicenseType">LicenseType.</param>
        /// <param name="Login">Login.</param>
        /// <param name="Notes">Notes.</param>
        /// <param name="Phone">Phone.</param>
        /// <param name="Roles">Roles.</param>
        /// <param name="Status">Status.</param>
        /// <param name="Timezone">Timezone.</param>
        public User(int? CompanyAdmin = null, string Country = null, DateTime? DateCreation = null, string FullName = null, string Guid = null, string Language = null, DateTime? LastLoginDate = null, LegalProfileEnum? LegalProfile = null, string LicenseNumber = null, LicenseTypeEnum? LicenseType = null, string Login = null, string Notes = null, string Phone = null, List<RolesEnum> Roles = null, string Status = null, string Timezone = null)
        {
            this.CompanyAdmin = CompanyAdmin;
            this.Country = Country;
            this.DateCreation = DateCreation;
            this.FullName = FullName;
            this.Guid = Guid;
            this.Language = Language;
            this.LastLoginDate = LastLoginDate;
            this.LegalProfile = LegalProfile;
            this.LicenseNumber = LicenseNumber;
            this.LicenseType = LicenseType;
            this.Login = Login;
            this.Notes = Notes;
            this.Phone = Phone;
            this.Roles = Roles;
            this.Status = Status;
            this.Timezone = Timezone;
        }
        
        /// <summary>
        /// Gets or Sets CompanyAdmin
        /// </summary>
        [DataMember(Name="company_admin", EmitDefaultValue=false)]
        public int? CompanyAdmin { get; set; }
        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// Gets or Sets DateCreation
        /// </summary>
        [DataMember(Name="date_creation", EmitDefaultValue=false)]
        public DateTime? DateCreation { get; set; }
        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name="full_name", EmitDefaultValue=false)]
        public string FullName { get; set; }
        /// <summary>
        /// Gets or Sets Guid
        /// </summary>
        [DataMember(Name="guid", EmitDefaultValue=false)]
        public string Guid { get; set; }
        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }
        /// <summary>
        /// Gets or Sets LastLoginDate
        /// </summary>
        [DataMember(Name="last_login_date", EmitDefaultValue=false)]
        public DateTime? LastLoginDate { get; set; }
        /// <summary>
        /// Gets or Sets LicenseNumber
        /// </summary>
        [DataMember(Name="license_number", EmitDefaultValue=false)]
        public string LicenseNumber { get; set; }
        /// <summary>
        /// Gets or Sets Login
        /// </summary>
        [DataMember(Name="login", EmitDefaultValue=false)]
        public string Login { get; set; }
        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }
        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public string Timezone { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  CompanyAdmin: ").Append(CompanyAdmin).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  DateCreation: ").Append(DateCreation).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Guid: ").Append(Guid).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  LastLoginDate: ").Append(LastLoginDate).Append("\n");
            sb.Append("  LegalProfile: ").Append(LegalProfile).Append("\n");
            sb.Append("  LicenseNumber: ").Append(LicenseNumber).Append("\n");
            sb.Append("  LicenseType: ").Append(LicenseType).Append("\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as User);
        }

        /// <summary>
        /// Returns true if User instances are equal
        /// </summary>
        /// <param name="other">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CompanyAdmin == other.CompanyAdmin ||
                    this.CompanyAdmin != null &&
                    this.CompanyAdmin.Equals(other.CompanyAdmin)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.DateCreation == other.DateCreation ||
                    this.DateCreation != null &&
                    this.DateCreation.Equals(other.DateCreation)
                ) && 
                (
                    this.FullName == other.FullName ||
                    this.FullName != null &&
                    this.FullName.Equals(other.FullName)
                ) && 
                (
                    this.Guid == other.Guid ||
                    this.Guid != null &&
                    this.Guid.Equals(other.Guid)
                ) && 
                (
                    this.Language == other.Language ||
                    this.Language != null &&
                    this.Language.Equals(other.Language)
                ) && 
                (
                    this.LastLoginDate == other.LastLoginDate ||
                    this.LastLoginDate != null &&
                    this.LastLoginDate.Equals(other.LastLoginDate)
                ) && 
                (
                    this.LegalProfile == other.LegalProfile ||
                    this.LegalProfile != null &&
                    this.LegalProfile.Equals(other.LegalProfile)
                ) && 
                (
                    this.LicenseNumber == other.LicenseNumber ||
                    this.LicenseNumber != null &&
                    this.LicenseNumber.Equals(other.LicenseNumber)
                ) && 
                (
                    this.LicenseType == other.LicenseType ||
                    this.LicenseType != null &&
                    this.LicenseType.Equals(other.LicenseType)
                ) && 
                (
                    this.Login == other.Login ||
                    this.Login != null &&
                    this.Login.Equals(other.Login)
                ) && 
                (
                    this.Notes == other.Notes ||
                    this.Notes != null &&
                    this.Notes.Equals(other.Notes)
                ) && 
                (
                    this.Phone == other.Phone ||
                    this.Phone != null &&
                    this.Phone.Equals(other.Phone)
                ) && 
                (
                    this.Roles == other.Roles ||
                    this.Roles != null &&
                    this.Roles.SequenceEqual(other.Roles)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Timezone == other.Timezone ||
                    this.Timezone != null &&
                    this.Timezone.Equals(other.Timezone)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CompanyAdmin != null)
                    hash = hash * 59 + this.CompanyAdmin.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.DateCreation != null)
                    hash = hash * 59 + this.DateCreation.GetHashCode();
                if (this.FullName != null)
                    hash = hash * 59 + this.FullName.GetHashCode();
                if (this.Guid != null)
                    hash = hash * 59 + this.Guid.GetHashCode();
                if (this.Language != null)
                    hash = hash * 59 + this.Language.GetHashCode();
                if (this.LastLoginDate != null)
                    hash = hash * 59 + this.LastLoginDate.GetHashCode();
                if (this.LegalProfile != null)
                    hash = hash * 59 + this.LegalProfile.GetHashCode();
                if (this.LicenseNumber != null)
                    hash = hash * 59 + this.LicenseNumber.GetHashCode();
                if (this.LicenseType != null)
                    hash = hash * 59 + this.LicenseType.GetHashCode();
                if (this.Login != null)
                    hash = hash * 59 + this.Login.GetHashCode();
                if (this.Notes != null)
                    hash = hash * 59 + this.Notes.GetHashCode();
                if (this.Phone != null)
                    hash = hash * 59 + this.Phone.GetHashCode();
                if (this.Roles != null)
                    hash = hash * 59 + this.Roles.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Timezone != null)
                    hash = hash * 59 + this.Timezone.GetHashCode();
                return hash;
            }
        }
    }

}
