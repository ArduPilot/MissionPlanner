/* 
 * Dronelogbook API
 *
 * This is the swagger file that describes Dronelogbook API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@dronelogbook.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Dronelogbook.Model
{
    /// <summary>
    /// Drone
    /// </summary>
    [DataContract]
    public partial class Drone :  IEquatable<Drone>
    {
        /// <summary>
        /// Gets or Sets PropulsionType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PropulsionTypeEnum
        {
            
            /// <summary>
            /// Enum  for ""
            /// </summary>
            [EnumMember(Value = "")]
            _,
            
            /// <summary>
            /// Enum ELECTRIC for "ELECTRIC"
            /// </summary>
            [EnumMember(Value = "ELECTRIC")]
            ELECTRIC,
            
            /// <summary>
            /// Enum FUEL for "FUEL"
            /// </summary>
            [EnumMember(Value = "FUEL")]
            FUEL
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Airworthy for "Airworthy"
            /// </summary>
            [EnumMember(Value = "Airworthy")]
            Airworthy,
            
            /// <summary>
            /// Enum Retired for "Retired"
            /// </summary>
            [EnumMember(Value = "Retired")]
            Retired,
            
            /// <summary>
            /// Enum InMaintenance for "In Maintenance"
            /// </summary>
            [EnumMember(Value = "In Maintenance")]
            InMaintenance
        }

        /// <summary>
        /// Gets or Sets PropulsionType
        /// </summary>
        [DataMember(Name="propulsion_Type", EmitDefaultValue=false)]
        public PropulsionTypeEnum? PropulsionType { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Drone" /> class.
        /// </summary>
        /// <param name="Brand">Brand.</param>
        /// <param name="Color">Color.</param>
        /// <param name="ControllerSerialNumber">ControllerSerialNumber.</param>
        /// <param name="ControllerSerialNumber2">ControllerSerialNumber2.</param>
        /// <param name="DroneType">DroneType.</param>
        /// <param name="FirmwareVersion">FirmwareVersion.</param>
        /// <param name="Guid">Guid.</param>
        /// <param name="HardwareVersion">HardwareVersion.</param>
        /// <param name="IdentificationNumber">IdentificationNumber.</param>
        /// <param name="InsurableValue">InsurableValue.</param>
        /// <param name="InventoryNumber">InventoryNumber.</param>
        /// <param name="MaxHorizontalSpeed">MaxHorizontalSpeed.</param>
        /// <param name="MaxVerticalSpeed">MaxVerticalSpeed.</param>
        /// <param name="Model">Model.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Notes">Notes.</param>
        /// <param name="PayloadCapacity">PayloadCapacity.</param>
        /// <param name="PropulsionType">PropulsionType.</param>
        /// <param name="PurchaseDate">PurchaseDate.</param>
        /// <param name="SerialNumber">SerialNumber.</param>
        /// <param name="Status">Status.</param>
        /// <param name="TechNumber">TechNumber.</param>
        /// <param name="Weight">Weight.</param>
        public Drone(string Brand = null, string Color = null, string ControllerSerialNumber = null, string ControllerSerialNumber2 = null, string DroneType = null, string FirmwareVersion = null, string Guid = null, string HardwareVersion = null, string IdentificationNumber = null, double? InsurableValue = null, string InventoryNumber = null, double? MaxHorizontalSpeed = null, double? MaxVerticalSpeed = null, string Model = null, string Name = null, string Notes = null, double? PayloadCapacity = null, PropulsionTypeEnum? PropulsionType = null, DateTime? PurchaseDate = null, string SerialNumber = null, StatusEnum? Status = null, string TechNumber = null, string Weight = null)
        {
            this.Brand = Brand;
            this.Color = Color;
            this.ControllerSerialNumber = ControllerSerialNumber;
            this.ControllerSerialNumber2 = ControllerSerialNumber2;
            this.DroneType = DroneType;
            this.FirmwareVersion = FirmwareVersion;
            this.Guid = Guid;
            this.HardwareVersion = HardwareVersion;
            this.IdentificationNumber = IdentificationNumber;
            this.InsurableValue = InsurableValue;
            this.InventoryNumber = InventoryNumber;
            this.MaxHorizontalSpeed = MaxHorizontalSpeed;
            this.MaxVerticalSpeed = MaxVerticalSpeed;
            this.Model = Model;
            this.Name = Name;
            this.Notes = Notes;
            this.PayloadCapacity = PayloadCapacity;
            this.PropulsionType = PropulsionType;
            this.PurchaseDate = PurchaseDate;
            this.SerialNumber = SerialNumber;
            this.Status = Status;
            this.TechNumber = TechNumber;
            this.Weight = Weight;
        }
        
        /// <summary>
        /// Gets or Sets Brand
        /// </summary>
        [DataMember(Name="brand", EmitDefaultValue=false)]
        public string Brand { get; set; }
        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }
        /// <summary>
        /// Gets or Sets ControllerSerialNumber
        /// </summary>
        [DataMember(Name="controller_serial_number", EmitDefaultValue=false)]
        public string ControllerSerialNumber { get; set; }
        /// <summary>
        /// Gets or Sets ControllerSerialNumber2
        /// </summary>
        [DataMember(Name="controller_serial_number2", EmitDefaultValue=false)]
        public string ControllerSerialNumber2 { get; set; }
        /// <summary>
        /// Gets or Sets DroneType
        /// </summary>
        [DataMember(Name="drone_type", EmitDefaultValue=false)]
        public string DroneType { get; set; }
        /// <summary>
        /// Gets or Sets FirmwareVersion
        /// </summary>
        [DataMember(Name="firmware_version", EmitDefaultValue=false)]
        public string FirmwareVersion { get; set; }
        /// <summary>
        /// Gets or Sets Guid
        /// </summary>
        [DataMember(Name="guid", EmitDefaultValue=false)]
        public string Guid { get; set; }
        /// <summary>
        /// Gets or Sets HardwareVersion
        /// </summary>
        [DataMember(Name="hardware_version", EmitDefaultValue=false)]
        public string HardwareVersion { get; set; }
        /// <summary>
        /// Gets or Sets IdentificationNumber
        /// </summary>
        [DataMember(Name="identification_number", EmitDefaultValue=false)]
        public string IdentificationNumber { get; set; }
        /// <summary>
        /// Gets or Sets InsurableValue
        /// </summary>
        [DataMember(Name="insurable_value", EmitDefaultValue=false)]
        public double? InsurableValue { get; set; }
        /// <summary>
        /// Gets or Sets InventoryNumber
        /// </summary>
        [DataMember(Name="inventory_number", EmitDefaultValue=false)]
        public string InventoryNumber { get; set; }
        /// <summary>
        /// Gets or Sets MaxHorizontalSpeed
        /// </summary>
        [DataMember(Name="max_horizontal_speed", EmitDefaultValue=false)]
        public double? MaxHorizontalSpeed { get; set; }
        /// <summary>
        /// Gets or Sets MaxVerticalSpeed
        /// </summary>
        [DataMember(Name="max_vertical_speed", EmitDefaultValue=false)]
        public double? MaxVerticalSpeed { get; set; }
        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }
        /// <summary>
        /// Gets or Sets PayloadCapacity
        /// </summary>
        [DataMember(Name="payload_capacity", EmitDefaultValue=false)]
        public double? PayloadCapacity { get; set; }
        /// <summary>
        /// Gets or Sets PurchaseDate
        /// </summary>
        [DataMember(Name="purchase_date", EmitDefaultValue=false)]
        public DateTime? PurchaseDate { get; set; }
        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [DataMember(Name="serial_number", EmitDefaultValue=false)]
        public string SerialNumber { get; set; }
        /// <summary>
        /// Gets or Sets TechNumber
        /// </summary>
        [DataMember(Name="tech_number", EmitDefaultValue=false)]
        public string TechNumber { get; set; }
        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public string Weight { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Drone {\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  ControllerSerialNumber: ").Append(ControllerSerialNumber).Append("\n");
            sb.Append("  ControllerSerialNumber2: ").Append(ControllerSerialNumber2).Append("\n");
            sb.Append("  DroneType: ").Append(DroneType).Append("\n");
            sb.Append("  FirmwareVersion: ").Append(FirmwareVersion).Append("\n");
            sb.Append("  Guid: ").Append(Guid).Append("\n");
            sb.Append("  HardwareVersion: ").Append(HardwareVersion).Append("\n");
            sb.Append("  IdentificationNumber: ").Append(IdentificationNumber).Append("\n");
            sb.Append("  InsurableValue: ").Append(InsurableValue).Append("\n");
            sb.Append("  InventoryNumber: ").Append(InventoryNumber).Append("\n");
            sb.Append("  MaxHorizontalSpeed: ").Append(MaxHorizontalSpeed).Append("\n");
            sb.Append("  MaxVerticalSpeed: ").Append(MaxVerticalSpeed).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  PayloadCapacity: ").Append(PayloadCapacity).Append("\n");
            sb.Append("  PropulsionType: ").Append(PropulsionType).Append("\n");
            sb.Append("  PurchaseDate: ").Append(PurchaseDate).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TechNumber: ").Append(TechNumber).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Drone);
        }

        /// <summary>
        /// Returns true if Drone instances are equal
        /// </summary>
        /// <param name="other">Instance of Drone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Drone other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Brand == other.Brand ||
                    this.Brand != null &&
                    this.Brand.Equals(other.Brand)
                ) && 
                (
                    this.Color == other.Color ||
                    this.Color != null &&
                    this.Color.Equals(other.Color)
                ) && 
                (
                    this.ControllerSerialNumber == other.ControllerSerialNumber ||
                    this.ControllerSerialNumber != null &&
                    this.ControllerSerialNumber.Equals(other.ControllerSerialNumber)
                ) && 
                (
                    this.ControllerSerialNumber2 == other.ControllerSerialNumber2 ||
                    this.ControllerSerialNumber2 != null &&
                    this.ControllerSerialNumber2.Equals(other.ControllerSerialNumber2)
                ) && 
                (
                    this.DroneType == other.DroneType ||
                    this.DroneType != null &&
                    this.DroneType.Equals(other.DroneType)
                ) && 
                (
                    this.FirmwareVersion == other.FirmwareVersion ||
                    this.FirmwareVersion != null &&
                    this.FirmwareVersion.Equals(other.FirmwareVersion)
                ) && 
                (
                    this.Guid == other.Guid ||
                    this.Guid != null &&
                    this.Guid.Equals(other.Guid)
                ) && 
                (
                    this.HardwareVersion == other.HardwareVersion ||
                    this.HardwareVersion != null &&
                    this.HardwareVersion.Equals(other.HardwareVersion)
                ) && 
                (
                    this.IdentificationNumber == other.IdentificationNumber ||
                    this.IdentificationNumber != null &&
                    this.IdentificationNumber.Equals(other.IdentificationNumber)
                ) && 
                (
                    this.InsurableValue == other.InsurableValue ||
                    this.InsurableValue != null &&
                    this.InsurableValue.Equals(other.InsurableValue)
                ) && 
                (
                    this.InventoryNumber == other.InventoryNumber ||
                    this.InventoryNumber != null &&
                    this.InventoryNumber.Equals(other.InventoryNumber)
                ) && 
                (
                    this.MaxHorizontalSpeed == other.MaxHorizontalSpeed ||
                    this.MaxHorizontalSpeed != null &&
                    this.MaxHorizontalSpeed.Equals(other.MaxHorizontalSpeed)
                ) && 
                (
                    this.MaxVerticalSpeed == other.MaxVerticalSpeed ||
                    this.MaxVerticalSpeed != null &&
                    this.MaxVerticalSpeed.Equals(other.MaxVerticalSpeed)
                ) && 
                (
                    this.Model == other.Model ||
                    this.Model != null &&
                    this.Model.Equals(other.Model)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Notes == other.Notes ||
                    this.Notes != null &&
                    this.Notes.Equals(other.Notes)
                ) && 
                (
                    this.PayloadCapacity == other.PayloadCapacity ||
                    this.PayloadCapacity != null &&
                    this.PayloadCapacity.Equals(other.PayloadCapacity)
                ) && 
                (
                    this.PropulsionType == other.PropulsionType ||
                    this.PropulsionType != null &&
                    this.PropulsionType.Equals(other.PropulsionType)
                ) && 
                (
                    this.PurchaseDate == other.PurchaseDate ||
                    this.PurchaseDate != null &&
                    this.PurchaseDate.Equals(other.PurchaseDate)
                ) && 
                (
                    this.SerialNumber == other.SerialNumber ||
                    this.SerialNumber != null &&
                    this.SerialNumber.Equals(other.SerialNumber)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.TechNumber == other.TechNumber ||
                    this.TechNumber != null &&
                    this.TechNumber.Equals(other.TechNumber)
                ) && 
                (
                    this.Weight == other.Weight ||
                    this.Weight != null &&
                    this.Weight.Equals(other.Weight)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Brand != null)
                    hash = hash * 59 + this.Brand.GetHashCode();
                if (this.Color != null)
                    hash = hash * 59 + this.Color.GetHashCode();
                if (this.ControllerSerialNumber != null)
                    hash = hash * 59 + this.ControllerSerialNumber.GetHashCode();
                if (this.ControllerSerialNumber2 != null)
                    hash = hash * 59 + this.ControllerSerialNumber2.GetHashCode();
                if (this.DroneType != null)
                    hash = hash * 59 + this.DroneType.GetHashCode();
                if (this.FirmwareVersion != null)
                    hash = hash * 59 + this.FirmwareVersion.GetHashCode();
                if (this.Guid != null)
                    hash = hash * 59 + this.Guid.GetHashCode();
                if (this.HardwareVersion != null)
                    hash = hash * 59 + this.HardwareVersion.GetHashCode();
                if (this.IdentificationNumber != null)
                    hash = hash * 59 + this.IdentificationNumber.GetHashCode();
                if (this.InsurableValue != null)
                    hash = hash * 59 + this.InsurableValue.GetHashCode();
                if (this.InventoryNumber != null)
                    hash = hash * 59 + this.InventoryNumber.GetHashCode();
                if (this.MaxHorizontalSpeed != null)
                    hash = hash * 59 + this.MaxHorizontalSpeed.GetHashCode();
                if (this.MaxVerticalSpeed != null)
                    hash = hash * 59 + this.MaxVerticalSpeed.GetHashCode();
                if (this.Model != null)
                    hash = hash * 59 + this.Model.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Notes != null)
                    hash = hash * 59 + this.Notes.GetHashCode();
                if (this.PayloadCapacity != null)
                    hash = hash * 59 + this.PayloadCapacity.GetHashCode();
                if (this.PropulsionType != null)
                    hash = hash * 59 + this.PropulsionType.GetHashCode();
                if (this.PurchaseDate != null)
                    hash = hash * 59 + this.PurchaseDate.GetHashCode();
                if (this.SerialNumber != null)
                    hash = hash * 59 + this.SerialNumber.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.TechNumber != null)
                    hash = hash * 59 + this.TechNumber.GetHashCode();
                if (this.Weight != null)
                    hash = hash * 59 + this.Weight.GetHashCode();
                return hash;
            }
        }
    }

}
