/* 
 * Dronelogbook API
 *
 * This is the swagger file that describes Dronelogbook API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@dronelogbook.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Dronelogbook.Model
{
    /// <summary>
    /// Flight
    /// </summary>
    [DataContract]
    public partial class Flight :  IEquatable<Flight>
    {
        /// <summary>
        /// Gets or Sets SunTime
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SunTimeEnum
        {
            
            /// <summary>
            /// Enum NIGHT for "NIGHT"
            /// </summary>
            [EnumMember(Value = "NIGHT")]
            NIGHT,
            
            /// <summary>
            /// Enum ASTRONOMICAL for "ASTRONOMICAL"
            /// </summary>
            [EnumMember(Value = "ASTRONOMICAL")]
            ASTRONOMICAL,
            
            /// <summary>
            /// Enum NAUTICAL for "NAUTICAL"
            /// </summary>
            [EnumMember(Value = "NAUTICAL")]
            NAUTICAL,
            
            /// <summary>
            /// Enum CIVIL for "CIVIL"
            /// </summary>
            [EnumMember(Value = "CIVIL")]
            CIVIL,
            
            /// <summary>
            /// Enum DAY for "DAY"
            /// </summary>
            [EnumMember(Value = "DAY")]
            DAY
        }

        /// <summary>
        /// Gets or Sets SunTime
        /// </summary>
        [DataMember(Name="sun_time", EmitDefaultValue=false)]
        public SunTimeEnum? SunTime { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Flight" /> class.
        /// </summary>
        /// <param name="ApprovalStatus">ApprovalStatus.</param>
        /// <param name="Archived">Archived.</param>
        /// <param name="AssetInspected">AssetInspected.</param>
        /// <param name="AssetInspectedCount">AssetInspectedCount.</param>
        /// <param name="CancelCause">CancelCause.</param>
        /// <param name="CancelNotes">CancelNotes.</param>
        /// <param name="CommunicationWithAuthorities">CommunicationWithAuthorities.</param>
        /// <param name="CompleteStatus">CompleteStatus.</param>
        /// <param name="CountryCode">CountryCode.</param>
        /// <param name="CreationDate">CreationDate.</param>
        /// <param name="CustomerGuid">CustomerGuid.</param>
        /// <param name="DataPlanArea">DataPlanArea.</param>
        /// <param name="Distance">Distance.</param>
        /// <param name="DroneGuid">DroneGuid.</param>
        /// <param name="DurationSeconds">DurationSeconds.</param>
        /// <param name="EmergencyContactNumbers">EmergencyContactNumbers.</param>
        /// <param name="Equipments">Equipments.</param>
        /// <param name="FlightDate">FlightDate.</param>
        /// <param name="FlightDateUtc">FlightDateUtc.</param>
        /// <param name="FlightNumber">FlightNumber.</param>
        /// <param name="FlightScenario">FlightScenario.</param>
        /// <param name="FlightTime">FlightTime.</param>
        /// <param name="FlightType">FlightType.</param>
        /// <param name="FuelUsed">FuelUsed.</param>
        /// <param name="Guid">Guid.</param>
        /// <param name="LegalRule">LegalRule.</param>
        /// <param name="LegalRuleDetail">LegalRuleDetail.</param>
        /// <param name="LocalAreaFrequencies">LocalAreaFrequencies.</param>
        /// <param name="MainFlightType">MainFlightType.</param>
        /// <param name="MaxAltitude">MaxAltitude.</param>
        /// <param name="MaxAltitudeAgl">MaxAltitudeAgl.</param>
        /// <param name="MissionGuid">MissionGuid.</param>
        /// <param name="Name">Name.</param>
        /// <param name="NbFlight">NbFlight.</param>
        /// <param name="NightFlight">NightFlight.</param>
        /// <param name="Notes">Notes.</param>
        /// <param name="OperationType">OperationType.</param>
        /// <param name="OpsApprovalType">OpsApprovalType.</param>
        /// <param name="PayloadDescription">PayloadDescription.</param>
        /// <param name="PayloadWeight">PayloadWeight.</param>
        /// <param name="Personnel">Personnel.</param>
        /// <param name="PlaceGuid">PlaceGuid.</param>
        /// <param name="PlaceName">PlaceName.</param>
        /// <param name="ProjectGuid">ProjectGuid.</param>
        /// <param name="ProjectReference">ProjectReference.</param>
        /// <param name="SunTime">SunTime.</param>
        /// <param name="Tags">Tags.</param>
        /// <param name="TypeAltitude">TypeAltitude.</param>
        /// <param name="UpcomingFlight">UpcomingFlight.</param>
        /// <param name="UtmAuthInfo">UtmAuthInfo.</param>
        /// <param name="WeatherDetail">WeatherDetail.</param>
        /// <param name="WeatherNote">WeatherNote.</param>
        public Flight(string ApprovalStatus = null, int? Archived = null, string AssetInspected = null, int? AssetInspectedCount = null, string CancelCause = null, string CancelNotes = null, int? CommunicationWithAuthorities = null, string CompleteStatus = null, string CountryCode = null, DateTime? CreationDate = null, string CustomerGuid = null, string DataPlanArea = null, int? Distance = null, string DroneGuid = null, int? DurationSeconds = null, string EmergencyContactNumbers = null, string Equipments = null, DateTime? FlightDate = null, DateTime? FlightDateUtc = null, int? FlightNumber = null, string FlightScenario = null, string FlightTime = null, string FlightType = null, double? FuelUsed = null, string Guid = null, string LegalRule = null, string LegalRuleDetail = null, string LocalAreaFrequencies = null, string MainFlightType = null, int? MaxAltitude = null, int? MaxAltitudeAgl = null, string MissionGuid = null, string Name = null, int? NbFlight = null, int? NightFlight = null, string Notes = null, string OperationType = null, string OpsApprovalType = null, string PayloadDescription = null, double? PayloadWeight = null, string Personnel = null, string PlaceGuid = null, string PlaceName = null, string ProjectGuid = null, string ProjectReference = null, SunTimeEnum? SunTime = null, string Tags = null, string TypeAltitude = null, string UpcomingFlight = null, string UtmAuthInfo = null, string WeatherDetail = null, string WeatherNote = null)
        {
            this.ApprovalStatus = ApprovalStatus;
            this.Archived = Archived;
            this.AssetInspected = AssetInspected;
            this.AssetInspectedCount = AssetInspectedCount;
            this.CancelCause = CancelCause;
            this.CancelNotes = CancelNotes;
            this.CommunicationWithAuthorities = CommunicationWithAuthorities;
            this.CompleteStatus = CompleteStatus;
            this.CountryCode = CountryCode;
            this.CreationDate = CreationDate;
            this.CustomerGuid = CustomerGuid;
            this.DataPlanArea = DataPlanArea;
            this.Distance = Distance;
            this.DroneGuid = DroneGuid;
            this.DurationSeconds = DurationSeconds;
            this.EmergencyContactNumbers = EmergencyContactNumbers;
            this.Equipments = Equipments;
            this.FlightDate = FlightDate;
            this.FlightDateUtc = FlightDateUtc;
            this.FlightNumber = FlightNumber;
            this.FlightScenario = FlightScenario;
            this.FlightTime = FlightTime;
            this.FlightType = FlightType;
            this.FuelUsed = FuelUsed;
            this.Guid = Guid;
            this.LegalRule = LegalRule;
            this.LegalRuleDetail = LegalRuleDetail;
            this.LocalAreaFrequencies = LocalAreaFrequencies;
            this.MainFlightType = MainFlightType;
            this.MaxAltitude = MaxAltitude;
            this.MaxAltitudeAgl = MaxAltitudeAgl;
            this.MissionGuid = MissionGuid;
            this.Name = Name;
            this.NbFlight = NbFlight;
            this.NightFlight = NightFlight;
            this.Notes = Notes;
            this.OperationType = OperationType;
            this.OpsApprovalType = OpsApprovalType;
            this.PayloadDescription = PayloadDescription;
            this.PayloadWeight = PayloadWeight;
            this.Personnel = Personnel;
            this.PlaceGuid = PlaceGuid;
            this.PlaceName = PlaceName;
            this.ProjectGuid = ProjectGuid;
            this.ProjectReference = ProjectReference;
            this.SunTime = SunTime;
            this.Tags = Tags;
            this.TypeAltitude = TypeAltitude;
            this.UpcomingFlight = UpcomingFlight;
            this.UtmAuthInfo = UtmAuthInfo;
            this.WeatherDetail = WeatherDetail;
            this.WeatherNote = WeatherNote;
        }
        
        /// <summary>
        /// Gets or Sets ApprovalStatus
        /// </summary>
        [DataMember(Name="approval_status", EmitDefaultValue=false)]
        public string ApprovalStatus { get; set; }
        /// <summary>
        /// Gets or Sets Archived
        /// </summary>
        [DataMember(Name="archived", EmitDefaultValue=false)]
        public int? Archived { get; set; }
        /// <summary>
        /// Gets or Sets AssetInspected
        /// </summary>
        [DataMember(Name="asset_inspected", EmitDefaultValue=false)]
        public string AssetInspected { get; set; }
        /// <summary>
        /// Gets or Sets AssetInspectedCount
        /// </summary>
        [DataMember(Name="asset_inspected_count", EmitDefaultValue=false)]
        public int? AssetInspectedCount { get; set; }
        /// <summary>
        /// Gets or Sets CancelCause
        /// </summary>
        [DataMember(Name="cancel_cause", EmitDefaultValue=false)]
        public string CancelCause { get; set; }
        /// <summary>
        /// Gets or Sets CancelNotes
        /// </summary>
        [DataMember(Name="cancel_notes", EmitDefaultValue=false)]
        public string CancelNotes { get; set; }
        /// <summary>
        /// Gets or Sets CommunicationWithAuthorities
        /// </summary>
        [DataMember(Name="communication_with_authorities", EmitDefaultValue=false)]
        public int? CommunicationWithAuthorities { get; set; }
        /// <summary>
        /// Gets or Sets CompleteStatus
        /// </summary>
        [DataMember(Name="complete_status", EmitDefaultValue=false)]
        public string CompleteStatus { get; set; }
        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name="country_code", EmitDefaultValue=false)]
        public string CountryCode { get; set; }
        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name="creation_date", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }
        /// <summary>
        /// Gets or Sets CustomerGuid
        /// </summary>
        [DataMember(Name="customer_guid", EmitDefaultValue=false)]
        public string CustomerGuid { get; set; }
        /// <summary>
        /// Gets or Sets DataPlanArea
        /// </summary>
        [DataMember(Name="data_plan_area", EmitDefaultValue=false)]
        public string DataPlanArea { get; set; }
        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public int? Distance { get; set; }
        /// <summary>
        /// Gets or Sets DroneGuid
        /// </summary>
        [DataMember(Name="drone_guid", EmitDefaultValue=false)]
        public string DroneGuid { get; set; }
        /// <summary>
        /// Gets or Sets DurationSeconds
        /// </summary>
        [DataMember(Name="duration_seconds", EmitDefaultValue=false)]
        public int? DurationSeconds { get; set; }
        /// <summary>
        /// Gets or Sets EmergencyContactNumbers
        /// </summary>
        [DataMember(Name="emergency_contact_numbers", EmitDefaultValue=false)]
        public string EmergencyContactNumbers { get; set; }
        /// <summary>
        /// Gets or Sets Equipments
        /// </summary>
        [DataMember(Name="equipments", EmitDefaultValue=false)]
        public string Equipments { get; set; }
        /// <summary>
        /// Gets or Sets FlightDate
        /// </summary>
        [DataMember(Name="flight_date", EmitDefaultValue=false)]
        public DateTime? FlightDate { get; set; }
        /// <summary>
        /// Gets or Sets FlightDateUtc
        /// </summary>
        [DataMember(Name="flight_date_utc", EmitDefaultValue=false)]
        public DateTime? FlightDateUtc { get; set; }
        /// <summary>
        /// Gets or Sets FlightNumber
        /// </summary>
        [DataMember(Name="flight_number", EmitDefaultValue=false)]
        public int? FlightNumber { get; set; }
        /// <summary>
        /// Gets or Sets FlightScenario
        /// </summary>
        [DataMember(Name="flight_scenario", EmitDefaultValue=false)]
        public string FlightScenario { get; set; }
        /// <summary>
        /// Gets or Sets FlightTime
        /// </summary>
        [DataMember(Name="flight_time", EmitDefaultValue=false)]
        public string FlightTime { get; set; }
        /// <summary>
        /// Gets or Sets FlightType
        /// </summary>
        [DataMember(Name="flight_type", EmitDefaultValue=false)]
        public string FlightType { get; set; }
        /// <summary>
        /// Gets or Sets FuelUsed
        /// </summary>
        [DataMember(Name="fuel_used", EmitDefaultValue=false)]
        public double? FuelUsed { get; set; }
        /// <summary>
        /// Gets or Sets Guid
        /// </summary>
        [DataMember(Name="guid", EmitDefaultValue=false)]
        public string Guid { get; set; }
        /// <summary>
        /// Gets or Sets LegalRule
        /// </summary>
        [DataMember(Name="legal_rule", EmitDefaultValue=false)]
        public string LegalRule { get; set; }
        /// <summary>
        /// Gets or Sets LegalRuleDetail
        /// </summary>
        [DataMember(Name="legal_rule_detail", EmitDefaultValue=false)]
        public string LegalRuleDetail { get; set; }
        /// <summary>
        /// Gets or Sets LocalAreaFrequencies
        /// </summary>
        [DataMember(Name="local_area_frequencies", EmitDefaultValue=false)]
        public string LocalAreaFrequencies { get; set; }
        /// <summary>
        /// Gets or Sets MainFlightType
        /// </summary>
        [DataMember(Name="main_flight_type", EmitDefaultValue=false)]
        public string MainFlightType { get; set; }
        /// <summary>
        /// Gets or Sets MaxAltitude
        /// </summary>
        [DataMember(Name="max_altitude", EmitDefaultValue=false)]
        public int? MaxAltitude { get; set; }
        /// <summary>
        /// Gets or Sets MaxAltitudeAgl
        /// </summary>
        [DataMember(Name="max_altitude_agl", EmitDefaultValue=false)]
        public int? MaxAltitudeAgl { get; set; }
        /// <summary>
        /// Gets or Sets MissionGuid
        /// </summary>
        [DataMember(Name="mission_guid", EmitDefaultValue=false)]
        public string MissionGuid { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets NbFlight
        /// </summary>
        [DataMember(Name="nb_flight", EmitDefaultValue=false)]
        public int? NbFlight { get; set; }
        /// <summary>
        /// Gets or Sets NightFlight
        /// </summary>
        [DataMember(Name="night_flight", EmitDefaultValue=false)]
        public int? NightFlight { get; set; }
        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }
        /// <summary>
        /// Gets or Sets OperationType
        /// </summary>
        [DataMember(Name="operation_type", EmitDefaultValue=false)]
        public string OperationType { get; set; }
        /// <summary>
        /// Gets or Sets OpsApprovalType
        /// </summary>
        [DataMember(Name="ops_approval_type", EmitDefaultValue=false)]
        public string OpsApprovalType { get; set; }
        /// <summary>
        /// Gets or Sets PayloadDescription
        /// </summary>
        [DataMember(Name="payload_description", EmitDefaultValue=false)]
        public string PayloadDescription { get; set; }
        /// <summary>
        /// Gets or Sets PayloadWeight
        /// </summary>
        [DataMember(Name="payload_weight", EmitDefaultValue=false)]
        public double? PayloadWeight { get; set; }
        /// <summary>
        /// Gets or Sets Personnel
        /// </summary>
        [DataMember(Name="personnel", EmitDefaultValue=false)]
        public string Personnel { get; set; }
        /// <summary>
        /// Gets or Sets PlaceGuid
        /// </summary>
        [DataMember(Name="place_guid", EmitDefaultValue=false)]
        public string PlaceGuid { get; set; }
        /// <summary>
        /// Gets or Sets PlaceName
        /// </summary>
        [DataMember(Name="place_name", EmitDefaultValue=false)]
        public string PlaceName { get; set; }
        /// <summary>
        /// Gets or Sets ProjectGuid
        /// </summary>
        [DataMember(Name="project_guid", EmitDefaultValue=false)]
        public string ProjectGuid { get; set; }
        /// <summary>
        /// Gets or Sets ProjectReference
        /// </summary>
        [DataMember(Name="project_reference", EmitDefaultValue=false)]
        public string ProjectReference { get; set; }
        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public string Tags { get; set; }
        /// <summary>
        /// Gets or Sets TypeAltitude
        /// </summary>
        [DataMember(Name="type_altitude", EmitDefaultValue=false)]
        public string TypeAltitude { get; set; }
        /// <summary>
        /// Gets or Sets UpcomingFlight
        /// </summary>
        [DataMember(Name="upcoming_flight", EmitDefaultValue=false)]
        public string UpcomingFlight { get; set; }
        /// <summary>
        /// Gets or Sets UtmAuthInfo
        /// </summary>
        [DataMember(Name="utm_auth_info", EmitDefaultValue=false)]
        public string UtmAuthInfo { get; set; }
        /// <summary>
        /// Gets or Sets WeatherDetail
        /// </summary>
        [DataMember(Name="weather_detail", EmitDefaultValue=false)]
        public string WeatherDetail { get; set; }
        /// <summary>
        /// Gets or Sets WeatherNote
        /// </summary>
        [DataMember(Name="weather_note", EmitDefaultValue=false)]
        public string WeatherNote { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Flight {\n");
            sb.Append("  ApprovalStatus: ").Append(ApprovalStatus).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  AssetInspected: ").Append(AssetInspected).Append("\n");
            sb.Append("  AssetInspectedCount: ").Append(AssetInspectedCount).Append("\n");
            sb.Append("  CancelCause: ").Append(CancelCause).Append("\n");
            sb.Append("  CancelNotes: ").Append(CancelNotes).Append("\n");
            sb.Append("  CommunicationWithAuthorities: ").Append(CommunicationWithAuthorities).Append("\n");
            sb.Append("  CompleteStatus: ").Append(CompleteStatus).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  CustomerGuid: ").Append(CustomerGuid).Append("\n");
            sb.Append("  DataPlanArea: ").Append(DataPlanArea).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  DroneGuid: ").Append(DroneGuid).Append("\n");
            sb.Append("  DurationSeconds: ").Append(DurationSeconds).Append("\n");
            sb.Append("  EmergencyContactNumbers: ").Append(EmergencyContactNumbers).Append("\n");
            sb.Append("  Equipments: ").Append(Equipments).Append("\n");
            sb.Append("  FlightDate: ").Append(FlightDate).Append("\n");
            sb.Append("  FlightDateUtc: ").Append(FlightDateUtc).Append("\n");
            sb.Append("  FlightNumber: ").Append(FlightNumber).Append("\n");
            sb.Append("  FlightScenario: ").Append(FlightScenario).Append("\n");
            sb.Append("  FlightTime: ").Append(FlightTime).Append("\n");
            sb.Append("  FlightType: ").Append(FlightType).Append("\n");
            sb.Append("  FuelUsed: ").Append(FuelUsed).Append("\n");
            sb.Append("  Guid: ").Append(Guid).Append("\n");
            sb.Append("  LegalRule: ").Append(LegalRule).Append("\n");
            sb.Append("  LegalRuleDetail: ").Append(LegalRuleDetail).Append("\n");
            sb.Append("  LocalAreaFrequencies: ").Append(LocalAreaFrequencies).Append("\n");
            sb.Append("  MainFlightType: ").Append(MainFlightType).Append("\n");
            sb.Append("  MaxAltitude: ").Append(MaxAltitude).Append("\n");
            sb.Append("  MaxAltitudeAgl: ").Append(MaxAltitudeAgl).Append("\n");
            sb.Append("  MissionGuid: ").Append(MissionGuid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NbFlight: ").Append(NbFlight).Append("\n");
            sb.Append("  NightFlight: ").Append(NightFlight).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  OperationType: ").Append(OperationType).Append("\n");
            sb.Append("  OpsApprovalType: ").Append(OpsApprovalType).Append("\n");
            sb.Append("  PayloadDescription: ").Append(PayloadDescription).Append("\n");
            sb.Append("  PayloadWeight: ").Append(PayloadWeight).Append("\n");
            sb.Append("  Personnel: ").Append(Personnel).Append("\n");
            sb.Append("  PlaceGuid: ").Append(PlaceGuid).Append("\n");
            sb.Append("  PlaceName: ").Append(PlaceName).Append("\n");
            sb.Append("  ProjectGuid: ").Append(ProjectGuid).Append("\n");
            sb.Append("  ProjectReference: ").Append(ProjectReference).Append("\n");
            sb.Append("  SunTime: ").Append(SunTime).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TypeAltitude: ").Append(TypeAltitude).Append("\n");
            sb.Append("  UpcomingFlight: ").Append(UpcomingFlight).Append("\n");
            sb.Append("  UtmAuthInfo: ").Append(UtmAuthInfo).Append("\n");
            sb.Append("  WeatherDetail: ").Append(WeatherDetail).Append("\n");
            sb.Append("  WeatherNote: ").Append(WeatherNote).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Flight);
        }

        /// <summary>
        /// Returns true if Flight instances are equal
        /// </summary>
        /// <param name="other">Instance of Flight to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Flight other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ApprovalStatus == other.ApprovalStatus ||
                    this.ApprovalStatus != null &&
                    this.ApprovalStatus.Equals(other.ApprovalStatus)
                ) && 
                (
                    this.Archived == other.Archived ||
                    this.Archived != null &&
                    this.Archived.Equals(other.Archived)
                ) && 
                (
                    this.AssetInspected == other.AssetInspected ||
                    this.AssetInspected != null &&
                    this.AssetInspected.Equals(other.AssetInspected)
                ) && 
                (
                    this.AssetInspectedCount == other.AssetInspectedCount ||
                    this.AssetInspectedCount != null &&
                    this.AssetInspectedCount.Equals(other.AssetInspectedCount)
                ) && 
                (
                    this.CancelCause == other.CancelCause ||
                    this.CancelCause != null &&
                    this.CancelCause.Equals(other.CancelCause)
                ) && 
                (
                    this.CancelNotes == other.CancelNotes ||
                    this.CancelNotes != null &&
                    this.CancelNotes.Equals(other.CancelNotes)
                ) && 
                (
                    this.CommunicationWithAuthorities == other.CommunicationWithAuthorities ||
                    this.CommunicationWithAuthorities != null &&
                    this.CommunicationWithAuthorities.Equals(other.CommunicationWithAuthorities)
                ) && 
                (
                    this.CompleteStatus == other.CompleteStatus ||
                    this.CompleteStatus != null &&
                    this.CompleteStatus.Equals(other.CompleteStatus)
                ) && 
                (
                    this.CountryCode == other.CountryCode ||
                    this.CountryCode != null &&
                    this.CountryCode.Equals(other.CountryCode)
                ) && 
                (
                    this.CreationDate == other.CreationDate ||
                    this.CreationDate != null &&
                    this.CreationDate.Equals(other.CreationDate)
                ) && 
                (
                    this.CustomerGuid == other.CustomerGuid ||
                    this.CustomerGuid != null &&
                    this.CustomerGuid.Equals(other.CustomerGuid)
                ) && 
                (
                    this.DataPlanArea == other.DataPlanArea ||
                    this.DataPlanArea != null &&
                    this.DataPlanArea.Equals(other.DataPlanArea)
                ) && 
                (
                    this.Distance == other.Distance ||
                    this.Distance != null &&
                    this.Distance.Equals(other.Distance)
                ) && 
                (
                    this.DroneGuid == other.DroneGuid ||
                    this.DroneGuid != null &&
                    this.DroneGuid.Equals(other.DroneGuid)
                ) && 
                (
                    this.DurationSeconds == other.DurationSeconds ||
                    this.DurationSeconds != null &&
                    this.DurationSeconds.Equals(other.DurationSeconds)
                ) && 
                (
                    this.EmergencyContactNumbers == other.EmergencyContactNumbers ||
                    this.EmergencyContactNumbers != null &&
                    this.EmergencyContactNumbers.Equals(other.EmergencyContactNumbers)
                ) && 
                (
                    this.Equipments == other.Equipments ||
                    this.Equipments != null &&
                    this.Equipments.Equals(other.Equipments)
                ) && 
                (
                    this.FlightDate == other.FlightDate ||
                    this.FlightDate != null &&
                    this.FlightDate.Equals(other.FlightDate)
                ) && 
                (
                    this.FlightDateUtc == other.FlightDateUtc ||
                    this.FlightDateUtc != null &&
                    this.FlightDateUtc.Equals(other.FlightDateUtc)
                ) && 
                (
                    this.FlightNumber == other.FlightNumber ||
                    this.FlightNumber != null &&
                    this.FlightNumber.Equals(other.FlightNumber)
                ) && 
                (
                    this.FlightScenario == other.FlightScenario ||
                    this.FlightScenario != null &&
                    this.FlightScenario.Equals(other.FlightScenario)
                ) && 
                (
                    this.FlightTime == other.FlightTime ||
                    this.FlightTime != null &&
                    this.FlightTime.Equals(other.FlightTime)
                ) && 
                (
                    this.FlightType == other.FlightType ||
                    this.FlightType != null &&
                    this.FlightType.Equals(other.FlightType)
                ) && 
                (
                    this.FuelUsed == other.FuelUsed ||
                    this.FuelUsed != null &&
                    this.FuelUsed.Equals(other.FuelUsed)
                ) && 
                (
                    this.Guid == other.Guid ||
                    this.Guid != null &&
                    this.Guid.Equals(other.Guid)
                ) && 
                (
                    this.LegalRule == other.LegalRule ||
                    this.LegalRule != null &&
                    this.LegalRule.Equals(other.LegalRule)
                ) && 
                (
                    this.LegalRuleDetail == other.LegalRuleDetail ||
                    this.LegalRuleDetail != null &&
                    this.LegalRuleDetail.Equals(other.LegalRuleDetail)
                ) && 
                (
                    this.LocalAreaFrequencies == other.LocalAreaFrequencies ||
                    this.LocalAreaFrequencies != null &&
                    this.LocalAreaFrequencies.Equals(other.LocalAreaFrequencies)
                ) && 
                (
                    this.MainFlightType == other.MainFlightType ||
                    this.MainFlightType != null &&
                    this.MainFlightType.Equals(other.MainFlightType)
                ) && 
                (
                    this.MaxAltitude == other.MaxAltitude ||
                    this.MaxAltitude != null &&
                    this.MaxAltitude.Equals(other.MaxAltitude)
                ) && 
                (
                    this.MaxAltitudeAgl == other.MaxAltitudeAgl ||
                    this.MaxAltitudeAgl != null &&
                    this.MaxAltitudeAgl.Equals(other.MaxAltitudeAgl)
                ) && 
                (
                    this.MissionGuid == other.MissionGuid ||
                    this.MissionGuid != null &&
                    this.MissionGuid.Equals(other.MissionGuid)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.NbFlight == other.NbFlight ||
                    this.NbFlight != null &&
                    this.NbFlight.Equals(other.NbFlight)
                ) && 
                (
                    this.NightFlight == other.NightFlight ||
                    this.NightFlight != null &&
                    this.NightFlight.Equals(other.NightFlight)
                ) && 
                (
                    this.Notes == other.Notes ||
                    this.Notes != null &&
                    this.Notes.Equals(other.Notes)
                ) && 
                (
                    this.OperationType == other.OperationType ||
                    this.OperationType != null &&
                    this.OperationType.Equals(other.OperationType)
                ) && 
                (
                    this.OpsApprovalType == other.OpsApprovalType ||
                    this.OpsApprovalType != null &&
                    this.OpsApprovalType.Equals(other.OpsApprovalType)
                ) && 
                (
                    this.PayloadDescription == other.PayloadDescription ||
                    this.PayloadDescription != null &&
                    this.PayloadDescription.Equals(other.PayloadDescription)
                ) && 
                (
                    this.PayloadWeight == other.PayloadWeight ||
                    this.PayloadWeight != null &&
                    this.PayloadWeight.Equals(other.PayloadWeight)
                ) && 
                (
                    this.Personnel == other.Personnel ||
                    this.Personnel != null &&
                    this.Personnel.Equals(other.Personnel)
                ) && 
                (
                    this.PlaceGuid == other.PlaceGuid ||
                    this.PlaceGuid != null &&
                    this.PlaceGuid.Equals(other.PlaceGuid)
                ) && 
                (
                    this.PlaceName == other.PlaceName ||
                    this.PlaceName != null &&
                    this.PlaceName.Equals(other.PlaceName)
                ) && 
                (
                    this.ProjectGuid == other.ProjectGuid ||
                    this.ProjectGuid != null &&
                    this.ProjectGuid.Equals(other.ProjectGuid)
                ) && 
                (
                    this.ProjectReference == other.ProjectReference ||
                    this.ProjectReference != null &&
                    this.ProjectReference.Equals(other.ProjectReference)
                ) && 
                (
                    this.SunTime == other.SunTime ||
                    this.SunTime != null &&
                    this.SunTime.Equals(other.SunTime)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.Equals(other.Tags)
                ) && 
                (
                    this.TypeAltitude == other.TypeAltitude ||
                    this.TypeAltitude != null &&
                    this.TypeAltitude.Equals(other.TypeAltitude)
                ) && 
                (
                    this.UpcomingFlight == other.UpcomingFlight ||
                    this.UpcomingFlight != null &&
                    this.UpcomingFlight.Equals(other.UpcomingFlight)
                ) && 
                (
                    this.UtmAuthInfo == other.UtmAuthInfo ||
                    this.UtmAuthInfo != null &&
                    this.UtmAuthInfo.Equals(other.UtmAuthInfo)
                ) && 
                (
                    this.WeatherDetail == other.WeatherDetail ||
                    this.WeatherDetail != null &&
                    this.WeatherDetail.Equals(other.WeatherDetail)
                ) && 
                (
                    this.WeatherNote == other.WeatherNote ||
                    this.WeatherNote != null &&
                    this.WeatherNote.Equals(other.WeatherNote)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ApprovalStatus != null)
                    hash = hash * 59 + this.ApprovalStatus.GetHashCode();
                if (this.Archived != null)
                    hash = hash * 59 + this.Archived.GetHashCode();
                if (this.AssetInspected != null)
                    hash = hash * 59 + this.AssetInspected.GetHashCode();
                if (this.AssetInspectedCount != null)
                    hash = hash * 59 + this.AssetInspectedCount.GetHashCode();
                if (this.CancelCause != null)
                    hash = hash * 59 + this.CancelCause.GetHashCode();
                if (this.CancelNotes != null)
                    hash = hash * 59 + this.CancelNotes.GetHashCode();
                if (this.CommunicationWithAuthorities != null)
                    hash = hash * 59 + this.CommunicationWithAuthorities.GetHashCode();
                if (this.CompleteStatus != null)
                    hash = hash * 59 + this.CompleteStatus.GetHashCode();
                if (this.CountryCode != null)
                    hash = hash * 59 + this.CountryCode.GetHashCode();
                if (this.CreationDate != null)
                    hash = hash * 59 + this.CreationDate.GetHashCode();
                if (this.CustomerGuid != null)
                    hash = hash * 59 + this.CustomerGuid.GetHashCode();
                if (this.DataPlanArea != null)
                    hash = hash * 59 + this.DataPlanArea.GetHashCode();
                if (this.Distance != null)
                    hash = hash * 59 + this.Distance.GetHashCode();
                if (this.DroneGuid != null)
                    hash = hash * 59 + this.DroneGuid.GetHashCode();
                if (this.DurationSeconds != null)
                    hash = hash * 59 + this.DurationSeconds.GetHashCode();
                if (this.EmergencyContactNumbers != null)
                    hash = hash * 59 + this.EmergencyContactNumbers.GetHashCode();
                if (this.Equipments != null)
                    hash = hash * 59 + this.Equipments.GetHashCode();
                if (this.FlightDate != null)
                    hash = hash * 59 + this.FlightDate.GetHashCode();
                if (this.FlightDateUtc != null)
                    hash = hash * 59 + this.FlightDateUtc.GetHashCode();
                if (this.FlightNumber != null)
                    hash = hash * 59 + this.FlightNumber.GetHashCode();
                if (this.FlightScenario != null)
                    hash = hash * 59 + this.FlightScenario.GetHashCode();
                if (this.FlightTime != null)
                    hash = hash * 59 + this.FlightTime.GetHashCode();
                if (this.FlightType != null)
                    hash = hash * 59 + this.FlightType.GetHashCode();
                if (this.FuelUsed != null)
                    hash = hash * 59 + this.FuelUsed.GetHashCode();
                if (this.Guid != null)
                    hash = hash * 59 + this.Guid.GetHashCode();
                if (this.LegalRule != null)
                    hash = hash * 59 + this.LegalRule.GetHashCode();
                if (this.LegalRuleDetail != null)
                    hash = hash * 59 + this.LegalRuleDetail.GetHashCode();
                if (this.LocalAreaFrequencies != null)
                    hash = hash * 59 + this.LocalAreaFrequencies.GetHashCode();
                if (this.MainFlightType != null)
                    hash = hash * 59 + this.MainFlightType.GetHashCode();
                if (this.MaxAltitude != null)
                    hash = hash * 59 + this.MaxAltitude.GetHashCode();
                if (this.MaxAltitudeAgl != null)
                    hash = hash * 59 + this.MaxAltitudeAgl.GetHashCode();
                if (this.MissionGuid != null)
                    hash = hash * 59 + this.MissionGuid.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.NbFlight != null)
                    hash = hash * 59 + this.NbFlight.GetHashCode();
                if (this.NightFlight != null)
                    hash = hash * 59 + this.NightFlight.GetHashCode();
                if (this.Notes != null)
                    hash = hash * 59 + this.Notes.GetHashCode();
                if (this.OperationType != null)
                    hash = hash * 59 + this.OperationType.GetHashCode();
                if (this.OpsApprovalType != null)
                    hash = hash * 59 + this.OpsApprovalType.GetHashCode();
                if (this.PayloadDescription != null)
                    hash = hash * 59 + this.PayloadDescription.GetHashCode();
                if (this.PayloadWeight != null)
                    hash = hash * 59 + this.PayloadWeight.GetHashCode();
                if (this.Personnel != null)
                    hash = hash * 59 + this.Personnel.GetHashCode();
                if (this.PlaceGuid != null)
                    hash = hash * 59 + this.PlaceGuid.GetHashCode();
                if (this.PlaceName != null)
                    hash = hash * 59 + this.PlaceName.GetHashCode();
                if (this.ProjectGuid != null)
                    hash = hash * 59 + this.ProjectGuid.GetHashCode();
                if (this.ProjectReference != null)
                    hash = hash * 59 + this.ProjectReference.GetHashCode();
                if (this.SunTime != null)
                    hash = hash * 59 + this.SunTime.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.TypeAltitude != null)
                    hash = hash * 59 + this.TypeAltitude.GetHashCode();
                if (this.UpcomingFlight != null)
                    hash = hash * 59 + this.UpcomingFlight.GetHashCode();
                if (this.UtmAuthInfo != null)
                    hash = hash * 59 + this.UtmAuthInfo.GetHashCode();
                if (this.WeatherDetail != null)
                    hash = hash * 59 + this.WeatherDetail.GetHashCode();
                if (this.WeatherNote != null)
                    hash = hash * 59 + this.WeatherNote.GetHashCode();
                return hash;
            }
        }
    }

}
