/* 
 * Dronelogbook API
 *
 * This is the swagger file that describes Dronelogbook API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@dronelogbook.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Dronelogbook.Model
{
    /// <summary>
    /// Equipment
    /// </summary>
    [DataContract]
    public partial class Equipment :  IEquatable<Equipment>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Equipment" /> class.
        /// </summary>
        /// <param name="Active">Active.</param>
        /// <param name="Capacity">Capacity.</param>
        /// <param name="DroneGuid">DroneGuid.</param>
        /// <param name="EquipmentType">EquipmentType.</param>
        /// <param name="FirmwareVersion">FirmwareVersion.</param>
        /// <param name="Guid">Guid.</param>
        /// <param name="HardwareVersion">HardwareVersion.</param>
        /// <param name="InsurableValue">InsurableValue.</param>
        /// <param name="InventoryNumber">InventoryNumber.</param>
        /// <param name="IsBattery">IsBattery.</param>
        /// <param name="Life">Life.</param>
        /// <param name="LifeSpan">LifeSpan.</param>
        /// <param name="MaxBatteryDuration">MaxBatteryDuration.</param>
        /// <param name="Name">Name.</param>
        /// <param name="NbCell">NbCell.</param>
        /// <param name="NbCycle">NbCycle.</param>
        /// <param name="NbCycleSmartBattery">NbCycleSmartBattery.</param>
        /// <param name="Notes">Notes.</param>
        /// <param name="PurchaseDate">PurchaseDate.</param>
        /// <param name="SerialNumber">SerialNumber.</param>
        /// <param name="SerialNumberInternal">SerialNumberInternal.</param>
        /// <param name="Weight">Weight.</param>
        public Equipment(int? Active = null, int? Capacity = null, string DroneGuid = null, string EquipmentType = null, string FirmwareVersion = null, string Guid = null, string HardwareVersion = null, double? InsurableValue = null, string InventoryNumber = null, int? IsBattery = null, int? Life = null, int? LifeSpan = null, int? MaxBatteryDuration = null, string Name = null, int? NbCell = null, int? NbCycle = null, int? NbCycleSmartBattery = null, string Notes = null, DateTime? PurchaseDate = null, string SerialNumber = null, string SerialNumberInternal = null, string Weight = null)
        {
            this.Active = Active;
            this.Capacity = Capacity;
            this.DroneGuid = DroneGuid;
            this.EquipmentType = EquipmentType;
            this.FirmwareVersion = FirmwareVersion;
            this.Guid = Guid;
            this.HardwareVersion = HardwareVersion;
            this.InsurableValue = InsurableValue;
            this.InventoryNumber = InventoryNumber;
            this.IsBattery = IsBattery;
            this.Life = Life;
            this.LifeSpan = LifeSpan;
            this.MaxBatteryDuration = MaxBatteryDuration;
            this.Name = Name;
            this.NbCell = NbCell;
            this.NbCycle = NbCycle;
            this.NbCycleSmartBattery = NbCycleSmartBattery;
            this.Notes = Notes;
            this.PurchaseDate = PurchaseDate;
            this.SerialNumber = SerialNumber;
            this.SerialNumberInternal = SerialNumberInternal;
            this.Weight = Weight;
        }
        
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public int? Active { get; set; }
        /// <summary>
        /// Gets or Sets Capacity
        /// </summary>
        [DataMember(Name="capacity", EmitDefaultValue=false)]
        public int? Capacity { get; set; }
        /// <summary>
        /// Gets or Sets DroneGuid
        /// </summary>
        [DataMember(Name="drone_guid", EmitDefaultValue=false)]
        public string DroneGuid { get; set; }
        /// <summary>
        /// Gets or Sets EquipmentType
        /// </summary>
        [DataMember(Name="equipment_type", EmitDefaultValue=false)]
        public string EquipmentType { get; set; }
        /// <summary>
        /// Gets or Sets FirmwareVersion
        /// </summary>
        [DataMember(Name="firmware_version", EmitDefaultValue=false)]
        public string FirmwareVersion { get; set; }
        /// <summary>
        /// Gets or Sets Guid
        /// </summary>
        [DataMember(Name="guid", EmitDefaultValue=false)]
        public string Guid { get; set; }
        /// <summary>
        /// Gets or Sets HardwareVersion
        /// </summary>
        [DataMember(Name="hardware_version", EmitDefaultValue=false)]
        public string HardwareVersion { get; set; }
        /// <summary>
        /// Gets or Sets InsurableValue
        /// </summary>
        [DataMember(Name="insurable_value", EmitDefaultValue=false)]
        public double? InsurableValue { get; set; }
        /// <summary>
        /// Gets or Sets InventoryNumber
        /// </summary>
        [DataMember(Name="inventory_number", EmitDefaultValue=false)]
        public string InventoryNumber { get; set; }
        /// <summary>
        /// Gets or Sets IsBattery
        /// </summary>
        [DataMember(Name="is_battery", EmitDefaultValue=false)]
        public int? IsBattery { get; set; }
        /// <summary>
        /// Gets or Sets Life
        /// </summary>
        [DataMember(Name="life", EmitDefaultValue=false)]
        public int? Life { get; set; }
        /// <summary>
        /// Gets or Sets LifeSpan
        /// </summary>
        [DataMember(Name="life_span", EmitDefaultValue=false)]
        public int? LifeSpan { get; set; }
        /// <summary>
        /// Gets or Sets MaxBatteryDuration
        /// </summary>
        [DataMember(Name="max_battery_duration", EmitDefaultValue=false)]
        public int? MaxBatteryDuration { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets NbCell
        /// </summary>
        [DataMember(Name="nb_cell", EmitDefaultValue=false)]
        public int? NbCell { get; set; }
        /// <summary>
        /// Gets or Sets NbCycle
        /// </summary>
        [DataMember(Name="nb_cycle", EmitDefaultValue=false)]
        public int? NbCycle { get; set; }
        /// <summary>
        /// Gets or Sets NbCycleSmartBattery
        /// </summary>
        [DataMember(Name="nb_cycle_smart_battery", EmitDefaultValue=false)]
        public int? NbCycleSmartBattery { get; set; }
        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }
        /// <summary>
        /// Gets or Sets PurchaseDate
        /// </summary>
        [DataMember(Name="purchase_date", EmitDefaultValue=false)]
        public DateTime? PurchaseDate { get; set; }
        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [DataMember(Name="serial_number", EmitDefaultValue=false)]
        public string SerialNumber { get; set; }
        /// <summary>
        /// Gets or Sets SerialNumberInternal
        /// </summary>
        [DataMember(Name="serial_number_internal", EmitDefaultValue=false)]
        public string SerialNumberInternal { get; set; }
        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public string Weight { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Equipment {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("  DroneGuid: ").Append(DroneGuid).Append("\n");
            sb.Append("  EquipmentType: ").Append(EquipmentType).Append("\n");
            sb.Append("  FirmwareVersion: ").Append(FirmwareVersion).Append("\n");
            sb.Append("  Guid: ").Append(Guid).Append("\n");
            sb.Append("  HardwareVersion: ").Append(HardwareVersion).Append("\n");
            sb.Append("  InsurableValue: ").Append(InsurableValue).Append("\n");
            sb.Append("  InventoryNumber: ").Append(InventoryNumber).Append("\n");
            sb.Append("  IsBattery: ").Append(IsBattery).Append("\n");
            sb.Append("  Life: ").Append(Life).Append("\n");
            sb.Append("  LifeSpan: ").Append(LifeSpan).Append("\n");
            sb.Append("  MaxBatteryDuration: ").Append(MaxBatteryDuration).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NbCell: ").Append(NbCell).Append("\n");
            sb.Append("  NbCycle: ").Append(NbCycle).Append("\n");
            sb.Append("  NbCycleSmartBattery: ").Append(NbCycleSmartBattery).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  PurchaseDate: ").Append(PurchaseDate).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  SerialNumberInternal: ").Append(SerialNumberInternal).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Equipment);
        }

        /// <summary>
        /// Returns true if Equipment instances are equal
        /// </summary>
        /// <param name="other">Instance of Equipment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Equipment other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Active == other.Active ||
                    this.Active != null &&
                    this.Active.Equals(other.Active)
                ) && 
                (
                    this.Capacity == other.Capacity ||
                    this.Capacity != null &&
                    this.Capacity.Equals(other.Capacity)
                ) && 
                (
                    this.DroneGuid == other.DroneGuid ||
                    this.DroneGuid != null &&
                    this.DroneGuid.Equals(other.DroneGuid)
                ) && 
                (
                    this.EquipmentType == other.EquipmentType ||
                    this.EquipmentType != null &&
                    this.EquipmentType.Equals(other.EquipmentType)
                ) && 
                (
                    this.FirmwareVersion == other.FirmwareVersion ||
                    this.FirmwareVersion != null &&
                    this.FirmwareVersion.Equals(other.FirmwareVersion)
                ) && 
                (
                    this.Guid == other.Guid ||
                    this.Guid != null &&
                    this.Guid.Equals(other.Guid)
                ) && 
                (
                    this.HardwareVersion == other.HardwareVersion ||
                    this.HardwareVersion != null &&
                    this.HardwareVersion.Equals(other.HardwareVersion)
                ) && 
                (
                    this.InsurableValue == other.InsurableValue ||
                    this.InsurableValue != null &&
                    this.InsurableValue.Equals(other.InsurableValue)
                ) && 
                (
                    this.InventoryNumber == other.InventoryNumber ||
                    this.InventoryNumber != null &&
                    this.InventoryNumber.Equals(other.InventoryNumber)
                ) && 
                (
                    this.IsBattery == other.IsBattery ||
                    this.IsBattery != null &&
                    this.IsBattery.Equals(other.IsBattery)
                ) && 
                (
                    this.Life == other.Life ||
                    this.Life != null &&
                    this.Life.Equals(other.Life)
                ) && 
                (
                    this.LifeSpan == other.LifeSpan ||
                    this.LifeSpan != null &&
                    this.LifeSpan.Equals(other.LifeSpan)
                ) && 
                (
                    this.MaxBatteryDuration == other.MaxBatteryDuration ||
                    this.MaxBatteryDuration != null &&
                    this.MaxBatteryDuration.Equals(other.MaxBatteryDuration)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.NbCell == other.NbCell ||
                    this.NbCell != null &&
                    this.NbCell.Equals(other.NbCell)
                ) && 
                (
                    this.NbCycle == other.NbCycle ||
                    this.NbCycle != null &&
                    this.NbCycle.Equals(other.NbCycle)
                ) && 
                (
                    this.NbCycleSmartBattery == other.NbCycleSmartBattery ||
                    this.NbCycleSmartBattery != null &&
                    this.NbCycleSmartBattery.Equals(other.NbCycleSmartBattery)
                ) && 
                (
                    this.Notes == other.Notes ||
                    this.Notes != null &&
                    this.Notes.Equals(other.Notes)
                ) && 
                (
                    this.PurchaseDate == other.PurchaseDate ||
                    this.PurchaseDate != null &&
                    this.PurchaseDate.Equals(other.PurchaseDate)
                ) && 
                (
                    this.SerialNumber == other.SerialNumber ||
                    this.SerialNumber != null &&
                    this.SerialNumber.Equals(other.SerialNumber)
                ) && 
                (
                    this.SerialNumberInternal == other.SerialNumberInternal ||
                    this.SerialNumberInternal != null &&
                    this.SerialNumberInternal.Equals(other.SerialNumberInternal)
                ) && 
                (
                    this.Weight == other.Weight ||
                    this.Weight != null &&
                    this.Weight.Equals(other.Weight)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Active != null)
                    hash = hash * 59 + this.Active.GetHashCode();
                if (this.Capacity != null)
                    hash = hash * 59 + this.Capacity.GetHashCode();
                if (this.DroneGuid != null)
                    hash = hash * 59 + this.DroneGuid.GetHashCode();
                if (this.EquipmentType != null)
                    hash = hash * 59 + this.EquipmentType.GetHashCode();
                if (this.FirmwareVersion != null)
                    hash = hash * 59 + this.FirmwareVersion.GetHashCode();
                if (this.Guid != null)
                    hash = hash * 59 + this.Guid.GetHashCode();
                if (this.HardwareVersion != null)
                    hash = hash * 59 + this.HardwareVersion.GetHashCode();
                if (this.InsurableValue != null)
                    hash = hash * 59 + this.InsurableValue.GetHashCode();
                if (this.InventoryNumber != null)
                    hash = hash * 59 + this.InventoryNumber.GetHashCode();
                if (this.IsBattery != null)
                    hash = hash * 59 + this.IsBattery.GetHashCode();
                if (this.Life != null)
                    hash = hash * 59 + this.Life.GetHashCode();
                if (this.LifeSpan != null)
                    hash = hash * 59 + this.LifeSpan.GetHashCode();
                if (this.MaxBatteryDuration != null)
                    hash = hash * 59 + this.MaxBatteryDuration.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.NbCell != null)
                    hash = hash * 59 + this.NbCell.GetHashCode();
                if (this.NbCycle != null)
                    hash = hash * 59 + this.NbCycle.GetHashCode();
                if (this.NbCycleSmartBattery != null)
                    hash = hash * 59 + this.NbCycleSmartBattery.GetHashCode();
                if (this.Notes != null)
                    hash = hash * 59 + this.Notes.GetHashCode();
                if (this.PurchaseDate != null)
                    hash = hash * 59 + this.PurchaseDate.GetHashCode();
                if (this.SerialNumber != null)
                    hash = hash * 59 + this.SerialNumber.GetHashCode();
                if (this.SerialNumberInternal != null)
                    hash = hash * 59 + this.SerialNumberInternal.GetHashCode();
                if (this.Weight != null)
                    hash = hash * 59 + this.Weight.GetHashCode();
                return hash;
            }
        }
    }

}
