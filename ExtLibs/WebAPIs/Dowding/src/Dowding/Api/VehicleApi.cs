/* 
 * Dowding HTTP REST API
 *
 * The Dowding HTTP REST API allows you to add and retrieve contact data from Dowding as well as perform other peripheral functions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Dowding.Client;
using Dowding.Model;

namespace Dowding.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVehicleApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Vehicle&gt;</returns>
        List<Vehicle> VehicleBadlistGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Vehicle&gt;</returns>
        ApiResponse<List<Vehicle>> VehicleBadlistGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial"></param>
        /// <returns>Vehicle</returns>
        Vehicle VehicleBadlistSerialPost (string serial);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial"></param>
        /// <returns>ApiResponse of Vehicle</returns>
        ApiResponse<Vehicle> VehicleBadlistSerialPostWithHttpInfo (string serial);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Vehicle&gt;</returns>
        List<Vehicle> VehicleGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Vehicle&gt;</returns>
        ApiResponse<List<Vehicle>> VehicleGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Vehicle&gt;</returns>
        List<Vehicle> VehicleGoodlistGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Vehicle&gt;</returns>
        ApiResponse<List<Vehicle>> VehicleGoodlistGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial"></param>
        /// <returns>Vehicle</returns>
        Vehicle VehicleGoodlistSerialPost (string serial);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial"></param>
        /// <returns>ApiResponse of Vehicle</returns>
        ApiResponse<Vehicle> VehicleGoodlistSerialPostWithHttpInfo (string serial);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Vehicle</returns>
        Vehicle VehicleIdGet (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Vehicle</returns>
        ApiResponse<Vehicle> VehicleIdGetWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Vehicle&gt;</returns>
        List<Vehicle> VehicleUnlistedGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Vehicle&gt;</returns>
        ApiResponse<List<Vehicle>> VehicleUnlistedGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Vehicle&gt;</returns>
        System.Threading.Tasks.Task<List<Vehicle>> VehicleBadlistGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Vehicle&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Vehicle>>> VehicleBadlistGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial"></param>
        /// <returns>Task of Vehicle</returns>
        System.Threading.Tasks.Task<Vehicle> VehicleBadlistSerialPostAsync (string serial);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial"></param>
        /// <returns>Task of ApiResponse (Vehicle)</returns>
        System.Threading.Tasks.Task<ApiResponse<Vehicle>> VehicleBadlistSerialPostAsyncWithHttpInfo (string serial);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Vehicle&gt;</returns>
        System.Threading.Tasks.Task<List<Vehicle>> VehicleGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Vehicle&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Vehicle>>> VehicleGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Vehicle&gt;</returns>
        System.Threading.Tasks.Task<List<Vehicle>> VehicleGoodlistGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Vehicle&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Vehicle>>> VehicleGoodlistGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial"></param>
        /// <returns>Task of Vehicle</returns>
        System.Threading.Tasks.Task<Vehicle> VehicleGoodlistSerialPostAsync (string serial);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial"></param>
        /// <returns>Task of ApiResponse (Vehicle)</returns>
        System.Threading.Tasks.Task<ApiResponse<Vehicle>> VehicleGoodlistSerialPostAsyncWithHttpInfo (string serial);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Vehicle</returns>
        System.Threading.Tasks.Task<Vehicle> VehicleIdGetAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Vehicle)</returns>
        System.Threading.Tasks.Task<ApiResponse<Vehicle>> VehicleIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Vehicle&gt;</returns>
        System.Threading.Tasks.Task<List<Vehicle>> VehicleUnlistedGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Vehicle&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Vehicle>>> VehicleUnlistedGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VehicleApi : IVehicleApi
    {
        private Dowding.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VehicleApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Dowding.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VehicleApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Dowding.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Dowding.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Vehicle&gt;</returns>
        public List<Vehicle> VehicleBadlistGet ()
        {
             ApiResponse<List<Vehicle>> localVarResponse = VehicleBadlistGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Vehicle&gt;</returns>
        public ApiResponse< List<Vehicle> > VehicleBadlistGetWithHttpInfo ()
        {

            var localVarPath = "/vehicle/badlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VehicleBadlistGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Vehicle>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Vehicle>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Vehicle>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Vehicle&gt;</returns>
        public async System.Threading.Tasks.Task<List<Vehicle>> VehicleBadlistGetAsync ()
        {
             ApiResponse<List<Vehicle>> localVarResponse = await VehicleBadlistGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Vehicle&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Vehicle>>> VehicleBadlistGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/vehicle/badlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VehicleBadlistGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Vehicle>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Vehicle>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Vehicle>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial"></param>
        /// <returns>Vehicle</returns>
        public Vehicle VehicleBadlistSerialPost (string serial)
        {
             ApiResponse<Vehicle> localVarResponse = VehicleBadlistSerialPostWithHttpInfo(serial);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial"></param>
        /// <returns>ApiResponse of Vehicle</returns>
        public ApiResponse< Vehicle > VehicleBadlistSerialPostWithHttpInfo (string serial)
        {
            // verify the required parameter 'serial' is set
            if (serial == null)
                throw new ApiException(400, "Missing required parameter 'serial' when calling VehicleApi->VehicleBadlistSerialPost");

            var localVarPath = "/vehicle/badlist/{serial}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (serial != null) localVarPathParams.Add("serial", Configuration.ApiClient.ParameterToString(serial)); // path parameter

            // authentication (bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VehicleBadlistSerialPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Vehicle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Vehicle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Vehicle)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial"></param>
        /// <returns>Task of Vehicle</returns>
        public async System.Threading.Tasks.Task<Vehicle> VehicleBadlistSerialPostAsync (string serial)
        {
             ApiResponse<Vehicle> localVarResponse = await VehicleBadlistSerialPostAsyncWithHttpInfo(serial);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial"></param>
        /// <returns>Task of ApiResponse (Vehicle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Vehicle>> VehicleBadlistSerialPostAsyncWithHttpInfo (string serial)
        {
            // verify the required parameter 'serial' is set
            if (serial == null)
                throw new ApiException(400, "Missing required parameter 'serial' when calling VehicleApi->VehicleBadlistSerialPost");

            var localVarPath = "/vehicle/badlist/{serial}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (serial != null) localVarPathParams.Add("serial", Configuration.ApiClient.ParameterToString(serial)); // path parameter

            // authentication (bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VehicleBadlistSerialPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Vehicle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Vehicle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Vehicle)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Vehicle&gt;</returns>
        public List<Vehicle> VehicleGet ()
        {
             ApiResponse<List<Vehicle>> localVarResponse = VehicleGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Vehicle&gt;</returns>
        public ApiResponse< List<Vehicle> > VehicleGetWithHttpInfo ()
        {

            var localVarPath = "/vehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VehicleGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Vehicle>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Vehicle>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Vehicle>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Vehicle&gt;</returns>
        public async System.Threading.Tasks.Task<List<Vehicle>> VehicleGetAsync ()
        {
             ApiResponse<List<Vehicle>> localVarResponse = await VehicleGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Vehicle&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Vehicle>>> VehicleGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/vehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VehicleGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Vehicle>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Vehicle>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Vehicle>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Vehicle&gt;</returns>
        public List<Vehicle> VehicleGoodlistGet ()
        {
             ApiResponse<List<Vehicle>> localVarResponse = VehicleGoodlistGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Vehicle&gt;</returns>
        public ApiResponse< List<Vehicle> > VehicleGoodlistGetWithHttpInfo ()
        {

            var localVarPath = "/vehicle/goodlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VehicleGoodlistGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Vehicle>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Vehicle>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Vehicle>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Vehicle&gt;</returns>
        public async System.Threading.Tasks.Task<List<Vehicle>> VehicleGoodlistGetAsync ()
        {
             ApiResponse<List<Vehicle>> localVarResponse = await VehicleGoodlistGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Vehicle&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Vehicle>>> VehicleGoodlistGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/vehicle/goodlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VehicleGoodlistGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Vehicle>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Vehicle>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Vehicle>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial"></param>
        /// <returns>Vehicle</returns>
        public Vehicle VehicleGoodlistSerialPost (string serial)
        {
             ApiResponse<Vehicle> localVarResponse = VehicleGoodlistSerialPostWithHttpInfo(serial);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial"></param>
        /// <returns>ApiResponse of Vehicle</returns>
        public ApiResponse< Vehicle > VehicleGoodlistSerialPostWithHttpInfo (string serial)
        {
            // verify the required parameter 'serial' is set
            if (serial == null)
                throw new ApiException(400, "Missing required parameter 'serial' when calling VehicleApi->VehicleGoodlistSerialPost");

            var localVarPath = "/vehicle/goodlist/{serial}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (serial != null) localVarPathParams.Add("serial", Configuration.ApiClient.ParameterToString(serial)); // path parameter

            // authentication (bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VehicleGoodlistSerialPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Vehicle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Vehicle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Vehicle)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial"></param>
        /// <returns>Task of Vehicle</returns>
        public async System.Threading.Tasks.Task<Vehicle> VehicleGoodlistSerialPostAsync (string serial)
        {
             ApiResponse<Vehicle> localVarResponse = await VehicleGoodlistSerialPostAsyncWithHttpInfo(serial);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serial"></param>
        /// <returns>Task of ApiResponse (Vehicle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Vehicle>> VehicleGoodlistSerialPostAsyncWithHttpInfo (string serial)
        {
            // verify the required parameter 'serial' is set
            if (serial == null)
                throw new ApiException(400, "Missing required parameter 'serial' when calling VehicleApi->VehicleGoodlistSerialPost");

            var localVarPath = "/vehicle/goodlist/{serial}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (serial != null) localVarPathParams.Add("serial", Configuration.ApiClient.ParameterToString(serial)); // path parameter

            // authentication (bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VehicleGoodlistSerialPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Vehicle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Vehicle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Vehicle)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Vehicle</returns>
        public Vehicle VehicleIdGet (string id)
        {
             ApiResponse<Vehicle> localVarResponse = VehicleIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Vehicle</returns>
        public ApiResponse< Vehicle > VehicleIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VehicleApi->VehicleIdGet");

            var localVarPath = "/vehicle/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VehicleIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Vehicle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Vehicle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Vehicle)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Vehicle</returns>
        public async System.Threading.Tasks.Task<Vehicle> VehicleIdGetAsync (string id)
        {
             ApiResponse<Vehicle> localVarResponse = await VehicleIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Vehicle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Vehicle>> VehicleIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VehicleApi->VehicleIdGet");

            var localVarPath = "/vehicle/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VehicleIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Vehicle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Vehicle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Vehicle)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Vehicle&gt;</returns>
        public List<Vehicle> VehicleUnlistedGet ()
        {
             ApiResponse<List<Vehicle>> localVarResponse = VehicleUnlistedGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Vehicle&gt;</returns>
        public ApiResponse< List<Vehicle> > VehicleUnlistedGetWithHttpInfo ()
        {

            var localVarPath = "/vehicle/unlisted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VehicleUnlistedGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Vehicle>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Vehicle>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Vehicle>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Vehicle&gt;</returns>
        public async System.Threading.Tasks.Task<List<Vehicle>> VehicleUnlistedGetAsync ()
        {
             ApiResponse<List<Vehicle>> localVarResponse = await VehicleUnlistedGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Dowding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Vehicle&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Vehicle>>> VehicleUnlistedGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/vehicle/unlisted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VehicleUnlistedGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Vehicle>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Vehicle>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Vehicle>)));
            
        }

    }
}
