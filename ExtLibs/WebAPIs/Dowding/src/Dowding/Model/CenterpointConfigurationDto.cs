/* 
 * Dowding HTTP REST API
 *
 * The Dowding HTTP REST API allows you to add and retrieve contact data from Dowding as well as perform other peripheral functions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Dowding.Model
{
    /// <summary>
    /// CenterpointConfigurationDto
    /// </summary>
    [DataContract]
    public partial class CenterpointConfigurationDto :  IEquatable<CenterpointConfigurationDto>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CenterpointConfigurationDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CenterpointConfigurationDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CenterpointConfigurationDto" /> class.
        /// </summary>
        /// <param name="Lat">Latitude in decimal form (ex. 37.4499622) (required).</param>
        /// <param name="Lon">Longitude in decimal form (ex. -122.0486533) (required).</param>
        /// <param name="Zoom">Zoom level, between 0-22 (ex. 14) (required).</param>
        public CenterpointConfigurationDto(decimal? Lat = null, decimal? Lon = null, decimal? Zoom = null)
        {
            // to ensure "Lat" is required (not null)
            if (Lat == null)
            {
                throw new InvalidDataException("Lat is a required property for CenterpointConfigurationDto and cannot be null");
            }
            else
            {
                this.Lat = Lat;
            }
            // to ensure "Lon" is required (not null)
            if (Lon == null)
            {
                throw new InvalidDataException("Lon is a required property for CenterpointConfigurationDto and cannot be null");
            }
            else
            {
                this.Lon = Lon;
            }
            // to ensure "Zoom" is required (not null)
            if (Zoom == null)
            {
                throw new InvalidDataException("Zoom is a required property for CenterpointConfigurationDto and cannot be null");
            }
            else
            {
                this.Zoom = Zoom;
            }
        }
        
        /// <summary>
        /// Latitude in decimal form (ex. 37.4499622)
        /// </summary>
        /// <value>Latitude in decimal form (ex. 37.4499622)</value>
        [DataMember(Name="lat", EmitDefaultValue=false)]
        public decimal? Lat { get; set; }
        /// <summary>
        /// Longitude in decimal form (ex. -122.0486533)
        /// </summary>
        /// <value>Longitude in decimal form (ex. -122.0486533)</value>
        [DataMember(Name="lon", EmitDefaultValue=false)]
        public decimal? Lon { get; set; }
        /// <summary>
        /// Zoom level, between 0-22 (ex. 14)
        /// </summary>
        /// <value>Zoom level, between 0-22 (ex. 14)</value>
        [DataMember(Name="zoom", EmitDefaultValue=false)]
        public decimal? Zoom { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CenterpointConfigurationDto {\n");
            sb.Append("  Lat: ").Append(Lat).Append("\n");
            sb.Append("  Lon: ").Append(Lon).Append("\n");
            sb.Append("  Zoom: ").Append(Zoom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CenterpointConfigurationDto);
        }

        /// <summary>
        /// Returns true if CenterpointConfigurationDto instances are equal
        /// </summary>
        /// <param name="other">Instance of CenterpointConfigurationDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CenterpointConfigurationDto other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Lat == other.Lat ||
                    this.Lat != null &&
                    this.Lat.Equals(other.Lat)
                ) && 
                (
                    this.Lon == other.Lon ||
                    this.Lon != null &&
                    this.Lon.Equals(other.Lon)
                ) && 
                (
                    this.Zoom == other.Zoom ||
                    this.Zoom != null &&
                    this.Zoom.Equals(other.Zoom)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Lat != null)
                    hash = hash * 59 + this.Lat.GetHashCode();
                if (this.Lon != null)
                    hash = hash * 59 + this.Lon.GetHashCode();
                if (this.Zoom != null)
                    hash = hash * 59 + this.Zoom.GetHashCode();
                return hash;
            }
        }
    }

}
