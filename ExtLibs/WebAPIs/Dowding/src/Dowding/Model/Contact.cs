/* 
 * Dowding HTTP REST API
 *
 * The Dowding HTTP REST API allows you to add and retrieve contact data from Dowding as well as perform other peripheral functions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Dowding.Model
{
    /// <summary>
    /// Contact
    /// </summary>
    [DataContract]
    public partial class Contact :  IEquatable<Contact>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Contact" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Contact() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Contact" /> class.
        /// </summary>
        /// <param name="Vendor">String of the vendor who manufactured the vehicle.</param>
        /// <param name="Model">String of the vehicle model name.</param>
        /// <param name="Affiliation">Single character representing the CoT affiliation.</param>
        /// <param name="Serial">String representing primary vehicle serial number.</param>
        /// <param name="OtherInfo">Key-value object for arbitrary information.</param>
        /// <param name="Id">UUID (Primary key).</param>
        /// <param name="VehicleTrack">List of ticks showing where the vehicle traveled.</param>
        /// <param name="OperatorTrack">List of ticks showing where the operator traveled.</param>
        /// <param name="Homepoints">List of home locations programmed into the vehicle.</param>
        /// <param name="Events">List of events for this contact.</param>
        /// <param name="VehicleId">UUID of VEHICLE that this CONTACT is attached to (required).</param>
        /// <param name="VehicleFirstTs">Number representing the first tick&#39;s timestamp in milliseconds in the vehicle track (required).</param>
        /// <param name="VehicleFirstLat">Number representing the first tick&#39;s WGS84 latitude in the vehicle track (required).</param>
        /// <param name="VehicleFirstLon">Number representing the first tick&#39;s WGS84 longitude in the vehicle track (required).</param>
        /// <param name="VehicleFirstHae">Number representing the first tick&#39;s height above the WGS84 elipsoid in the vehicle track (required).</param>
        /// <param name="VehicleLastTs">Number representing the last tick&#39;s timestamp in milliseconds in the vehicle track (required).</param>
        /// <param name="VehicleLastLat">Number representing the last tick&#39;s WGS84 latitude in the vehicle track (required).</param>
        /// <param name="VehicleLastLon">Number representing the last tick&#39;s WGS84 longitude in the vehicle track (required).</param>
        /// <param name="VehicleLastHae">Number representing the last tick&#39;s height above the WGS84 elipsoid in the vehicle track (required).</param>
        /// <param name="VehicleLastCe">Number representing the last tick&#39;s circular error within the vehicle track (required).</param>
        /// <param name="OperatorFirstTs">Number representing the first tick&#39;s timestamp in milliseconds in the operator track (required).</param>
        /// <param name="OperatorFirstLat">Number representing the first tick&#39;s WGS84 latitude in the operator track (required).</param>
        /// <param name="OperatorFirstLon">Number representing the first tick&#39;s WGS84 longitude in the operator track (required).</param>
        /// <param name="OperatorFirstHae">Number representing the first tick&#39;s height above the WGS84 elipsoid in the operator track (required).</param>
        /// <param name="OperatorLastTs">Number representing the last tick&#39;s timestamp in milliseconds in the operator track (required).</param>
        /// <param name="OperatorLastLat">Number representing the last tick&#39;s WGS84 latitude in the operator track (required).</param>
        /// <param name="OperatorLastLon">Number representing the last tick&#39;s WGS84 longitude in the operator track (required).</param>
        /// <param name="OperatorLastHae">Number representing the last tick&#39;s height above the WGS84 elipsoid in the operator track (required).</param>
        /// <param name="HomepointFirstTs">Number representing the first tick&#39;s timestamp in milliseconds in the homepoint track (required).</param>
        /// <param name="HomepointFirstLat">Number representing the first tick&#39;s WGS84 latitude in the homepoint track (required).</param>
        /// <param name="HomepointFirstLon">Number representing the first tick&#39;s WGS84 longitude in the homepoint track (required).</param>
        /// <param name="HomepointFirstHae">Number representing the first tick&#39;s height above the WGS84 elipsoid in the homepoint track (required).</param>
        /// <param name="HomepointLastTs">Number representing the last tick&#39;s timestamp in milliseconds in the homepoint track (required).</param>
        /// <param name="HomepointLastLat">Number representing the last tick&#39;s WGS84 latitude in the homepoint track (required).</param>
        /// <param name="HomepointLastLon">Number representing the last tick&#39;s WGS84 longitude in the homepoint track (required).</param>
        /// <param name="HomepointLastHae">Number representing the last tick&#39;s height above the WGS84 elipsoid in the homepoint track (required).</param>
        /// <param name="BboxNorth">Number representing the farthest north WGS84 latitude of the vehicle track (required).</param>
        /// <param name="BboxSouth">Number representing the farthest south WGS84 latitude of the vehicle track (required).</param>
        /// <param name="BboxEast">Number representing the farthest east WGS84 longitude of the vehicle track (required).</param>
        /// <param name="BboxWest">Number representing the farthest west WGS84 longitude of the vehicle track (required).</param>
        public Contact(string Vendor = null, string Model = null, string Affiliation = null, string Serial = null, Object OtherInfo = null, string Id = null, List<VehicleTick> VehicleTrack = null, List<OperatorTick> OperatorTrack = null, List<Homepoint> Homepoints = null, List<ModelEvent> Events = null, string VehicleId = null, decimal? VehicleFirstTs = null, decimal? VehicleFirstLat = null, decimal? VehicleFirstLon = null, decimal? VehicleFirstHae = null, decimal? VehicleLastTs = null, decimal? VehicleLastLat = null, decimal? VehicleLastLon = null, decimal? VehicleLastHae = null, decimal? VehicleLastCe = null, decimal? OperatorFirstTs = null, decimal? OperatorFirstLat = null, decimal? OperatorFirstLon = null, decimal? OperatorFirstHae = null, decimal? OperatorLastTs = null, decimal? OperatorLastLat = null, decimal? OperatorLastLon = null, decimal? OperatorLastHae = null, decimal? HomepointFirstTs = null, decimal? HomepointFirstLat = null, decimal? HomepointFirstLon = null, decimal? HomepointFirstHae = null, decimal? HomepointLastTs = null, decimal? HomepointLastLat = null, decimal? HomepointLastLon = null, decimal? HomepointLastHae = null, decimal? BboxNorth = null, decimal? BboxSouth = null, decimal? BboxEast = null, decimal? BboxWest = null)
        {
            // to ensure "VehicleId" is required (not null)
            if (VehicleId == null)
            {
                throw new InvalidDataException("VehicleId is a required property for Contact and cannot be null");
            }
            else
            {
                this.VehicleId = VehicleId;
            }
            // to ensure "VehicleFirstTs" is required (not null)
            if (VehicleFirstTs == null)
            {
                throw new InvalidDataException("VehicleFirstTs is a required property for Contact and cannot be null");
            }
            else
            {
                this.VehicleFirstTs = VehicleFirstTs;
            }
            // to ensure "VehicleFirstLat" is required (not null)
            if (VehicleFirstLat == null)
            {
                throw new InvalidDataException("VehicleFirstLat is a required property for Contact and cannot be null");
            }
            else
            {
                this.VehicleFirstLat = VehicleFirstLat;
            }
            // to ensure "VehicleFirstLon" is required (not null)
            if (VehicleFirstLon == null)
            {
                throw new InvalidDataException("VehicleFirstLon is a required property for Contact and cannot be null");
            }
            else
            {
                this.VehicleFirstLon = VehicleFirstLon;
            }
            // to ensure "VehicleFirstHae" is required (not null)
            if (VehicleFirstHae == null)
            {
                throw new InvalidDataException("VehicleFirstHae is a required property for Contact and cannot be null");
            }
            else
            {
                this.VehicleFirstHae = VehicleFirstHae;
            }
            // to ensure "VehicleLastTs" is required (not null)
            if (VehicleLastTs == null)
            {
                throw new InvalidDataException("VehicleLastTs is a required property for Contact and cannot be null");
            }
            else
            {
                this.VehicleLastTs = VehicleLastTs;
            }
            // to ensure "VehicleLastLat" is required (not null)
            if (VehicleLastLat == null)
            {
                throw new InvalidDataException("VehicleLastLat is a required property for Contact and cannot be null");
            }
            else
            {
                this.VehicleLastLat = VehicleLastLat;
            }
            // to ensure "VehicleLastLon" is required (not null)
            if (VehicleLastLon == null)
            {
                throw new InvalidDataException("VehicleLastLon is a required property for Contact and cannot be null");
            }
            else
            {
                this.VehicleLastLon = VehicleLastLon;
            }
            // to ensure "VehicleLastHae" is required (not null)
            if (VehicleLastHae == null)
            {
                throw new InvalidDataException("VehicleLastHae is a required property for Contact and cannot be null");
            }
            else
            {
                this.VehicleLastHae = VehicleLastHae;
            }
            // to ensure "VehicleLastCe" is required (not null)
            if (VehicleLastCe == null)
            {
                throw new InvalidDataException("VehicleLastCe is a required property for Contact and cannot be null");
            }
            else
            {
                this.VehicleLastCe = VehicleLastCe;
            }
            // to ensure "OperatorFirstTs" is required (not null)
            if (OperatorFirstTs == null)
            {
                throw new InvalidDataException("OperatorFirstTs is a required property for Contact and cannot be null");
            }
            else
            {
                this.OperatorFirstTs = OperatorFirstTs;
            }
            // to ensure "OperatorFirstLat" is required (not null)
            if (OperatorFirstLat == null)
            {
                throw new InvalidDataException("OperatorFirstLat is a required property for Contact and cannot be null");
            }
            else
            {
                this.OperatorFirstLat = OperatorFirstLat;
            }
            // to ensure "OperatorFirstLon" is required (not null)
            if (OperatorFirstLon == null)
            {
                throw new InvalidDataException("OperatorFirstLon is a required property for Contact and cannot be null");
            }
            else
            {
                this.OperatorFirstLon = OperatorFirstLon;
            }
            // to ensure "OperatorFirstHae" is required (not null)
            if (OperatorFirstHae == null)
            {
                throw new InvalidDataException("OperatorFirstHae is a required property for Contact and cannot be null");
            }
            else
            {
                this.OperatorFirstHae = OperatorFirstHae;
            }
            // to ensure "OperatorLastTs" is required (not null)
            if (OperatorLastTs == null)
            {
                throw new InvalidDataException("OperatorLastTs is a required property for Contact and cannot be null");
            }
            else
            {
                this.OperatorLastTs = OperatorLastTs;
            }
            // to ensure "OperatorLastLat" is required (not null)
            if (OperatorLastLat == null)
            {
                throw new InvalidDataException("OperatorLastLat is a required property for Contact and cannot be null");
            }
            else
            {
                this.OperatorLastLat = OperatorLastLat;
            }
            // to ensure "OperatorLastLon" is required (not null)
            if (OperatorLastLon == null)
            {
                throw new InvalidDataException("OperatorLastLon is a required property for Contact and cannot be null");
            }
            else
            {
                this.OperatorLastLon = OperatorLastLon;
            }
            // to ensure "OperatorLastHae" is required (not null)
            if (OperatorLastHae == null)
            {
                throw new InvalidDataException("OperatorLastHae is a required property for Contact and cannot be null");
            }
            else
            {
                this.OperatorLastHae = OperatorLastHae;
            }
            // to ensure "HomepointFirstTs" is required (not null)
            if (HomepointFirstTs == null)
            {
                throw new InvalidDataException("HomepointFirstTs is a required property for Contact and cannot be null");
            }
            else
            {
                this.HomepointFirstTs = HomepointFirstTs;
            }
            // to ensure "HomepointFirstLat" is required (not null)
            if (HomepointFirstLat == null)
            {
                throw new InvalidDataException("HomepointFirstLat is a required property for Contact and cannot be null");
            }
            else
            {
                this.HomepointFirstLat = HomepointFirstLat;
            }
            // to ensure "HomepointFirstLon" is required (not null)
            if (HomepointFirstLon == null)
            {
                throw new InvalidDataException("HomepointFirstLon is a required property for Contact and cannot be null");
            }
            else
            {
                this.HomepointFirstLon = HomepointFirstLon;
            }
            // to ensure "HomepointFirstHae" is required (not null)
            if (HomepointFirstHae == null)
            {
                throw new InvalidDataException("HomepointFirstHae is a required property for Contact and cannot be null");
            }
            else
            {
                this.HomepointFirstHae = HomepointFirstHae;
            }
            // to ensure "HomepointLastTs" is required (not null)
            if (HomepointLastTs == null)
            {
                throw new InvalidDataException("HomepointLastTs is a required property for Contact and cannot be null");
            }
            else
            {
                this.HomepointLastTs = HomepointLastTs;
            }
            // to ensure "HomepointLastLat" is required (not null)
            if (HomepointLastLat == null)
            {
                throw new InvalidDataException("HomepointLastLat is a required property for Contact and cannot be null");
            }
            else
            {
                this.HomepointLastLat = HomepointLastLat;
            }
            // to ensure "HomepointLastLon" is required (not null)
            if (HomepointLastLon == null)
            {
                throw new InvalidDataException("HomepointLastLon is a required property for Contact and cannot be null");
            }
            else
            {
                this.HomepointLastLon = HomepointLastLon;
            }
            // to ensure "HomepointLastHae" is required (not null)
            if (HomepointLastHae == null)
            {
                throw new InvalidDataException("HomepointLastHae is a required property for Contact and cannot be null");
            }
            else
            {
                this.HomepointLastHae = HomepointLastHae;
            }
            // to ensure "BboxNorth" is required (not null)
            if (BboxNorth == null)
            {
                throw new InvalidDataException("BboxNorth is a required property for Contact and cannot be null");
            }
            else
            {
                this.BboxNorth = BboxNorth;
            }
            // to ensure "BboxSouth" is required (not null)
            if (BboxSouth == null)
            {
                throw new InvalidDataException("BboxSouth is a required property for Contact and cannot be null");
            }
            else
            {
                this.BboxSouth = BboxSouth;
            }
            // to ensure "BboxEast" is required (not null)
            if (BboxEast == null)
            {
                throw new InvalidDataException("BboxEast is a required property for Contact and cannot be null");
            }
            else
            {
                this.BboxEast = BboxEast;
            }
            // to ensure "BboxWest" is required (not null)
            if (BboxWest == null)
            {
                throw new InvalidDataException("BboxWest is a required property for Contact and cannot be null");
            }
            else
            {
                this.BboxWest = BboxWest;
            }
            this.Vendor = Vendor;
            this.Model = Model;
            this.Affiliation = Affiliation;
            this.Serial = Serial;
            this.OtherInfo = OtherInfo;
            this.Id = Id;
            this.VehicleTrack = VehicleTrack;
            this.OperatorTrack = OperatorTrack;
            this.Homepoints = Homepoints;
            this.Events = Events;
        }
        
        /// <summary>
        /// String of the vendor who manufactured the vehicle
        /// </summary>
        /// <value>String of the vendor who manufactured the vehicle</value>
        [DataMember(Name="vendor", EmitDefaultValue=false)]
        public string Vendor { get; set; }
        /// <summary>
        /// String of the vehicle model name
        /// </summary>
        /// <value>String of the vehicle model name</value>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; set; }
        /// <summary>
        /// Single character representing the CoT affiliation
        /// </summary>
        /// <value>Single character representing the CoT affiliation</value>
        [DataMember(Name="affiliation", EmitDefaultValue=false)]
        public string Affiliation { get; set; }
        /// <summary>
        /// String representing primary vehicle serial number
        /// </summary>
        /// <value>String representing primary vehicle serial number</value>
        [DataMember(Name="serial", EmitDefaultValue=false)]
        public string Serial { get; set; }
        /// <summary>
        /// Key-value object for arbitrary information
        /// </summary>
        /// <value>Key-value object for arbitrary information</value>
        [DataMember(Name="other_info", EmitDefaultValue=false)]
        public Object OtherInfo { get; set; }
        /// <summary>
        /// UUID (Primary key)
        /// </summary>
        /// <value>UUID (Primary key)</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// List of ticks showing where the vehicle traveled
        /// </summary>
        /// <value>List of ticks showing where the vehicle traveled</value>
        [DataMember(Name="vehicle_track", EmitDefaultValue=false)]
        public List<VehicleTick> VehicleTrack { get; set; }
        /// <summary>
        /// List of ticks showing where the operator traveled
        /// </summary>
        /// <value>List of ticks showing where the operator traveled</value>
        [DataMember(Name="operator_track", EmitDefaultValue=false)]
        public List<OperatorTick> OperatorTrack { get; set; }
        /// <summary>
        /// List of home locations programmed into the vehicle
        /// </summary>
        /// <value>List of home locations programmed into the vehicle</value>
        [DataMember(Name="homepoints", EmitDefaultValue=false)]
        public List<Homepoint> Homepoints { get; set; }
        /// <summary>
        /// List of events for this contact
        /// </summary>
        /// <value>List of events for this contact</value>
        [DataMember(Name="events", EmitDefaultValue=false)]
        public List<ModelEvent> Events { get; set; }
        /// <summary>
        /// UUID of VEHICLE that this CONTACT is attached to
        /// </summary>
        /// <value>UUID of VEHICLE that this CONTACT is attached to</value>
        [DataMember(Name="vehicle_id", EmitDefaultValue=false)]
        public string VehicleId { get; set; }
        /// <summary>
        /// Number representing the first tick&#39;s timestamp in milliseconds in the vehicle track
        /// </summary>
        /// <value>Number representing the first tick&#39;s timestamp in milliseconds in the vehicle track</value>
        [DataMember(Name="vehicle_first_ts", EmitDefaultValue=false)]
        public decimal? VehicleFirstTs { get; set; }
        /// <summary>
        /// Number representing the first tick&#39;s WGS84 latitude in the vehicle track
        /// </summary>
        /// <value>Number representing the first tick&#39;s WGS84 latitude in the vehicle track</value>
        [DataMember(Name="vehicle_first_lat", EmitDefaultValue=false)]
        public decimal? VehicleFirstLat { get; set; }
        /// <summary>
        /// Number representing the first tick&#39;s WGS84 longitude in the vehicle track
        /// </summary>
        /// <value>Number representing the first tick&#39;s WGS84 longitude in the vehicle track</value>
        [DataMember(Name="vehicle_first_lon", EmitDefaultValue=false)]
        public decimal? VehicleFirstLon { get; set; }
        /// <summary>
        /// Number representing the first tick&#39;s height above the WGS84 elipsoid in the vehicle track
        /// </summary>
        /// <value>Number representing the first tick&#39;s height above the WGS84 elipsoid in the vehicle track</value>
        [DataMember(Name="vehicle_first_hae", EmitDefaultValue=false)]
        public decimal? VehicleFirstHae { get; set; }
        /// <summary>
        /// Number representing the last tick&#39;s timestamp in milliseconds in the vehicle track
        /// </summary>
        /// <value>Number representing the last tick&#39;s timestamp in milliseconds in the vehicle track</value>
        [DataMember(Name="vehicle_last_ts", EmitDefaultValue=false)]
        public decimal? VehicleLastTs { get; set; }
        /// <summary>
        /// Number representing the last tick&#39;s WGS84 latitude in the vehicle track
        /// </summary>
        /// <value>Number representing the last tick&#39;s WGS84 latitude in the vehicle track</value>
        [DataMember(Name="vehicle_last_lat", EmitDefaultValue=false)]
        public decimal? VehicleLastLat { get; set; }
        /// <summary>
        /// Number representing the last tick&#39;s WGS84 longitude in the vehicle track
        /// </summary>
        /// <value>Number representing the last tick&#39;s WGS84 longitude in the vehicle track</value>
        [DataMember(Name="vehicle_last_lon", EmitDefaultValue=false)]
        public decimal? VehicleLastLon { get; set; }
        /// <summary>
        /// Number representing the last tick&#39;s height above the WGS84 elipsoid in the vehicle track
        /// </summary>
        /// <value>Number representing the last tick&#39;s height above the WGS84 elipsoid in the vehicle track</value>
        [DataMember(Name="vehicle_last_hae", EmitDefaultValue=false)]
        public decimal? VehicleLastHae { get; set; }
        /// <summary>
        /// Number representing the last tick&#39;s circular error within the vehicle track
        /// </summary>
        /// <value>Number representing the last tick&#39;s circular error within the vehicle track</value>
        [DataMember(Name="vehicle_last_ce", EmitDefaultValue=false)]
        public decimal? VehicleLastCe { get; set; }
        /// <summary>
        /// Number representing the first tick&#39;s timestamp in milliseconds in the operator track
        /// </summary>
        /// <value>Number representing the first tick&#39;s timestamp in milliseconds in the operator track</value>
        [DataMember(Name="operator_first_ts", EmitDefaultValue=false)]
        public decimal? OperatorFirstTs { get; set; }
        /// <summary>
        /// Number representing the first tick&#39;s WGS84 latitude in the operator track
        /// </summary>
        /// <value>Number representing the first tick&#39;s WGS84 latitude in the operator track</value>
        [DataMember(Name="operator_first_lat", EmitDefaultValue=false)]
        public decimal? OperatorFirstLat { get; set; }
        /// <summary>
        /// Number representing the first tick&#39;s WGS84 longitude in the operator track
        /// </summary>
        /// <value>Number representing the first tick&#39;s WGS84 longitude in the operator track</value>
        [DataMember(Name="operator_first_lon", EmitDefaultValue=false)]
        public decimal? OperatorFirstLon { get; set; }
        /// <summary>
        /// Number representing the first tick&#39;s height above the WGS84 elipsoid in the operator track
        /// </summary>
        /// <value>Number representing the first tick&#39;s height above the WGS84 elipsoid in the operator track</value>
        [DataMember(Name="operator_first_hae", EmitDefaultValue=false)]
        public decimal? OperatorFirstHae { get; set; }
        /// <summary>
        /// Number representing the last tick&#39;s timestamp in milliseconds in the operator track
        /// </summary>
        /// <value>Number representing the last tick&#39;s timestamp in milliseconds in the operator track</value>
        [DataMember(Name="operator_last_ts", EmitDefaultValue=false)]
        public decimal? OperatorLastTs { get; set; }
        /// <summary>
        /// Number representing the last tick&#39;s WGS84 latitude in the operator track
        /// </summary>
        /// <value>Number representing the last tick&#39;s WGS84 latitude in the operator track</value>
        [DataMember(Name="operator_last_lat", EmitDefaultValue=false)]
        public decimal? OperatorLastLat { get; set; }
        /// <summary>
        /// Number representing the last tick&#39;s WGS84 longitude in the operator track
        /// </summary>
        /// <value>Number representing the last tick&#39;s WGS84 longitude in the operator track</value>
        [DataMember(Name="operator_last_lon", EmitDefaultValue=false)]
        public decimal? OperatorLastLon { get; set; }
        /// <summary>
        /// Number representing the last tick&#39;s height above the WGS84 elipsoid in the operator track
        /// </summary>
        /// <value>Number representing the last tick&#39;s height above the WGS84 elipsoid in the operator track</value>
        [DataMember(Name="operator_last_hae", EmitDefaultValue=false)]
        public decimal? OperatorLastHae { get; set; }
        /// <summary>
        /// Number representing the first tick&#39;s timestamp in milliseconds in the homepoint track
        /// </summary>
        /// <value>Number representing the first tick&#39;s timestamp in milliseconds in the homepoint track</value>
        [DataMember(Name="homepoint_first_ts", EmitDefaultValue=false)]
        public decimal? HomepointFirstTs { get; set; }
        /// <summary>
        /// Number representing the first tick&#39;s WGS84 latitude in the homepoint track
        /// </summary>
        /// <value>Number representing the first tick&#39;s WGS84 latitude in the homepoint track</value>
        [DataMember(Name="homepoint_first_lat", EmitDefaultValue=false)]
        public decimal? HomepointFirstLat { get; set; }
        /// <summary>
        /// Number representing the first tick&#39;s WGS84 longitude in the homepoint track
        /// </summary>
        /// <value>Number representing the first tick&#39;s WGS84 longitude in the homepoint track</value>
        [DataMember(Name="homepoint_first_lon", EmitDefaultValue=false)]
        public decimal? HomepointFirstLon { get; set; }
        /// <summary>
        /// Number representing the first tick&#39;s height above the WGS84 elipsoid in the homepoint track
        /// </summary>
        /// <value>Number representing the first tick&#39;s height above the WGS84 elipsoid in the homepoint track</value>
        [DataMember(Name="homepoint_first_hae", EmitDefaultValue=false)]
        public decimal? HomepointFirstHae { get; set; }
        /// <summary>
        /// Number representing the last tick&#39;s timestamp in milliseconds in the homepoint track
        /// </summary>
        /// <value>Number representing the last tick&#39;s timestamp in milliseconds in the homepoint track</value>
        [DataMember(Name="homepoint_last_ts", EmitDefaultValue=false)]
        public decimal? HomepointLastTs { get; set; }
        /// <summary>
        /// Number representing the last tick&#39;s WGS84 latitude in the homepoint track
        /// </summary>
        /// <value>Number representing the last tick&#39;s WGS84 latitude in the homepoint track</value>
        [DataMember(Name="homepoint_last_lat", EmitDefaultValue=false)]
        public decimal? HomepointLastLat { get; set; }
        /// <summary>
        /// Number representing the last tick&#39;s WGS84 longitude in the homepoint track
        /// </summary>
        /// <value>Number representing the last tick&#39;s WGS84 longitude in the homepoint track</value>
        [DataMember(Name="homepoint_last_lon", EmitDefaultValue=false)]
        public decimal? HomepointLastLon { get; set; }
        /// <summary>
        /// Number representing the last tick&#39;s height above the WGS84 elipsoid in the homepoint track
        /// </summary>
        /// <value>Number representing the last tick&#39;s height above the WGS84 elipsoid in the homepoint track</value>
        [DataMember(Name="homepoint_last_hae", EmitDefaultValue=false)]
        public decimal? HomepointLastHae { get; set; }
        /// <summary>
        /// Number representing the farthest north WGS84 latitude of the vehicle track
        /// </summary>
        /// <value>Number representing the farthest north WGS84 latitude of the vehicle track</value>
        [DataMember(Name="bbox_north", EmitDefaultValue=false)]
        public decimal? BboxNorth { get; set; }
        /// <summary>
        /// Number representing the farthest south WGS84 latitude of the vehicle track
        /// </summary>
        /// <value>Number representing the farthest south WGS84 latitude of the vehicle track</value>
        [DataMember(Name="bbox_south", EmitDefaultValue=false)]
        public decimal? BboxSouth { get; set; }
        /// <summary>
        /// Number representing the farthest east WGS84 longitude of the vehicle track
        /// </summary>
        /// <value>Number representing the farthest east WGS84 longitude of the vehicle track</value>
        [DataMember(Name="bbox_east", EmitDefaultValue=false)]
        public decimal? BboxEast { get; set; }
        /// <summary>
        /// Number representing the farthest west WGS84 longitude of the vehicle track
        /// </summary>
        /// <value>Number representing the farthest west WGS84 longitude of the vehicle track</value>
        [DataMember(Name="bbox_west", EmitDefaultValue=false)]
        public decimal? BboxWest { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Contact {\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Affiliation: ").Append(Affiliation).Append("\n");
            sb.Append("  Serial: ").Append(Serial).Append("\n");
            sb.Append("  OtherInfo: ").Append(OtherInfo).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VehicleTrack: ").Append(VehicleTrack).Append("\n");
            sb.Append("  OperatorTrack: ").Append(OperatorTrack).Append("\n");
            sb.Append("  Homepoints: ").Append(Homepoints).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  VehicleId: ").Append(VehicleId).Append("\n");
            sb.Append("  VehicleFirstTs: ").Append(VehicleFirstTs).Append("\n");
            sb.Append("  VehicleFirstLat: ").Append(VehicleFirstLat).Append("\n");
            sb.Append("  VehicleFirstLon: ").Append(VehicleFirstLon).Append("\n");
            sb.Append("  VehicleFirstHae: ").Append(VehicleFirstHae).Append("\n");
            sb.Append("  VehicleLastTs: ").Append(VehicleLastTs).Append("\n");
            sb.Append("  VehicleLastLat: ").Append(VehicleLastLat).Append("\n");
            sb.Append("  VehicleLastLon: ").Append(VehicleLastLon).Append("\n");
            sb.Append("  VehicleLastHae: ").Append(VehicleLastHae).Append("\n");
            sb.Append("  VehicleLastCe: ").Append(VehicleLastCe).Append("\n");
            sb.Append("  OperatorFirstTs: ").Append(OperatorFirstTs).Append("\n");
            sb.Append("  OperatorFirstLat: ").Append(OperatorFirstLat).Append("\n");
            sb.Append("  OperatorFirstLon: ").Append(OperatorFirstLon).Append("\n");
            sb.Append("  OperatorFirstHae: ").Append(OperatorFirstHae).Append("\n");
            sb.Append("  OperatorLastTs: ").Append(OperatorLastTs).Append("\n");
            sb.Append("  OperatorLastLat: ").Append(OperatorLastLat).Append("\n");
            sb.Append("  OperatorLastLon: ").Append(OperatorLastLon).Append("\n");
            sb.Append("  OperatorLastHae: ").Append(OperatorLastHae).Append("\n");
            sb.Append("  HomepointFirstTs: ").Append(HomepointFirstTs).Append("\n");
            sb.Append("  HomepointFirstLat: ").Append(HomepointFirstLat).Append("\n");
            sb.Append("  HomepointFirstLon: ").Append(HomepointFirstLon).Append("\n");
            sb.Append("  HomepointFirstHae: ").Append(HomepointFirstHae).Append("\n");
            sb.Append("  HomepointLastTs: ").Append(HomepointLastTs).Append("\n");
            sb.Append("  HomepointLastLat: ").Append(HomepointLastLat).Append("\n");
            sb.Append("  HomepointLastLon: ").Append(HomepointLastLon).Append("\n");
            sb.Append("  HomepointLastHae: ").Append(HomepointLastHae).Append("\n");
            sb.Append("  BboxNorth: ").Append(BboxNorth).Append("\n");
            sb.Append("  BboxSouth: ").Append(BboxSouth).Append("\n");
            sb.Append("  BboxEast: ").Append(BboxEast).Append("\n");
            sb.Append("  BboxWest: ").Append(BboxWest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Contact);
        }

        /// <summary>
        /// Returns true if Contact instances are equal
        /// </summary>
        /// <param name="other">Instance of Contact to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Contact other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Vendor == other.Vendor ||
                    this.Vendor != null &&
                    this.Vendor.Equals(other.Vendor)
                ) && 
                (
                    this.Model == other.Model ||
                    this.Model != null &&
                    this.Model.Equals(other.Model)
                ) && 
                (
                    this.Affiliation == other.Affiliation ||
                    this.Affiliation != null &&
                    this.Affiliation.Equals(other.Affiliation)
                ) && 
                (
                    this.Serial == other.Serial ||
                    this.Serial != null &&
                    this.Serial.Equals(other.Serial)
                ) && 
                (
                    this.OtherInfo == other.OtherInfo ||
                    this.OtherInfo != null &&
                    this.OtherInfo.Equals(other.OtherInfo)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.VehicleTrack == other.VehicleTrack ||
                    this.VehicleTrack != null &&
                    this.VehicleTrack.SequenceEqual(other.VehicleTrack)
                ) && 
                (
                    this.OperatorTrack == other.OperatorTrack ||
                    this.OperatorTrack != null &&
                    this.OperatorTrack.SequenceEqual(other.OperatorTrack)
                ) && 
                (
                    this.Homepoints == other.Homepoints ||
                    this.Homepoints != null &&
                    this.Homepoints.SequenceEqual(other.Homepoints)
                ) && 
                (
                    this.Events == other.Events ||
                    this.Events != null &&
                    this.Events.SequenceEqual(other.Events)
                ) && 
                (
                    this.VehicleId == other.VehicleId ||
                    this.VehicleId != null &&
                    this.VehicleId.Equals(other.VehicleId)
                ) && 
                (
                    this.VehicleFirstTs == other.VehicleFirstTs ||
                    this.VehicleFirstTs != null &&
                    this.VehicleFirstTs.Equals(other.VehicleFirstTs)
                ) && 
                (
                    this.VehicleFirstLat == other.VehicleFirstLat ||
                    this.VehicleFirstLat != null &&
                    this.VehicleFirstLat.Equals(other.VehicleFirstLat)
                ) && 
                (
                    this.VehicleFirstLon == other.VehicleFirstLon ||
                    this.VehicleFirstLon != null &&
                    this.VehicleFirstLon.Equals(other.VehicleFirstLon)
                ) && 
                (
                    this.VehicleFirstHae == other.VehicleFirstHae ||
                    this.VehicleFirstHae != null &&
                    this.VehicleFirstHae.Equals(other.VehicleFirstHae)
                ) && 
                (
                    this.VehicleLastTs == other.VehicleLastTs ||
                    this.VehicleLastTs != null &&
                    this.VehicleLastTs.Equals(other.VehicleLastTs)
                ) && 
                (
                    this.VehicleLastLat == other.VehicleLastLat ||
                    this.VehicleLastLat != null &&
                    this.VehicleLastLat.Equals(other.VehicleLastLat)
                ) && 
                (
                    this.VehicleLastLon == other.VehicleLastLon ||
                    this.VehicleLastLon != null &&
                    this.VehicleLastLon.Equals(other.VehicleLastLon)
                ) && 
                (
                    this.VehicleLastHae == other.VehicleLastHae ||
                    this.VehicleLastHae != null &&
                    this.VehicleLastHae.Equals(other.VehicleLastHae)
                ) && 
                (
                    this.VehicleLastCe == other.VehicleLastCe ||
                    this.VehicleLastCe != null &&
                    this.VehicleLastCe.Equals(other.VehicleLastCe)
                ) && 
                (
                    this.OperatorFirstTs == other.OperatorFirstTs ||
                    this.OperatorFirstTs != null &&
                    this.OperatorFirstTs.Equals(other.OperatorFirstTs)
                ) && 
                (
                    this.OperatorFirstLat == other.OperatorFirstLat ||
                    this.OperatorFirstLat != null &&
                    this.OperatorFirstLat.Equals(other.OperatorFirstLat)
                ) && 
                (
                    this.OperatorFirstLon == other.OperatorFirstLon ||
                    this.OperatorFirstLon != null &&
                    this.OperatorFirstLon.Equals(other.OperatorFirstLon)
                ) && 
                (
                    this.OperatorFirstHae == other.OperatorFirstHae ||
                    this.OperatorFirstHae != null &&
                    this.OperatorFirstHae.Equals(other.OperatorFirstHae)
                ) && 
                (
                    this.OperatorLastTs == other.OperatorLastTs ||
                    this.OperatorLastTs != null &&
                    this.OperatorLastTs.Equals(other.OperatorLastTs)
                ) && 
                (
                    this.OperatorLastLat == other.OperatorLastLat ||
                    this.OperatorLastLat != null &&
                    this.OperatorLastLat.Equals(other.OperatorLastLat)
                ) && 
                (
                    this.OperatorLastLon == other.OperatorLastLon ||
                    this.OperatorLastLon != null &&
                    this.OperatorLastLon.Equals(other.OperatorLastLon)
                ) && 
                (
                    this.OperatorLastHae == other.OperatorLastHae ||
                    this.OperatorLastHae != null &&
                    this.OperatorLastHae.Equals(other.OperatorLastHae)
                ) && 
                (
                    this.HomepointFirstTs == other.HomepointFirstTs ||
                    this.HomepointFirstTs != null &&
                    this.HomepointFirstTs.Equals(other.HomepointFirstTs)
                ) && 
                (
                    this.HomepointFirstLat == other.HomepointFirstLat ||
                    this.HomepointFirstLat != null &&
                    this.HomepointFirstLat.Equals(other.HomepointFirstLat)
                ) && 
                (
                    this.HomepointFirstLon == other.HomepointFirstLon ||
                    this.HomepointFirstLon != null &&
                    this.HomepointFirstLon.Equals(other.HomepointFirstLon)
                ) && 
                (
                    this.HomepointFirstHae == other.HomepointFirstHae ||
                    this.HomepointFirstHae != null &&
                    this.HomepointFirstHae.Equals(other.HomepointFirstHae)
                ) && 
                (
                    this.HomepointLastTs == other.HomepointLastTs ||
                    this.HomepointLastTs != null &&
                    this.HomepointLastTs.Equals(other.HomepointLastTs)
                ) && 
                (
                    this.HomepointLastLat == other.HomepointLastLat ||
                    this.HomepointLastLat != null &&
                    this.HomepointLastLat.Equals(other.HomepointLastLat)
                ) && 
                (
                    this.HomepointLastLon == other.HomepointLastLon ||
                    this.HomepointLastLon != null &&
                    this.HomepointLastLon.Equals(other.HomepointLastLon)
                ) && 
                (
                    this.HomepointLastHae == other.HomepointLastHae ||
                    this.HomepointLastHae != null &&
                    this.HomepointLastHae.Equals(other.HomepointLastHae)
                ) && 
                (
                    this.BboxNorth == other.BboxNorth ||
                    this.BboxNorth != null &&
                    this.BboxNorth.Equals(other.BboxNorth)
                ) && 
                (
                    this.BboxSouth == other.BboxSouth ||
                    this.BboxSouth != null &&
                    this.BboxSouth.Equals(other.BboxSouth)
                ) && 
                (
                    this.BboxEast == other.BboxEast ||
                    this.BboxEast != null &&
                    this.BboxEast.Equals(other.BboxEast)
                ) && 
                (
                    this.BboxWest == other.BboxWest ||
                    this.BboxWest != null &&
                    this.BboxWest.Equals(other.BboxWest)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Vendor != null)
                    hash = hash * 59 + this.Vendor.GetHashCode();
                if (this.Model != null)
                    hash = hash * 59 + this.Model.GetHashCode();
                if (this.Affiliation != null)
                    hash = hash * 59 + this.Affiliation.GetHashCode();
                if (this.Serial != null)
                    hash = hash * 59 + this.Serial.GetHashCode();
                if (this.OtherInfo != null)
                    hash = hash * 59 + this.OtherInfo.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.VehicleTrack != null)
                    hash = hash * 59 + this.VehicleTrack.GetHashCode();
                if (this.OperatorTrack != null)
                    hash = hash * 59 + this.OperatorTrack.GetHashCode();
                if (this.Homepoints != null)
                    hash = hash * 59 + this.Homepoints.GetHashCode();
                if (this.Events != null)
                    hash = hash * 59 + this.Events.GetHashCode();
                if (this.VehicleId != null)
                    hash = hash * 59 + this.VehicleId.GetHashCode();
                if (this.VehicleFirstTs != null)
                    hash = hash * 59 + this.VehicleFirstTs.GetHashCode();
                if (this.VehicleFirstLat != null)
                    hash = hash * 59 + this.VehicleFirstLat.GetHashCode();
                if (this.VehicleFirstLon != null)
                    hash = hash * 59 + this.VehicleFirstLon.GetHashCode();
                if (this.VehicleFirstHae != null)
                    hash = hash * 59 + this.VehicleFirstHae.GetHashCode();
                if (this.VehicleLastTs != null)
                    hash = hash * 59 + this.VehicleLastTs.GetHashCode();
                if (this.VehicleLastLat != null)
                    hash = hash * 59 + this.VehicleLastLat.GetHashCode();
                if (this.VehicleLastLon != null)
                    hash = hash * 59 + this.VehicleLastLon.GetHashCode();
                if (this.VehicleLastHae != null)
                    hash = hash * 59 + this.VehicleLastHae.GetHashCode();
                if (this.VehicleLastCe != null)
                    hash = hash * 59 + this.VehicleLastCe.GetHashCode();
                if (this.OperatorFirstTs != null)
                    hash = hash * 59 + this.OperatorFirstTs.GetHashCode();
                if (this.OperatorFirstLat != null)
                    hash = hash * 59 + this.OperatorFirstLat.GetHashCode();
                if (this.OperatorFirstLon != null)
                    hash = hash * 59 + this.OperatorFirstLon.GetHashCode();
                if (this.OperatorFirstHae != null)
                    hash = hash * 59 + this.OperatorFirstHae.GetHashCode();
                if (this.OperatorLastTs != null)
                    hash = hash * 59 + this.OperatorLastTs.GetHashCode();
                if (this.OperatorLastLat != null)
                    hash = hash * 59 + this.OperatorLastLat.GetHashCode();
                if (this.OperatorLastLon != null)
                    hash = hash * 59 + this.OperatorLastLon.GetHashCode();
                if (this.OperatorLastHae != null)
                    hash = hash * 59 + this.OperatorLastHae.GetHashCode();
                if (this.HomepointFirstTs != null)
                    hash = hash * 59 + this.HomepointFirstTs.GetHashCode();
                if (this.HomepointFirstLat != null)
                    hash = hash * 59 + this.HomepointFirstLat.GetHashCode();
                if (this.HomepointFirstLon != null)
                    hash = hash * 59 + this.HomepointFirstLon.GetHashCode();
                if (this.HomepointFirstHae != null)
                    hash = hash * 59 + this.HomepointFirstHae.GetHashCode();
                if (this.HomepointLastTs != null)
                    hash = hash * 59 + this.HomepointLastTs.GetHashCode();
                if (this.HomepointLastLat != null)
                    hash = hash * 59 + this.HomepointLastLat.GetHashCode();
                if (this.HomepointLastLon != null)
                    hash = hash * 59 + this.HomepointLastLon.GetHashCode();
                if (this.HomepointLastHae != null)
                    hash = hash * 59 + this.HomepointLastHae.GetHashCode();
                if (this.BboxNorth != null)
                    hash = hash * 59 + this.BboxNorth.GetHashCode();
                if (this.BboxSouth != null)
                    hash = hash * 59 + this.BboxSouth.GetHashCode();
                if (this.BboxEast != null)
                    hash = hash * 59 + this.BboxEast.GetHashCode();
                if (this.BboxWest != null)
                    hash = hash * 59 + this.BboxWest.GetHashCode();
                return hash;
            }
        }
    }

}
