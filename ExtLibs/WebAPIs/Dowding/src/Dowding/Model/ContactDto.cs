/* 
 * Dowding HTTP REST API
 *
 * The Dowding HTTP REST API allows you to add and retrieve contact data from Dowding as well as perform other peripheral functions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Dowding.Model
{
    /// <summary>
    /// ContactDto
    /// </summary>
    [DataContract]
    public partial class ContactDto :  IEquatable<ContactDto>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactDto" /> class.
        /// </summary>
        /// <param name="Vendor">String of the vendor who manufactured the vehicle.</param>
        /// <param name="Model">String of the vehicle model name.</param>
        /// <param name="Affiliation">Single character representing the CoT affiliation.</param>
        /// <param name="Serial">String representing primary vehicle serial number.</param>
        /// <param name="OtherInfo">Key-value object for arbitrary information.</param>
        public ContactDto(string Vendor = null, string Model = null, string Affiliation = null, string Serial = null, Object OtherInfo = null)
        {
            this.Vendor = Vendor;
            this.Model = Model;
            this.Affiliation = Affiliation;
            this.Serial = Serial;
            this.OtherInfo = OtherInfo;
        }
        
        /// <summary>
        /// String of the vendor who manufactured the vehicle
        /// </summary>
        /// <value>String of the vendor who manufactured the vehicle</value>
        [DataMember(Name="vendor", EmitDefaultValue=false)]
        public string Vendor { get; set; }
        /// <summary>
        /// String of the vehicle model name
        /// </summary>
        /// <value>String of the vehicle model name</value>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; set; }
        /// <summary>
        /// Single character representing the CoT affiliation
        /// </summary>
        /// <value>Single character representing the CoT affiliation</value>
        [DataMember(Name="affiliation", EmitDefaultValue=false)]
        public string Affiliation { get; set; }
        /// <summary>
        /// String representing primary vehicle serial number
        /// </summary>
        /// <value>String representing primary vehicle serial number</value>
        [DataMember(Name="serial", EmitDefaultValue=false)]
        public string Serial { get; set; }
        /// <summary>
        /// Key-value object for arbitrary information
        /// </summary>
        /// <value>Key-value object for arbitrary information</value>
        [DataMember(Name="other_info", EmitDefaultValue=false)]
        public Object OtherInfo { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactDto {\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Affiliation: ").Append(Affiliation).Append("\n");
            sb.Append("  Serial: ").Append(Serial).Append("\n");
            sb.Append("  OtherInfo: ").Append(OtherInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ContactDto);
        }

        /// <summary>
        /// Returns true if ContactDto instances are equal
        /// </summary>
        /// <param name="other">Instance of ContactDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactDto other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Vendor == other.Vendor ||
                    this.Vendor != null &&
                    this.Vendor.Equals(other.Vendor)
                ) && 
                (
                    this.Model == other.Model ||
                    this.Model != null &&
                    this.Model.Equals(other.Model)
                ) && 
                (
                    this.Affiliation == other.Affiliation ||
                    this.Affiliation != null &&
                    this.Affiliation.Equals(other.Affiliation)
                ) && 
                (
                    this.Serial == other.Serial ||
                    this.Serial != null &&
                    this.Serial.Equals(other.Serial)
                ) && 
                (
                    this.OtherInfo == other.OtherInfo ||
                    this.OtherInfo != null &&
                    this.OtherInfo.Equals(other.OtherInfo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Vendor != null)
                    hash = hash * 59 + this.Vendor.GetHashCode();
                if (this.Model != null)
                    hash = hash * 59 + this.Model.GetHashCode();
                if (this.Affiliation != null)
                    hash = hash * 59 + this.Affiliation.GetHashCode();
                if (this.Serial != null)
                    hash = hash * 59 + this.Serial.GetHashCode();
                if (this.OtherInfo != null)
                    hash = hash * 59 + this.OtherInfo.GetHashCode();
                return hash;
            }
        }
    }

}
