/* 
 * Dowding HTTP REST API
 *
 * The Dowding HTTP REST API allows you to add and retrieve contact data from Dowding as well as perform other peripheral functions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Dowding.Model
{
    /// <summary>
    /// Zone
    /// </summary>
    [DataContract]
    public partial class Zone :  IEquatable<Zone>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Zone" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Zone() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Zone" /> class.
        /// </summary>
        /// <param name="Geom">GeoJSON geometry object representing the shape of this zone (required).</param>
        /// <param name="Name">String representing the name of this zone (required).</param>
        /// <param name="ZoneSeverityId">UUID of the ZONE_SEVERITY for this ZONE (required).</param>
        /// <param name="Id">UUID (Primary key) (required).</param>
        /// <param name="UserId">UUID of USER that created this ZONE (required).</param>
        public Zone(Object Geom = null, string Name = null, string ZoneSeverityId = null, string Id = null, string UserId = null)
        {
            // to ensure "Geom" is required (not null)
            if (Geom == null)
            {
                throw new InvalidDataException("Geom is a required property for Zone and cannot be null");
            }
            else
            {
                this.Geom = Geom;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for Zone and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "ZoneSeverityId" is required (not null)
            if (ZoneSeverityId == null)
            {
                throw new InvalidDataException("ZoneSeverityId is a required property for Zone and cannot be null");
            }
            else
            {
                this.ZoneSeverityId = ZoneSeverityId;
            }
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for Zone and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "UserId" is required (not null)
            if (UserId == null)
            {
                throw new InvalidDataException("UserId is a required property for Zone and cannot be null");
            }
            else
            {
                this.UserId = UserId;
            }
        }
        
        /// <summary>
        /// GeoJSON geometry object representing the shape of this zone
        /// </summary>
        /// <value>GeoJSON geometry object representing the shape of this zone</value>
        [DataMember(Name="geom", EmitDefaultValue=false)]
        public Object Geom { get; set; }
        /// <summary>
        /// String representing the name of this zone
        /// </summary>
        /// <value>String representing the name of this zone</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// UUID of the ZONE_SEVERITY for this ZONE
        /// </summary>
        /// <value>UUID of the ZONE_SEVERITY for this ZONE</value>
        [DataMember(Name="zone_severity_id", EmitDefaultValue=false)]
        public string ZoneSeverityId { get; set; }
        /// <summary>
        /// UUID (Primary key)
        /// </summary>
        /// <value>UUID (Primary key)</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// UUID of USER that created this ZONE
        /// </summary>
        /// <value>UUID of USER that created this ZONE</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public string UserId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Zone {\n");
            sb.Append("  Geom: ").Append(Geom).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ZoneSeverityId: ").Append(ZoneSeverityId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Zone);
        }

        /// <summary>
        /// Returns true if Zone instances are equal
        /// </summary>
        /// <param name="other">Instance of Zone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Zone other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Geom == other.Geom ||
                    this.Geom != null &&
                    this.Geom.Equals(other.Geom)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.ZoneSeverityId == other.ZoneSeverityId ||
                    this.ZoneSeverityId != null &&
                    this.ZoneSeverityId.Equals(other.ZoneSeverityId)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Geom != null)
                    hash = hash * 59 + this.Geom.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.ZoneSeverityId != null)
                    hash = hash * 59 + this.ZoneSeverityId.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                return hash;
            }
        }
    }

}
