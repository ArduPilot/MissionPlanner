/* 
 * Dowding HTTP REST API
 *
 * The Dowding HTTP REST API allows you to add and retrieve contact data from Dowding as well as perform other peripheral functions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Dowding.Model
{
    /// <summary>
    /// Agent
    /// </summary>
    [DataContract]
    public partial class Agent :  IEquatable<Agent>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Agent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Agent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Agent" /> class.
        /// </summary>
        /// <param name="Name">String representing the plain-english name of the agent (required).</param>
        /// <param name="Vendor">String of the manufacturer/developer of the agent (i.e. DeDrone) (required).</param>
        /// <param name="Model">String of the specific model of the agent (i.e. RF-300) (required).</param>
        /// <param name="Mode">Arbitrary string representing device&#39;s operating mode for use by the vendor.</param>
        /// <param name="Type">String representing an agent type (i.e. Acoustic, Radar, Camera, etc.).</param>
        /// <param name="HwVersion">String representing agent hardware version.</param>
        /// <param name="SwVersion">String representing agent software version.</param>
        /// <param name="Id">UUID (Primary key) (required).</param>
        /// <param name="Health">String representing a built-in test status (i.e. OK, Degraded, Disabled) (required).</param>
        /// <param name="IsEnabled">Boolean signifying data is allowed to stream to/from this agent (required).</param>
        /// <param name="LastCheckin">Number of milliseconds from the unix epoch when last heartbeat from agent received (required).</param>
        /// <param name="LastLogin">Number of milliseconds from the unix epoch when the agent last logged in (required).</param>
        /// <param name="DateCreated">Number of milliseconds from the unix epoch when the agent was created (required).</param>
        /// <param name="UserId">UUID of USER that created this AGENT (required).</param>
        /// <param name="AgentTrack">List of ticks showing where the agent traveled.</param>
        public Agent(string Name = null, string Vendor = null, string Model = null, string Mode = null, string Type = null, string HwVersion = null, string SwVersion = null, string Id = null, string Health = null, bool? IsEnabled = null, decimal? LastCheckin = null, decimal? LastLogin = null, decimal? DateCreated = null, string UserId = null, List<AgentTick> AgentTrack = null)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for Agent and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Vendor" is required (not null)
            if (Vendor == null)
            {
                throw new InvalidDataException("Vendor is a required property for Agent and cannot be null");
            }
            else
            {
                this.Vendor = Vendor;
            }
            // to ensure "Model" is required (not null)
            if (Model == null)
            {
                throw new InvalidDataException("Model is a required property for Agent and cannot be null");
            }
            else
            {
                this.Model = Model;
            }
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for Agent and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Health" is required (not null)
            if (Health == null)
            {
                throw new InvalidDataException("Health is a required property for Agent and cannot be null");
            }
            else
            {
                this.Health = Health;
            }
            // to ensure "IsEnabled" is required (not null)
            if (IsEnabled == null)
            {
                throw new InvalidDataException("IsEnabled is a required property for Agent and cannot be null");
            }
            else
            {
                this.IsEnabled = IsEnabled;
            }
            // to ensure "LastCheckin" is required (not null)
            if (LastCheckin == null)
            {
                throw new InvalidDataException("LastCheckin is a required property for Agent and cannot be null");
            }
            else
            {
                this.LastCheckin = LastCheckin;
            }
            // to ensure "LastLogin" is required (not null)
            if (LastLogin == null)
            {
                throw new InvalidDataException("LastLogin is a required property for Agent and cannot be null");
            }
            else
            {
                this.LastLogin = LastLogin;
            }
            // to ensure "DateCreated" is required (not null)
            if (DateCreated == null)
            {
                throw new InvalidDataException("DateCreated is a required property for Agent and cannot be null");
            }
            else
            {
                this.DateCreated = DateCreated;
            }
            // to ensure "UserId" is required (not null)
            if (UserId == null)
            {
                throw new InvalidDataException("UserId is a required property for Agent and cannot be null");
            }
            else
            {
                this.UserId = UserId;
            }
            this.Mode = Mode;
            this.Type = Type;
            this.HwVersion = HwVersion;
            this.SwVersion = SwVersion;
            this.AgentTrack = AgentTrack;
        }
        
        /// <summary>
        /// String representing the plain-english name of the agent
        /// </summary>
        /// <value>String representing the plain-english name of the agent</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// String of the manufacturer/developer of the agent (i.e. DeDrone)
        /// </summary>
        /// <value>String of the manufacturer/developer of the agent (i.e. DeDrone)</value>
        [DataMember(Name="vendor", EmitDefaultValue=false)]
        public string Vendor { get; set; }
        /// <summary>
        /// String of the specific model of the agent (i.e. RF-300)
        /// </summary>
        /// <value>String of the specific model of the agent (i.e. RF-300)</value>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; set; }
        /// <summary>
        /// Arbitrary string representing device&#39;s operating mode for use by the vendor
        /// </summary>
        /// <value>Arbitrary string representing device&#39;s operating mode for use by the vendor</value>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public string Mode { get; set; }
        /// <summary>
        /// String representing an agent type (i.e. Acoustic, Radar, Camera, etc.)
        /// </summary>
        /// <value>String representing an agent type (i.e. Acoustic, Radar, Camera, etc.)</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// String representing agent hardware version
        /// </summary>
        /// <value>String representing agent hardware version</value>
        [DataMember(Name="hw_version", EmitDefaultValue=false)]
        public string HwVersion { get; set; }
        /// <summary>
        /// String representing agent software version
        /// </summary>
        /// <value>String representing agent software version</value>
        [DataMember(Name="sw_version", EmitDefaultValue=false)]
        public string SwVersion { get; set; }
        /// <summary>
        /// UUID (Primary key)
        /// </summary>
        /// <value>UUID (Primary key)</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// String representing a built-in test status (i.e. OK, Degraded, Disabled)
        /// </summary>
        /// <value>String representing a built-in test status (i.e. OK, Degraded, Disabled)</value>
        [DataMember(Name="health", EmitDefaultValue=false)]
        public string Health { get; set; }
        /// <summary>
        /// Boolean signifying data is allowed to stream to/from this agent
        /// </summary>
        /// <value>Boolean signifying data is allowed to stream to/from this agent</value>
        [DataMember(Name="is_enabled", EmitDefaultValue=false)]
        public bool? IsEnabled { get; set; }
        /// <summary>
        /// Number of milliseconds from the unix epoch when last heartbeat from agent received
        /// </summary>
        /// <value>Number of milliseconds from the unix epoch when last heartbeat from agent received</value>
        [DataMember(Name="last_checkin", EmitDefaultValue=false)]
        public decimal? LastCheckin { get; set; }
        /// <summary>
        /// Number of milliseconds from the unix epoch when the agent last logged in
        /// </summary>
        /// <value>Number of milliseconds from the unix epoch when the agent last logged in</value>
        [DataMember(Name="last_login", EmitDefaultValue=false)]
        public decimal? LastLogin { get; set; }
        /// <summary>
        /// Number of milliseconds from the unix epoch when the agent was created
        /// </summary>
        /// <value>Number of milliseconds from the unix epoch when the agent was created</value>
        [DataMember(Name="date_created", EmitDefaultValue=false)]
        public decimal? DateCreated { get; set; }
        /// <summary>
        /// UUID of USER that created this AGENT
        /// </summary>
        /// <value>UUID of USER that created this AGENT</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public string UserId { get; set; }
        /// <summary>
        /// List of ticks showing where the agent traveled
        /// </summary>
        /// <value>List of ticks showing where the agent traveled</value>
        [DataMember(Name="agent_track", EmitDefaultValue=false)]
        public List<AgentTick> AgentTrack { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Agent {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  HwVersion: ").Append(HwVersion).Append("\n");
            sb.Append("  SwVersion: ").Append(SwVersion).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Health: ").Append(Health).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  LastCheckin: ").Append(LastCheckin).Append("\n");
            sb.Append("  LastLogin: ").Append(LastLogin).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  AgentTrack: ").Append(AgentTrack).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Agent);
        }

        /// <summary>
        /// Returns true if Agent instances are equal
        /// </summary>
        /// <param name="other">Instance of Agent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Agent other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Vendor == other.Vendor ||
                    this.Vendor != null &&
                    this.Vendor.Equals(other.Vendor)
                ) && 
                (
                    this.Model == other.Model ||
                    this.Model != null &&
                    this.Model.Equals(other.Model)
                ) && 
                (
                    this.Mode == other.Mode ||
                    this.Mode != null &&
                    this.Mode.Equals(other.Mode)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.HwVersion == other.HwVersion ||
                    this.HwVersion != null &&
                    this.HwVersion.Equals(other.HwVersion)
                ) && 
                (
                    this.SwVersion == other.SwVersion ||
                    this.SwVersion != null &&
                    this.SwVersion.Equals(other.SwVersion)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Health == other.Health ||
                    this.Health != null &&
                    this.Health.Equals(other.Health)
                ) && 
                (
                    this.IsEnabled == other.IsEnabled ||
                    this.IsEnabled != null &&
                    this.IsEnabled.Equals(other.IsEnabled)
                ) && 
                (
                    this.LastCheckin == other.LastCheckin ||
                    this.LastCheckin != null &&
                    this.LastCheckin.Equals(other.LastCheckin)
                ) && 
                (
                    this.LastLogin == other.LastLogin ||
                    this.LastLogin != null &&
                    this.LastLogin.Equals(other.LastLogin)
                ) && 
                (
                    this.DateCreated == other.DateCreated ||
                    this.DateCreated != null &&
                    this.DateCreated.Equals(other.DateCreated)
                ) && 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                ) && 
                (
                    this.AgentTrack == other.AgentTrack ||
                    this.AgentTrack != null &&
                    this.AgentTrack.SequenceEqual(other.AgentTrack)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Vendor != null)
                    hash = hash * 59 + this.Vendor.GetHashCode();
                if (this.Model != null)
                    hash = hash * 59 + this.Model.GetHashCode();
                if (this.Mode != null)
                    hash = hash * 59 + this.Mode.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.HwVersion != null)
                    hash = hash * 59 + this.HwVersion.GetHashCode();
                if (this.SwVersion != null)
                    hash = hash * 59 + this.SwVersion.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Health != null)
                    hash = hash * 59 + this.Health.GetHashCode();
                if (this.IsEnabled != null)
                    hash = hash * 59 + this.IsEnabled.GetHashCode();
                if (this.LastCheckin != null)
                    hash = hash * 59 + this.LastCheckin.GetHashCode();
                if (this.LastLogin != null)
                    hash = hash * 59 + this.LastLogin.GetHashCode();
                if (this.DateCreated != null)
                    hash = hash * 59 + this.DateCreated.GetHashCode();
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                if (this.AgentTrack != null)
                    hash = hash * 59 + this.AgentTrack.GetHashCode();
                return hash;
            }
        }
    }

}
