/* 
 * Dowding HTTP REST API
 *
 * The Dowding HTTP REST API allows you to add and retrieve contact data from Dowding as well as perform other peripheral functions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Dowding.Model
{
    /// <summary>
    /// UserRegisterDto
    /// </summary>
    [DataContract]
    public partial class UserRegisterDto :  IEquatable<UserRegisterDto>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegisterDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserRegisterDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegisterDto" /> class.
        /// </summary>
        /// <param name="Email">String representing the user&#39;s email, which is used for login (required).</param>
        /// <param name="Password">String representing the user&#39;s password (required).</param>
        /// <param name="FirstName">String representing the first name of the user (required).</param>
        /// <param name="LastName">String representing the last name of the user (required).</param>
        /// <param name="Org">String representing the organization of the user (required).</param>
        /// <param name="PhoneNumber">String representing the SMS-capable phone number of the user (E.164 format).</param>
        public UserRegisterDto(string Email = null, string Password = null, string FirstName = null, string LastName = null, string Org = null, string PhoneNumber = null)
        {
            // to ensure "Email" is required (not null)
            if (Email == null)
            {
                throw new InvalidDataException("Email is a required property for UserRegisterDto and cannot be null");
            }
            else
            {
                this.Email = Email;
            }
            // to ensure "Password" is required (not null)
            if (Password == null)
            {
                throw new InvalidDataException("Password is a required property for UserRegisterDto and cannot be null");
            }
            else
            {
                this.Password = Password;
            }
            // to ensure "FirstName" is required (not null)
            if (FirstName == null)
            {
                throw new InvalidDataException("FirstName is a required property for UserRegisterDto and cannot be null");
            }
            else
            {
                this.FirstName = FirstName;
            }
            // to ensure "LastName" is required (not null)
            if (LastName == null)
            {
                throw new InvalidDataException("LastName is a required property for UserRegisterDto and cannot be null");
            }
            else
            {
                this.LastName = LastName;
            }
            // to ensure "Org" is required (not null)
            if (Org == null)
            {
                throw new InvalidDataException("Org is a required property for UserRegisterDto and cannot be null");
            }
            else
            {
                this.Org = Org;
            }
            this.PhoneNumber = PhoneNumber;
        }
        
        /// <summary>
        /// String representing the user&#39;s email, which is used for login
        /// </summary>
        /// <value>String representing the user&#39;s email, which is used for login</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// String representing the user&#39;s password
        /// </summary>
        /// <value>String representing the user&#39;s password</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }
        /// <summary>
        /// String representing the first name of the user
        /// </summary>
        /// <value>String representing the first name of the user</value>
        [DataMember(Name="first_name", EmitDefaultValue=false)]
        public string FirstName { get; set; }
        /// <summary>
        /// String representing the last name of the user
        /// </summary>
        /// <value>String representing the last name of the user</value>
        [DataMember(Name="last_name", EmitDefaultValue=false)]
        public string LastName { get; set; }
        /// <summary>
        /// String representing the organization of the user
        /// </summary>
        /// <value>String representing the organization of the user</value>
        [DataMember(Name="org", EmitDefaultValue=false)]
        public string Org { get; set; }
        /// <summary>
        /// String representing the SMS-capable phone number of the user (E.164 format)
        /// </summary>
        /// <value>String representing the SMS-capable phone number of the user (E.164 format)</value>
        [DataMember(Name="phone_number", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserRegisterDto {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Org: ").Append(Org).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserRegisterDto);
        }

        /// <summary>
        /// Returns true if UserRegisterDto instances are equal
        /// </summary>
        /// <param name="other">Instance of UserRegisterDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserRegisterDto other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Password == other.Password ||
                    this.Password != null &&
                    this.Password.Equals(other.Password)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.Org == other.Org ||
                    this.Org != null &&
                    this.Org.Equals(other.Org)
                ) && 
                (
                    this.PhoneNumber == other.PhoneNumber ||
                    this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(other.PhoneNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.Password != null)
                    hash = hash * 59 + this.Password.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.Org != null)
                    hash = hash * 59 + this.Org.GetHashCode();
                if (this.PhoneNumber != null)
                    hash = hash * 59 + this.PhoneNumber.GetHashCode();
                return hash;
            }
        }
    }

}
